[
  {
    "id": "explanation_1",
    "title": "基础说明 - HD简介",
    "content": "【功能描述】 教程以官网为准 后面会出帖子教程 供大家学习使用 官网: https://www.hdgdk.com HD【RPG引擎库】交流群(3群):882724064 1030698387 (有事请主动找群主和管理，群主和管理不会主动私聊任何人,请勿上当受骗！！！！) (有事请主动找群主和管理，群主和管理不会主动私聊任何人,请勿上当受骗！！！！) (有事请主动找群主和管理，群主和管理不会主动私聊任何人,请勿上当受骗！！！！) 功能: 1.自研驱动注入，模拟键鼠 ，读写内存相关操作，进程以及线程相关操作等. 2.自研接口注入模式框架. 3.目前支持 32 位/64位/ASCII/UNICODE(8个版本中控)<->32/64位 (目标程序) 4.还支持LUA编写,自定义模块,谷歌内置浏览器,主板机投屏,多线程框架模块,yolov5,等操作 5.支持易语言 C/C++ 火山 Python C# 炫语言 golong等语言（支持调用C++DLL的语言） 6.具体看对应的模块功能接口 7.支持win7/8/10/11系统 ============================================================= 一.【HD易语言基础课程】 https://www.bilibili.com/video/BV1UgJFz5EKN/?spm_id_from=333.1387.homepage.video_card.click .【HD易语言多线程框架实战课程】 https://www.bilibili.com/video/BV1UgJFz5EKN/?spm_id_from=333.1387.homepage.video_card.click 二.【HD火山基础课程】 https://www.bilibili.com/video/BV1iBftYoE5b/?spm_id_from=333.1387.homepage.video_card.click 三.【HD C++基础课程】 https://www.bilibili.com/video/BV1G9fnYeEEp/?spm_id_from=333.1387.homepage.video_card.click .【HD C++多线程框架实战课程】 https://www.bilibili.com/video/BV1G9fnYeEEp/?spm_id_from=333.1387.homepage.video_card.click .【HD C++ 夜鸦国际服实战课程】 https://www.bilibili.com/video/BV1Ei1sYsELz/?spm_id_from=333.1387.homepage.video_card.click 四.【HD Python基础课程】 https://www.bilibili.com/video/BV1rtRAYXEwQ/?spm_id_from=333.1387.homepage.video_card.click 五.【HD 炫语言基础课程】 https://www.bilibili.com/video/BV1LJXGYPEXy/?spm_id_from=333.1387.homepage.video_card.click https://www.bilibili.com/video/BV1UNqdYqEBQ/?spm_id_from=333.1387.homepage.video_card.click 六.【HD 综合工具使用教程】 https://www.bilibili.com/video/BV1nscbeVEfY/?spm_id_from=333.1387.homepage.video_card.click 七.【HD Yolov8综合工具使用教程】 https://www.bilibili.com/video/BV13c3vzfE2D/?spm_id_from=333.1387.homepage.video_card.click ============================================================= 【备注】 免责声明 一. 本软件完全出于个人兴趣爱好，由本人在业余时间开发，是一款安全，绿色，可靠的软件产品. 二. 利用本软件所做出的任何软件作品，和本人无关. 三. 本软件绝对不针对任何一款游戏或者游戏开发商，如果有人利用本软件开发非法游戏辅助，本人将保留追究其民事以及刑事责任的权利. 四. 因使用本软件而引致的任何意外、疏忽、合约毁坏、诽谤、版权或知识产权侵犯及其所造成的任何损失，本人概不负责，亦概不承担任何民事或刑事法律责任。 五. 当你第一次开始使用本人所提供的任何软件及资源的那一刻起就将被视为对本声明全部内容的认可。同时您必须认可上述免责条款，方可使用本软件及资源。如有任何异议，建议立刻删除本软件及资源并且停止使用. 六. 以上内容，本人保留最终解释权。",
    "url": "/docs/cpp/category_1",
    "source": "api_data_cpp.json",
    "type": "说明"
  },
  {
    "id": "explanation_2",
    "title": "基础说明 - HD返回值表",
    "content": "【功能描述】 接口返回值： 小于等于0 为错误代码 大于 0为成功 (驱动接口返回值在下面↓) #define RET_检查PID存在 8 #define RET_环境已卸载 7 #define RET_重连窗口序号不一致 6 #define RET_重连窗口 5 #define RET_状态变动 4 #define RET_暂停过 3 #define RET_结束 2 #define RET_成功 1 #define RET_失败 0 #define RET_真 1 #define RET_非 0 #define ERROR_未初始化全局环境 -1000 #define ERROR_未找到进程环境 -1001 #define ERROR_进程环境内存为NULL -1002 #define ERROR_获取CALL环境失败 -1003 #define ERROR_超时返回 -1004 #define ERROR_主线程调用超时返回 -1005 #define ERROR_数据异常 -1006 #define ERROR_参数错误 -1007 #define ERROR_未挂接主线程 -1008 #define ERROR_后台绑定句柄无效 -1009 #define ERROR_未绑定后台 -1010 #define ERROR_多开超出限制 -1011 #define ERROR_字符串为空 -1012 #define ERROR_地址为空 -1013 #define ERROR_未知错误 -1014 #define ERROR_远进程申请内存失败 -1015 #define ERROR_文件夹创建失败 -1016 #define ERROR_异步无法获取返回值 -1017 #define ERROR_语法错误 -1018 #define ERROR_申请内存失败 -1019 #define ERROR_创建线程失败 -1020 #define ERROR_缓冲区大小不足 -1021 #define ERROR_未初始化LUA -1022 #define ERROR_LUA状态机为NULL -1023 #define ERROR_未找到LUA函数 -1024 #define ERROR_返回值未知类型 -1025 #define ERROR_LUA线程标识符不符合 -1026 #define ERROR_模块获取失败 -1027 #define ERROR_地址不可读 -1028 #define ERROR_返回值为JSON -1029 #define ERROR_获取数据失败 -1030 #define ERROR_未初始化 -1031 #define ERROR_已经开启 -1032 #define ERROR_已经结束 -1033 #define ERROR_未开启 -1034 #define ERROR_未结束 -1035 #define ERROR_高宽为0 -1036 #define ERROR_数据为NULL -1037 #define ERROR_数据不符合要求 -1038 #define ERROR_文件打开失败 -1039 #define ERROR_打开失败 -1040 #define ERROR_解析失败 -1041 #define ERROR_无游戏类型 -1042 #define ERROR_HOOK失败 -1043 #define ERROR_UNHOOK失败 -1044 #define ERROR_功能失效 -1045 #define ERROR_无效PE文件格式 -1046 #define ERROR_未找到PE头 -1047 #define ERROR_重定位表失败 -1048 #define ERROR_未找到函数入口 -1049 #define ERROR_无法附加DLL -1050 #define ERROR_接口数量上限 -1051 #define ERROR_已经存在 -1052 #define ERROR_打开句柄失败 -1053 #define ERROR_未找到全局环境 -1054 #define ERROR_组件数量上限 -1055 #define ERROR_未找到组件接口 -1056 #define ERROR_接口类型不匹配 -1057 #define ERROR_组件无效 -1058 #define ERROR_接口地址无效 -1059 #define ERROR_生成密钥失败 -1060 #define ERROR_加密失败 -1061 #define ERROR_解密失败 -1062 #define ERROR_DLL中无此接口 -1063 #define ERROR_下载失败 -1064 #define ERROR_注册表操作失败 -1065 #define ERROR_路径获取失败 -1066 #define ERROR_提权失败 -1067 #define ERROR_驱动已安装 -1068 #define ERROR_HD驱动已安装无法安装HN驱动 -1069 #define ERROR_资源未找到 -1070 #define ERROR_资源加载失败 -1071 #define ERROR_提取资源失败 -1072 #define ERROR_未加载插件 -1073 #define ERROR_文件无法保存 -1074 #define ERROR_打开目录失败 -1075 #define ERROR_写入文件的字节大小不符合要求 -1076 #define ERROR_删除文件失败 -1077 #define ERROR_获取字符串失败 -1078 #define ERROR_获取注册表值失败 -1079 #define ERROR_类型错误 -1080 #define ERROR_参数不符合要求 -1081 #define ERROR_区域超出 -1082 #define ERROR_文件不存在 -1083 #define ERROR_创建文件失败 -1084 #define ERROR_文件读取失败 -1085 #define ERROR_与系统驱动通讯失败 -1086 #define ERROR_创建管道失败 -1087 #define ERROR_创建进程失败 -1088 #define ERROR_未找到相关字符串信息 -1089 #define ERROR_缓冲区大小不充足 -1090 #define ERROR_数据类型转换失败 -1091 #define ERROR_格式化字符串失败 -1092 #define ERROR_网络超时 -1093 #define ERROR_网络连接失败 -1094 #define ERROR_加载指定DLL失败 -1095 #define ERROR_解析字符串失败 -1096 #define ERROR_窗口大小变动导致数据不一致 -1097 #define ERROR_打开剪切板失败 -1098 #define ERROR_加锁失败 -1099 #define ERROR_获取剪切板数据失败 -1100 #define ERROR_版本号获取失败 -1101 #define ERROR_已经绑定其他设备 -1102 #define ERROR_已经达到最大在线数 -1103 #define ERROR_账号或密码为空 -1104 #define ERROR_验证失败 -1105 #define ERROR_打开进程失败 -1106 #define ERROR_进程位数不匹配 -1107 #define ERROR_添加进程环境失败 -1108 #define ERROR_定位特征地址失败 -1109 #define ERROR_寻找空白地址失败 -1110 #define ERROR_无操作类型 -1111 #define ERROR_无相关句柄 -1112 #define ERROR_无HDC句柄 -1113 #define ERROR_获取矩形大小失败 -1114 #define ERROR_拷贝数据失败 -1115 #define ERROR_无效句柄 -1116 #define ERROR_创建对象失败 -1117 #define ERROR_截图方式需要重开才能切换 -1118 #define ERROR_格式有误 -1119 #define ERROR_字库数据为空 -1120 #define ERROR_字库中未找到相应字 -1121 #define ERROR_大小计算为0 -1122 #define ERROR_容器大小不一致 -1123 #define ERROR_句柄无效 -1124 #define ERROR_获取PID无效 -1125 #define ERROR_获取大小失败 -1126 #define ERROR_获取失败 -1127 #define ERROR_未找到 -1128 #define ERROR_立即返回无效值 -1129 #define ERROR_未设置路径 -1130 #define ERROR_文件操作失败 -1131 #define ERROR_写入内存失败 -1132 #define ERROR_模块查找失败 -1133 #define ERROR_接口查找失败 -1134 #define ERROR_组件信息保存失败 -1135 #define ERROR_组件加载失败 -1136 #define ERROR_组件卸载失败 -1137 #define ERROR_组件不符合卸载要求 -1138 #define ERROR_进程环境句柄为NULL -1139 #define ERROR_未绑定PID -1140 #define ERROR_读取图片失败 -1141 #define ERROR_打开注册表失败 -1142 #define ERROR_获取注册表失败 -1143 #define ERROR_写内存失败 -1144 #define ERROR_清除缓存失败 -1145 #define ERROR_字体无宽度 -1146 #define ERROR_裁剪矩形数据失败 -1147 #define ERROR_图片无宽或高 -1148 #define ERROR_功能未开放 -1149 #define ERROR_模块信息获取失败 -1150 #define ERROR_未找到合适的JMP地址 -1151 #define ERROR_HOOK初始化失败 -1152 #define ERROR_无HOOK接口类型 -1153 #define ERROR_CALL类型不匹配 -1154 #define ERROR_创建通讯失败 -1155 #define ERROR_加载通讯失败 -1156 #define ERROR_数据格式错误 -1157 #define ERROR_地址失效 -1158 #define ERROR_坐标转换失败 -1159 #define ERROR_容器为空 -1160 #define ERROR_数据为空 -1161 #define ERROR_特征不符合 -1162 #define ERROR_范围未确定 -1163 #define ERROR_缓冲区不足 -1164 #define ERROR_此接口调试版本无效 -1165 #define ERROR_子图不在范围内 -1166 #define ERROR_插件数量上限 -1167 #define ERROR_API枚举失败 -1168 #define ERROR_无法定位模块 -1169 #define ERROR_无效HOOK地址 -1170 #define ERROR_无对应的HOOK函数 -1171 #define ERROR_破坏字节超过容量 -1172 #define ERROR_指定地址不适合HOOK -1173 #define ERROR_没有充足的HOOK大小 -1174 #define ERROR_设置回调地址失败 -1175 #define ERROR_API获取时间失败 -1176 #define ERROR_无效插件序号 -1177 #define ERROR_进程不存在 -1178 #define ERROR_未安装插件 -1179 #define ERROR_初始化通讯失败 -1180 #define ERROR_未初始化通讯序号 -1181 #define ERROR_当前线程字库为空 -1182 #define ERROR_线程数量超出限制 -1183 #define ERROR_字库序号不存在 -1184 #define ERROR_释放资源失败 -1185 #define ERROR_超出容量 -1186 #define ERROR_空模型 -1187 #define ERROR_环境序号不存在 -1188 #define ERROR_回调处理中 -1189 #define ERROR_无法操作绑定窗口 -1190 #define ERROR_接口已被移除 -1191 #define ERROR_不支持类型 -1192 #define ERROR_初始化失败 -1193 #define ERROR_环境被卸载 -1194 #define ERROR_进程已经关闭 -1195 #define ERROR_中控环境未初始化 -1196 #define ERROR_未加载HD驱动 -1197 #define ERROR_未绑定设备 -1198 #define ERROR_未找到进程 -1199 #define ERROR_进程PID不匹配 -1200 #define ERROR_前台模式无法后台 -1201 #define ERROR_JMP地址无效 -1202 #define ERROR_HOOK地址无效 -1203 #define ERROR_类型和HOOK地址不匹配 -1204 #define ERROR_不在HD多线程环境下 -1205 #define ERROR_未连接 -1206 #define ERROR_进程环境已被卸载 -1207 #define ERROR_安装插件失败 -1208 //检查是否安装了驱动 #define ERROR_安装驱动失败 -1209 //检查是否管理员或者杀毒或者关闭内核隔离 #define ERROR_加载环境失败 -1210 //检查账号是否欠费或者网络问题或者参数不符合要求 #define ERROR_初始化序号失败 -1211 //一般不会失败 #define ERROR_获取PID超时返回 -1212 //确定是否打开进程成功或者增大等待时间 #define ERROR_获取状态值20超时返回 -1213 //未安装插件或被拦截或增大等待时间 #define ERROR_获取状态值120超时返回 -1214 //未安装插件或被拦截或增大等待时间 #define ERROR_继续失败 -1215 //可能未初始化相关环境 一般不会失败 #define ERROR_当前进程插件序号不一致 -1216 //说明指定的PID进程绑定的窗口序号已经存在 与指定的序号不一致 调用HCInject_GetPreWinIndex 获取指定PID的绑定的窗口序号 #define ERROR_PID无效 -1217 #define ERROR_扩展序号不能用 -1218//扩展序号不能自己指定 #define ERROR_接口丢弃 -1219//老版本的接口丢弃 #define ERROR_序号超出限制 -1220 #define ERROR_已经重启 -1221 #define ERROR_登录中无法重启 -1222 #define ERROR_暂停中无法重启 -1223 #define ERROR_操作中无法重启 -1224 #define ERROR_强制关闭线程中无法发送 -1225 #define ERROR_卸载失败 -1226 #define ERROR_未完全开启 -1227 #define ERROR_逻辑异常 -1228 #define ERROR_无法连接VNC -1229 #define ERROR_未连接过VNC -1230 #define ERROR_未关联过VM -1231 #define ERROR_未获取截图环境 -1232 #define ERROR_未获取截图环境 -1232 #define ERROR_环境为NULL -1233 #define ERROR_区域无效 -1234 #define ERROR_继续当前操作 -1235 #define ERROR_加解密失败 -1236 #define ERROR_未安装驱动 -1237 #define ERROR_调试版本无法加解密 -1238 #define ERROR_截图缓存不存在 -1239//检查截图模式不对 或者 未开启截图 请用截图查看器查看是否截图缓存存在 【备注】 也可以可通过工具后台查看",
    "url": "/docs/cpp/category_1",
    "source": "api_data_cpp.json",
    "type": "说明"
  },
  {
    "id": "function_1",
    "title": "基础功能接口 - HCHD_GetVersion",
    "content": "【功能描述】 获取当前插件版本号 【备注】 无",
    "url": "/docs/cpp/category_2",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "基础功能接口 - HCEnv_GetRetJson",
    "content": "【功能描述】 获取最近一次调用接口返回的json字符串 【备注】 并不是所有接口都返回json字符串 有一些接口返回单一的值就没必要调用这个接口 一些接口需要拿到字符串信息返回,那么这些字符串会存在json字符串中,需要自己调用此接口获取",
    "url": "/docs/cpp/category_2",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "基础功能接口 - HCEnv_GetRetValue",
    "content": "【功能描述】 获取最近一次调用接口返回的值(用于检测是否有错) 【备注】 无",
    "url": "/docs/cpp/category_2",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "基础功能接口 - HCEnv_GetErrorStr",
    "content": "【功能描述】 通过传递HD返回值获取字符串信息",
    "url": "/docs/cpp/category_2",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "基础功能接口 - HCEnv_GetLastError",
    "content": "【功能描述】 获取最近一次调用WIN32API错误值 【备注】 无",
    "url": "/docs/cpp/category_2",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "基础功能接口 - HCEnv_GetMaxWindowNum",
    "content": "【功能描述】 获取最大窗口数 【备注】 窗口序号不能大于等于这个返回值同时也不能小于0",
    "url": "/docs/cpp/category_2",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "基础功能接口 - HCInject_GetLastInfo",
    "content": "【功能描述】 获取当前环境搭建流程中的操作信息 【备注】 这个CALL返回HD状态信息可以确定当前处于那个步骤 typedefenumHD状态信息{HD状态信息_无=0,\\n0HD状态信息_DLL环境_加载全局成功=1,\\n1HD状态信息_DLL环境_加载全局失败=2,\\n2HD状态信息_DLL环境_窗口序号不符合=3,\\n3HD状态信息_DLL环境_进程不符合=4,\\n4HD状态信息_DLL环境_打开句柄失败=5,\\n5HD状态信息_DLL环境_获取内存失败=6,\\n6HD状态信息_DLL环境_等待继续=20,\\n20需要调用HCInject_Continue()HD状态信息_通讯环境_开始=21,\\n21HD状态信息_通讯环境_成功=22,\\n22HD状态信息_通讯环境_失败=23,\\n23HD状态信息_通讯环境_打开句柄失败=24,\\n24HD状态信息_通讯环境_获取内存失败=25,\\n25HD状态信息_接口映射_成功=40,\\n40自制通讯协议创建HD状态信息_接口映射_失败=41,\\n41HD状态信息_LUA_成功=60,\\n60可以执行LUAHD状态信息_LUA_失败=61,\\n61不可以执行LUAHD状态信息_数据库_开启=80,\\n80需要调用HHIT2_Load()的时候参数bOpenData设置为1HD状态信息_数据库_未开启=81,\\n81HD状态信息_数据库_开启失败=82,\\n82内置特征码有误联系管理员HD状态信息_验证_有误=100,\\n100联系管理员HD状态信息_监听_成功=120,\\n120【【【【大于等于120说明可以调用接口了】】】】HD状态信息_监听_失败=121,\\n121基本是不会出现这个错误HD状态信息_挂接主线_开启=140,\\n140调用HD状态信息_挂接主线_进入=141,\\n141准备挂接HD状态信息_挂接主线_尝试中=142,\\n142处于这个阶段需要用SetHwnd()暂时没用HD状态信息_挂接主线_成功=143,\\n143成功挂接所有关于可以主线程调用的接口的参数\\\"是否主线程调用\\\"生效HD状态信息_挂接主线_失败=144,\\n144HD状态信息_挂接主线_已经开启=145,\\n145已经开启了HD状态信息_加载_延迟=146,\\n2秒延迟HD状态信息_通讯加载失败=147\\n2秒延迟}HD状态信息;",
    "url": "/docs/cpp/category_2",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "基础功能接口 - HCEnv_GetExcuteEnvInfo",
    "content": "【功能描述】 获取通讯插件所绑定的目标进程的执行线程环境信息 【备注】 无",
    "url": "/docs/cpp/category_2",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "基础功能接口 - HCInject_SetPlugin",
    "content": "【功能描述】 设置插件信息 【备注】 易语言/火山/Python/炫语言/C#等语言:还需要拿到模块源码更改导入DLL名字需要与自定义DLL同名 内置版本名规则: \\n======64位#ifdef_WIN64#ifdef_UNICODE\\n64位W版本std::stringHCInject::g_发布版本DLL名字=\\\"hd64.dll\\\";std::stringHCInject::g_调试版本DLL名字=\\\"hddebug64.dll\\\";#else\\n64位A版本std::stringHCInject::g_发布版本DLL名字=\\\"hd64a.dll\\\";std::stringHCInject::g_调试版本DLL名字=\\\"hddebug64a.dll\\\";#endif\\n======32位#else#ifdef_UNICODE\\n32位W版本std::stringHCInject::g_发布版本DLL名字=\\\"hd.dll\\\";std::stringHCInject::g_调试版本DLL名字=\\\"hddebug.dll\\\";#else\\n32位A版本std::stringHCInject::g_发布版本DLL名字=\\\"hda.dll\\\";std::stringHCInject::g_调试版本DLL名字=\\\"hddebuga.dll\\\";#endif#endif\\n》》》》》》",
    "url": "/docs/cpp/category_2",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "IP模块[IP] - HCIP_YMSetRootPath",
    "content": "【功能描述】 设置有米软件路径(EXE路径) 【备注】 软件找HD作者拿(魔改版)",
    "url": "/docs/cpp/category_3",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "IP模块[IP] - HCIP_YMAddIP",
    "content": "【功能描述】 添加IP 【备注】 软件找HD作者拿(魔改版)",
    "url": "/docs/cpp/category_3",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "IP模块[IP] - HCIP_YMAddProcess",
    "content": "【功能描述】 添加代理的进程名 【备注】 软件找HD作者拿(魔改版)",
    "url": "/docs/cpp/category_3",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "IP模块[IP] - HCIP_YMOpen",
    "content": "【功能描述】 打开有米软件 【备注】 软件找HD作者拿(魔改版) 流程: 1.先设置路径 2.添加代理进程和IP 3.打开有米",
    "url": "/docs/cpp/category_3",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "IP模块[IP] - HCIP_YMIsOpen",
    "content": "【功能描述】 有米软件是否已经打开 【备注】 软件找HD作者拿(魔改版) 流程: 1.先设置路径 2.添加代理进程和IP 3.打开有米",
    "url": "/docs/cpp/category_3",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "IP模块[IP] - HCIP_YMClose",
    "content": "【功能描述】 关闭有米软件 【备注】 软件找HD作者拿(魔改版) 流程: 1.先设置路径 2.添加代理进程和IP 3.打开有米",
    "url": "/docs/cpp/category_3",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "登录验证(Login) - HCHD_Login",
    "content": "【功能描述】 HD登录验证接口（强烈建议主线程中调用） 【备注】 1.验证接口,所有接口需要通过验证才能调用 2.如果自己写中控可以不用打开自动更新",
    "url": "/docs/cpp/category_4",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "登录验证(Login) - HCHD_GetLastLoginFYI",
    "content": "【功能描述】 最近登录时候的点数 【备注】 无",
    "url": "/docs/cpp/category_4",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "登录验证(Login) - HCHD_GetExpiredTimeStamp",
    "content": "【功能描述】 获取最近登录时间戳 【备注】 无",
    "url": "/docs/cpp/category_4",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "登录验证(Login) - HCHD_GetFYI",
    "content": "【功能描述】 获取点数 【备注】 无",
    "url": "/docs/cpp/category_4",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "登录验证(Login) - HCHD_GetOpenMaxNum",
    "content": "【功能描述】 获取最大多少开 【备注】 无",
    "url": "/docs/cpp/category_4",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "安装插件扩展模块[ex] - HDEX_InstallPlugin1",
    "content": "【功能描述】 第一种通讯安装插件方式(安装插件再打开进程)如果使用HD多线程模块强烈建议在登录回调中使用 【备注】 可以参考表安装插件接口类型表 1.支持重连,重连的前提是不能被HCEnv_UnLoad卸载 回调解析: 打开回调openFun:可以参考表安装插件接口类型表 typedef__int64 (__stdcall* INSTALLPLUGint YPE)(int windowsIndex); 参数:windowsIndex:当前指定序号 说明:1.对于第一种方式打开回调不能为NULL,内部先安装插件再触发回调打开进程(在打开回调中可以手动或者自动打开进程1.如果是手动直接返回1就行或错误值表示中断操作2.如果是自动返回对应的PID或错误值表示中断操作)2.其他二种方式打开回调可以为NULL,表示进程已经打开了,不需要在回调中打开,此时使用指定的PID或者窗口句柄来安装插件,具体是PID还是句柄请查看安装插件接口类型表3.返回值根据当前的安装插件方式不同有不同的含义:（具体请看安装插件接口类型表和覆盖策略） 3.1方式二是通过PID安装插件那么返回值应该为打开进程的PID,并把传递的PID参数给覆盖了(请看PID覆盖策略),可以返回小于等于0的错误值或者不存在的PID,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.1.1PID覆盖策略 \\n1.如果指定的参数PID有效大于0并存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID\\n2.如果指定的参数PID有效大于0并存在同时打开回调返回的PID无效小于等于0不存在就用指定参数的PID\\n3.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID无效小于等于0不存在就直接返回错误\\n4.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID 3.2方式三是通过窗口句柄安装插件那么返回值应该为打开进程的句柄,并把传递的句柄参数给覆盖了(请看窗口句柄覆盖策略),可以返回小于等于0的错误值或者窗口句柄无效,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.2.1窗口句柄覆盖策略 \\n1.如果指定参数的窗口句柄有效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄\\n2.如果指定参数的窗口句柄有效同时打开回调返回的的句柄无效就用指定参数的句柄\\n3.如果指定参数的窗口句柄无效同时打开回调返回的的句柄无效就直接返回错误\\n4.如果指定参数的窗口句柄无效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄 检查回调checkFun: typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int prePid,int error); 参数:windowsIndex:当前指定序号preWindowsIndex:之前绑定的序号或者错误值(小于0)--来源HCInject_GetPreWinIndex返回prePid:之前绑定的序号对应的PID--来源HCInject_GetPid返回error:提示值 error==RET_重连窗口(5)----->返回值含义:(1重连直接进行加载环境0新窗口) error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的) 我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 error==RET_重连窗口序号不一致(6)----->返回值含义:(1重连并使用之前绑定的序号进行加载环境 0新窗口(需要用户在回调中把之前PID给关闭)) error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的) 我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 其他情况可以返回小于0的自定义值:表示直接中断安装插件流程,并返回对应的值(这个值只要小于0即可,可以作为自定义值) 说明: 1.如果指定的检查回调为NULL,当内部检查到是重连窗口的时候 2.如果发现序号不一致就会直接返回(ERROR_当前进程插件序号不一致-1216) 3.如果序号一致就直接加载环境并实现重连 几个核心的点归纳总结出来其实就能规避掉很多坑了比如1.没安装过插件的都不算重连窗口全部当新窗口处理会触发打开回调2.安装过插件的不管是卸载了环境还是崩溃或重启中控都算重连窗口不会触发打开回调会触发检查回调",
    "url": "/docs/cpp/category_5",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "安装插件扩展模块[ex] - HDEX_InstallPlugin2",
    "content": "【功能描述】 第二种通讯安装插件方式(打开进程然后安装插件),通过pid如果使用HD多线程模块强烈建议在登录回调中使用 【备注】 可以参考表安装插件接口类型表 1.支持重连,重连的前提是不能被HCEnv_UnLoad卸载 回调解析: 打开回调openFun typedef__int64 (__stdcall* INSTALLPLUGint YPE)(int windowsIndex); 参数:windowsIndex:当前指定序号 说明:1.对于第一种方式打开回调不能为NULL,内部先安装插件再触发回调打开进程(在打开回调中可以手动或者自动打开进程1.如果是手动直接返回1就行或错误值表示中断操作2.如果是自动返回对应的PID或错误值表示中断操作)2.其他二种方式打开回调可以为NULL,表示进程已经打开了,不需要在回调中打开,此时使用指定的PID或者窗口句柄来安装插件,具体是PID还是句柄请查看安装插件接口类型表3.返回值根据当前的安装插件方式不同有不同的含义:（具体请看安装插件接口类型表和覆盖策略） 3.1方式二是通过PID安装插件那么返回值应该为打开进程的PID,并把传递的PID参数给覆盖了(请看PID覆盖策略),可以返回小于等于0的错误值或者不存在的PID,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.1.1PID覆盖策略 \\n1.如果指定的参数PID有效大于0并存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID\\n2.如果指定的参数PID有效大于0并存在同时打开回调返回的PID无效小于等于0不存在就用指定参数的PID\\n3.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID无效小于等于0不存在就直接返回错误\\n4.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID 3.2方式三是通过窗口句柄安装插件那么返回值应该为打开进程的句柄,并把传递的句柄参数给覆盖了(请看窗口句柄覆盖策略),可以返回小于等于0的错误值或者窗口句柄无效,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.2.1窗口句柄覆盖策略 \\n1.如果指定参数的窗口句柄有效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄\\n2.如果指定参数的窗口句柄有效同时打开回调返回的的句柄无效就用指定参数的句柄\\n3.如果指定参数的窗口句柄无效同时打开回调返回的的句柄无效就直接返回错误\\n4.如果指定参数的窗口句柄无效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄 检查回调checkFun: typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int prePid,int error); 参数:windowsIndex:当前指定序号preWindowsIndex:之前绑定的序号或者错误值(小于0)--来源HCInject_GetPreWinIndex返回prePid:之前绑定的序号对应的PID--来源HCInject_GetPid返回error:提示值 error==RET_重连窗口(5)----->返回值含义:(1重连直接进行加载环境0新窗口) error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的) 我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 error==RET_重连窗口序号不一致(6)----->返回值含义:(1重连并使用之前绑定的序号进行加载环境0新窗口(需要用户在回调中把之前PID给关闭)) 说明: 1.如果指定的检查回调为NULL,当内部检查到是重连窗口的时候 2.如果发现序号不一致就会直接返回(ERROR_当前进程插件序号不一致-1216) 3.如果序号一致就直接加载环境并实现重连 几个核心的点归纳总结出来其实就能规避掉很多坑了比如1.没安装过插件的都不算重连窗口全部当新窗口处理会触发打开回调2.安装过插件的不管是卸载了环境还是崩溃了中控都算重连窗口不会触发打开回调",
    "url": "/docs/cpp/category_5",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "安装插件扩展模块[ex] - HDEX_InstallPlugin3",
    "content": "【功能描述】 第三种通讯安装插件方式(打开进程然后安装插件),通过窗口句柄如果使用HD多线程模块强烈建议在登录回调中使用 【备注】 可以参考表安装插件接口类型表 1.支持重连,重连的前提是不能被HCEnv_UnLoad卸载 回调解析: 打开回调openFun:可以参考表安装插件接口类型表 typedef__int64 (__stdcall* INSTALLPLUGint YPE)(int windowsIndex); 参数:windowsIndex:当前指定序号 说明:1.对于第一种方式打开回调不能为NULL,内部先安装插件再触发回调打开进程(在打开回调中可以手动或者自动打开进程1.如果是手动直接返回1就行或错误值表示中断操作2.如果是自动返回对应的PID或错误值表示中断操作)2.其他二种方式打开回调可以为NULL,表示进程已经打开了,不需要在回调中打开,此时使用指定的PID或者窗口句柄来安装插件,具体是PID还是句柄请查看安装插件接口类型表3.返回值根据当前的安装插件方式不同有不同的含义:（具体请看安装插件接口类型表和覆盖策略） 3.1方式二是通过PID安装插件那么返回值应该为打开进程的PID,并把传递的PID参数给覆盖了(请看PID覆盖策略),可以返回小于等于0的错误值或者不存在的PID,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.1.1PID覆盖策略 \\n1.如果指定的参数PID有效大于0并存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID\\n2.如果指定的参数PID有效大于0并存在同时打开回调返回的PID无效小于等于0不存在就用指定参数的PID\\n3.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID无效小于等于0不存在就直接返回错误\\n4.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID 3.2方式三是通过窗口句柄安装插件那么返回值应该为打开进程的句柄,并把传递的句柄参数给覆盖了(请看窗口句柄覆盖策略),可以返回小于等于0的错误值或者窗口句柄无效,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.2.1窗口句柄覆盖策略 \\n1.如果指定参数的窗口句柄有效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄\\n2.如果指定参数的窗口句柄有效同时打开回调返回的的句柄无效就用指定参数的句柄\\n3.如果指定参数的窗口句柄无效同时打开回调返回的的句柄无效就直接返回错误\\n4.如果指定参数的窗口句柄无效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄 检查回调checkFun: typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int prePid,int error); 参数:windowsIndex:当前指定序号preWindowsIndex:之前绑定的序号或者错误值(小于0)--来源HCInject_GetPreWinIndex返回prePid:之前绑定的序号对应的PID--来源HCInject_GetPid返回error:提示值 error==RET_重连窗口(5)----->返回值含义:(1重连直接进行加载环境0新窗口) error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的) 我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 error==RET_重连窗口序号不一致(6)----->返回值含义:(1重连并使用之前绑定的序号进行加载环境0新窗口(需要用户在回调中把之前PID给关闭)) 说明: 1.如果指定的检查回调为NULL,当内部检查到是重连窗口的时候 2.如果发现序号不一致就会直接返回(ERROR_当前进程插件序号不一致-1216) 3.如果序号一致就直接加载环境并实现重连 几个核心的点归纳总结出来其实就能规避掉很多坑了比如1.没安装过插件的都不算重连窗口全部当新窗口处理会触发打开回调2.安装过插件的不管是卸载了环境还是崩溃了中控都算重连窗口不会触发打开回调",
    "url": "/docs/cpp/category_5",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "安装插件扩展模块[ex] - HDEX_InstallPluginVM",
    "content": "【功能描述】 打开后安装通过PID针对虚拟机内部自动关联虚拟机如果使用HD多线程模块强烈建议在登录回调中使用 【备注】 可以参考表安装插件接口类型表 1.调用之前记得打开服务器HCVMDMA_StartServer并确定正确打开HCVMDMA_ServerIsStart 2.其他规则和前3种安装插件方式一致 3.支持重连,重连的前提是不能被HCEnv_UnLoad卸载 回调解析: 打开回调openFun:可以参考表安装插件接口类型表 typedef__int64 (__stdcall* INSTALLPLUGint YPE)(int windowsIndex); 参数:windowsIndex:当前指定序号 说明:1.对于第一种方式打开回调不能为NULL,内部先安装插件再触发回调打开进程(在打开回调中可以手动或者自动打开进程1.如果是手动直接返回1就行或错误值表示中断操作2.如果是自动返回对应的PID或错误值表示中断操作)2.其他二种方式打开回调可以为NULL,表示进程已经打开了,不需要在回调中打开,此时使用指定的PID或者窗口句柄来安装插件,具体是PID还是句柄请查看安装插件接口类型表3.返回值根据当前的安装插件方式不同有不同的含义:（具体请看安装插件接口类型表和覆盖策略） 3.1方式二是通过PID安装插件那么返回值应该为打开进程的PID,并把传递的PID参数给覆盖了(请看PID覆盖策略),可以返回小于等于0的错误值或者不存在的PID,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.1.1PID覆盖策略 \\n1.如果指定的参数PID有效大于0并存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID\\n2.如果指定的参数PID有效大于0并存在同时打开回调返回的PID无效小于等于0不存在就用指定参数的PID\\n3.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID无效小于等于0不存在就直接返回错误\\n4.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID 3.2方式三是通过窗口句柄安装插件那么返回值应该为打开进程的句柄,并把传递的句柄参数给覆盖了(请看窗口句柄覆盖策略),可以返回小于等于0的错误值或者窗口句柄无效,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.2.1窗口句柄覆盖策略 \\n1.如果指定参数的窗口句柄有效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄\\n2.如果指定参数的窗口句柄有效同时打开回调返回的的句柄无效就用指定参数的句柄\\n3.如果指定参数的窗口句柄无效同时打开回调返回的的句柄无效就直接返回错误\\n4.如果指定参数的窗口句柄无效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄 检查回调checkFun: typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int prePid,int error); 参数:windowsIndex:当前指定序号preWindowsIndex:之前绑定的序号或者错误值(小于0)--来源HCInject_GetPreWinIndex返回prePid:之前绑定的序号对应的PID--来源HCInject_GetPid返回error:提示值 error==RET_重连窗口(5)----->返回值含义:(1重连直接进行加载环境0新窗口) error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的) 我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 error==RET_重连窗口序号不一致(6)----->返回值含义:(1重连并使用之前绑定的序号进行加载环境0新窗口(需要用户在回调中把之前PID给关闭)) 说明: 1.如果指定的检查回调为NULL,当内部检查到是重连窗口的时候 2.如果发现序号不一致就会直接返回(ERROR_当前进程插件序号不一致-1216) 3.如果序号一致就直接加载环境并实现重连 几个核心的点归纳总结出来其实就能规避掉很多坑了比如1.没安装过插件的都不算重连窗口全部当新窗口处理会触发打开回调2.安装过插件的不管是卸载了环境还是崩溃了中控都算重连窗口不会触发打开回调",
    "url": "/docs/cpp/category_5",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "环境初始化模块(Inject) - HCInject_Init",
    "content": "【功能描述】 初始化插件环境 【备注】 每次打开游戏都需要先初始化一次 不要多次初始化 该接口还会把当前全局进程位数HCEnv_SetProcessType与当前窗口序号进程绑定,省去了切换进程位数的操作,如果不绑定可能会返回-1107(ERROR_进程位数不匹配)",
    "url": "/docs/cpp/category_6",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "环境初始化模块(Inject) - HCInject_InitEx",
    "content": "【功能描述】 初始化插件环境 【备注】 每次打开游戏都需要先初始化一次 不要多次初始化 如果不需要用LUA来初始化自己的数据,可以直接使用HCInject_Init 该接口还会把当前全局进程位数HCEnv_SetProcessType与当前窗口序号进程绑定,省去了切换进程位数的操作,如果不绑定可能会返回-1107(ERROR_进程位数不匹配)",
    "url": "/docs/cpp/category_6",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "环境初始化模块(Inject) - HCInject_InitExx",
    "content": "【功能描述】 初始化插件环境 【备注】 每次打开游戏都需要先初始化一次 不要多次初始化 如果不需要用LUA来初始化自己的数据或者预加载DLL,可以直接使用HCInject_Init 该接口还会把当前全局进程位数HCEnv_SetProcessType与当前窗口序号进程绑定,省去了切换进程位数的操作,如果不绑定可能会返回-1107(ERROR_进程位数不匹配)",
    "url": "/docs/cpp/category_6",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "环境初始化模块(Inject) - HCInject_GetPid",
    "content": "【功能描述】 获取打开的进程PID 【备注】 调用这个接口之前必须保证插件已经加载才会获取PID",
    "url": "/docs/cpp/category_6",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "环境初始化模块(Inject) - HCInject_GetPrePid",
    "content": "【功能描述】 获取打开的进程之前的PID(可以用于重连) 【备注】 当我们在调试的时候中控如果崩了,如果此时插件还在游戏进程中执行,那么可以当打开中控的时候直接获取PID进行通讯,而不是调用初始化之类的操作",
    "url": "/docs/cpp/category_6",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "环境初始化模块(Inject) - HCInject_GetPreWinIndex",
    "content": "【功能描述】 通过进程PID尝试拿到绑定的窗口序号 【备注】 返回如果大于等于0的值表示之前进程绑定的窗口序号 没有进程PID返回-1178 没有绑定过返回-1179",
    "url": "/docs/cpp/category_6",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "环境初始化模块(Inject) - HCInject_GetPreWinIndexEx",
    "content": "【功能描述】 通过进程PID尝试拿到绑定的窗口序号 【备注】 返回如果大于等于0的值表示之前进程绑定的窗口序号 没有进程PID返回-1178 没有绑定过返回-1179",
    "url": "/docs/cpp/category_6",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "环境初始化模块(Inject) - HCInject_GetHwnd",
    "content": "【功能描述】 获取窗口句柄,内部是通过PID获取窗口句柄需要先安装好插件到目标进程 【备注】 内部是通过HCWIN_EnumWindowByProcessId获取",
    "url": "/docs/cpp/category_6",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "环境初始化模块(Inject) - HCInject_GetHwndEx",
    "content": "【功能描述】 获取窗口句柄(需要内置,一般不需要调用这个获取句柄),如果需要通过PID获取句柄请调用HCInject_GetHwnd 【备注】 这个接口和内置的游戏接口有关,需要搭建完通讯才能调用 并不是一定获取到 如果要获取进程句柄还需要自行获取,除非内置了游戏数据",
    "url": "/docs/cpp/category_6",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "环境初始化模块(Inject) - HCInject_Continue",
    "content": "【功能描述】 继续环境加载操作 【备注】 当我们调用了HCEnv_Load后需要调用这个接口来验证",
    "url": "/docs/cpp/category_6",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "环境初始化模块(Inject) - HCInject_SetData",
    "content": "【功能描述】 存自定义二进制数据 【备注】 无",
    "url": "/docs/cpp/category_6",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "环境初始化模块(Inject) - HCInject_GetData",
    "content": "【功能描述】 取自定义二进制数据 【备注】 取的数据就是用HCInject_SetData接口存的数据",
    "url": "/docs/cpp/category_6",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "通讯环境模块(Env) - HCEnv_Init",
    "content": "【功能描述】 HD插件环境加载(初始化中控环境) 【备注】 中控初始化开始就要调用,仅仅一次",
    "url": "/docs/cpp/category_7",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "通讯环境模块(Env) - HCEnv_InitEx",
    "content": "【功能描述】 HD插件环境加载(初始化中控环境)(扩展版本)最新版本一般不用了 【备注】 中控初始化开始就要调用,仅仅一次",
    "url": "/docs/cpp/category_7",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "通讯环境模块(Env) - HCEnv_Load",
    "content": "【功能描述】 HD插件环境加载 【备注】 调用这个接口需要先调用环境初始化模块中的初始化接口 每次打开进程后都要调用",
    "url": "/docs/cpp/category_7",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "通讯环境模块(Env) - HCEnv_LoadEx",
    "content": "【功能描述】 HD插件环境加载(扩展版本),涉及到回调 【备注】 调用这个接口需要先调用环境初始化模块中的初始化接口 每次打开进程后都要调用",
    "url": "/docs/cpp/category_7",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "通讯环境模块(Env) - HCEnv_UnLoad",
    "content": "【功能描述】 HD插件环境卸载 【备注】 调用这个接口需要先调用环境初始化模块中的初始化接口 进程关闭一定要记得卸载窗口序号对应的窗口环境,以便于下次窗口序号使用 1.没安装过插件的都不算重连窗口全部当新窗口处理 2.安装过插件的不管卸载环境还是崩溃或者重启窗口都可以重连窗口一个序号只能绑定到一个窗口操作",
    "url": "/docs/cpp/category_7",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "通讯环境模块(Env) - HCEnv_UnLoadEx",
    "content": "【功能描述】 HD插件环境卸载(扩展版本) 【备注】 调用这个接口需要先调用环境初始化模块中的初始化接口 进程关闭一定要记得卸载窗口序号对应的窗口环境,以便于下次窗口序号使用 1.没安装过插件的都不算重连窗口全部当新窗口处理 2.安装过插件的不管卸载环境还是崩溃或者重启窗口都可以重连窗口一个序号只能绑定到一个窗口操作",
    "url": "/docs/cpp/category_7",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "通讯环境模块(Env) - HDEnv_GetWinExIndex",
    "content": "【功能描述】 获取副窗口序号 【备注】 这个副窗口序号可以用于登录器的绑定和操作,相当于窗口序号的一个助手,做一些额外的事情相当于一个窗口序号可以操作2个进程如:窗口序号1那么他返回的窗口扩展序号就是1+31也就是32序号",
    "url": "/docs/cpp/category_7",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "通讯环境模块(Env) - HDEnv_GetGlobalWinExIndex",
    "content": "【功能描述】 获取全局副窗口序号,这是一个全局的序号 【备注】 一个中控仅有一个计算方式:0+31也就是这个全局序号为31序号从0开始用途:给当前中控分配一个助手,来控制一个进程来辅助中控做一些事情",
    "url": "/docs/cpp/category_7",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "通讯环境模块(Env) - HCEnv_AttachHeart",
    "content": "【功能描述】 给中控附加心跳 【备注】 检测主线程心跳 如果需要检测主线程心跳是否卡住,请记得先HOOK主线程接口HC_HookMaint hread 设置心跳回调函数类型 typedef__int32 (* HeartFunType)(__int32 窗口索引,__int32 type);回调函数返回值:0不重置之前的记录1重置之前的记录(一般重新开启新进程会设置为1) \\n0.正常心跳进程存在的情况下会触发\\n1.通讯崩溃/关闭等等原因导致进程不存在->重启窗口\\n2.主线程崩溃/关闭/未响应/目标进程卡死原因导致进程不存在/存在->强制关闭->重启窗口设置挂接主线程\\n2.1.附加心跳的时候可以检查主线程的状态(游戏/目标)\\n2.2.后面的内存操作可以主线程调用\\n2.3.注意:附加心跳的时候设置的检查时间一定要大于安装插件到挂接主线程的时间\\n3.卡屏崩溃/关闭/区域图像卡死了原因导致进程不存在/存在->强制关闭->重启窗口设置屏幕检查范围\\n6.1+2+3",
    "url": "/docs/cpp/category_7",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "通讯环境模块(Env) - HCEnv_SetWindowsSortInfo",
    "content": "【功能描述】 设置窗口排序信息",
    "url": "/docs/cpp/category_7",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "通讯环境模块(Env) - HCEnv_SetScreenCheckHeart",
    "content": "【功能描述】 当我们心跳检测指定了3或者6需要设置卡屏范围和卡屏检测次数当大于这个次数就调用回调",
    "url": "/docs/cpp/category_7",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "通讯环境模块(Env) - HCEnv_DetachHeart",
    "content": "【功能描述】 脱离中控附加的心跳检测 【备注】 脱离会堵塞直到脱离成功一般中控进程结果关闭前调用",
    "url": "/docs/cpp/category_7",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "通讯环境模块(Env) - HCEnv_Debug",
    "content": "【功能描述】 设置导入接口为调试模式 【备注】 中控初始化开始就可以调用,仅仅一次 发布版本不需要调用此接口,默认为发布版本",
    "url": "/docs/cpp/category_7",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "通讯环境模块(Env) - HCEnv_MsgFile",
    "content": "【功能描述】 设置是否打开文件提示窗口 【备注】 当HD内部导致中控关闭或者插件失效会一文件形式提示信息",
    "url": "/docs/cpp/category_7",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "通讯环境模块(Env) - HCEnv_AddThread",
    "content": "【功能描述】 添加线程环境 【备注】 这个接口用来测试用的,开发者一般用不到",
    "url": "/docs/cpp/category_7",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "通讯环境模块(Env) - HCEnv_TestCALL_RetValue",
    "content": "【功能描述】 测试是否通讯成功,返回单一值 【备注】 这个接口用来测试是否环境搭建成功",
    "url": "/docs/cpp/category_7",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "通讯环境模块(Env) - HCEnv_TestCALL_RetArray",
    "content": "【功能描述】 测试是否通讯成功,返回json字符串 【备注】 这个接口用来测试是否环境搭建成功",
    "url": "/docs/cpp/category_7",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "通讯环境模块(Env) - HCEnv_TestCALL_RetValueEx",
    "content": "【功能描述】 测试是否通讯成功,返回单一值 【备注】 这个接口用来测试是否环境搭建成功",
    "url": "/docs/cpp/category_7",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "通讯环境模块(Env) - HCEnv_TestCALL_RetArrayEx",
    "content": "【功能描述】 测试是否通讯成功,返回json字符串 【备注】 这个接口用来测试是否环境搭建成功",
    "url": "/docs/cpp/category_7",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "通讯环境模块(Env) - HCEnv_SetProcessType",
    "content": "【功能描述】 设置目标进程位数 【备注】 该接口是全局设置,也就是设置了一次,接下来的所有进程都是该位数,可以多次调用切换进程位数,建议使用HCEnv_SetProcessTypeEx这个扩展版本 如果使用了HDEX_InstallPlugin1HDEX_InstallPlugin2HDEX_InstallPlugin3这些接口可以不用调用这个接口设置目标进程位数 如果是自定义通讯流程就需要自己设置后然后初始化序号进行通讯绑定",
    "url": "/docs/cpp/category_7",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "通讯环境模块(Env) - HCEnv_SetProcessTypeEx",
    "content": "【功能描述】 指定某个序号绑定的进程位数 【备注】 如果使用了HDEX_InstallPlugin1HDEX_InstallPlugin2HDEX_InstallPlugin3这些接口可以不用调用这个接口设置目标进程位数 如果是自定义通讯流程就需要自己设置后然后初始化序号进行通讯绑定",
    "url": "/docs/cpp/category_7",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "通讯环境模块(Env) - HCEnv_SetHandleEventCallBack",
    "content": "【功能描述】 设置中控事件处理回调函数 【备注】 这个回调函数作用于当自定义模块通知中控的时候 中控事件处理回调函数接口类型: typedef__int32 (__stdcall* HandleEventFunType)(__int32 窗口序号,__int32 插件序号,HDHandleEventInfoInfo); HDHandleEventInfo结构体: typedefstructHDHandleEventInfo\\n处理事件{__int32 m_callType;\\n自定义HDValuem_call;HDValuem_rcx;HDValuem_rdx;HDValuem_r8;HDValuem_r9;HDValuem_lparam5;HDValuem_lparam6;HDValuem_lparam7;HDValuem_lparam8;HDValuem_value;HDValuem_size;charm_buffer[MAX_PATH];charm_buffer2[MAX_PATH];HDValue* m_pRetValue;\\n值单独char* m_pRetJson;\\n字符串返回}HDHandleEventInfo; 代码案例: __int32 HCLogin::HandleEvent(__int32 窗口序号,__int32 插件序号,HDHandleEventInfoInfo){HDbgPrint f_Normal(\\\"处理接受事件->窗口序号:%dcallType:%dbuffer1:%sbuffer2:%scall:%llXrcx:%llXrdx:%llX\\\",窗口序号,Info.m_callType,Info.m_buffer,Info.m_buffer2,Info.m_call,Info.m_rcx,Info.m_rdx);if(Info.m_callType==1){* Info.m_pRetValue=999;autoret=HCMKB_UnBind(窗口序号);HDbgPrint f_Normal(\\\"解绑后台ret:%d\\\",ret);return8;}elseif(Info.m_callType==2){\\n处理逻辑* Info.m_pRetValue=123;sprint f_s(Info.m_pRetJson,1024* 10,\\\"%s\\\",\\\"我是中控\\\");\\n672637autoret=HCMKB_Bind(窗口序号,Info.m_call,\\\"1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|0|1|\\\");HDbgPrint f_Normal(\\\"绑定后台ret:%d\\\",ret);if(ret==1){Sleep(1000);ret=HCMKB_MoveTo(窗口序号,672,610,0);HDbgPrint f_Normal(\\\"模拟移动一次->672610ret:%d\\\",ret);ret=HCMKB_LeftClick(窗口序号);HDbgPrint f_Normal(\\\"模拟点击一次->ret:%d\\\",ret);}return1024* 10;\\n大于8认为是字符串}* Info.m_pRetValue=1;return8;}",
    "url": "/docs/cpp/category_7",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "通讯环境模块(Env) - HCEnv_SetShutDownCallBack",
    "content": "【功能描述】 设置关闭回调函数(处理HD功能失效,内部自动关闭中控前的操作) 【备注】 当HD出现异常或者失效或者网络验证出现断线,会在自动关闭自身在期间会先调用这个回调(这个回调自己做好关闭前处理工作)然后会自动调用微软API接口ExitProcess();结束自身 在这个回调用户可以自行处理自己的业务逻辑 1.资源清理逻辑 2.接口释放逻辑 3.自启逻辑 4.自定义处理逻辑 回调函数接口类型: typedef__int32 (__stdcall* ShutDownEventFunType)(__int32 code); code:错误代码",
    "url": "/docs/cpp/category_7",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "通讯环境模块(Env) - HCEnv_SetPidCheckBack",
    "content": "【功能描述】 设置PID检查回调(内部检查PID不存在会触发这个回调) 【备注】 1.这是设置全局PID检查回调 2.内部检查PID不存在会触发这个回调 3.如果没有调用此接口设置全局PID检查回调,那么对于4种安装插件方式中,当内部检查不到PID存在也会触发检查回调并传递给回调参数窗口序号:0之前窗口序号:0检查PID:pid提示值:8 回调函数接口类型: typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int checkPid,int error); windowsIndex:窗口序号 preWindowsIndex:窗口序号 checkPid:当前检查的PID error:传递8表示需要检查PID",
    "url": "/docs/cpp/category_7",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "通讯环境模块(Env) - HCEnv_SetCheckComItlTime",
    "content": "【功能描述】 设置通讯检测间隔毫秒 【备注】 1.值越小响应越快,随之带来的效率更高但是会导致CPU利用率变高2.值的大小根据当前的项目指定,对于一直要实时响应的最好小点",
    "url": "/docs/cpp/category_7",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "通讯环境模块(Env) - HCEnv_SetCheckCallBackTime",
    "content": "【功能描述】 设置回调响应毫秒 【备注】 1.值越小响应越快,随之带来的效率更高但是会导致CPU利用率变高2.值的大小根据当前的项目指定,对于一直要实时响应的最好小点",
    "url": "/docs/cpp/category_7",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "通讯环境模块(Env) - HCEnv_TerminateThread",
    "content": "【功能描述】 强制结束当前线程(可以在卸载环境后调用) 【备注】 强制结束当前线程内部会对锁操作循环拿到锁才会强制关闭并返回成功此接口小心使用1.不到万不得已不要强制关闭线程(因为强制关闭线程不管在任何时候都有可能造成不可能预计的BUG)2.调用此接口的线程不要和结束的线程是同一个(虽然内部有检查)3.该接口如果参数:是否操作锁为真,那么会堵塞,直到拿到锁权限后,才会强制关闭线程,然后解锁(防止死锁).",
    "url": "/docs/cpp/category_7",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "通讯环境模块(Env) - HCEnv_TerminateThreadEx",
    "content": "【功能描述】 强制结束当前线程(可以在卸载环境后调用) 【备注】 强制结束当前线程内部会对锁操作循环拿到锁才会强制关闭并返回成功此接口小心使用1.不到万不得已不要强制关闭线程(因为强制关闭线程不管在任何时候都有可能造成不可能预计的BUG)2.调用此接口的线程不要和结束的线程是同一个(虽然内部有检查)3.该接口如果参数:是否操作锁为真,那么会堵塞,直到拿到锁权限后,才会强制关闭线程,然后解锁(防止死锁).",
    "url": "/docs/cpp/category_7",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_29",
    "title": "通讯环境模块(Env) - HCEnv_ExitProcess",
    "content": "【功能描述】 关闭绑定的目标窗口 【备注】 内部实现可能是正常关闭也可能是强制关闭 至于是哪一种会根据实际情况动态调用",
    "url": "/docs/cpp/category_7",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "多线程模块[MT] - HCMT_InitProcess",
    "content": "【功能描述】 初始化多线程设置相关流程回调 【备注】 1.普通回调1参数windowsIndex:代表的是窗口序号也是主序号 2.每个回调参数的函数类型不一样,注意对应 回调触发顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->结束回调 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/cpp/category_8",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "多线程模块[MT] - HCMT_InitProcessEx",
    "content": "【功能描述】 初始化多线程设置相关流程回调可以绑定一个全局参数 【备注】 1.普通回调1参数windowsIndex:代表的是窗口序号也是主序号 2.每个回调参数的函数类型不一样,注意对应 回调触发顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->结束回调 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调EXtypedef__int64 (__stdcall* UIFUNTYPEEX)(__int32 windowsIndex,char* stepText,void* lparam,BOOL m_end1,BOOL m_pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 lparam:HCMT_InitProcessEx绑定一个全局参数,一般我们指定为一个UI对象地址,这个回调可以拿到这个地址 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/cpp/category_8",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "多线程模块[MT] - HCMT_InitOperate",
    "content": "【功能描述】 初始化多线程结束/暂停/恢复状态的操作回调 【备注】 1.仅仅对于这3个回调而言普通回调2参数index:大于多开限制数量,就是副序号;小于就是主序号(也是窗口序号);计算公式:if(index>=多开限制数)主序号=index-多开限制数; \\n(index>=多开环境数量)?(index-多开环境数量):(index)2.其他接口的windowsIndex就代表的是窗口序号也是主序号3.多开限制数量最大常量为31,请自行在程序里面定义 4.多开限制数量用HCEnv_GetMaxWindowNum返回一个常数,可以自己写成一个常量 回调触发顺序: 结束窗口操作:endBindCallBack并传递对应的线程序号(线程序号可能是主序号也就是窗口序号,也有可能是副序号) 暂停窗口操作:pauseBindCallBack并传递对应的线程序号(线程序号可能是主序号也就是窗口序号,也有可能是副序号) 恢复窗口操作:recoverBindCallBack并传递对应的线程序号(线程序号可能是主序号也就是窗口序号,也有可能是副序号) 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/cpp/category_8",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "多线程模块[MT] - HCMT_RegisterMessage",
    "content": "【功能描述】 注册窗口消息 【备注】 1.通过HCMT_MsgSend/HCMT_MsgPost来触发回调 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/cpp/category_8",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "多线程模块[MT] - HCMT_MsgSend",
    "content": "【功能描述】 发送消息(同步) 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/cpp/category_8",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "多线程模块[MT] - HCMT_MsgPost",
    "content": "【功能描述】 发送消息(异步) 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/cpp/category_8",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "多线程模块[MT] - HCMT_MsgStart",
    "content": "【功能描述】 通过消息开启窗口操作 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.开启成功后会相应触发对应设置的回调函数 3.顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 停止窗口:结束绑定回调->结束回调",
    "url": "/docs/cpp/category_8",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "多线程模块[MT] - HCMT_MsgStop",
    "content": "【功能描述】 通过消息停止窗口操作 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.开启成功后会相应触发对应设置的回调函数 3.顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 停止窗口:结束绑定回调->结束回调",
    "url": "/docs/cpp/category_8",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "多线程模块[MT] - HCMT_MsgReStart",
    "content": "【功能描述】 通过消息重启窗口操作 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.开启成功后会相应触发对应设置的回调函数 3.顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 停止窗口:结束绑定回调->结束回调",
    "url": "/docs/cpp/category_8",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "多线程模块[MT] - HCMT_MsgReStartEx",
    "content": "【功能描述】 通过消息重启窗口操作(扩展版本) 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.开启成功后会相应触发对应设置的回调函数 3.顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 停止窗口:结束绑定回调->结束回调",
    "url": "/docs/cpp/category_8",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "多线程模块[MT] - HCMT_MsgUpdateUI",
    "content": "【功能描述】 通过消息触发UI回调,并传递线程状态信息和日志操作信息给UI回调 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
    "url": "/docs/cpp/category_8",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "多线程模块[MT] - HCMT_MsgStepText",
    "content": "【功能描述】 通过消息触发UI回调,并传递线程状态信息和日志操作信息给UI回调 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
    "url": "/docs/cpp/category_8",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "多线程模块[MT] - HCMT_SetAllPause",
    "content": "【功能描述】 设置所有窗口结束 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/cpp/category_8",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "多线程模块[MT] - HCMT_GetState",
    "content": "【功能描述】 获取主副序号对应的线程的状态值 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调 typedefenumTHREADSTATE\\n线程状态{THREADSTATE_NONE=-1,\\n未启动THREADSTATE_STARTING=0,\\n开启中THREADSTATE_LOGINING=1,\\n正在登录THREADSTATE_RUNNING=2,\\n正在运行THREADSTATE_PAUSE=3,\\n暂停THREADSTATE_PAUSEING=4,\\n正在暂停THREADSTATE_RECOVERING=5,\\n正在恢复THREADSTATE_WILLSTOP=6,\\n准备停止THREADSTATE_STOPPING=7\\n正在停止}THREADSTATE;",
    "url": "/docs/cpp/category_8",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "多线程模块[MT] - HCMT_GetStateString",
    "content": "【功能描述】 获取状态整数值对应的字符串 【备注】 无",
    "url": "/docs/cpp/category_8",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "多线程模块[MT] - HCMT_IsCanStart",
    "content": "【功能描述】 判断是否能开启新的(主副线程)传递的只能是主序号 【备注】 无",
    "url": "/docs/cpp/category_8",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "多线程模块[MT] - HCMT_Start",
    "content": "【功能描述】 直接开启窗口操作 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.开启成功后会相应触发对应设置的回调函数 3.顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 停止窗口:结束绑定回调->结束回调",
    "url": "/docs/cpp/category_8",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "多线程模块[MT] - HCMT_SetAllRecover",
    "content": "【功能描述】 设置所有窗口恢复 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的恢复绑定回调",
    "url": "/docs/cpp/category_8",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "多线程模块[MT] - HCMT_SetAllStop",
    "content": "【功能描述】 设置所有窗口停止 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的停止绑定回调",
    "url": "/docs/cpp/category_8",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "多线程模块[MT] - HCMT_SetPause",
    "content": "【功能描述】 设置窗口暂停 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/cpp/category_8",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "多线程模块[MT] - HCMT_SetPauseEx",
    "content": "【功能描述】 设置主副序号对应的线程暂停 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/cpp/category_8",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "多线程模块[MT] - HCMT_SetRecover",
    "content": "【功能描述】 设置窗口恢复 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的恢复绑定回调",
    "url": "/docs/cpp/category_8",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "多线程模块[MT] - HCMT_SetRecoverEx",
    "content": "【功能描述】 设置主副序号对应的线程恢复 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/cpp/category_8",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "多线程模块[MT] - HCMT_SetStop",
    "content": "【功能描述】 设置窗口停止 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的结束绑定回调",
    "url": "/docs/cpp/category_8",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "多线程模块[MT] - HCMT_IsRunning",
    "content": "【功能描述】 (第一第二)回调里面调用,检查当前线程是否结束 【备注】 无",
    "url": "/docs/cpp/category_8",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "多线程模块[MT] - HCMT_IsPause",
    "content": "【功能描述】 判断主副序号对应的线程是否是已被暂停状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/cpp/category_8",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "多线程模块[MT] - HCMT_IsStop",
    "content": "【功能描述】 判断主副序号对应的线程是否是已被结束状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/cpp/category_8",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "多线程模块[MT] - HCMT_Sleep",
    "content": "【功能描述】 设延迟函数,自带暂停/结束/恢复检查 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.检查随后触发HCMT_InitOperate设置的3个回调;理论上不能在HCMT_InitOperate设置的3个回调中调用,因为会导致无限调用自己(但是内部做了检测所以不会无限调用,也就是如果当前第一次已经检查到标志位并触发对应的绑定回调了,在回调中又再一次调用HCMT_Sleep,那么这一次的HCMT_Sleep只会正常休眠,并不继续检查了,防止无限调用); 3.其他回调均可以(无影响) 4.如果要内部检测状态机状态需要调用HCMT_StatusSleep",
    "url": "/docs/cpp/category_8",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "多线程状态机 - HCMT_StartStatus",
    "content": "【功能描述】 开启状态机 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用配合多线程模块一起使用 2.一般在执行回调或者检查回调调用就行不需要都开启(内部有检测是否开启) 3.支持多线程,但是不建议,执行回调中调用就行了",
    "url": "/docs/cpp/category_9",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "多线程状态机 - HCMT_EnableStatus",
    "content": "【功能描述】 全局(全部窗口序号)禁用或者开启状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用配合多线程模块一起使用 2.操作的状态值,必须先调用HCMT_AddStatus添加状态,否则无效 3.支持多线程 4.如果当前状态正在执行中,此时调用该接口使其状态被禁止/无效,那么当前状态对应的状态回调中就会立即退出回调或者立即监控到状态被改变了 5.一旦被禁止,就算我们切换到该状态,也无法去执行绑定的状态回调了",
    "url": "/docs/cpp/category_9",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "多线程状态机 - HCMT_ChangeStatus",
    "content": "【功能描述】 改变状态机状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用 2.操作的状态值,必须先调用HCMT_AddStatus添加状态,否则无效 3.支持多线程,一般在检测回调中调用 4.只能改变比之前优先级低的优先级 《《《特别注意:状态值的大小也表示优先级,优先级越高的回调,享有最先执行权限！！！！》》》 如:登录回调>死亡回调>买药回调>限时副本回调>主线回调 优先级大小策略: 1.优先级用户自行定义大小(-1表示没有,不要重复)建议从0开始123...依次递增值越大优先级越高 2.优先级高回调的可以打断或者中断优先级低的回调,当优先级高的回调执行完毕,会继续执行优先级低的回调 2.如果是优先级一样的回调,只有执行完第一个,才能执行第二个. 3.优先级低的回调是不能打断优先级高的回调,此时如果想执行优先级低的回调,那么必须等待优先级高的回调执行完毕后,方可执行优先级低的回调 4.回调内部如果有循环流程,应加入退出循环条件(一般使用HCMT_IsStatus作为退出循环的条件判断或者其他),不要死循环,否则无法实现状态切换",
    "url": "/docs/cpp/category_9",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "多线程状态机 - HCMT_RetraceStatus",
    "content": "【功能描述】 回溯状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用 2.操作的状态值,必须先调用HCMT_AddStatus添加状态,否则无效 3.支持多线程,一般在检测回调中调用 4.只能改变比之前优先级低的优先级 《《《特别注意:状态值的大小也表示优先级,优先级越高的回调,享有最先执行权限！！！！》》》 如:登录回调>死亡回调>买药回调>限时副本回调>主线回调 优先级大小策略: 1.优先级用户自行定义大小(-1表示没有,不要重复)建议从0开始123...依次递增值越大优先级越高 2.优先级高回调的可以打断或者中断优先级低的回调,当优先级高的回调执行完毕,会继续执行优先级低的回调 2.如果是优先级一样的回调,只有执行完第一个,才能执行第二个. 3.优先级低的回调是不能打断优先级高的回调,此时如果想执行优先级低的回调,那么必须等待优先级高的回调执行完毕后,方可执行优先级低的回调 4.回调内部如果有循环流程,应加入退出循环条件(一般使用HCMT_IsStatus作为退出循环的条件判断或者其他),不要死循环,否则无法实现状态切换",
    "url": "/docs/cpp/category_9",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "多线程状态机 - HCMT_IsStatus",
    "content": "【功能描述】 当前状态机的状态在回调中是否有效 【备注】 1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用 2.用在状态回调中,检索是否是当前状态3.在设置的状态回调函数中循环调用检查当前窗口序号的状态类型是否是当前的映射的回调状态类型4.支持多线程 C++例子: ========== __int64 __stdcall HMT::登录状态回调(__int32 windowsIndex,__int64 lparam){while(HCMT_IsStatus()){autoret=HCMT_StatusSleep(1000);HDbgPrint f_Command(\\\"HCMT_StatusSleep:%lld\\\",ret);HCMT_MsgStepText(windowsIndex,\\\"正在登录中...\\\");}return1;} ==========",
    "url": "/docs/cpp/category_9",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "多线程状态机 - HCMT_StatusSleep",
    "content": "【功能描述】 状态机延迟函数(自带暂停/结束/恢复/状态机) 【备注】 1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用2.支持多线程自带暂停/结束/恢复/状态机 3.注意区别于HCMT_Sleep这个接口是没法检索状态机状态的 C++例子: ========== __int64 __stdcall HMT::登录状态回调(__int32 windowsIndex,__int64 lparam){while(HCMT_IsStatus()){autoret=HCMT_StatusSleep(1000);\\n<<<<<<<<-----------------------------这里能及时返回(当我们状态变动的时候)返回值:4表示状态变动HDbgPrint f_Command(\\\"HCMT_StatusSleep:%lld\\\",ret);HCMT_MsgStepText(windowsIndex,\\\"正在登录中...\\\");}return1;} ==========",
    "url": "/docs/cpp/category_9",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "多线程状态机 - HCMT_GetStatus",
    "content": "【功能描述】 获取状态机状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用 2.支持多线程,一般在UI回调中调用,获取状态值并显示到控件上",
    "url": "/docs/cpp/category_9",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "多线程状态机 - HCMT_SleepEx",
    "content": "【功能描述】 设延迟函数,自带暂停/结束/恢复检查/状态机状态(可选)(扩展版本) 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.检查随后触发HCMT_InitOperate设置的3个回调;理论上不能在HCMT_InitOperate设置的3个回调中调用,因为会导致无限调用自己(但是内部做了检测所以不会无限调用,也就是如果当前第一次已经检查到标志位并触发对应的绑定回调了,在回调中又再一次调用HCMT_Sleep,那么这一次的HCMT_Sleep只会正常休眠,并不继续检查了,防止无限调用); 3.其他回调均可以(无影响) 4.如果要内部检测状态机状态需要调用HCMT_StatusSleep",
    "url": "/docs/cpp/category_9",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "APIHOOK - HDHK_SendApi",
    "content": "【功能描述】 调用SendAPI(目标进程中调用)X86X64 【备注】 无",
    "url": "/docs/cpp/category_10",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "APIHOOK - HDHK_SendToApi",
    "content": "【功能描述】 调用SendtoAPI(目标进程中调用)X86X64 【备注】 无",
    "url": "/docs/cpp/category_10",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "AddressHOOK - HDHK_Hook",
    "content": "【功能描述】 任意HOOK(内置插件)X86X64 【备注】 无 回调写法: ============= X86X64:typedef__int64 (__stdcall* HandleCallBackFunType)(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam); 参数解析: 窗口序号:对应的窗口序号 插件序号:内部自动传递 raxOreaxrbxOrebxrcxOrecxrdxOredxrbpOrebprspOresprsiOresirdiOredi:分别对应X86X64的8个寄存器 r8r9r10r11r12r13r14r15:分别对应X64的8个寄存器 lparam:是HDHK_Hook的第五个参数附加参数 备注: 返回值: 0【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 1【走原有流程】 2【需要修改值】+【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 3【需要修改值】+【走原有流程】 备注:调用约定是__stdcall X86X64通用调用案例: __int32 __stdcall HandleHookCallBackFun(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam){ HDbgPrint f_HOOK(\\\"触发HOOK回调->窗口序号:%d插件序号:%draxOreax:%llXrbxOrebx:%llXrcxOrecx:%llXrdxOredx:%llXrbpOrebp::%llXrspOresp:%llXrsiOresi:%llXrdiOredi:%llXr8:%llXr9:%llXr10:%llXr11:%llXr12:%llXr13:%llXr14:%llXr15:%llXlparam:%d\\\",窗口序号,插件序号,raxOreax,rbxOrebx,rcxOrecx,rdxOredx,rbpOrebp,rspOresp,rsiOresi,rdiOredi,r8,r9,r10,r11,r12,r13,r14,r15,lparam); \\n....中间执行自己的逻辑 \\n....可以用驱动读写 \\n如果需要修改寄存器值就调用HDHK_SetProcessHookCallBackLparam设置__int32 mark=1;autoret=HDHK_SetProcessHookCallBackLparam(窗口序号,插件序号,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,mark);HDbgPrint f_HOOK(\\\"ret:%lld\\\",ret); \\n返回值:0忽视HOOK语句直接跳到原来1走原有流程2需要修改值+直接跳到原来3需要修改值+走原有流程return3;} 回调内修改写法请转至》》》》》修改回调返回方法(X86X64)《《《《《《",
    "url": "/docs/cpp/category_11",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "AddressHOOK - HDHK_HookEx",
    "content": "【功能描述】 任意HOOK(内置插件)X64(该接口针对X64有效) 【备注】 无 回调写法: ============= X86X64:typedef__int64 (__stdcall* HandleCallBackFunType)(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam); 参数解析: 窗口序号:对应的窗口序号 插件序号:内部自动传递 raxOreaxrbxOrebxrcxOrecxrdxOredxrbpOrebprspOresprsiOresirdiOredi:分别对应X86X64的8个寄存器 r8r9r10r11r12r13r14r15:分别对应X64的8个寄存器 lparam:是HDHK_Hook的第五个参数附加参数 备注: 返回值: 0【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 1【走原有流程】 2【需要修改值】+【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 3【需要修改值】+【走原有流程】 备注:调用约定是__stdcall X86X64通用调用案例: __int32 __stdcall HandleHookCallBackFun(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam){ HDbgPrint f_HOOK(\\\"触发HOOK回调->窗口序号:%d插件序号:%draxOreax:%llXrbxOrebx:%llXrcxOrecx:%llXrdxOredx:%llXrbpOrebp::%llXrspOresp:%llXrsiOresi:%llXrdiOredi:%llXr8:%llXr9:%llXr10:%llXr11:%llXr12:%llXr13:%llXr14:%llXr15:%llXlparam:%d\\\",窗口序号,插件序号,raxOreax,rbxOrebx,rcxOrecx,rdxOredx,rbpOrebp,rspOresp,rsiOresi,rdiOredi,r8,r9,r10,r11,r12,r13,r14,r15,lparam); \\n....中间执行自己的逻辑 \\n....可以用驱动读写 \\n如果需要修改寄存器值就调用HDHK_SetProcessHookCallBackLparam设置__int32 mark=1;autoret=HDHK_SetProcessHookCallBackLparam(窗口序号,插件序号,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,mark);HDbgPrint f_HOOK(\\\"ret:%lld\\\",ret); \\n返回值:0忽视HOOK语句直接跳到原来1走原有流程2需要修改值+直接跳到原来3需要修改值+走原有流程return3;} 回调内修改写法请转至》》》》》修改回调返回方法(X86X64)《《《《《《",
    "url": "/docs/cpp/category_11",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "AddressHOOK - HDHK_HookExx",
    "content": "【功能描述】 任意HOOK(内置插件)X64(该接口针对X64有效) 【备注】 无 回调写法: ============= X86X64:typedef__int64 (__stdcall* HandleCallBackFunType)(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam); 参数解析: 窗口序号:对应的窗口序号 插件序号:内部自动传递 raxOreaxrbxOrebxrcxOrecxrdxOredxrbpOrebprspOresprsiOresirdiOredi:分别对应X86X64的8个寄存器 r8r9r10r11r12r13r14r15:分别对应X64的8个寄存器 lparam:是HDHK_Hook的第五个参数附加参数 备注: 返回值: 0【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 1【走原有流程】 2【需要修改值】+【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 3【需要修改值】+【走原有流程】 备注:调用约定是__stdcall X86X64通用调用案例: __int32 __stdcall HandleHookCallBackFun(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam){ HDbgPrint f_HOOK(\\\"触发HOOK回调->窗口序号:%d插件序号:%draxOreax:%llXrbxOrebx:%llXrcxOrecx:%llXrdxOredx:%llXrbpOrebp::%llXrspOresp:%llXrsiOresi:%llXrdiOredi:%llXr8:%llXr9:%llXr10:%llXr11:%llXr12:%llXr13:%llXr14:%llXr15:%llXlparam:%d\\\",窗口序号,插件序号,raxOreax,rbxOrebx,rcxOrecx,rdxOredx,rbpOrebp,rspOresp,rsiOresi,rdiOredi,r8,r9,r10,r11,r12,r13,r14,r15,lparam); \\n....中间执行自己的逻辑 \\n....可以用驱动读写 \\n如果需要修改寄存器值就调用HDHK_SetProcessHookCallBackLparam设置__int32 mark=1;autoret=HDHK_SetProcessHookCallBackLparam(窗口序号,插件序号,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,mark);HDbgPrint f_HOOK(\\\"ret:%lld\\\",ret); \\n返回值:0忽视HOOK语句直接跳到原来1走原有流程2需要修改值+直接跳到原来3需要修改值+走原有流程return3;} 回调内修改写法请转至》》》》》修改回调返回方法(X86X64)《《《《《《 HDHK_HookExxx 函数简介: 任意HOOK(内置插件)X64(该接口针对X64有效) 函数原型:__int64 HDHK_HookExxx(__int32 窗口序号,__int64 hook地址,char* 所属模块名字,__int64 jmp13空白地址,__int64 保留汇编地址,__int32 破坏字节,__int64 回调地址,__int64 附加参数,BOOL 是否主线程调用=FALSE); 参数定义: 窗口序号:窗口序号(从1开始) 所属模块名字:当前HOOK地址所属那个模块可以不指定为0就行 jmp13空白地址:在当前模块的代码地址找一个空白空间大小为13字节用于存储jmp一些指令 保留汇编地址:用来存储破坏字节数量+5字节大小的空白空间的首地址一般这个地址位于当前所属模块代码空白空间 hook地址:当前HOOK的目标地址(参考适合的HOOK地址X86HOOK地址规则X64HOOK地址规则) 破坏字节数:涉及到的汇编字节数 回调地址:遵循下面回调函数类型 附加参数:自定义参数,此参数会传递给回调函数 是否主线程调用:需要开启才开启,一般默认就行 返回值: 查看返回值表 备注: 无 回调写法: ============= X86X64:typedef__int64 (__stdcall* HandleCallBackFunType)(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam); 参数解析: 窗口序号:对应的窗口序号 插件序号:内部自动传递 raxOreaxrbxOrebxrcxOrecxrdxOredxrbpOrebprspOresprsiOresirdiOredi:分别对应X86X64的8个寄存器 r8r9r10r11r12r13r14r15:分别对应X64的8个寄存器 lparam:是HDHK_Hook的第五个参数附加参数 备注: 返回值: 0【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 1【走原有流程】 2【需要修改值】+【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 3【需要修改值】+【走原有流程】 备注:调用约定是__stdcall X86X64通用调用案例: __int32 __stdcall HandleHookCallBackFun(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam){ HDbgPrint f_HOOK(\\\"触发HOOK回调->窗口序号:%d插件序号:%draxOreax:%llXrbxOrebx:%llXrcxOrecx:%llXrdxOredx:%llXrbpOrebp::%llXrspOresp:%llXrsiOresi:%llXrdiOredi:%llXr8:%llXr9:%llXr10:%llXr11:%llXr12:%llXr13:%llXr14:%llXr15:%llXlparam:%d\\\",窗口序号,插件序号,raxOreax,rbxOrebx,rcxOrecx,rdxOredx,rbpOrebp,rspOresp,rsiOresi,rdiOredi,r8,r9,r10,r11,r12,r13,r14,r15,lparam); \\n....中间执行自己的逻辑 \\n....可以用驱动读写 \\n如果需要修改寄存器值就调用HDHK_SetProcessHookCallBackLparam设置__int32 mark=1;autoret=HDHK_SetProcessHookCallBackLparam(窗口序号,插件序号,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,mark);HDbgPrint f_HOOK(\\\"ret:%lld\\\",ret); \\n返回值:0忽视HOOK语句直接跳到原来1走原有流程2需要修改值+直接跳到原来3需要修改值+走原有流程return3;} 回调内修改写法请转至》》》》》修改回调返回方法(X86X64)《《《《《《",
    "url": "/docs/cpp/category_11",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "AddressHOOK - HDHK_PauseHook",
    "content": "【功能描述】 暂停任意HOOK(内置插件)X86X64 【备注】 无",
    "url": "/docs/cpp/category_11",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "AddressHOOK - HDHK_RecoverHook",
    "content": "【功能描述】 恢复任意HOOK(内置插件)X86X64 【备注】 无",
    "url": "/docs/cpp/category_11",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "AddressHOOK - HDHK_UnHook",
    "content": "【功能描述】 卸载任意HOOK(内置插件)X86X64 【备注】 无",
    "url": "/docs/cpp/category_11",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "通用模块 - HC_CALL",
    "content": "【功能描述】 通用CALL(适合X64),支持0-8个参数 【备注】 如果需要更多参数传递请联系作者",
    "url": "/docs/cpp/category_12",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "通用模块 - HC_CALLX86",
    "content": "【功能描述】 通用CALL(适合X86),支持0到8个参数 【备注】 如果需要更多参数传递请联系作者 HC_HookMaint hread 函数简介: 挂接主线程 函数原型:__int64 __stdcall HC_HookMaint hread(__int32 窗口序号,__int64 窗口句柄); 参数定义: 窗口序号:窗口序号(从1开始) 窗口句柄:窗口句柄 返回值: 查看返回值表 备注: 无",
    "url": "/docs/cpp/category_12",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "ShellCode模块(SH) - HCSH_GetShellCode",
    "content": "【功能描述】 汇编文本转换机器码 【备注】 无",
    "url": "/docs/cpp/category_13",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "ShellCode模块(SH) - HCSH_WriteShellCode",
    "content": "【功能描述】 机器码写入到进程 【备注】 这里执行用的是HD驱动来申请和写入这个机器码,注意要把HD驱动安装好 拿到了写入地址可以使用HD驱动创建远线程来执行",
    "url": "/docs/cpp/category_13",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "LUA模块(LUA) - HCLUA_ReadFile",
    "content": "【功能描述】 执行或加载LUA文件 【备注】 LUA标识符:当【是否需要拿到返回值】参数为真的时候,用作线程的标识符,方便主动退出线程，标识符规则:不要太大了{0到100}以内就行是否执行:真表示执行并加载LUA(比如:注入一些自定义LUA接口同时还能执行LUA),反之只是加载LUA文件(比如:注入一些自定义LUA接口)是否需要拿到返回值:真表示堵塞直到LUA文件执行完毕并获取返回值，反之表示开启一根线程执行(无法拿到返回值,可以在LUA文件中做一些耗时的操作)",
    "url": "/docs/cpp/category_14",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "LUA模块(LUA) - HCLUA_CloseLua",
    "content": "【功能描述】 关闭LUA线程 【备注】 LUA标识符:调用【HCLUA_ReadFile】接口指定的【LUA标识符】参数,一一对应,-1表示全部LUA线程退出！！！",
    "url": "/docs/cpp/category_14",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "LUA模块(LUA) - HCLUA_ExcuteCall",
    "content": "【功能描述】 执行被注册过的LUA函数 【备注】 json:{\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":XXX}",
    "url": "/docs/cpp/category_14",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "驱动模块(N) - HCN_LoadDrv",
    "content": "【功能描述】 加载N驱动 【备注】 需要联网,可以卸载,驱动内置了进程,如需要自定义进程名联系管理员添加或者用HD驱动",
    "url": "/docs/cpp/category_15",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "驱动模块(N) - HCN_InjectDll(W/A)X86",
    "content": "【功能描述】 注入32/64位DLL(需要先加载N驱动) 【备注】 无",
    "url": "/docs/cpp/category_15",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "驱动模块(N) - HCN_InjectDll(W/A)X64",
    "content": "【功能描述】 注入32/64位DLL(需要先加载N驱动) 【备注】 无",
    "url": "/docs/cpp/category_15",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "驱动模块(N) - HCN_InstallPlug(86/64)",
    "content": "【功能描述】 安装32/64位HD插件(需要先加载N驱动) 【备注】 无",
    "url": "/docs/cpp/category_15",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "驱动模块(N) - HCN_UnLoadDrv",
    "content": "【功能描述】 卸载驱动同时清除了注入的DLL缓存 【备注】 取消窗口关联,一定要卸载相关信息,随后所有循环会快速内退,从而线程安全退出！！！！",
    "url": "/docs/cpp/category_15",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "驱动模块(HD) - HCHD_LoadDrv",
    "content": "【功能描述】 加载HD驱动(正式版本) 【备注】 需要联网,不可以卸载驱动,可以清除注入DLL缓存 此接口相当于调用HCHD_LoadDrv2传递-1:HDEx正式版本(云下发正常驱动,无特殊处理)",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "驱动模块(HD) - HCHD_LoadDrv2",
    "content": "【功能描述】 云下发加载驱动或组件(可以通过指定驱动序号,加载不同版本的驱动如:正式版本定制版本备用版本其他保护盾VT等等) 【备注】 需要联网,不可以卸载驱动,可以清除注入DLL缓存",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "驱动模块(HD) - HCHD_InitFastRW",
    "content": "【功能描述】 初始化HD驱动快速读写(一般在HD安装驱动接口后的下一句就开始初始化) 【备注】 如果最开始安装HD驱动调用的是HCHD_LoadDrv同时又需要快速读写遍历,就需要先调用此接口,然后调用HCHD_RWExx进行快读内存读写遍历(百万级别) 如果最开始安装HD驱动调用的是HCHD_LoadDrv2并传递驱动序号为0,表示可以直接调用HCHD_RWExx进行快读内存读写遍历(百万级别),不需要再调用此接口了",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "驱动模块(HD) - HCHD_InjectX86X64",
    "content": "【功能描述】 把DLL注入到指定进程中(指定DLL二进制文件数据) 【备注】 不能卸载驱动,可以清除注入DLL缓存,支持32/64进程",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "驱动模块(HD) - HCHD_InjectX86X64ByFile",
    "content": "【功能描述】 把DLL注入到指定进程中(指定DLL文件路径) 【备注】 不能卸载驱动,可以清除注入DLL缓存,支持32/64进程",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "驱动模块(HD) - HCHD_InstallPlug(86/64)",
    "content": "【功能描述】 安装HD插件到指定进程中 【备注】 需要联网,可以清除注入DLL缓存,支持32/64进程",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "驱动模块(HD) - HCHD_UnInstallPlug",
    "content": "【功能描述】 卸载插件(并不是从进程中卸载,而是清除了下一次进程打开的时候安装插件的缓存) 【备注】 无",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "驱动模块(HD) - HCHD_MousePress",
    "content": "【功能描述】 前台驱动鼠标移动并点击 【备注】 可以通过调用HCHD_SetMMTrackType来设置鼠标全局移动轨迹类型 按键在轨迹坐标集中那些坐标有效:第一个点操作按键-中间点不操作按键-最后一个点不操作按键",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "驱动模块(HD) - HCHD_MousePressEx",
    "content": "【功能描述】 前台驱动鼠标移动并点击(可指定句柄) 【备注】 可以通过调用HCHD_SetMMTrackType来设置鼠标全局移动轨迹类型 按键在轨迹坐标集中那些坐标有效:第一个点操作按键-中间点不操作按键-最后一个点不操作按键",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "驱动模块(HD) - HCHD_MouseDown",
    "content": "【功能描述】 前台驱动鼠标移动并按下指定键(可指定句柄) 【备注】 可以通过调用HCHD_SetMMTrackType来设置鼠标全局移动轨迹类型 按键在轨迹坐标集中那些坐标有效:第一个点操作按键-中间点不操作按键-最后一个点不操作按键",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "驱动模块(HD) - HCHD_MouseUp",
    "content": "【功能描述】 前台驱动鼠标移动并弹起指定键(可指定句柄) 【备注】 可以通过调用HCHD_SetMMTrackType来设置鼠标全局移动轨迹类型 按键在轨迹坐标集中那些坐标有效:第一个点操作按键-中间点不操作按键-最后一个点不操作按键",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "驱动模块(HD) - HCHD_KbPress",
    "content": "【功能描述】 前台驱动键盘(按下并弹起) 【备注】 无",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "驱动模块(HD) - HCHD_KbDown",
    "content": "【功能描述】 前台驱动键盘(按下某键) 【备注】 无",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "驱动模块(HD) - HCHD_KbUp",
    "content": "【功能描述】 前台驱动键盘(弹起某键) 【备注】 无",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "驱动模块(HD) - HCHD_RW",
    "content": "【功能描述】 驱动读写 【备注】 无",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "驱动模块(HD) - HCHD_BeginRWEx",
    "content": "【功能描述】 驱动读写Ex(开始批读写)与HCHD_EndRWEx成对出现适合快速遍历(百万级别读写单线程) 【备注】 适合快速遍历",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "驱动模块(HD) - HCHD_RWEx",
    "content": "【功能描述】 驱动读写Ex(批量读写)(百万级别读写单线程) 【备注】 先调用HCHD_BeginRWEx然后中间调用该接口HCHD_RWEx最后调用HCHD_EndRWEx用于释放环境",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "驱动模块(HD) - HCHD_EndRWEx",
    "content": "【功能描述】 驱动读写Ex(结束批读写)与HCHD_BeginRWEx成对出现适合快速遍历(百万级别读写单线程) 【备注】 适合快速遍历",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "驱动模块(HD) - HCHD_AddrIsRead",
    "content": "【功能描述】 检查地址是否可读 【备注】 无",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "驱动模块(HD) - HCHD_PP",
    "content": "【功能描述】 进程保护 【备注】 无",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "驱动模块(HD) - HCHD_PHide",
    "content": "【功能描述】 开启进程隐藏 【备注】 一次性只能隐藏一个,如果需要隐藏第二个,先把之前的给显示了",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "驱动模块(HD) - HCHD_PHideEx",
    "content": "【功能描述】 开启进程隐藏(加强版本)无法恢复 【备注】 1.隐藏后关闭进程不会蓝屏 2.隐藏后该接口无法恢复显示,其实也没必要恢复显示",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "驱动模块(HD) - HCHD_PShow",
    "content": "【功能描述】 进程显示 【备注】 无",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "驱动模块(HD) - HCHD_PPKill",
    "content": "【功能描述】 进程杀死 【备注】 无",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "驱动模块(HD) - HCHD_MemoryAllocate",
    "content": "【功能描述】 驱动申请内存 【备注】 无",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "驱动模块(HD) - HCHD_MemoryAllocateEx",
    "content": "【功能描述】 驱动申请内存(扩展版本) 【备注】 无",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "驱动模块(HD) - HCHD_MemoryFree",
    "content": "【功能描述】 驱动内存释放 【备注】 无",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "驱动模块(HD) - HCHD_MemoryProtect",
    "content": "【功能描述】 驱动修改内存保护属性 【备注】 无",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_29",
    "title": "驱动模块(HD) - HCHD_MemoryHide",
    "content": "【功能描述】 驱动内存隐藏 【备注】 无",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_30",
    "title": "驱动模块(HD) - HCHD_MemoryQuery",
    "content": "【功能描述】 驱动内存查询 【备注】 无",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_31",
    "title": "驱动模块(HD) - HCHD_MemoryFindCode",
    "content": "【功能描述】 驱动通过特征码查找地址 【备注】 无",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_32",
    "title": "驱动模块(HD) - HCHD_GetMainModuleBase",
    "content": "【功能描述】 驱动获取主模块EXE的地址 【备注】 无",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_33",
    "title": "驱动模块(HD) - HCHD_GetModuleBase",
    "content": "【功能描述】 驱动获取指定模块的地址 【备注】 无",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_34",
    "title": "驱动模块(HD) - HCHD_GetModuleCallAddr",
    "content": "【功能描述】 驱动获取指定模块的指定的函数地址 【备注】 无",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_35",
    "title": "驱动模块(HD) - HCHD_ChangeMachineKey",
    "content": "【功能描述】 驱动修改机器码 【备注】 无",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_36",
    "title": "驱动模块(HD) - HCHD_NTNCaptureScreen",
    "content": "【功能描述】 驱动内核反截图 【备注】 无",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_37",
    "title": "驱动模块(HD) - HCHD_NTThreadRunCall",
    "content": "【功能描述】 驱动内存远线程执行函数 【备注】 无",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_38",
    "title": "驱动模块(HD) - HCHD_ClearInject",
    "content": "【功能描述】 驱动清除注入缓存(全局插件缓存,DLL缓存) 【备注】 无",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_39",
    "title": "驱动模块(HD) - HCHD_PcrocessRoot",
    "content": "【功能描述】 进程提权 【备注】 无",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_40",
    "title": "驱动模块(HD) - HCHD_HandleRoot",
    "content": "【功能描述】 进程提权 【备注】 无",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_41",
    "title": "驱动模块(HD) - HCHD_SetMMTrackType",
    "content": "【功能描述】 设置驱动鼠标移动轨迹类型 【备注】 无",
    "url": "/docs/cpp/category_16",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "注入模块(Inject) - HCN_NormalInstallPlugX86",
    "content": "【功能描述】 普通注入插件(X86),不需要安装驱动,这个不是无痕注入,只支持32位的 【备注】 这个不是无痕注入方便操作一些小程序普通注入插件DLL参数->进程PID,进程位数(32)可以在打开进程的经常下安装插件DLL初始化进程环境后调用这个安装插件然后循环等待拿到PID不是驱动级别",
    "url": "/docs/cpp/category_17",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "注入模块(Inject) - HCN_NormalInstallPlugX86Ex",
    "content": "【功能描述】 普通注入插件(X86)),不需要安装驱动,这个不是无痕注入 【备注】 这个不是无痕注入 方便操作一些小程序 用法和HCN_NormalInstallPlugX86一样这个接口只是参数是句柄防止一些进程一次性打开多个这个句柄可以用来指定某个窗口",
    "url": "/docs/cpp/category_17",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "注入模块(Inject) - HCN_NormalInstallPlugX64",
    "content": "【功能描述】 普通注入插件(X64),不需要安装驱动,这个不是无痕注入,只支持64位的 【备注】 这个不是无痕注入方便操作一些小程序普通注入插件DLL参数->进程PID,进程位数(32)可以在打开进程的经常下安装插件DLL初始化进程环境后调用这个安装插件然后循环等待拿到PID不是驱动级别",
    "url": "/docs/cpp/category_17",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "注入模块(Inject) - HCN_NormalInstallPlugX64Ex",
    "content": "【功能描述】 普通注入插件(X64),不需要安装驱动,这个不是无痕注入,只支持64位的 【备注】 这个不是无痕注入 方便操作一些小程序 用法和HCN_NormalInstallPlugX86一样这个接口只是参数是句柄防止一些进程一次性打开多个这个句柄可以用来指定某个窗口",
    "url": "/docs/cpp/category_17",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "注入模块(Inject) - HCHD_NormalInstallPlugX86X64",
    "content": "【功能描述】 安装HD插件(需要预先安装HD驱动),【注入方式1】 【备注】 不是无模块注入可以在打开进程的情况下注入驱动级别的,自动判断目标进程位数",
    "url": "/docs/cpp/category_17",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "注入模块(Inject) - HCHD_NormalInjectX86X64ByFile",
    "content": "【功能描述】 安装指定DLL(需要预先安装HD驱动),【注入方式1】 【备注】 不是无模块注入可以在打开进程的情况下注入驱动级别的,自动判断目标进程位数",
    "url": "/docs/cpp/category_17",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "注入模块(Inject) - HCHD_NormalInstallPlugX86X64Ex",
    "content": "【功能描述】 安装HD插件(需要预先安装HD驱动),【注入方式2】 【备注】 不是无模块注入可以在打开进程的情况下注入驱动级别的,自动判断目标进程位数",
    "url": "/docs/cpp/category_17",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "注入模块(Inject) - HCHD_NormalInjectX86X64ByFileEx",
    "content": "【功能描述】 安装指定DLL(需要预先安装HD驱动),【注入方式2】 【备注】 不是无模块注入可以在打开进程的情况下注入驱动级别的,自动判断目标进程位数",
    "url": "/docs/cpp/category_17",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "盾 - HCHDPP_Protect",
    "content": "【功能描述】 一键保护进程(隐藏等) 【备注】 需要调用HCHD_LoadDrv2传递参数3来安装保护盾HDPP驱动",
    "url": "/docs/cpp/category_18",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "盾 - HCHDPW_OnProtect",
    "content": "【功能描述】 打开窗口保护以及子窗口 【备注】 需要调用HCHD_LoadDrv2传递参数5来安装保护盾HDPW驱动 可以多次指定内部会把指定的保护窗口句柄以及所属子窗口一起保护",
    "url": "/docs/cpp/category_18",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "盾 - HCHDPW_OffProtect",
    "content": "【功能描述】 取消所有窗口保护(指定保护过的) 【备注】 需要调用HCHD_LoadDrv2传递参数5来安装保护盾HDPW驱动 可以取消调用过HCHDPW_OnProtect所有保护的窗口句柄",
    "url": "/docs/cpp/category_18",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "HDVT - HCHDVT_AllocateMemory",
    "content": "【功能描述】 VT驱动申请内存 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/cpp/category_19",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "HDVT - HCHDVT_FreeMemory",
    "content": "【功能描述】 VT驱动释放内存 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/cpp/category_19",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "HDVT - HCHDVT_Read",
    "content": "【功能描述】 VT驱动读内存 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/cpp/category_19",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "HDVT - HCHDVT_Write",
    "content": "【功能描述】 VT驱动写内存 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/cpp/category_19",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "HDVT - HCHDVT_GetModule",
    "content": "【功能描述】 VT驱动获取模块地址 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/cpp/category_19",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "HDVT - HCHDVT_GetModuleFun",
    "content": "【功能描述】 VT驱动获取模块函数地址 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/cpp/category_19",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "HDVT - HCHDVT_Hook",
    "content": "【功能描述】 VT驱动无痕HOOK,过CRC 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/cpp/category_19",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "HDVT - HCHDVT_RemoteCall",
    "content": "【功能描述】 VT驱动远程插入执行 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/cpp/category_19",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "HDVT - HCHDVT_InjectX64",
    "content": "【功能描述】 VT驱动无痕无模块注入X64DLL 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/cpp/category_19",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "HDVT - HCHDVT_InjectX86",
    "content": "【功能描述】 VT驱动无痕无模块注入X86DLL 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/cpp/category_19",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "HDVT - HCHDVT_InstallPlugX64",
    "content": "【功能描述】 VT驱动无痕无模块安装X64插件到目标进程中 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/cpp/category_19",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "HDVT - HCHDVT_InstallPlugX86",
    "content": "【功能描述】 VT驱动无痕无模块安装X86插件到目标进程中 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/cpp/category_19",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "YOLOV(HDYOLOV) - HCYOLO_AddModel",
    "content": "【功能描述】 添加YOLOV(ncnn.bin和ncnn.param)模型文件(从内存中加载模型) 【备注】 ncnn模型bin“＝XXX.ncnn.bin”param“＝XXX.ncnn.param”从内存中加载模型备注:一个进程仅同时支持一个版本的模型 需要调用HCHD_LoadDrv2传递参数4来安装YOLOV组件模块",
    "url": "/docs/cpp/category_20",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "YOLOV(HDYOLOV) - HCYOLO_AddModelFile",
    "content": "【功能描述】 添加YOLOV(ncnn.bin和ncnn.param)模型文件(从文件中加载模型) 【备注】 ncnn模型bin“＝XXX.ncnn.bin”param“＝XXX.ncnn.param”从文件中加载模型备注:一个进程仅同时支持一个版本的模型 需要调用HCHD_LoadDrv2传递参数4来安装YOLOV组件模块",
    "url": "/docs/cpp/category_20",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "YOLOV(HDYOLOV) - HCYOLO_Identify",
    "content": "【功能描述】 添加YOLOV(ncnn.bin和ncnn.param)模型文件(从文件中加载模型),从后台截图缓存识别 【备注】 识别信息调用HCEnv_GetRetJson“获取字符串信息以|”分割,自行切割 %d,%f,%f,%f,%f,%f,%d|%d,%f,%f,%f,%f,%f,%d| 字段含义:类别,X1,Y1,X2,Y2,置信度,耗时|类别,X1,Y1,X2,Y2,置信度,耗时| 需要调用HCHD_LoadDrv2传递参数4来安装YOLOV组件模块",
    "url": "/docs/cpp/category_20",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "YOLOV(HDYOLOV) - HCYOLO_IdentifyByFile",
    "content": "【功能描述】 添加YOLOV(ncnn.bin和ncnn.param)模型文件(从文件中加载模型),从指定图片文件识别 【备注】 识别信息调用HCEnv_GetRetJson“获取字符串信息以|”分割,自行切割 %d,%f,%f,%f,%f,%f,%d|%d,%f,%f,%f,%f,%f,%d| 字段含义:类别,X1,Y1,X2,Y2,置信度,耗时|类别,X1,Y1,X2,Y2,置信度,耗时| 需要调用HCHD_LoadDrv2传递参数4来安装YOLOV组件模块",
    "url": "/docs/cpp/category_20",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "VNC(HDVNC) - HCVnc_Connect",
    "content": "【功能描述】 连接虚拟机 【备注】 对应的虚拟机请开启VNC并设置好端口 两种使用VNC模式特别注意: 1.安装插件(HDEX_InstallPluginVM)的形式连接VNC:支持重连port==0属于重连会检查安装插件时候的PID同时自动获取之前连接过的端口前提是已经连接过卸载的时候内部调用(HCEnv_UnLoadEx) 2.未安装插件(HCVnc_Connect)的形式连接VNC:重连一直都可以不能port==0因为会检查PID未安装插件的PID为0卸载的时候内部调用(HCEnv_UnLoad)",
    "url": "/docs/cpp/category_21",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "VNC(HDVNC) - HCVnc_Close",
    "content": "【功能描述】 关闭连接虚拟机 【备注】 对应的虚拟机请开启VNC并设置好端口 两种使用VNC模式特别注意: 1.安装插件(HDEX_InstallPluginVM)的形式连接VNC:支持重连port==0属于重连会检查安装插件时候的PID同时自动获取之前连接过的端口前提是已经连接过卸载的时候内部调用(HCEnv_UnLoadEx) 2.未安装插件(HCVnc_Connect)的形式连接VNC:重连一直都可以不能port==0因为会检查PID未安装插件的PID为0卸载的时候内部调用(HCEnv_UnLoad)",
    "url": "/docs/cpp/category_21",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "VNC(HDVNC) - HCVnc_MoveTo",
    "content": "【功能描述】 VNC鼠标绝对移动(自带移动轨迹直线波动防检测) 【备注】 无",
    "url": "/docs/cpp/category_21",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "VNC(HDVNC) - HCVnc_MoveToOffset",
    "content": "【功能描述】 VNC鼠标相对移动(自带移动轨迹直线波动防检测) 【备注】 无",
    "url": "/docs/cpp/category_21",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "VNC(HDVNC) - HCVnc_LeftClick",
    "content": "【功能描述】 VNC鼠标左键点击 【备注】 无",
    "url": "/docs/cpp/category_21",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "VNC(HDVNC) - HCVnc_LeftDown",
    "content": "【功能描述】 VNC鼠标左键按下 【备注】 无",
    "url": "/docs/cpp/category_21",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "VNC(HDVNC) - HCVnc_LeftUp",
    "content": "【功能描述】 VNC鼠标左键弹起 【备注】 无",
    "url": "/docs/cpp/category_21",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "VNC(HDVNC) - HCVnc_LeftDoubleClick",
    "content": "【功能描述】 VNC鼠标左键双击 【备注】 无",
    "url": "/docs/cpp/category_21",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "VNC(HDVNC) - HCVnc_RightClick",
    "content": "【功能描述】 VNC鼠标右键点击 【备注】 无",
    "url": "/docs/cpp/category_21",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "VNC(HDVNC) - HCVnc_RightDown",
    "content": "【功能描述】 VNC鼠标右键按下 【备注】 无",
    "url": "/docs/cpp/category_21",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "VNC(HDVNC) - HCVnc_RightUp",
    "content": "【功能描述】 VNC鼠标右键弹起 【备注】 无",
    "url": "/docs/cpp/category_21",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "VNC(HDVNC) - HCVnc_WheelDown",
    "content": "【功能描述】 VNC鼠标滚轮滚下 【备注】 无",
    "url": "/docs/cpp/category_21",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "VNC(HDVNC) - HCVnc_WheelUp",
    "content": "【功能描述】 VNC鼠标滚轮滚上 【备注】 无",
    "url": "/docs/cpp/category_21",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "VNC(HDVNC) - HCVnc_KeyPress",
    "content": "【功能描述】 VNC键盘按键敲击 【备注】 无",
    "url": "/docs/cpp/category_21",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "VNC(HDVNC) - HCVnc_KeyDown",
    "content": "【功能描述】 VNC键盘按键按下 【备注】 无",
    "url": "/docs/cpp/category_21",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "VNC(HDVNC) - HCVnc_KeyUp",
    "content": "【功能描述】 VNC键盘按键弹起 【备注】 无",
    "url": "/docs/cpp/category_21",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "VNC(HDVNC) - HCVnc_KeyPressStr",
    "content": "【功能描述】 VNC键盘连续按键字符串(数字+字母) 【备注】 无",
    "url": "/docs/cpp/category_21",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "VNC(HDVNC) - HCVnc_SendString",
    "content": "【功能描述】 VNC键盘输入字符串(中文+数字+符号+字母) 【备注】 无",
    "url": "/docs/cpp/category_21",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "VNC(HDVNC) - HCVnc_OpenCapture",
    "content": "【功能描述】 开启截图(内部会开启一根线程循环获取虚拟机画面) 【备注】 可以调用HCVnc_CloseCapture来结束截图线程",
    "url": "/docs/cpp/category_21",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "VNC(HDVNC) - HCVnc_CloseCapture",
    "content": "【功能描述】 关闭截图(结束开启截图内部产生的线程) 【备注】 需要多次调用关闭,直到关闭成功,通常情况一次就能关闭成功",
    "url": "/docs/cpp/category_21",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "窗口模块(WIN) - HCWIN_SortWindows",
    "content": "【功能描述】 排序安装过插件的进程 【备注】 安装过插件的经常意思表示: 1.通讯过的窗口序号的对应的进程PID(未被第二次初始化序号HCInject_Init) 2.卸载进程环境不会影响绑定过的进程排序(不能调用始化序号HCInject_Init的前提下,也就是可以重连的情况下) 3.HCInject_Init这个接口一旦调用,就会取消所有关联(意味着不能重连了),从而影响当前绑定的窗口PID,意味着新窗口即将打开",
    "url": "/docs/cpp/category_22",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "窗口模块(WIN) - HCWIN_CamouflageProcess",
    "content": "【功能描述】 伪装进程(防止检查到实际的进程存在) 【备注】 无 案例: 把注入器伪装成了hd.exe",
    "url": "/docs/cpp/category_22",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "窗口模块(WIN) - HCWIN_SetWindowState",
    "content": "【功能描述】 设置或者操作窗口状态 【备注】 无",
    "url": "/docs/cpp/category_22",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "窗口模块(WIN) - HCWIN_SetWindowSize",
    "content": "【功能描述】 设置窗口大小 【备注】 窗口居中会改变窗口位置",
    "url": "/docs/cpp/category_22",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "窗口模块(WIN) - HCWIN_MoveWindow",
    "content": "【功能描述】 移动窗口 【备注】 无",
    "url": "/docs/cpp/category_22",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "窗口模块(WIN) - HCWIN_IsWow64Process",
    "content": "【功能描述】 目标窗口句柄/目标进程是否64位 【备注】 窗口句柄或者PID任意指定一个就行 如果2个都指定则PID用于检测",
    "url": "/docs/cpp/category_22",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "窗口模块(WIN) - HCWIN_GetWindowTitle",
    "content": "【功能描述】 获取目标窗口标题 【备注】 无",
    "url": "/docs/cpp/category_22",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "窗口模块(WIN) - HCWIN_GetWindowThreadProcessId",
    "content": "【功能描述】 获取目标窗口句柄的线程ID 【备注】 无",
    "url": "/docs/cpp/category_22",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "窗口模块(WIN) - HCWIN_GetWindowProcessId",
    "content": "【功能描述】 获取目标窗口句柄的进程ID 【备注】 无",
    "url": "/docs/cpp/category_22",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "窗口模块(WIN) - HCWIN_GetWindowProcessPath",
    "content": "【功能描述】 获取目标窗口句柄的路径 【备注】 无",
    "url": "/docs/cpp/category_22",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "窗口模块(WIN) - HCWIN_GetWindowRect",
    "content": "【功能描述】 获取窗口在屏幕上的位置 【备注】 返回字符串: left|top|rifght|bottom| RECT结构体: typedefstructtagRECT{LONGleft;LONGtop;LONGright;LONGbottom;}RECT,* PRECT;",
    "url": "/docs/cpp/category_22",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "窗口模块(WIN) - HCWIN_GetWindowClass",
    "content": "【功能描述】 获取目标窗口句柄的窗口类名 【备注】 无",
    "url": "/docs/cpp/category_22",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "窗口模块(WIN) - HCWIN_GetWindowState",
    "content": "【功能描述】 获取目标窗口句柄的窗口状态 【备注】 无",
    "url": "/docs/cpp/category_22",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "窗口模块(WIN) - HCWIN_GetSpecialWindow",
    "content": "【功能描述】 获取特殊窗口桌面Shell_TrayWnd 【备注】 无",
    "url": "/docs/cpp/category_22",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "窗口模块(WIN) - HCWIN_GetWindow",
    "content": "【功能描述】 获取目标窗口句柄的关联窗口句柄 【备注】 无",
    "url": "/docs/cpp/category_22",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "窗口模块(WIN) - HCWIN_GetForegroundWindow",
    "content": "【功能描述】 获取顶层活动窗口,可以获取到按键自带插件无法获取到的句柄 【备注】 无",
    "url": "/docs/cpp/category_22",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "窗口模块(WIN) - HCWIN_GetForegroundFocus",
    "content": "【功能描述】 获取顶层活动窗口中具有输入焦点的窗口句柄 【备注】 无",
    "url": "/docs/cpp/category_22",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "窗口模块(WIN) - HCWIN_SetForegroundFocus",
    "content": "【功能描述】 设置输入焦点到窗口 【备注】 无",
    "url": "/docs/cpp/category_22",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "窗口模块(WIN) - HCWIN_GetClientSize",
    "content": "【功能描述】 获取窗口客户区域的宽度和高度 【备注】 返回字符串: w|h|",
    "url": "/docs/cpp/category_22",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "窗口模块(WIN) - HCWIN_GetClientRectInWindow",
    "content": "【功能描述】 获取窗口客户区域在屏幕上的位置 【备注】 返回字符串: left|top|rifght|bottom| RECT结构体: typedefstructtagRECT{LONGleft;LONGtop;LONGright;LONGbottom;}RECT,* PRECT;",
    "url": "/docs/cpp/category_22",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "窗口模块(WIN) - HCWIN_FindWindowEx",
    "content": "【功能描述】 查找符合类名或者标题名的顶层可见窗口,如果指定了parent,则在parent的第一层子窗口中查找 【备注】 无",
    "url": "/docs/cpp/category_22",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "窗口模块(WIN) - HCWIN_FindTopWindow",
    "content": "【功能描述】 查找顶层窗口句柄,父窗口句柄为NULL 【备注】 无",
    "url": "/docs/cpp/category_22",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "窗口模块(WIN) - HCWIN_EnumWindowByProcess",
    "content": "【功能描述】 根据指定进程以及其它条件,枚举系统中符合条件的窗口 【备注】 单PID返回字符串: hwnd 多PID返回字符串:根据创建时间排序过的 hwnd1|hwnd2|hwnd3|",
    "url": "/docs/cpp/category_22",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "窗口模块(WIN) - HCWIN_EnumWindowByProcessId",
    "content": "【功能描述】 根据指定进程pid以及其它条件,枚举系统中符合条件的窗口,可以枚举到按键自带的无法枚举到的窗口 【备注】 单PID返回字符串: hwnd",
    "url": "/docs/cpp/category_22",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "窗口模块(WIN) - HCWIN_EnumProcess",
    "content": "【功能描述】 根据指定进程名,枚举系统中符合条件的进程PID 【备注】 返回字符串: pid1|pid2|pid3|",
    "url": "/docs/cpp/category_22",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "窗口模块(WIN) - HCWIN_EnumWindow",
    "content": "【功能描述】 根据指定条件,枚举系统中符合条件的窗口,可以枚举到按键自带的无法枚举到的窗口 【备注】 多句柄返回字符串: hwnd1|hwnd2|hwnd3|",
    "url": "/docs/cpp/category_22",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "目标[TARGET] - HCTarget_UseVT",
    "content": "【功能描述】 目标进程是否使用VT驱动 【备注】 目标进程是否使用VT驱动需要中控安装和开启VT驱动type:0不使用1使用作用模块包含:后台键鼠模块后台截图模块谷歌内置浏览器模块APIHOOK模块自定义HOOK模块目的:过检测能力强",
    "url": "/docs/cpp/category_23",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "内核(NT) - HCNT_GetWindowProcessId",
    "content": "【功能描述】 获取目标窗口句柄的进程ID(R3层内核版本) 【备注】 可以绕过一些检测,比如NP等",
    "url": "/docs/cpp/category_24",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "内存操作模块(M) - HCM_FindCode",
    "content": "【功能描述】 特征码查找 【备注】 无",
    "url": "/docs/cpp/category_25",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "内存操作模块(M) - HCM_FindCodeEx",
    "content": "【功能描述】 特征码查找(通过指定地址) 【备注】 无",
    "url": "/docs/cpp/category_25",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "内存操作模块(M) - HCM_Read",
    "content": "【功能描述】 读整数数据 【备注】 无",
    "url": "/docs/cpp/category_25",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "内存操作模块(M) - HCM_ReadAddr",
    "content": "【功能描述】 读整数数据 【备注】 无",
    "url": "/docs/cpp/category_25",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "内存操作模块(M) - HCM_Write",
    "content": "【功能描述】 写整数数据 【备注】 无",
    "url": "/docs/cpp/category_25",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "内存操作模块(M) - HCM_WriteAddr",
    "content": "【功能描述】 写整数数据 【备注】 无",
    "url": "/docs/cpp/category_25",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "内存操作模块(M) - HCM_ReadData",
    "content": "【功能描述】 读字节流数据 【备注】 json返回字节流利用HCEnv_GetRetJson拿到返回地址,提取的字节数为读取大小数最大读取100KB字节大小,注意这个限制,否则会报错",
    "url": "/docs/cpp/category_25",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "内存操作模块(M) - HCM_ReadFD",
    "content": "【功能描述】 读单/双浮点数 【备注】 返回结果以float举例:json返回字符串如:{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":1,\\\\\"iError\\\\\":0,\\\\\"value\\\\\":999.000}]}",
    "url": "/docs/cpp/category_25",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "内存操作模块(M) - HCM_ReadDataAddr",
    "content": "【功能描述】 读字节流数据 【备注】 json返回字节流利用HCEnv_GetRetJson拿到返回地址,提取的字节数为读取大小数最大读取100KB字节大小,注意这个限制,否则会报错",
    "url": "/docs/cpp/category_25",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "内存操作模块(M) - HCM_ReadFDAddr",
    "content": "【功能描述】 读单/双浮点数 【备注】 读取大小:4float单浮点8double双浮点以float举例:json返回字符串如:\\\"999.0000\\\"",
    "url": "/docs/cpp/category_25",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "内存操作模块(M) - HCM_WriteData",
    "content": "【功能描述】 写字节流数据 【备注】 最大写入100KB字节大小,注意这个限制,否则会报错json返回值{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":1,\\\\\"iError\\\\\":0}]}",
    "url": "/docs/cpp/category_25",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "内存操作模块(M) - HCM_WriteF",
    "content": "【功能描述】 写单浮点数4字节 【备注】 json返回值{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":1,\\\\\"iError\\\\\":0}]}",
    "url": "/docs/cpp/category_25",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "内存操作模块(M) - HCM_WriteD",
    "content": "【功能描述】 写双浮点数8字节 【备注】 json返回值{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":1,\\\\\"iError\\\\\":0}]}",
    "url": "/docs/cpp/category_25",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "内存操作模块(M) - HCM_WriteDataAddr",
    "content": "【功能描述】 写字节流数据 【备注】 json返回字节流利用HCEnv_GetRetJson拿到返回地址,提取的字节数为读取大小数最大读取100KB字节大小,注意这个限制,否则会报错",
    "url": "/docs/cpp/category_25",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "内存操作模块(M) - HCM_WriteAddrF",
    "content": "【功能描述】 写单浮点数4字节 【备注】 无",
    "url": "/docs/cpp/category_25",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "内存操作模块(M) - HCM_WriteAddrD",
    "content": "【功能描述】 写双浮点数8字节 【备注】 无",
    "url": "/docs/cpp/category_25",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "内存操作模块(M) - HCM_GetModuleBase",
    "content": "【功能描述】 获取模块地址 【备注】 无",
    "url": "/docs/cpp/category_25",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "内存操作模块(M) - HCM_GetModuleFunAddr",
    "content": "【功能描述】 获取模块中的导出接口地址 【备注】 无",
    "url": "/docs/cpp/category_25",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "内存操作模块(M) - HCM_IsBadReadAddr",
    "content": "【功能描述】 判断指定地址是否在目标进程中有效可读 【备注】 无",
    "url": "/docs/cpp/category_25",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "内存操作模块(M) - HCM_AsmCallX86",
    "content": "【功能描述】 执行汇编CALLX86传递汇编代码 【备注】 无",
    "url": "/docs/cpp/category_25",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "内存操作模块(M) - HCM_AsmCallX64",
    "content": "【功能描述】 执行汇编CALLX64传递汇编代码 【备注】 无",
    "url": "/docs/cpp/category_25",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "找图模块(FP) - HCFP_Capture",
    "content": "【功能描述】 截图并保存到文件(.bmp) 【备注】 无",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "找图模块(FP) - HCFP_FindColor",
    "content": "【功能描述】 单点找色 【备注】 注意返回值含义和XY值的提取",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "找图模块(FP) - HCFP_FindColors",
    "content": "【功能描述】 多点找色 【备注】 json: {error:0,ret:[{bRet:1,info:结果}]}\\\" info格式->像素序号,x1,y1|像素序号,x2,y2",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "找图模块(FP) - HCFP_FindColorsOffset",
    "content": "【功能描述】 多点偏移找色 【备注】 json: \\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":%lld,\\\\\"info\\\\\":\\\\\"%s\\\\\"}]}\\\", info:x1,y1|x2,y2|",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "找图模块(FP) - HCFP_CmpColors",
    "content": "【功能描述】 比较颜色 【备注】 无",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "找图模块(FP) - HCFP_CmpColorExs",
    "content": "【功能描述】 多点找色确定某个图像块,指定多个具体点 【备注】 这个接口是给具体的坐标直接比较颜色 而这个HCFP_FindColorsOffset是是先搜索首色然后以首色开始拿到偏移的坐标去比较颜色",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "找图模块(FP) - HCFP_GetColor",
    "content": "【功能描述】 获取某个点的颜色值(从后台) 【备注】 注意返回值含义和值的提取 #pragmapack(1)typedefstructMYA8R8G8B8{BYTEm_a;\\n0x00BYTEm_r;\\n低8位BYTEm_g;\\n中8位BYTEm_b;\\n高8位MYA8R8G8B8(){m_a=0;m_r=0;m_g=0;m_b=0;}}MYA8R8G8B8; #pragmapack() json: “{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"info\\\":\\\"44,29,5B\\\"}]}”A(0x00)rgbr红色:低8位g绿色:中8位b蓝色:高8位RGBFFFFFF",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "找图模块(FP) - HCFP_FindPic",
    "content": "【功能描述】 在客户区范围内找图(仅支持一个图片) 【备注】 注意返回值含义和xy值的提取 {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "找图模块(FP) - HCFP_FindPicEx",
    "content": "【功能描述】 在客户区范围内找图(返回找到其中一张信息) 【备注】 注意返回值含义和xy值的提取 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "找图模块(FP) - HCFP_FindPicExx",
    "content": "【功能描述】 在客户区范围内找图(返回全部找到的信息) 【备注】 注意返回值含义和xy值的提取 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "找图模块(FP) - HCFP_IsDisplayDead",
    "content": "【功能描述】 在客户区范围内检测再规定时间内是否卡图 【备注】 无",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "找图模块(FP) - HCFP_GetRangeCRC",
    "content": "【功能描述】 在客户区范围内获取像素CRC值,用于卡屏校验 【备注】 json: {\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":%lld,\\\\\"info\\\\\":\\\"%X“,\\\\\"time\\\\\":%d}]} info字段是校验值4字节整数",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "找图模块(FP) - HCFP_FindColorByFile",
    "content": "【功能描述】 单点找色(从文件) 【备注】 注意返回值含义和XY值的提取",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "找图模块(FP) - HCFP_FindColorByMem",
    "content": "【功能描述】 单点找色(从内存) 【备注】 注意返回值含义和XY值的提取 图片内存缓冲区自己维护",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "找图模块(FP) - HCFP_FindColorsByFile",
    "content": "【功能描述】 多点找色(从文件) 【备注】 json: {error:0,ret:[{bRet:1,info:结果}]}\\\" info格式->像素序号,x1,y1|像素序号,x2,y2",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "找图模块(FP) - HCFP_FindColorsByMem",
    "content": "【功能描述】 多点找色(从内存) 【备注】 json: {error:0,ret:[{bRet:1,info:结果}]}\\\" info格式->像素序号,x1,y1|像素序号,x2,y2 图片内存缓冲区自己维护",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "找图模块(FP) - HCFP_FindColorsOffsetByFile",
    "content": "【功能描述】 多点偏移找色(从文件) 【备注】 无",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "找图模块(FP) - HCFP_FindColorsOffsetByMem",
    "content": "【功能描述】 多点偏移找色(从内存) 【备注】 图片内存缓冲区自己维护",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "找图模块(FP) - HCFP_FindPicByFile",
    "content": "【功能描述】 在客户区范围内找图(从文件)(仅支持一个图片) 【备注】 注意返回值含义和xy值的提取 {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "找图模块(FP) - HCFP_FindPicByMem",
    "content": "【功能描述】 在客户区范围内找图(从内存)(仅支持一个图片) 【备注】 注意返回值含义和xy值的提取 图片内存缓冲区自己维护 {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "找图模块(FP) - HCFP_FindPicExByFile",
    "content": "【功能描述】 在客户区范围内找图(从文件)(找到一个图片就返回) 【备注】 注意返回值含义和xy值的提取 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "找图模块(FP) - HCFP_FindPicExByMem",
    "content": "【功能描述】 在客户区范围内找图(从内存)(找到一个图片就返回) 【备注】 注意返回值含义和xy值的提取 图片内存缓冲区自己维护 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "找图模块(FP) - HCFP_FindPicExxByFile",
    "content": "【功能描述】 在客户区范围内找图(从文件)(找全部图片信息坐标) 【备注】 注意返回值含义和xy值的提取 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "找图模块(FP) - HCFP_FindPicExxByMem",
    "content": "【功能描述】 在客户区范围内找图(从内存)(找全部图片信息坐标) 【备注】 注意返回值含义和xy值的提取 图片内存缓冲区自己维护 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度|</SPAN> NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "找图模块(FP) - HCFP_FindPicExFromMem",
    "content": "【功能描述】 在客户区范围内找图(子图从内存)(找到一个图片就返回) 【备注】 注意返回值含义和xy值的提取 图片内存缓冲区自己维护 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "找图模块(FP) - HCFP_FindPicExxFromMem",
    "content": "【功能描述】 在客户区范围内找图(子图从内存)(找全部图片信息坐标) 【备注】 注意返回值含义和xy值的提取 图片内存缓冲区自己维护 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "找图模块(FP) - HCFP_CmpColorsByFile",
    "content": "【功能描述】 比较颜色(从文件) 【备注】 无",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "找图模块(FP) - HCFP_CmpColorsByMem",
    "content": "【功能描述】 比较颜色(从内存) 【备注】 图片内存缓冲区自己维护",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_29",
    "title": "找图模块(FP) - HCFP_CmpColorExsByFile",
    "content": "【功能描述】 多点找色确定某个图像块,指定多个具体点,从文件 【备注】 无",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_30",
    "title": "找图模块(FP) - HCFP_CmpColorExsByMem",
    "content": "【功能描述】 多点找色确定某个图像块,指定多个具体点,从内存 【备注】 无",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_31",
    "title": "找图模块(FP) - HCFP_GetColorByFile",
    "content": "【功能描述】 获取颜色(从文件) 【备注】 注意返回值含义和值的提取 #pragmapack(1)typedefstructMYA8R8G8B8{BYTEm_a;\\n0x00BYTEm_r;\\n低8位BYTEm_g;\\n中8位BYTEm_b;\\n高8位MYA8R8G8B8(){m_a=0;m_r=0;m_g=0;m_b=0;}}MYA8R8G8B8; #pragmapack() json: “{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"info\\\":\\\"44,29,5B\\\"}]}”A(0x00)rgbr红色:低8位g绿色:中8位b蓝色:高8位RGBFFFFFF",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_32",
    "title": "找图模块(FP) - HCFP_GetColorByMem",
    "content": "【功能描述】 获取颜色(从内存) 【备注】 图片内存缓冲区自己维护 注意返回值含义和值的提取 #pragmapack(1)typedefstructMYA8R8G8B8{BYTEm_a;\\n0x00BYTEm_r;\\n低8位BYTEm_g;\\n中8位BYTEm_b;\\n高8位MYA8R8G8B8(){m_a=0;m_r=0;m_g=0;m_b=0;}}MYA8R8G8B8; #pragmapack() json: “{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"info\\\":\\\"44,29,5B\\\"}]}”A(0x00)rgbr红色:低8位g绿色:中8位b蓝色:高8位RGBFFFFFF",
    "url": "/docs/cpp/category_26",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "找字模块(FS) - HCFS_SetDictFile",
    "content": "【功能描述】 设置当前像素识字的字库文件(为了提高识别效率,不支持多线程) 建议在登录回调中最开始初始化调用 其他线程需要那个序号就切换那个序号HCFS_SwitchCurDictFile 调用一次会给所有窗口序号添加当前设置的字库文件 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 这个不支持多线程,请在开启前首先设置好 类型提前添加字库,需要在当前线程使用字库必须调用HCFS_SwitchCurDictFile切换字库 字库文件绑定窗口序号字库序号绑定线程窗口序号支持多线程多进程来操作目标进程可以在多线程中通过窗口序号拿到所有绑定的字库文件信息至于在多线程中要使用的是哪一个字库文件？取决于当前线程所绑定的字库序号 总结:1.所有字库文件只需要和窗口序号关联一次就行\\n2.在多线程中需要使用到那个字库序号就切换就行多线程有自己的字库序号副本互不影响各自切换",
    "url": "/docs/cpp/category_27",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "找字模块(FS) - HCFS_SetDictFileEx",
    "content": "【功能描述】 设置当前像素识字的字库文件(为了提高识别效率,不支持多线程) 请在主线程中最开始初始化调用 其他线程需要那个序号就切换那个序号HCFS_SwitchCurDictFile 调用一次会给所有窗口序号添加当前设置的字库文件 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 这个不支持多线程,请在开启前首先设置好 类型提前添加字库,需要在当前线程使用字库必须调用HCFS_SwitchCurDictFile切换字库",
    "url": "/docs/cpp/category_27",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "找字模块(FS) - HCFS_SetDictFileExx",
    "content": "【功能描述】 设置当前像素识字的字库文件(为了提高识别效率,不支持多线程) 建议在登录回调中最开始初始化调用 其他线程需要那个序号就切换那个序号HCFS_SwitchCurDictFile 调用一次会给所有窗口序号添加当前设置的字库文件 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 这个不支持多线程,请在开启前首先设置好 类型提前添加字库,需要在当前线程使用字库必须调用HCFS_SwitchCurDictFile切换字库 字库文件绑定窗口序号字库序号绑定线程窗口序号支持多线程多进程来操作目标进程可以在多线程中通过窗口序号拿到所有绑定的字库文件信息至于在多线程中要使用的是哪一个字库文件？取决于当前线程所绑定的字库序号 总结:1.所有字库文件只需要和窗口序号关联一次就行\\n2.在多线程中需要使用到那个字库序号就切换就行多线程有自己的字库序号副本互不影响各自切换",
    "url": "/docs/cpp/category_27",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "找字模块(FS) - HCFS_SwitchCurDictFile",
    "content": "【功能描述】 切换当前像素识字的字库文件(支持多线程) 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好 运行起来了就不能设置否则冲突 切换字库文件可以在运行的时候切换,而HCFS_SetDictFile设置字库文件必须在初始化阶段中进行！ 对于多线程操作同一个窗口序号的时候,切换字库支持多线程操作,操作前请先在主执行线程中设置字库就行其他副线程(包含主线程)就只需要切换就行",
    "url": "/docs/cpp/category_27",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "找字模块(FS) - HCFS_GetCurDictInfo",
    "content": "【功能描述】 获取当前线程的加载后的字库文件信息(支持多线程) 【备注】 json: \\\"{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":ret,\\\"info\\\":info}]}\\\" info:窗口索引,当前字库索引,加载了字库文件数量,(加载的字库序号,对应的字条数目)|...如:info:0,1,3,(1,55)|(2,55)|(3,55)| 注意返回的是当前线程的字库信息",
    "url": "/docs/cpp/category_27",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "找字模块(FS) - HCFS_GetCurDictIndex",
    "content": "【功能描述】 获取当前线程绑定的字库索引(支持多线程) 【备注】 返回大于等于0的值是当前线程绑定的字库索引",
    "url": "/docs/cpp/category_27",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "找字模块(FS) - HCFS_FindStr",
    "content": "【功能描述】 在客户区范围内找字(只支持单字符串并且是单字符字库) 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->0,x1,y1,w1,h1,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/cpp/category_27",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "找字模块(FS) - HCFS_FindStrEx",
    "content": "【功能描述】 在客户区范围内找字(支持多字符串并且是单字符字库) 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/cpp/category_27",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "找字模块(FS) - HCFS_FindStrExx",
    "content": "【功能描述】 在客户区范围内找字(支持多字符串并且是单字符字库)找到一个就返回 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/cpp/category_27",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "找字模块(FS) - HCFS_FindStrMutilVPointsByFile",
    "content": "【功能描述】 单字符串找(原图从文件) 字库是字符串 例如:洛阳多行返回多个坐标一行只找一列(一次) 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->0,x1,y1,w,h,sim|0,x2,y2,w,h,sim|0,x3,y2,w,h,sim|... 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/cpp/category_27",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "找字模块(FS) - HCFS_FindStrMutilVPointsByMem",
    "content": "【功能描述】 单字符串找(原图从内存) 字库是字符串 例如:洛阳多行返回多个坐标一行只找一列(一次) 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->0,x1,y1,w,h,sim|0,x2,y2,w,h,sim|0,x3,y2,w,h,sim|... 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/cpp/category_27",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "找字模块(FS) - HCFS_FindStrMutilHVPointsByFile",
    "content": "【功能描述】 单字符串找(原图从文件) 字库是字符串 例如:洛阳多行多列返回多个坐标 一行找多列(多次)找多行 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->0,x1,y1,w,h,sim|0,x2,y2,w,h,sim|0,x3,y2,w,h,sim|... 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/cpp/category_27",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "找字模块(FS) - HCFS_FindStrMutilHVPointsByMem",
    "content": "【功能描述】 单字符串找(原图从内存) 字库是字符串 例如:洛阳多行多列返回多个坐标 一行找多列(多次)找多行 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->0,x1,y1,w,h,sim|0,x2,y2,w,h,sim|0,x3,y2,w,h,sim|... 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/cpp/category_27",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "找字模块(FS) - HCFS_FindStrMutilsAuto",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到一个就返回 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号(0开始),x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/cpp/category_27",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "找字模块(FS) - HCFS_FindStrMutilsAutoByFile",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到一个就返回 可以通过指定图片来获取截图数据其他功能和HCFS_FindStrMutilsAuto一致 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/cpp/category_27",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "找字模块(FS) - HCFS_FindStrMutilsAutoByMem",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到一个就返回 可以通过指定图片来获取截图数据其他功能和HCFS_FindStrMutilsAuto一致 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/cpp/category_27",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "找字模块(FS) - HCFS_FindStrMutilsAutoEx",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到全部或仅仅找一个 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号(0开始),x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/cpp/category_27",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "找字模块(FS) - HCFS_FindStrMutilsAutoByFileEx",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到全部或仅仅找一个 可以通过指定图片来获取截图数据其他功能和HCFS_FindStrMutilsAuto一致 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/cpp/category_27",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "找字模块(FS) - HCFS_FindStrMutilsAutoByMemEx",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到全部或仅仅找一个 可以通过指定图片来获取截图数据其他功能和HCFS_FindStrMutilsAuto一致 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/cpp/category_27",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "找字模块(FS) - HCFS_FindStrMutil",
    "content": "【功能描述】 单字符串找字库是字符串例如:洛阳 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 在客户区范围内找字符串(只支持单字符串),同时字库是字符串 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/cpp/category_27",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "找字模块(FS) - HCFS_FindStrMutilsEx",
    "content": "【功能描述】 多字符串找字库是字符串例如:洛阳|北京|广州 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 在客户区范围内找字符串(只支持单字符串),同时字库是字符串 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/cpp/category_27",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "找字模块(FS) - HCFS_FindStrMutilsExx",
    "content": "【功能描述】 多字符串找字库是字符串例如:洛阳|北京|广州找到一个就返回 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 在客户区范围内找字符串(只支持单字符串),同时字库是字符串 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/cpp/category_27",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "找字模块(FS) - HCFS_Ocr",
    "content": "【功能描述】 在客户区范围内识别字 字库是字符串或单字 拼接+字符串都支持 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"info\\\":BBB} AAA:0未找到1找到 BBB:json数组如:[{\\\"x\\\":0,\\\"y\\\":0,\\\"text\\\":“NULL”}]表示未找到类似这样[{\\\"x\\\":123,\\\"y\\\":456,\\\"text\\\":\\\"洛阳\\\"},{\\\"x\\\":654,\\\"y\\\":987,\\\"text\\\":\\\"洱海\\\"}]表示找到了 格式化字符串: 未找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":[{\\\\\"x\\\\\":0,\\\\\"y\\\\\":0,\\\\\"text\\\\\":\\\\\"NULL\\\\\"}]}\\\" 找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":%s}\\\" 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/cpp/category_27",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "找字模块(FS) - HCFS_OcrByFile",
    "content": "【功能描述】 在客户区范围内识别字 字库是字符串或单字 拼接+字符串都支持 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"info\\\":BBB} AAA:0未找到1找到 BBB:json数组如:[{\\\"x\\\":0,\\\"y\\\":0,\\\"text\\\":“NULL”}]表示未找到类似这样[{\\\"x\\\":123,\\\"y\\\":456,\\\"text\\\":\\\"洛阳\\\"},{\\\"x\\\":654,\\\"y\\\":987,\\\"text\\\":\\\"洱海\\\"}]表示找到了 格式化字符串: 未找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":[{\\\\\"x\\\\\":0,\\\\\"y\\\\\":0,\\\\\"text\\\\\":\\\\\"NULL\\\\\"}]}\\\" 找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":%s}\\\" 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/cpp/category_27",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "找字模块(FS) - HCFS_OcrByMem",
    "content": "【功能描述】 在客户区范围内识别字 字库是字符串或单字 拼接+字符串都支持 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"info\\\":BBB} AAA:0未找到1找到 BBB:json数组如:[{\\\"x\\\":0,\\\"y\\\":0,\\\"text\\\":“NULL”}]表示未找到类似这样[{\\\"x\\\":123,\\\"y\\\":456,\\\"text\\\":\\\"洛阳\\\"},{\\\"x\\\":654,\\\"y\\\":987,\\\"text\\\":\\\"洱海\\\"}]表示找到了 格式化字符串: 未找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":[{\\\\\"x\\\\\":0,\\\\\"y\\\\\":0,\\\\\"text\\\\\":\\\\\"NULL\\\\\"}]}\\\" 找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":%s}\\\" 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/cpp/category_27",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "找字模块(FS) - HCFS_SetCharSpaceHV",
    "content": "【功能描述】 设置间距(在识别拼接字和OCR中尤其重要)-丢弃改为每个接口单独设置 【备注】 1.当相邻的字/数字/字母/符号,在间距范围内,才被认为是一个整体(字符串) 2.不明白什么是水平垂直间距请前往查看水平垂直间距解析和案例分析 3.这种对于数字和符号,尤其重要",
    "url": "/docs/cpp/category_27",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "找字模块(FS) - HCFS_IsOne11",
    "content": "【功能描述】 设置11行中(同宽)矩形内,是否只有一个字-丢弃改为每个接口单独设置 【备注】 1.如果打开识别速度快,关闭速度慢一点(不影响多少) 2.如果这个i这个字,由2个字符组成'.'和'|' 3.如果打开表示i是一个整体识别,不能拆开识别 4.如果关闭表示i可以拆分成2个字符分别识别",
    "url": "/docs/cpp/category_27",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "找字模块(FS) - HCFS_GroundRate",
    "content": "【功能描述】 设置字周围一个像素上下左右的像素占比-丢弃改为每个接口单独设置 【备注】 1.对于那种连体字的情况下占比越高,可能识别的不准确2.这个相当于一个容错率占比3.返回当前设置后的占比4.默认0.1 5.这种对于数字和符号,尤其重要,可以准确的提高识别率,越小的字效果越好",
    "url": "/docs/cpp/category_27",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "智能识图模块(FI) - HCFI_FindImage",
    "content": "【功能描述】 识图(返回的是圆型的圆点) 【备注】 图片越多耗时多长 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x\\\":XX,\\\"y\\\":YY},{\\\"x\\\":XX,\\\"y\\\":YY},{\\\"x\\\":XX,\\\"y\\\":YY}],\\\"time\\\":ZZZ} 每张图会有1个坐标点(圆点) AAA:表示找到几个XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置",
    "url": "/docs/cpp/category_28",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "智能识图模块(FI) - HCFI_FindImageEx",
    "content": "【功能描述】 识图(返回的是矩形左上角和右下角) 【备注】 图片越多耗时多长 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY},{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY}],\\\"time\\\":ZZZ} 每张图会有2个坐标点(左上角+右下角) AAA:表示找到几个XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置",
    "url": "/docs/cpp/category_28",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "智能识图模块(FI) - HCFI_FindRangeImage",
    "content": "【功能描述】 范围内识图 【备注】 图片越多耗时多长 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x\\\":XX,\\\"y\\\":YY},{\\\"x\\\":XX,\\\"y\\\":YY},{\\\"x\\\":XX,\\\"y\\\":YY}]}type==0</STRONG> 每张图会有1个坐标点(圆点) {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY},{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY}]}type==1</STRONG> 每张图会有2个坐标点(左上角+右下角) AAA:表示找到几个XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置",
    "url": "/docs/cpp/category_28",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "智能识图模块(FI) - HCFI_FindImageByFile",
    "content": "【功能描述】 从文件中加载截图数据并识图(返回的是矩形左上角和右下角) 【备注】 图片越多耗时多长 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY},{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY}],\\\"time\\\":ZZZ} 每张图会有2个坐标点(左上角+右下角) AAA:表示找到几个XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0max:置信度time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置",
    "url": "/docs/cpp/category_28",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "智能识图模块(FI) - HCFI_FindImageByMem",
    "content": "【功能描述】 从内存中加载截图数据并识图(返回的是矩形左上角和右下角) 【备注】 图片越多耗时多长 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"i\\\":index,\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY\\\"max\\\":0.0f},{\\\"i\\\":index,\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY\\\"max\\\":0.0f}]}每张图对应会有图片索引+2个坐标点(左上角+右下角)+置信度(max)index:图片集合指定的索引(0开始)如:\\\"洛阳.bmp|洱海.bmp|\\\"(洛阳.bmp)索引就是0AAA:表示找到几个(真正的找到数量)XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0max:置信度time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置",
    "url": "/docs/cpp/category_28",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "智能识字模块(RC) - HCRC_InitRCServer",
    "content": "【功能描述】 初始化识别服务器 【备注】 无",
    "url": "/docs/cpp/category_29",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "智能识字模块(RC) - HCRC_OpenRCServer",
    "content": "【功能描述】 打开识别服务器 【备注】 无",
    "url": "/docs/cpp/category_29",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "智能识字模块(RC) - HCRC_StopRCServer",
    "content": "【功能描述】 停止识别服务器 【备注】 无",
    "url": "/docs/cpp/category_29",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "智能识字模块(RC) - HCRC_SwitchRCServer",
    "content": "【功能描述】 切换识字服务:主要针对语言字体文件的切换 【备注】 内部实现原理:先停止之前的服务(HCRC_StopRCServer)重新初始化(HCRC_InitRCServer)然后重新开启(HCRC_OpenRCServer)",
    "url": "/docs/cpp/category_29",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "智能识字模块(RC) - HCRC_RecognitionChar",
    "content": "【功能描述】 智能识字 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"image\\\":XXX},{\\\"image\\\":YYY}],\\\"time\\\":ZZZ}XXX->图片识别后的结果(字符串)每一个{\\\"image\\\":XXX}是一个识别的字符串,对应<参数:图片名字集合>索引 XXX:格式 \\\"%s,%0.2f,%d,%d,%d,%d|\\\" 字符串1,置信度1,x1,y1,x2,y2|字符串2,置信度2,x1,y1,x2,y2|...|",
    "url": "/docs/cpp/category_29",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "智能识字模块(RC) - HCRC_RecognitionCharEx",
    "content": "【功能描述】 指定范围内智能识字 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"image\\\":XXX},{\\\"image\\\":YYY}],\\\"time\\\":ZZZ}XXX->图片识别后的结果(字符串)每一个{\\\"image\\\":XXX}是一个识别的字符串,对应<参数:图片名字集合>索引 XXX:格式 \\\"%s,%0.2f,%d,%d,%d,%d|\\\" 字符串1,置信度1,x1,y1,x2,y2|字符串2,置信度2,x1,y1,x2,y2|...|",
    "url": "/docs/cpp/category_29",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "智能识字模块(RC) - HCRC_RecognitionCharByMemory",
    "content": "【功能描述】 从内存图片数据中范围内智能识字 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"image\\\":XXX},{\\\"image\\\":YYY}],\\\"time\\\":ZZZ}XXX->图片识别后的结果(字符串)每一个{\\\"image\\\":XXX}是一个识别的字符串,对应<参数:图片名字集合>索引. XXX:格式 \\\"%s,%0.2f,%d,%d,%d,%d|\\\" 字符串1,置信度1,x1,y1,x2,y2|字符串2,置信度2,x1,y1,x2,y2|...|",
    "url": "/docs/cpp/category_29",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "后台键鼠(MKB) - HCMKB_Bind",
    "content": "【功能描述】 绑定窗口 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/cpp/category_30",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "后台键鼠(MKB) - HCMKB_BindEx",
    "content": "【功能描述】 绑定窗口 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/cpp/category_30",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "后台键鼠(MKB) - HCMKB_BindModeEx",
    "content": "【功能描述】 绑定窗口(扩展接口) 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/cpp/category_30",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "后台键鼠(MKB) - HCMKB_SwitchBind",
    "content": "【功能描述】 切换绑定到所属子窗口的句柄上 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/cpp/category_30",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "后台键鼠(MKB) - HCMKB_SwitchBindEx",
    "content": "【功能描述】 切换绑定到所属子窗口的句柄上 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/cpp/category_30",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "后台键鼠(MKB) - HCMKB_SwitchBindModeEx",
    "content": "【功能描述】 切换绑定窗口(扩展接口) 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/cpp/category_30",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "后台键鼠(MKB) - HCMKB_PauseBind",
    "content": "【功能描述】 暂停/恢复后台绑定 【备注】 无",
    "url": "/docs/cpp/category_30",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "后台键鼠(MKB) - HCMKB_UnBind",
    "content": "【功能描述】 解绑窗口 【备注】 无",
    "url": "/docs/cpp/category_30",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "后台键鼠(MKB) - HCMKB_RightDoubleClick",
    "content": "【功能描述】 鼠标右键双击 【备注】 无",
    "url": "/docs/cpp/category_30",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "后台键鼠(MKB) - HCMKB_KeyPress(A/W)",
    "content": "【功能描述】 连续按键输入字符串(连续单个按键) 【备注】 无",
    "url": "/docs/cpp/category_30",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "后台键鼠(MKB) - HCMKB_SendString(2)",
    "content": "【功能描述】 发送Ascii字符串 【备注】 无",
    "url": "/docs/cpp/category_30",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "后台键鼠(MKB) - HCMKB_SendPasteEx",
    "content": "【功能描述】 发送剪切板字符串内容到窗口 【备注】 无",
    "url": "/docs/cpp/category_30",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "后台键鼠(MKB) - HCMKB_SendRoundNamePaste",
    "content": "【功能描述】 发送随机名字,从2个文本(hf.txt和he.txt)中各获取一个字 【备注】 hf.txt和he.txt放在程序(.exe)同目录下,文件编码为utf-8随机获取一个姓和一个名组成一个词",
    "url": "/docs/cpp/category_30",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "后台键鼠(MKB) - HCMKB_SetClipboard",
    "content": "【功能描述】 设置剪切板字符串 【备注】 该接口无序窗口序号",
    "url": "/docs/cpp/category_30",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "后台键鼠(MKB) - HCMKB_GetClipboard",
    "content": "【功能描述】 获取剪切板字符串 【备注】 无",
    "url": "/docs/cpp/category_30",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "后台键鼠(MKB) - HCMKB_SendStringF",
    "content": "【功能描述】 发送Ascii字符串,部分游戏需要激活窗口！（可以不用通讯调用） 【备注】 注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！",
    "url": "/docs/cpp/category_30",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "后台键鼠(MKB) - HCMKB_SendKeyDownF",
    "content": "【功能描述】 按下发送键码到指定窗口（可以不用通讯调用） 【备注】 注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！",
    "url": "/docs/cpp/category_30",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "后台键鼠(MKB) - HCMKB_SendKeyUpF",
    "content": "【功能描述】 弹起发送键码到指定窗口（可以不用通讯调用） 【备注】 注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！",
    "url": "/docs/cpp/category_30",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "后台键鼠(MKB) - HCMKB_SendKeyPressF",
    "content": "【功能描述】 按下并弹起发送键码到指定窗口（可以不用通讯调用） 【备注】 注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！",
    "url": "/docs/cpp/category_30",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "后台键鼠(MKB) - HCMKB_SendDeleteTextF",
    "content": "【功能描述】 可以清空子窗口的内容（可以不用通讯调用） 【备注】 注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！",
    "url": "/docs/cpp/category_30",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "后台键鼠(MKB) - HCMKB_SetRealMouse",
    "content": "【功能描述】 设置鼠标轨迹参数(当移动鼠标开启轨迹生效) 【备注】 无",
    "url": "/docs/cpp/category_30",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "后台键鼠(MKB) - HCMKB_GetMousePos",
    "content": "【功能描述】 获取后台/前台鼠标位置 【备注】 无",
    "url": "/docs/cpp/category_30",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "后台截图模块(CS) - HCCS_SetType",
    "content": "【功能描述】 打开截图 【备注】 无",
    "url": "/docs/cpp/category_31",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "后台截图模块(CS) - HCCS_OpenCS",
    "content": "【功能描述】 打开截图 【备注】 无",
    "url": "/docs/cpp/category_31",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "后台截图模块(CS) - HCCS_OpenCSEx",
    "content": "【功能描述】 打开截图(和HCCS_CloseCSEx是一组接口) 【备注】 1.前台和后台模式,可以随意切换不用调用关闭HCCS_CloseCSEx再开启！！！！！内置处理了 截图模式: typedefenumCAPTURETYPE{\\n无CAPTURETYPE_NONE=0,\\n这个不操作\\nGDICAPTURETYPE_GDI=1,\\n这个直接客户端操作对于浏览器(谷歌等)记得把图像加速关掉\\n32CAPTURETYPE_D3D9_1_x86=2,\\nUECAPTURETYPE_D3D9_2_x86=3,\\nU3DCAPTURETYPE_D3D9_3_x86=4,\\nRGBX\\nD3D11CAPTURETYPE_D3D11_1_x86=5,\\nUECAPTURETYPE_D3D11_2_x86=6,\\nU3DCAPTURETYPE_D3D11_3_x86=7,\\nRGBXD3D11游戏通用\\nD3D12CAPTURETYPE_D3D12_1_x86=70,\\nUECAPTURETYPE_D3D12_2_x86=71,\\nU3DCAPTURETYPE_D3D12_3_x86=72,\\nRGBXD3D12游戏通用\\n64\\nD3D9CAPTURETYPE_D3D9_1_x64=8,\\nUECAPTURETYPE_D3D9_2_x64=9,\\nU3DCAPTURETYPE_D3D9_3_x64=10,\\nRGBXD3D9游戏通用\\nD3D11CAPTURETYPE_D3D11_1_x64=11,\\nUECAPTURETYPE_D3D11_2_x64=12,\\nU3DCAPTURETYPE_D3D11_3_x64=13,\\nRGBXD3D11游戏通用\\nD3D12CAPTURETYPE_D3D12_1_x64=14,\\nUED3D12CAPTURETYPE_D3D12_2_x64=15,\\nU3DD3D12CAPTURETYPE_D3D12_3_x64=16,\\nRGBXD3D12D3D12游戏通用\\n32CAPTURETYPE_OPENGL_1_x86=20,\\n占位CAPTURETYPE_OPENGL_2_x86=21,\\nGL_BGRA模拟器CAPTURETYPE_OPENGL_3_x86=22,\\nGL_BGRA模拟器\\n64CAPTURETYPE_OPENGL_1_x64=30,\\n占位CAPTURETYPE_OPENGL_2_x64=31,\\nGL_BGRA模拟器CAPTURETYPE_OPENGL_3_x64=32,\\nGL_BGRA模拟器\\n定制CAPTURETYPE_D3D9_Steam_x86=40,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用CAPTURETYPE_D3D11_Steam_x86=41,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用CAPTURETYPE_D3D9_Steam_x64=42,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用CAPTURETYPE_D3D11_Steam_x64=43,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用\\nNC模式CAPTURETYPE_D3D9_NC_x86=44,\\nNC游戏CAPTURETYPE_D3D11_NC_x86=45,\\nNC游戏CAPTURETYPE_D3D9_NC_x64=46,\\nNC游戏CAPTURETYPE_D3D11_NC_x64=47,\\nNC游戏\\nCAPTURETYPE_NORMAL=50,\\n这个前台模式\\nCAPTURETYPE_D3D12_Steam_x86=60,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用CAPTURETYPE_D3D12_Steam_x64=61,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用\\nCAPTURETYPE_D3D12_NC_x86=62,\\nNC游戏D3D12CAPTURETYPE_D3D12_NC_x64=63,\\nNC游戏D3D12 }CAPTURETYPE;额外说明:",
    "url": "/docs/cpp/category_31",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "后台截图模块(CS) - HCCS_CloseCS",
    "content": "【功能描述】 关闭截图 【备注】 无",
    "url": "/docs/cpp/category_31",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "后台截图模块(CS) - HCCS_CloseCSEx",
    "content": "【功能描述】 关闭截图(和HCCS_OpenCSEx是一组接口) 【备注】 无",
    "url": "/docs/cpp/category_31",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "后台截图模块(CS) - HCCS_GetCSData",
    "content": "【功能描述】 获取截图数据 【备注】 json:{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":AAA,\\\"addr\\\":XXX,\\\"eleSize\\\":YYY,\\\"len\\\":ZZZ,\\\"w\\\":1222,\\\"h\\\":699}]}AAA:调用接口返回值 XXX:图片二进制数据首地址(不是bmp数据是MYA8R8G8B8结构体缓冲区首地址)可以拿到这个缓冲区自行转换各种图片格式数据 YYY:MYA8R8G8B8结构体数量 ZZZ:字节大小(图片数据=MYA8R8G8B8* YYY) w:宽度 h:高度注意:拿到图片地址数据XXX使用后记得释放(HCCS_FreeArray) 图片数据地址不使用了记得释放掉HCCS_FreeMemPool调用此接口",
    "url": "/docs/cpp/category_31",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "后台截图模块(CS) - HCCS_OpenCSFinder",
    "content": "【功能描述】 打开查看器 【备注】 无",
    "url": "/docs/cpp/category_31",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "后台截图模块(CS) - HCCS_CloseCSFinder",
    "content": "【功能描述】 关闭查看器 【备注】 无",
    "url": "/docs/cpp/category_31",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "后台截图模块(CS) - HCCS_CaptureBmp",
    "content": "【功能描述】 截图数据并保存为BMP图片文件 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":AAA,\\\"w\\\":1222,\\\"h\\\":699}]}",
    "url": "/docs/cpp/category_31",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "后台截图模块(CS) - HCCS_GetCaptureBmpData",
    "content": "【功能描述】 获取当前截图后的BMP数据 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"addr\\\":XXX,\\\"eleSize\\\":YYY,\\\"allLen\\\":ZZZ,\\\"w\\\":1222,\\\"h\\\":699}]} XXX是BMP图片二进制数据首地址 YYY是MYA8R8G8B8结构体数量 ZZZ:BMP图片数据大小(真实的BMP图片数据:54+像素数据) 图片数据地址不使用了记得释放掉HCCS_FreeMemPool调用此接口",
    "url": "/docs/cpp/category_31",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "后台截图模块(CS) - HCCS_GetCaptureBmpRangeData",
    "content": "【功能描述】 获取当前截图后的BMP数据(指定范围) 【备注】 如果想获取全图数据:xywh可以分别为-1也可以直接调用HCCS_GetCaptureBmpData json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"addr\\\":XXX,\\\"eleSize\\\":YYY,\\\"allLen\\\":ZZZ,\\\"w\\\":1222,\\\"h\\\":699}]} XXX是BMP图片二进制数据首地址 YYY是MYA8R8G8B8结构体数量 ZZZ:BMP图片数据大小(真实的BMP图片数据:54+像素数据) 图片数据地址不使用了记得释放掉HCCS_FreeMemPool调用此接口",
    "url": "/docs/cpp/category_31",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "后台截图模块(CS) - HCCS_FreeArray",
    "content": "【功能描述】 释放内存 【备注】 释放内存该内存是使用new[]申请的内存",
    "url": "/docs/cpp/category_31",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "后台截图模块(CS) - HCCS_FreeMemPool",
    "content": "【功能描述】 释放内存,内存池操作释放内存 【备注】 我们获取了截图数据不需要了都需要调用这个接口来释放掉,防止内存泄露 注意:该接口是释放【使用内存池申请的内存地址】的地址,与HCCS_FreeArray不一样 那个窗口序号返回申请的地址就用那个窗口序号释放",
    "url": "/docs/cpp/category_31",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "后台截图模块(CS) - HCCS_IsCaptureValid",
    "content": "【功能描述】 后台截图缓存获取失败判断接口 【备注】 无",
    "url": "/docs/cpp/category_31",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "黑屏优化模块 - HC_OpenBS",
    "content": "【功能描述】 打开黑屏 【备注】 无",
    "url": "/docs/cpp/category_32",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "黑屏优化模块 - HC_SetBs",
    "content": "【功能描述】 设置模型序号的过滤范围 【备注】 可以适当调整最小或者最大的序号来过滤模型,来实现黑屏,同时还支持图色识别",
    "url": "/docs/cpp/category_32",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "黑屏优化模块 - HC_CloseBS",
    "content": "【功能描述】 关闭黑屏 【备注】 无",
    "url": "/docs/cpp/category_32",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "CPU优化模块() - HC_OpenCPU",
    "content": "【功能描述】 打开CPU优化 【备注】 无",
    "url": "/docs/cpp/category_33",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "CPU优化模块() - HC_SetFPS",
    "content": "【功能描述】 设置帧数(绑定dx.public.down.cpu后台属性有效) 【备注】 并非实际的帧数,这里只是一个参考值,内置默认为30 动态优化调试帧数的(自动计算帧率)",
    "url": "/docs/cpp/category_33",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "CPU优化模块() - HC_SetCpuDwonMs",
    "content": "【功能描述】 设置帧数(绑定dx.public.down.cpu后台属性有效) 【备注】 如果调用了HC_HookMainThread挂接主线程,同时又调用了本接口,那么会动态(根据实际动态计算正数来)修改主线程调用CALL的检查频率",
    "url": "/docs/cpp/category_33",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "CPU优化模块() - HC_CloseCPU",
    "content": "【功能描述】 关闭CPU优化 【备注】 无",
    "url": "/docs/cpp/category_33",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "系统模块(SYS) - HCSYS_CheckFontSmooth",
    "content": "【功能描述】 检查字体是否开启字体平滑 【备注】 无",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "系统模块(SYS) - HCSYS_CloseFontSmooth",
    "content": "【功能描述】 关闭字体平滑 【备注】 无",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "系统模块(SYS) - HCSYS_OpenFontSmooth",
    "content": "【功能描述】 打开字体平滑 【备注】 无",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "系统模块(SYS) - HCSYS_CheckUAC",
    "content": "【功能描述】 检查当前系统是否开启了UAC(用户控制) 【备注】 无",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "系统模块(SYS) - HCSYS_SetUAC",
    "content": "【功能描述】 设置当前系统的UAC(用户控制)开关 【备注】 无",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "系统模块(SYS) - HCSYS_Delay",
    "content": "【功能描述】 延迟 【备注】 不会堵塞主线程",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "系统模块(SYS) - HCSYS_DelayEx",
    "content": "【功能描述】 在随机范围内延迟 【备注】 不会堵塞主线程",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "系统模块(SYS) - HCSYS_ExitSys",
    "content": "【功能描述】 关闭系统 【备注】 无",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "系统模块(SYS) - HCSYS_CloseScreenProtect",
    "content": "【功能描述】 关闭屏保 【备注】 无",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "系统模块(SYS) - HCSYS_ClosePowerManager",
    "content": "【功能描述】 关闭电源管理,不进入睡眠 【备注】 无",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "系统模块(SYS) - HCSYS_ResumeSystemModify",
    "content": "【功能描述】 恢复系统上次的修改 【备注】 如果中控软件运行的时候修改了系统设置 那么这个最好在中控程序退出的时候调用",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "系统模块(SYS) - HCSYS_DisableCloseDisplayAndSleep",
    "content": "【功能描述】 设置当前的电源设置(禁止关闭显示器,禁止关闭硬盘,禁止睡眠和待机) 【备注】 无",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "系统模块(SYS) - HCSYS_GetDir",
    "content": "【功能描述】 获取路径 【备注】 无",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "系统模块(SYS) - HCSYS_GetCpuType",
    "content": "【功能描述】 获取CPU类型 【备注】 无",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "系统模块(SYS) - HCSYS_GetCpuUsage",
    "content": "【功能描述】 获取CPU使用率 【备注】 无",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "系统模块(SYS) - HCSYS_GetCpuUsageByPid",
    "content": "【功能描述】 获取指定进程的CPU使用率 【备注】 返回值是整数百分比 返回字符串字符串是(含小数百分比)",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "系统模块(SYS) - HCSYS_GetMemoryUsageByPid",
    "content": "【功能描述】 获取指定进程的内存使用率 【备注】 无",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "系统模块(SYS) - HCSYS_GetDiskSerial",
    "content": "【功能描述】 获取磁盘序列号 【备注】 进程要有管理员权限才能获取成功",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "系统模块(SYS) - HCSYS_GetDisplayInfo",
    "content": "【功能描述】 获取显卡信息 【备注】 无",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "系统模块(SYS) - HCSYS_GetDPI",
    "content": "【功能描述】 获取DPI 【备注】 无",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "系统模块(SYS) - HCSYS_RunApp",
    "content": "【功能描述】 运行指定路径下的exe 【备注】 这个不支持启动参数",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "系统模块(SYS) - HCSYS_RunAppGetRet",
    "content": "【功能描述】 获取CMD命令形式的打开进程并获取返回输出",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "系统模块(SYS) - HCSYS_RunAppGetRetEx",
    "content": "【功能描述】 获取CMD命令形式的打开进程(支持管理员打开)(扩展版本) 【备注】 内部是调用ShellExecuteExA",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "系统模块(SYS) - HCSYS_RunAppEx",
    "content": "【功能描述】 运行指定路径下的exe这个支持启动参数 【备注】 这个支持启动参数",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "系统模块(SYS) - HCSYS_RunAppExxxx",
    "content": "【功能描述】 运行指定路径下的exe(HCSYS_RunAppEx的扩展版本)这个支持启动参数同时指定了当前进程的路径 【备注】 这个支持启动参数",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "系统模块(SYS) - HCSYS_GetHDiskCode",
    "content": "【功能描述】 获取磁盘特征码 【备注】 无",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "系统模块(SYS) - HCSYS_GetCpuCode",
    "content": "【功能描述】 获取CPU特征码 【备注】 无",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "系统模块(SYS) - HCSYS_GetBIOSInfo",
    "content": "【功能描述】 获取BOIS制造日期 【备注】 无",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_29",
    "title": "系统模块(SYS) - HCSYS_GetMachineCode",
    "content": "【功能描述】 获取机器码(包含网卡) 【备注】 无",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_30",
    "title": "系统模块(SYS) - HCSYS_GetMachineCodeNoMac",
    "content": "【功能描述】 获取机器码(不包含网卡) 【备注】 无",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_31",
    "title": "系统模块(SYS) - HCSYS_GetNetTime",
    "content": "【功能描述】 获取网络时间 【备注】 北京时间 固定内置服务器IP",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_32",
    "title": "系统模块(SYS) - HCSYS_GetNetTimeByIp",
    "content": "【功能描述】 获取网络时间(指定服务器IP获取) 【备注】 北京时间",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_33",
    "title": "系统模块(SYS) - HCSYS_GetSystemBuildNumber",
    "content": "【功能描述】 获取系统版本 【备注】 无",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_34",
    "title": "系统模块(SYS) - HCSYS_GetSystemType",
    "content": "【功能描述】 获取系统类型 【备注】 无",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_35",
    "title": "系统模块(SYS) - HCSYS_GetTime",
    "content": "【功能描述】 获取开机到现在过经过的时间(毫秒) 【备注】 无",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_36",
    "title": "系统模块(SYS) - HCSYS_Is64Bit",
    "content": "【功能描述】 当前进程是否是64位 【备注】 无",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_37",
    "title": "系统模块(SYS) - HCSYS_IsSurrpotVt",
    "content": "【功能描述】 是否支持vt 【备注】 可以在Bios中开启vt,如果不支持就没办法了",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_38",
    "title": "系统模块(SYS) - HCSYS_GetScreenPixelDepth",
    "content": "【功能描述】 获取屏幕的色深(24/32之类的) 【备注】 无",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_39",
    "title": "系统模块(SYS) - HCSYS_SetScreenPixelDepth",
    "content": "【功能描述】 设置屏幕的色深 【备注】 无",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_40",
    "title": "系统模块(SYS) - HCSYS_GetScreenHeight",
    "content": "【功能描述】 获取屏幕高度 【备注】 无",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_41",
    "title": "系统模块(SYS) - HCSYS_GetScreenWidth",
    "content": "【功能描述】 获取屏幕宽度 【备注】 无",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_42",
    "title": "系统模块(SYS) - HCSYS_SetScreen",
    "content": "【功能描述】 设置屏幕分辨率 【备注】 无",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_43",
    "title": "系统模块(SYS) - HCSYS_GetCmdRet",
    "content": "【功能描述】 获取CMD命令返回值(字符串) 【备注】 无",
    "url": "/docs/cpp/category_34",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "自定义插件模块(Com) - HCModule_AddComponent",
    "content": "【功能描述】 添加自定义组件 【备注】 自定义模块需要导入包并来实现接口绑定",
    "url": "/docs/cpp/category_35",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "自定义插件模块(Com) - HCModule_DeleteComponent",
    "content": "【功能描述】 卸载指定插件 【备注】 自定义模块需要导入包并来实现接口绑定",
    "url": "/docs/cpp/category_35",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "自定义插件模块(Com) - HCModule_CALL",
    "content": "【功能描述】 调用自定义组件中的接口 【备注】 自定义模块需要导入包并来实现接口绑定 参考:X86X64自定义插件接口说明",
    "url": "/docs/cpp/category_35",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "自定义插件模块(Com) - HCModule_CALLEx",
    "content": "【功能描述】 调用自定义组件中的接口(可传递任意参数类型) 【备注】 自定义模块需要导入包并来实现接口绑定 注意:传递的buffer字符串在自定义插件接口 typedefHDComRet(__stdcall* HDComFunType)(__int64 retStrAddr,__int64 rcx,__int64 rdx,__int64 r8,__int64 r9,__int64 l5,__int64 l6); 第一个参数retStrAddr作为字符串首地址(char* )能拿到 如: C++代码演示: char* info=(char* )retStrAddr; 参考:X86X64自定义插件接口说明",
    "url": "/docs/cpp/category_35",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "插件包装器 - HCCOM_Load",
    "content": "【功能描述】 加载组件 【备注】 组件名为当前组件文件的名字(不包含后缀!,如果组件文件无后缀可忽视) 如:hdmad.dll所对应的组件名必须是hdmad 头文件: HDLoader.h 静态库: HDPacker.librelease版本 HDPackerd.libdebug版本",
    "url": "/docs/cpp/category_36",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "插件包装器 - HCCOM_Register",
    "content": "【功能描述】 注册自定义组件中的接口 【备注】 内置数据初始化函数接口名字:HDDataInit(接口类型是HDComFunType)HDDataInit初始化函数会在加载组件的时候首次调用以便于完成对相关组件数据的初始化(比如:基地址相关表达式的获取)如果需要初始化就自己写一个名字叫做HDDataInit的函数,类型为HDComFunType,并调用HCCOM_Register 头文件: HDLoader.h 静态库: HDPacker.librelease版本 HDPackerd.libdebug版本 参考:X86X64自定义插件接口说明",
    "url": "/docs/cpp/category_36",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "插件包装器 - HCCOM_NotifyToTarget",
    "content": "【功能描述】 自定义模块通知目标进程接口 【备注】 内置数据初始化函数接口名字:HDDataInit(接口类型是HDComFunType)HDDataInit初始化函数会在加载组件的时候首次调用以便于完成对相关组件数据的初始化(比如:基地址相关表达式的获取)如果需要初始化就自己写一个名字叫做HDDataInit的函数,类型为HDComFunType,并调用HCCOM_Register 头文件: HDLoader.h 静态库: HDPacker.librelease版本 HDPackerd.libdebug版本",
    "url": "/docs/cpp/category_36",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "插件包装器 - HCCOM_NotifyToController",
    "content": "【功能描述】 自定义模块通知中控进程接口 【备注】 内置数据初始化函数接口名字:HDDataInit(接口类型是HDComFunType)HDDataInit初始化函数会在加载组件的时候首次调用以便于完成对相关组件数据的初始化(比如:基地址相关表达式的获取)如果需要初始化就自己写一个名字叫做HDDataInit的函数,类型为HDComFunType,并调用HCCOM_Register 头文件: HDLoader.h 静态库: HDPacker.librelease版本 HDPackerd.libdebug版本",
    "url": "/docs/cpp/category_36",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "插件包装器 - HCCOM_GetRetJson",
    "content": "【功能描述】 获取自定义模块通知中控进程返回的字符串结果 【备注】 返回的字符串是自定义的 在中控中自己设置的事件处理回调函数中设置返回 头文件: HDLoader.h 静态库: HDPacker.librelease版本 HDPackerd.libdebug版本",
    "url": "/docs/cpp/category_36",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "插件包装器 - HCCOM_FindCode",
    "content": "【功能描述】 特征码查找 【备注】 无",
    "url": "/docs/cpp/category_36",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "插件包装器 - HCCOM_PrintLog",
    "content": "【功能描述】 是否打开debugview调试日志信息 【备注】 返回当前是否开启",
    "url": "/docs/cpp/category_36",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "插件包装器 - HCCOM_GetVersion",
    "content": "【功能描述】 获取自定义内存插件版本号 【备注】 返回当前是否开启",
    "url": "/docs/cpp/category_36",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "状态机模块 - HCHD_GetHDStatusControler",
    "content": "【功能描述】 获取控制器有且只有一个 【备注】 拿到控制器对象可以获取或者操作其他组件对象",
    "url": "/docs/cpp/category_37",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "控制器模块 - HCHD_GetHDController",
    "content": "【功能描述】 获取控制器有且只有一个 【备注】 拿到控制器对象可以获取或者操作其他组件对象",
    "url": "/docs/cpp/category_38",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "主板机模块[SC] - HCSC_SetPath",
    "content": "【功能描述】 设置HDScrcpy投屏软件根目录,并重启adb相当于重置一下adb环境 【备注】 设置HDScrcpy投屏软件根目录如:J:\\\\hdscrcpy2.7\\\\默认C:\\\\hdscrcpy2.7\\\\ 软件在群文件或者找管理索取",
    "url": "/docs/cpp/category_39",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "主板机模块[SC] - HCSC_ResetAdb",
    "content": "【功能描述】 重置adb服务 【备注】 无",
    "url": "/docs/cpp/category_39",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "主板机模块[SC] - HCSC_QueryDevices",
    "content": "【功能描述】 查询当前所有可用的设备 【备注】 无 设备号类型:1.emulator-5554/127.0.0.1:5009模拟器Device(-s) 2.01aa8320032fe731手机Device(-d) 3.127.0.0.1:5009tcpipDevice(-e)",
    "url": "/docs/cpp/category_39",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "主板机模块[SC] - HCSC_ConnectDevices",
    "content": "【功能描述】 连接设备并通讯窗口序号（需要先初始化中控和登录！！HCHD_LoginHCEnv_Init/HCEnv_InitEx） 【备注】 1.该接口会自动连接指定的设备号 2.同时会进行通讯和重连判断(需要加载HD驱动) 3.无需再通讯 设备号类型:1.emulator-5554/127.0.0.1:5009模拟器Device(-s) 2.01aa8320032fe731手机Device(-d) 3.127.0.0.1:5009tcpipDevice(-e)",
    "url": "/docs/cpp/category_39",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "虚拟机[VM] - HCVM_Run",
    "content": "【功能描述】 运行虚拟机(管理员运行) 【备注】 指令: D:\\vmwin10>D:\\vm16\\vmrun-Twsstart\\\"D:/vmwin10/Windows10x64.vmx\\\"guilparam D:\\vmwin10>D:\\vm16\\vmrun-Twsstart\\\"D:/vmwin10/Windows10x64.vmx\\\"noguilparam C++案例: autoret=HCVM_Run(0,\\\"D:\\\\vm16\\\\\\\",\\\"D:\\\\vmwin10\\\\Windows10x64.vmx\\\",TRUE,0,0,0);",
    "url": "/docs/cpp/category_40",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "虚拟机[VM] - HCVM_Rerun",
    "content": "【功能描述】 重启运行虚拟机(管理员运行) 【备注】 指令: D:\\vmwin10>D:\\vm16\\vmrun-Twsrestart\\\"D:/vmwin10/Windows10x64.vmx\\\"guilparam D:\\vmwin10>D:\\vm16\\vmrun-Twsrestart\\\"D:/vmwin10/Windows10x64.vmx\\\"noguilparam C++案例: autoret=HCVM_Rerun(0,\\\"D:\\\\vm16\\\\\\\",\\\"D:\\\\vmwin10\\\\Windows10x64.vmx\\\",m_强制关闭CheckBox.GetCheck(),TRUE,0,0,0);</FONT>",
    "url": "/docs/cpp/category_40",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "虚拟机[VM] - HCVM_Close",
    "content": "【功能描述】 关闭运行虚拟机(管理员运行) 【备注】 指令: D:\\vmwin10>D:\\vm16\\vmrun-Twsstop\\\"D:/vmwin10/Windows10x64.vmx\\\" D:\\vmwin10>D:\\vm16\\vmrun-Twsstop\\\"D:/vmwin10/Windows10x64.vmx\\\" C++案例: autoret=HCVM_Close(0,\\\"D:\\\\vm16\\\\\\\",\\\"D:\\\\vmwin10\\\\Windows10x64.vmx\\\",m_强制关闭CheckBox.GetCheck(),0,0);",
    "url": "/docs/cpp/category_40",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "虚拟机[VM] - HCVM_List",
    "content": "【功能描述】 获取当前正在运行的虚拟机路径和总数(管理员运行) 【备注】 无 C++案例: autoret=HCVM_List(\\\"D:\\\\vm16\\\\\\\");",
    "url": "/docs/cpp/category_40",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "虚拟机[VM] - HCVM_IsStart",
    "content": "【功能描述】 指定虚拟机是否已经开启(管理员运行) 【备注】 无 C++案例: autoret=HCVM_List(\\\"D:\\\\vm16\\\\\\\",\\\"D:/vmwin10/Windows10x64_1.vmx\\\");",
    "url": "/docs/cpp/category_40",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_GetVersion",
    "content": "【功能描述】 获取DMA服务器版本号 【备注】 返回长整数:如:240401格式:24年-04版本号-01小版本号",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_IsVersion",
    "content": "【功能描述】 判断HD插件的DMA接口和DMA服务器接口版本是否一致",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_StartServer",
    "content": "【功能描述】 开启DMA服务器 【备注】 服务器在群下载或者官网下载 兼容指定自定义进程名(全路径\\\\XXXX.exe)XXXX.exe为自定义进程名不指定进程名表示使用内置进程名(全路径\\\\HDVMDma.exe)不指定路径(当前中控exe根目录\\\\HDVMDma.exe)",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_CloseServer",
    "content": "【功能描述】 关闭服务器,同时结束进程 【备注】 无",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_ServerIsStart",
    "content": "【功能描述】 服务器是否已经开启 【备注】 循环检查直到服务器开启成功 如果使用HCVMDMA_StartServer开启服务器,不指定IP和端口,则使用的是HCVMDMA_ServerIsStart指定的IP和端口",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_Init",
    "content": "【功能描述】 初始化并关联虚拟机 【备注】 需要先开启服务器HCVMDMA_StartServer 内部会自动调用HCEnv_Load接口,使窗口序号和虚拟机进程关联绑定然后初始化虚拟机相关资源 后续就可以使用该窗口虚拟机去操作对应的虚拟机中的进程",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_GetPid",
    "content": "【功能描述】 通过进程名获取PID 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_Read",
    "content": "【功能描述】 读地址,仅支持1248地址大小 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_ReadFloat",
    "content": "【功能描述】 读单浮点数 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_ReadDouble",
    "content": "【功能描述】 读双浮点数 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_ReadBytes",
    "content": "【功能描述】 读字节集 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_Write",
    "content": "【功能描述】 写地址,仅支持1248地址大小 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_WriteFloat",
    "content": "【功能描述】 写单浮点数 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_WriteDouble",
    "content": "【功能描述】 写双浮点数 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_WriteBytes",
    "content": "【功能描述】 写字节集 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_GetProcAddr",
    "content": "【功能描述】 获取函数地址 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_GetBaseModule",
    "content": "【功能描述】 获取主模块地址 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_GetModule",
    "content": "【功能描述】 获取模块地址 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_ShellCodeInitX64",
    "content": "【功能描述】 初始化获取一个某个进程(x64)的执行环境句柄 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 支持内置保存执行环境最多可以保存20个进程执行环境,保存策略为->同线程-同虚拟机-指定虚拟机中的进程PID-执行环境-绑定 执行环境句柄解析: 1.可以理解成一个空间可以与物理机进行交互,实现参数传递和调用CALL 2.每次调用都会获取一个全新的执行环境句柄(实现物理机中控多线程调用) 3.物理机中控在一个执行环境句柄只能同时一个线程执行,如果要多线程执行请获取多个执行环境句柄 4.此接口不适合多线程获取,请在初始化最开始把所需要的执行环境句柄的数量初始化好,方便物理机中控多线程中单独分别使用",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_RunShellCodeX64",
    "content": "【功能描述】 通过指定一个初进程(x64)的执行环境句柄来执行CALL 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 执行环境句柄解析: 1.可以理解成一个空间可以与物理机进行交互,实现参数传递和调用CALL 2.如果需要参数传递,请自行往excuteEnvAddr+0x8写参数(参数最大缓冲区为0x200字节),同时自己的汇编机器码要引入自己参数的地址",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_ShellCodeInitX86",
    "content": "【功能描述】 初始化获取一个某个进程(x86)的执行环境句柄 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 支持内置保存执行环境最多可以保存20个进程执行环境,保存策略为->同线程-同虚拟机-指定虚拟机中的进程PID-执行环境-绑定 执行环境句柄解析: 1.可以理解成一个空间可以与物理机进行交互,实现参数传递和调用CALL 2.每次调用都会获取一个全新的执行环境句柄(实现物理机中控多线程调用) 3.物理机中控在一个执行环境句柄只能同时一个线程执行,如果要多线程执行请获取多个执行环境句柄 4.此接口不适合多线程获取,请在初始化最开始把所需要的执行环境句柄的数量初始化好,方便物理机中控多线程中单独分别使用",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_RunShellCodeX86",
    "content": "【功能描述】 通过指定一个初进程(x86)的执行环境句柄来执行CALL 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 执行环境句柄解析: 1.可以理解成一个空间可以与物理机进行交互,实现参数传递和调用CALL 2.如果需要参数传递,请自行往excuteEnvAddr+0x8写参数(参数最大缓冲区为0x200字节),同时自己的汇编机器码要引入自己参数的地址",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_FindCodeX86",
    "content": "【功能描述】 特征码搜索(X86)(指定模块名) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_FindCodeX86Ex",
    "content": "【功能描述】 特征码搜索(X86)(指定开始地址和搜索大小) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_FindCodeX64",
    "content": "【功能描述】 特征码搜索(X64)(指定模块名) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_FindCodeX64Ex",
    "content": "【功能描述】 特征码搜索(X64)(指定开始地址和搜索大小) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_Close",
    "content": "【功能描述】 卸载并关闭连接虚拟机 【备注】 与HCVMDMA_Init是一对接口 内部会自动调用HCEnv_UnLoadEx接口,使窗口序号和虚拟机进程断开绑定然后释放虚拟机相关资源 一旦调用,则虚拟机需要被关闭后开启而不是重启PID不能一样",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_InitCapture",
    "content": "【功能描述】 初始化截图环境 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 小技巧: 1.初始化接口有根据不同虚拟机,失败概率不同,为了提高初始化成功率,可以尝试自启动任务管理器,让系统激活起来,初始化完成就可以把任务管理器关掉了 2.步骤:打开虚拟机-关联虚拟机-检查是否有管理器PID-开始初始化键鼠/截图环境-如果失败3次直接重启虚拟机 3.如图操作自启任务管理器就行 4.支持内置保存截图环境一个虚拟机固定一个,自动判断是否之前初始化过 如果有的虚拟机初始化句柄超时建议:",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_29",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_Capture",
    "content": "【功能描述】 截图一次(获取一次虚拟机全屏数据到物理机) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_30",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_OpenCapture",
    "content": "【功能描述】 开启截图(内部会开启一条线程循环调用HCVMDMA_Capture) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_31",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_CloseCapture",
    "content": "【功能描述】 关闭截图(内部会关闭之前开启的线程)和HCVMDMA_OpenCapture是一对接口 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_32",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_InitMouseKey",
    "content": "【功能描述】 初始化键鼠环境 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 小技巧: 1.初始化接口有根据不同虚拟机,失败概率不同,为了提高初始化成功率,可以尝试自启动任务管理器,让系统激活起来,初始化完成就可以把任务管理器关掉了 2.步骤:打开虚拟机-关联虚拟机-检查是否有管理器PID-开始初始化键鼠/截图环境-如果失败3次直接重启虚拟机 3.如图操作自启任务管理器就行 4.支持内置保存键鼠环境一个虚拟机固定一个,自动判断是否之前初始化过 如果有的虚拟机初始化句柄超时建议:",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_33",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_MoveTo",
    "content": "【功能描述】 鼠标移动(不包含轨迹) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_34",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_LeftDown",
    "content": "【功能描述】 鼠标左键按下 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_35",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_LeftUp",
    "content": "【功能描述】 鼠标左键弹起 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_36",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_LeftClick",
    "content": "【功能描述】 鼠标左键点击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_37",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_LeftDoubleClick",
    "content": "【功能描述】 鼠标左键双击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_38",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_MiddleDown",
    "content": "【功能描述】 鼠标中键按下 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_39",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_MiddleUp",
    "content": "【功能描述】 鼠标中键弹起 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_40",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_MiddleClick",
    "content": "【功能描述】 鼠标中键点击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_41",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_MiddleDoubleClick",
    "content": "【功能描述】 鼠标中键双击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_42",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_RightDown",
    "content": "【功能描述】 鼠标右键按下 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_43",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_RightUp",
    "content": "【功能描述】 鼠标右键弹起 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_44",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_RightClick",
    "content": "【功能描述】 鼠标右键点击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_45",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_RightDoubleClick",
    "content": "【功能描述】 鼠标右键双击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_46",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_WheelUp",
    "content": "【功能描述】 鼠标滚轮滚上 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_47",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_WheelDown",
    "content": "【功能描述】 鼠标滚轮滚下 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_48",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_KeyDown",
    "content": "【功能描述】 键盘按下 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_49",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_KeyUp",
    "content": "【功能描述】 键盘弹起 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_50",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_KeyClick",
    "content": "【功能描述】 键盘敲击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_51",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_SendUnicode",
    "content": "【功能描述】 发送unicode字符串 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_52",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_SendAscii",
    "content": "【功能描述】 发送ascii字符串 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_53",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_GetPidList",
    "content": "【功能描述】 获取PID列表 【备注】 需要先初始化关联虚拟机HCVMDMA_Init C++解析获取案例: \\n最大51个数量存储量autojsonStr=HCEnv_GetRetJson(windowsIndex);if(jsonStr==NULL)returnERROR_获取数据失败;\\npid1,name1|pid2,name2|pid3,name3|vector<string>pidNameArray;Tool::HSplitStringA(jsonStr,pidNameArray,\\\"|\\\");if(pidNameArray.size()<=0)returnRET_失败;for(int index=0;index<pidSize;index++){\\npid1,name1，vector<string>proArray;Tool::HSplitStringA(pidNameArray[index]+\\\",\\\",proArray,\\\",\\\");if(proArray.size()<2)continue;if(atoi(proArray[0].c_str())==pid)returnRET_成功;\\n元素1就是PID元素2是进程名}returnRET_失败;\\n没找到",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_54",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_IsExistPid",
    "content": "【功能描述】 对应虚拟机中的进程PID是否存在 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/cpp/category_41",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "(B2)剑灵2台服 - HB2_GetPlayerInfo",
    "content": "【功能描述】 调用获取人物信息CALL 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"name\\\":\\\"Jack\\\",\\\"level\\\":26,\\\"curHp\\\":588,\\\"maxHp\\\":999,\\\"curMp\\\":255,\\\"maxMp\\\":666,\\\"gold\\\":99999,\\\"diamond\\\":999999}]}",
    "url": "/docs/cpp/category_42",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "(B2)剑灵2台服 - HB2_GetBagInfo",
    "content": "【功能描述】 调用获取背包信息CALL 【备注】 json: {\\\"error\\\":0,\\\"flag\\\":99,\\\"ret\\\":[{\\\"id\\\":1111,\\\"tId\\\":22222,\\\"dId\\\":33333,\\\"num\\\":588},{\\\"id\\\":1111,\\\"tId\\\":22222,\\\"dId\\\":33333,\\\"num\\\":588},{\\\"id\\\":1111,\\\"tId\\\":22222,\\\"dId\\\":33333,\\\"num\\\":588}]}",
    "url": "/docs/cpp/category_42",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "(B2)剑灵2台服 - HB2_GetShortCutInfo1",
    "content": "【功能描述】 调用获取快捷栏遍历信息CALL（前10个） 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"index\\\":0,\\\"id\\\":1111,\\\"bAct\\\":0},{\\\"index\\\":1,\\\"id\\\":2222,\\\"bAct\\\":1}]}",
    "url": "/docs/cpp/category_42",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "(B2)剑灵2台服 - HB2_GetShortCutInfo2",
    "content": "【功能描述】 调用获取快捷栏遍历信息CALL（后10个） 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"index\\\":0,\\\"id\\\":1111,\\\"bAct\\\":0},{\\\"index\\\":1,\\\"id\\\":2222,\\\"bAct\\\":1}]}",
    "url": "/docs/cpp/category_42",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "(B2)剑灵2台服 - HB2_GetPlayerXYZ",
    "content": "【功能描述】 调用获取人物坐标CALL 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"x\\\":125,\\\"y\\\":125,\\\"z\\\":125}]}",
    "url": "/docs/cpp/category_42",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "(B2)剑灵2台服 - HB2_GetPlayerCurMapId",
    "content": "【功能描述】 调用获取人物当前地图IDCALL 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"mapId\\\":1993}]}",
    "url": "/docs/cpp/category_42",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "(B2)剑灵2台服 - HB2_GetCurChapterTaskId",
    "content": "【功能描述】 调用遍历已结任务章节ID信息(主线+支线) 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"CTaskId\\\":1993,\\\"index\\\":1}]}",
    "url": "/docs/cpp/category_42",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "(B2)剑灵2台服 - HB2_GetAChapterTask",
    "content": "【功能描述】 调用遍历已结任务章节ID信息(主线+支线) 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"CTaskId\\\":1993,\\\"index\\\":1,\\\"curNum\\\":2},{\\\"CTaskId\\\":1998,\\\"index\\\":2,\\\"curNum\\\":2}]}",
    "url": "/docs/cpp/category_42",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "(B2)剑灵2台服 - HB2_PlayerIsMove",
    "content": "【功能描述】 调用人物是否移动CALL 【备注】 无",
    "url": "/docs/cpp/category_42",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "(B2)剑灵2台服 - HB2_IsAutoUseMed",
    "content": "【功能描述】 调用人物是否自动使用药品状态 【备注】 无",
    "url": "/docs/cpp/category_42",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "(B2)剑灵2台服 - HB2_Move",
    "content": "【功能描述】 调用移动CALL 【备注】 无",
    "url": "/docs/cpp/category_42",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "(B2)剑灵2台服 - HB2_GetHuaShen",
    "content": "【功能描述】 调用化身遍历CALL 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"id\\\":0,\\\"xLevel\\\":1111,\\\"type\\\":0},{\\\"id\\\":0,\\\"xLevel\\\":1111,\\\"type\\\":0}]} id:化身IDxLevel:化身星级type:化身品质0123依次递增+1白绿蓝...",
    "url": "/docs/cpp/category_42",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "(B2)剑灵2台服 - HB2_GetChongWu",
    "content": "【功能描述】 调用宠物遍历CALL 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"id\\\":0,\\\"xLevel\\\":1111,\\\"type\\\":0},{\\\"id\\\":0,\\\"xLevel\\\":1111,\\\"type\\\":0}]} id:宠物IDxLevel:宠物星级type:宠物品质0123依次递增+1白绿蓝...",
    "url": "/docs/cpp/category_42",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "(B2)剑灵2台服 - HB2_UseGoods",
    "content": "【功能描述】 调用使用物品CALL 【备注】 无",
    "url": "/docs/cpp/category_42",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "谷歌内置浏览器模块[GB] - HCGB_Attach1",
    "content": "【功能描述】 附加内置浏览器，附加监听模式1 【备注】 必须游戏进程自带内置谷歌浏览器,才会附加模块成功 由于每个游戏不同,需要定制浏览器接口 当前默认的内置谷歌浏览器接口仅适合夜鸦",
    "url": "/docs/cpp/category_43",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "谷歌内置浏览器模块[GB] - HCGB_Attach2",
    "content": "【功能描述】 附加内置浏览器，附加监听模式2 【备注】 必须游戏进程自带内置谷歌浏览器,才会附加模块成功 由于每个游戏不同,需要定制浏览器接口 当前默认的内置谷歌浏览器接口仅适合夜鸦",
    "url": "/docs/cpp/category_43",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "谷歌内置浏览器模块[GB] - HCGB_Detach",
    "content": "【功能描述】 脱离之前的内置浏览器 【备注】 必须游戏进程自带内置谷歌浏览器,才会附加模块成功",
    "url": "/docs/cpp/category_43",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "谷歌内置浏览器模块[GB] - HCGB_InjectJSCode",
    "content": "【功能描述】 给内置浏览器注入JS代码 【备注】 必须游戏进程自带内置谷歌浏览器,才会附加模块成功",
    "url": "/docs/cpp/category_43",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "谷歌内置浏览器模块[GB] - HCGB_ExcuteJSFile",
    "content": "【功能描述】 给内置浏览器注入指定文件中的JS代码 【备注】 必须游戏进程自带内置谷歌浏览器,才会附加模块成功",
    "url": "/docs/cpp/category_43",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "调试绘制模块(DS) - HCSD_SetColor",
    "content": "【功能描述】 (用于调试)设置全局可视化标注颜色值 【备注】 颜色值是4字节分别对应XRGB如:0x00FF0000红色如:0x0000FF00绿色如:0x000000FF蓝色",
    "url": "/docs/cpp/category_44",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "调试绘制模块(DS) - HCSD_SetFollowClassTitleName",
    "content": "【功能描述】 (用于调试)设置当前调试窗口跟随的进程信息",
    "url": "/docs/cpp/category_44",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "调试绘制模块(DS) - HCSD_DrawWinodws",
    "content": "【功能描述】 给指定窗口画边框或者填充矩形 【备注】 无",
    "url": "/docs/cpp/category_44",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "调试绘制模块(DS) - HCHD_CatchException",
    "content": "【功能描述】 开启/关闭捕捉异常 【备注】 无",
    "url": "/docs/cpp/category_44",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "调试绘制模块(DS) - HCSD_SetAttachConsole",
    "content": "【功能描述】 附加控制台 【备注】 print fcout输入输出到控制台上显示注意:自行定时清空屏幕防止满屏卡主进程运行",
    "url": "/docs/cpp/category_44",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "全局资源设置模块(RES) - HCRES_SetResPath",
    "content": "【功能描述】 设置资源路径 【备注】 图片字库文件都在这个里面找",
    "url": "/docs/cpp/category_45",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "全局资源设置模块(RES) - HCRES_SetResPathEx",
    "content": "【功能描述】 设置资源路径 【备注】 图片字库文件都在这个里面找",
    "url": "/docs/cpp/category_45",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "全局资源设置模块(RES) - HCRES_SetLanguageResPath",
    "content": "【功能描述】 设置语言或者字体文件资源路径 【备注】 语言文件都在这个里面找",
    "url": "/docs/cpp/category_45",
    "source": "api_data_cpp.json",
    "type": "函数"
  },
  {
    "id": "explanation_1",
    "title": "基础说明 - HD简介",
    "content": "【功能描述】 教程以官网为准 后面会出帖子教程 供大家学习使用 官网: https://www.hdgdk.com HD【RPG引擎库】交流群(3群):882724064 1030698387 (有事请主动找群主和管理，群主和管理不会主动私聊任何人,请勿上当受骗！！！！) (有事请主动找群主和管理，群主和管理不会主动私聊任何人,请勿上当受骗！！！！) (有事请主动找群主和管理，群主和管理不会主动私聊任何人,请勿上当受骗！！！！) 功能: 1.自研驱动注入，模拟键鼠 ，读写内存相关操作，进程以及线程相关操作等. 2.自研接口注入模式框架. 3.目前支持 32 位/64位/ASCII/UNICODE(8个版本中控)<->32/64位 (目标程序) 4.还支持LUA编写,自定义模块,谷歌内置浏览器,主板机投屏,多线程框架模块,yolov5,等操作 5.支持易语言 C/C++ 火山 Python C# 炫语言 golong等语言（支持调用C++DLL的语言） 6.具体看对应的模块功能接口 7.支持win7/8/10/11系统 ============================================================= 一.【HD易语言基础课程】 https://www.bilibili.com/video/BV1UgJFz5EKN/?spm_id_from=333.1387.homepage.video_card.click .【HD易语言多线程框架实战课程】 https://www.bilibili.com/video/BV1UgJFz5EKN/?spm_id_from=333.1387.homepage.video_card.click 二.【HD火山基础课程】 https://www.bilibili.com/video/BV1iBftYoE5b/?spm_id_from=333.1387.homepage.video_card.click 三.【HD C++基础课程】 https://www.bilibili.com/video/BV1G9fnYeEEp/?spm_id_from=333.1387.homepage.video_card.click .【HD C++多线程框架实战课程】 https://www.bilibili.com/video/BV1G9fnYeEEp/?spm_id_from=333.1387.homepage.video_card.click .【HD C++ 夜鸦国际服实战课程】 https://www.bilibili.com/video/BV1Ei1sYsELz/?spm_id_from=333.1387.homepage.video_card.click 四.【HD Python基础课程】 https://www.bilibili.com/video/BV1rtRAYXEwQ/?spm_id_from=333.1387.homepage.video_card.click 五.【HD 炫语言基础课程】 https://www.bilibili.com/video/BV1LJXGYPEXy/?spm_id_from=333.1387.homepage.video_card.click https://www.bilibili.com/video/BV1UNqdYqEBQ/?spm_id_from=333.1387.homepage.video_card.click 六.【HD 综合工具使用教程】 https://www.bilibili.com/video/BV1nscbeVEfY/?spm_id_from=333.1387.homepage.video_card.click 七.【HD Yolov8综合工具使用教程】 https://www.bilibili.com/video/BV13c3vzfE2D/?spm_id_from=333.1387.homepage.video_card.click ============================================================= 【备注】 免责声明 一. 本软件完全出于个人兴趣爱好，由本人在业余时间开发，是一款安全，绿色，可靠的软件产品. 二. 利用本软件所做出的任何软件作品，和本人无关. 三. 本软件绝对不针对任何一款游戏或者游戏开发商，如果有人利用本软件开发非法游戏辅助，本人将保留追究其民事以及刑事责任的权利. 四. 因使用本软件而引致的任何意外、疏忽、合约毁坏、诽谤、版权或知识产权侵犯及其所造成的任何损失，本人概不负责，亦概不承担任何民事或刑事法律责任。 五. 当你第一次开始使用本人所提供的任何软件及资源的那一刻起就将被视为对本声明全部内容的认可。同时您必须认可上述免责条款，方可使用本软件及资源。如有任何异议，建议立刻删除本软件及资源并且停止使用. 六. 以上内容，本人保留最终解释权。",
    "url": "/docs/csharp/category_1",
    "source": "api_data_csharp.json",
    "type": "说明"
  },
  {
    "id": "explanation_2",
    "title": "基础说明 - HD返回值表",
    "content": "【功能描述】 接口返回值： 小于等于0 为错误代码 大于 0为成功 (驱动接口返回值在下面↓) #define RET_检查PID存在 8 #define RET_环境已卸载 7 #define RET_重连窗口序号不一致 6 #define RET_重连窗口 5 #define RET_状态变动 4 #define RET_暂停过 3 #define RET_结束 2 #define RET_成功 1 #define RET_失败 0 #define RET_真 1 #define RET_非 0 #define ERROR_未初始化全局环境 -1000 #define ERROR_未找到进程环境 -1001 #define ERROR_进程环境内存为NULL -1002 #define ERROR_获取CALL环境失败 -1003 #define ERROR_超时返回 -1004 #define ERROR_主线程调用超时返回 -1005 #define ERROR_数据异常 -1006 #define ERROR_参数错误 -1007 #define ERROR_未挂接主线程 -1008 #define ERROR_后台绑定句柄无效 -1009 #define ERROR_未绑定后台 -1010 #define ERROR_多开超出限制 -1011 #define ERROR_字符串为空 -1012 #define ERROR_地址为空 -1013 #define ERROR_未知错误 -1014 #define ERROR_远进程申请内存失败 -1015 #define ERROR_文件夹创建失败 -1016 #define ERROR_异步无法获取返回值 -1017 #define ERROR_语法错误 -1018 #define ERROR_申请内存失败 -1019 #define ERROR_创建线程失败 -1020 #define ERROR_缓冲区大小不足 -1021 #define ERROR_未初始化LUA -1022 #define ERROR_LUA状态机为NULL -1023 #define ERROR_未找到LUA函数 -1024 #define ERROR_返回值未知类型 -1025 #define ERROR_LUA线程标识符不符合 -1026 #define ERROR_模块获取失败 -1027 #define ERROR_地址不可读 -1028 #define ERROR_返回值为JSON -1029 #define ERROR_获取数据失败 -1030 #define ERROR_未初始化 -1031 #define ERROR_已经开启 -1032 #define ERROR_已经结束 -1033 #define ERROR_未开启 -1034 #define ERROR_未结束 -1035 #define ERROR_高宽为0 -1036 #define ERROR_数据为NULL -1037 #define ERROR_数据不符合要求 -1038 #define ERROR_文件打开失败 -1039 #define ERROR_打开失败 -1040 #define ERROR_解析失败 -1041 #define ERROR_无游戏类型 -1042 #define ERROR_HOOK失败 -1043 #define ERROR_UNHOOK失败 -1044 #define ERROR_功能失效 -1045 #define ERROR_无效PE文件格式 -1046 #define ERROR_未找到PE头 -1047 #define ERROR_重定位表失败 -1048 #define ERROR_未找到函数入口 -1049 #define ERROR_无法附加DLL -1050 #define ERROR_接口数量上限 -1051 #define ERROR_已经存在 -1052 #define ERROR_打开句柄失败 -1053 #define ERROR_未找到全局环境 -1054 #define ERROR_组件数量上限 -1055 #define ERROR_未找到组件接口 -1056 #define ERROR_接口类型不匹配 -1057 #define ERROR_组件无效 -1058 #define ERROR_接口地址无效 -1059 #define ERROR_生成密钥失败 -1060 #define ERROR_加密失败 -1061 #define ERROR_解密失败 -1062 #define ERROR_DLL中无此接口 -1063 #define ERROR_下载失败 -1064 #define ERROR_注册表操作失败 -1065 #define ERROR_路径获取失败 -1066 #define ERROR_提权失败 -1067 #define ERROR_驱动已安装 -1068 #define ERROR_HD驱动已安装无法安装HN驱动 -1069 #define ERROR_资源未找到 -1070 #define ERROR_资源加载失败 -1071 #define ERROR_提取资源失败 -1072 #define ERROR_未加载插件 -1073 #define ERROR_文件无法保存 -1074 #define ERROR_打开目录失败 -1075 #define ERROR_写入文件的字节大小不符合要求 -1076 #define ERROR_删除文件失败 -1077 #define ERROR_获取字符串失败 -1078 #define ERROR_获取注册表值失败 -1079 #define ERROR_类型错误 -1080 #define ERROR_参数不符合要求 -1081 #define ERROR_区域超出 -1082 #define ERROR_文件不存在 -1083 #define ERROR_创建文件失败 -1084 #define ERROR_文件读取失败 -1085 #define ERROR_与系统驱动通讯失败 -1086 #define ERROR_创建管道失败 -1087 #define ERROR_创建进程失败 -1088 #define ERROR_未找到相关字符串信息 -1089 #define ERROR_缓冲区大小不充足 -1090 #define ERROR_数据类型转换失败 -1091 #define ERROR_格式化字符串失败 -1092 #define ERROR_网络超时 -1093 #define ERROR_网络连接失败 -1094 #define ERROR_加载指定DLL失败 -1095 #define ERROR_解析字符串失败 -1096 #define ERROR_窗口大小变动导致数据不一致 -1097 #define ERROR_打开剪切板失败 -1098 #define ERROR_加锁失败 -1099 #define ERROR_获取剪切板数据失败 -1100 #define ERROR_版本号获取失败 -1101 #define ERROR_已经绑定其他设备 -1102 #define ERROR_已经达到最大在线数 -1103 #define ERROR_账号或密码为空 -1104 #define ERROR_验证失败 -1105 #define ERROR_打开进程失败 -1106 #define ERROR_进程位数不匹配 -1107 #define ERROR_添加进程环境失败 -1108 #define ERROR_定位特征地址失败 -1109 #define ERROR_寻找空白地址失败 -1110 #define ERROR_无操作类型 -1111 #define ERROR_无相关句柄 -1112 #define ERROR_无HDC句柄 -1113 #define ERROR_获取矩形大小失败 -1114 #define ERROR_拷贝数据失败 -1115 #define ERROR_无效句柄 -1116 #define ERROR_创建对象失败 -1117 #define ERROR_截图方式需要重开才能切换 -1118 #define ERROR_格式有误 -1119 #define ERROR_字库数据为空 -1120 #define ERROR_字库中未找到相应字 -1121 #define ERROR_大小计算为0 -1122 #define ERROR_容器大小不一致 -1123 #define ERROR_句柄无效 -1124 #define ERROR_获取PID无效 -1125 #define ERROR_获取大小失败 -1126 #define ERROR_获取失败 -1127 #define ERROR_未找到 -1128 #define ERROR_立即返回无效值 -1129 #define ERROR_未设置路径 -1130 #define ERROR_文件操作失败 -1131 #define ERROR_写入内存失败 -1132 #define ERROR_模块查找失败 -1133 #define ERROR_接口查找失败 -1134 #define ERROR_组件信息保存失败 -1135 #define ERROR_组件加载失败 -1136 #define ERROR_组件卸载失败 -1137 #define ERROR_组件不符合卸载要求 -1138 #define ERROR_进程环境句柄为NULL -1139 #define ERROR_未绑定PID -1140 #define ERROR_读取图片失败 -1141 #define ERROR_打开注册表失败 -1142 #define ERROR_获取注册表失败 -1143 #define ERROR_写内存失败 -1144 #define ERROR_清除缓存失败 -1145 #define ERROR_字体无宽度 -1146 #define ERROR_裁剪矩形数据失败 -1147 #define ERROR_图片无宽或高 -1148 #define ERROR_功能未开放 -1149 #define ERROR_模块信息获取失败 -1150 #define ERROR_未找到合适的JMP地址 -1151 #define ERROR_HOOK初始化失败 -1152 #define ERROR_无HOOK接口类型 -1153 #define ERROR_CALL类型不匹配 -1154 #define ERROR_创建通讯失败 -1155 #define ERROR_加载通讯失败 -1156 #define ERROR_数据格式错误 -1157 #define ERROR_地址失效 -1158 #define ERROR_坐标转换失败 -1159 #define ERROR_容器为空 -1160 #define ERROR_数据为空 -1161 #define ERROR_特征不符合 -1162 #define ERROR_范围未确定 -1163 #define ERROR_缓冲区不足 -1164 #define ERROR_此接口调试版本无效 -1165 #define ERROR_子图不在范围内 -1166 #define ERROR_插件数量上限 -1167 #define ERROR_API枚举失败 -1168 #define ERROR_无法定位模块 -1169 #define ERROR_无效HOOK地址 -1170 #define ERROR_无对应的HOOK函数 -1171 #define ERROR_破坏字节超过容量 -1172 #define ERROR_指定地址不适合HOOK -1173 #define ERROR_没有充足的HOOK大小 -1174 #define ERROR_设置回调地址失败 -1175 #define ERROR_API获取时间失败 -1176 #define ERROR_无效插件序号 -1177 #define ERROR_进程不存在 -1178 #define ERROR_未安装插件 -1179 #define ERROR_初始化通讯失败 -1180 #define ERROR_未初始化通讯序号 -1181 #define ERROR_当前线程字库为空 -1182 #define ERROR_线程数量超出限制 -1183 #define ERROR_字库序号不存在 -1184 #define ERROR_释放资源失败 -1185 #define ERROR_超出容量 -1186 #define ERROR_空模型 -1187 #define ERROR_环境序号不存在 -1188 #define ERROR_回调处理中 -1189 #define ERROR_无法操作绑定窗口 -1190 #define ERROR_接口已被移除 -1191 #define ERROR_不支持类型 -1192 #define ERROR_初始化失败 -1193 #define ERROR_环境被卸载 -1194 #define ERROR_进程已经关闭 -1195 #define ERROR_中控环境未初始化 -1196 #define ERROR_未加载HD驱动 -1197 #define ERROR_未绑定设备 -1198 #define ERROR_未找到进程 -1199 #define ERROR_进程PID不匹配 -1200 #define ERROR_前台模式无法后台 -1201 #define ERROR_JMP地址无效 -1202 #define ERROR_HOOK地址无效 -1203 #define ERROR_类型和HOOK地址不匹配 -1204 #define ERROR_不在HD多线程环境下 -1205 #define ERROR_未连接 -1206 #define ERROR_进程环境已被卸载 -1207 #define ERROR_安装插件失败 -1208 //检查是否安装了驱动 #define ERROR_安装驱动失败 -1209 //检查是否管理员或者杀毒或者关闭内核隔离 #define ERROR_加载环境失败 -1210 //检查账号是否欠费或者网络问题或者参数不符合要求 #define ERROR_初始化序号失败 -1211 //一般不会失败 #define ERROR_获取PID超时返回 -1212 //确定是否打开进程成功或者增大等待时间 #define ERROR_获取状态值20超时返回 -1213 //未安装插件或被拦截或增大等待时间 #define ERROR_获取状态值120超时返回 -1214 //未安装插件或被拦截或增大等待时间 #define ERROR_继续失败 -1215 //可能未初始化相关环境 一般不会失败 #define ERROR_当前进程插件序号不一致 -1216 //说明指定的PID进程绑定的窗口序号已经存在 与指定的序号不一致 调用HCInject_GetPreWinIndex 获取指定PID的绑定的窗口序号 #define ERROR_PID无效 -1217 #define ERROR_扩展序号不能用 -1218//扩展序号不能自己指定 #define ERROR_接口丢弃 -1219//老版本的接口丢弃 #define ERROR_序号超出限制 -1220 #define ERROR_已经重启 -1221 #define ERROR_登录中无法重启 -1222 #define ERROR_暂停中无法重启 -1223 #define ERROR_操作中无法重启 -1224 #define ERROR_强制关闭线程中无法发送 -1225 #define ERROR_卸载失败 -1226 #define ERROR_未完全开启 -1227 #define ERROR_逻辑异常 -1228 #define ERROR_无法连接VNC -1229 #define ERROR_未连接过VNC -1230 #define ERROR_未关联过VM -1231 #define ERROR_未获取截图环境 -1232 #define ERROR_未获取截图环境 -1232 #define ERROR_环境为NULL -1233 #define ERROR_区域无效 -1234 #define ERROR_继续当前操作 -1235 #define ERROR_加解密失败 -1236 #define ERROR_未安装驱动 -1237 #define ERROR_调试版本无法加解密 -1238 #define ERROR_截图缓存不存在 -1239//检查截图模式不对 或者 未开启截图 请用截图查看器查看是否截图缓存存在 【备注】 也可以可通过工具后台查看",
    "url": "/docs/csharp/category_1",
    "source": "api_data_csharp.json",
    "type": "说明"
  },
  {
    "id": "function_1",
    "title": "基础功能接口 - HD登录_获取版本号",
    "content": "【功能描述】 获取当前插件版本号 【备注】 无",
    "url": "/docs/csharp/category_2",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "基础功能接口 - HCEnv_GetRetJson",
    "content": "【功能描述】 获取最近一次调用接口返回的json字符串 【备注】 并不是所有接口都返回json字符串 有一些接口返回单一的值就没必要调用这个接口 一些接口需要拿到字符串信息返回,那么这些字符串会存在json字符串中,需要自己调用此接口获取",
    "url": "/docs/csharp/category_2",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "基础功能接口 - HD通用_获取最近返回值",
    "content": "【功能描述】 获取最近一次调用接口返回的值(用于检测是否有错) 【备注】 无",
    "url": "/docs/csharp/category_2",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "基础功能接口 - HCEnv_GetErrorStr",
    "content": "【功能描述】 通过传递HD返回值获取字符串信息",
    "url": "/docs/csharp/category_2",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "基础功能接口 - HD通用_获取最近API返回值",
    "content": "【功能描述】 获取最近一次调用WIN32API错误值 【备注】 无",
    "url": "/docs/csharp/category_2",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "基础功能接口 - HD环境_获取最大多开数",
    "content": "【功能描述】 获取最大窗口数 【备注】 窗口序号不能大于等于这个返回值同时也不能小于0",
    "url": "/docs/csharp/category_2",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "基础功能接口 - HD通用_获取当前插件状态值",
    "content": "【功能描述】 获取当前环境搭建流程中的操作信息 【备注】 这个CALL返回HD状态信息可以确定当前处于那个步骤 typedefenumHD状态信息{HD状态信息_无=0,\\n0HD状态信息_DLL环境_加载全局成功=1,\\n1HD状态信息_DLL环境_加载全局失败=2,\\n2HD状态信息_DLL环境_窗口序号不符合=3,\\n3HD状态信息_DLL环境_进程不符合=4,\\n4HD状态信息_DLL环境_打开句柄失败=5,\\n5HD状态信息_DLL环境_获取内存失败=6,\\n6HD状态信息_DLL环境_等待继续=20,\\n20需要调用HCInject_Continue()HD状态信息_通讯环境_开始=21,\\n21HD状态信息_通讯环境_成功=22,\\n22HD状态信息_通讯环境_失败=23,\\n23HD状态信息_通讯环境_打开句柄失败=24,\\n24HD状态信息_通讯环境_获取内存失败=25,\\n25HD状态信息_接口映射_成功=40,\\n40自制通讯协议创建HD状态信息_接口映射_失败=41,\\n41HD状态信息_LUA_成功=60,\\n60可以执行LUAHD状态信息_LUA_失败=61,\\n61不可以执行LUAHD状态信息_数据库_开启=80,\\n80需要调用HHIT2_Load()的时候参数bOpenData设置为1HD状态信息_数据库_未开启=81,\\n81HD状态信息_数据库_开启失败=82,\\n82内置特征码有误联系管理员HD状态信息_验证_有误=100,\\n100联系管理员HD状态信息_监听_成功=120,\\n120【【【【大于等于120说明可以调用接口了】】】】HD状态信息_监听_失败=121,\\n121基本是不会出现这个错误HD状态信息_挂接主线_开启=140,\\n140调用HD状态信息_挂接主线_进入=141,\\n141准备挂接HD状态信息_挂接主线_尝试中=142,\\n142处于这个阶段需要用SetHwnd()暂时没用HD状态信息_挂接主线_成功=143,\\n143成功挂接所有关于可以主线程调用的接口的参数\\\"是否主线程调用\\\"生效HD状态信息_挂接主线_失败=144,\\n144HD状态信息_挂接主线_已经开启=145,\\n145已经开启了HD状态信息_加载_延迟=146,\\n2秒延迟HD状态信息_通讯加载失败=147\\n2秒延迟}HD状态信息;",
    "url": "/docs/csharp/category_2",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "基础功能接口 - HD环境_获取插件执行环境信息",
    "content": "【功能描述】 获取通讯插件所绑定的目标进程的执行线程环境信息 【备注】 无",
    "url": "/docs/csharp/category_2",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "基础功能接口 - HD注入_设置插件信息",
    "content": "【功能描述】 设置插件信息 【备注】 易语言/火山/Python/炫语言/C#等语言:还需要拿到模块源码更改导入DLL名字需要与自定义DLL同名 内置版本名规则: \\n======64位#ifdef_WIN64#ifdef_UNICODE\\n64位W版本std::stringHCInject::g_发布版本DLL名字=\\\"hd64.dll\\\";std::stringHCInject::g_调试版本DLL名字=\\\"hddebug64.dll\\\";#else\\n64位A版本std::stringHCInject::g_发布版本DLL名字=\\\"hd64a.dll\\\";std::stringHCInject::g_调试版本DLL名字=\\\"hddebug64a.dll\\\";#endif\\n======32位#else#ifdef_UNICODE\\n32位W版本std::stringHCInject::g_发布版本DLL名字=\\\"hd.dll\\\";std::stringHCInject::g_调试版本DLL名字=\\\"hddebug.dll\\\";#else\\n32位A版本std::stringHCInject::g_发布版本DLL名字=\\\"hda.dll\\\";std::stringHCInject::g_调试版本DLL名字=\\\"hddebuga.dll\\\";#endif#endif\\n》》》》》》",
    "url": "/docs/csharp/category_2",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "IP模块[IP] - HDIP_有米设置路径",
    "content": "【功能描述】 设置有米软件路径(EXE路径) 【备注】 软件找HD作者拿(魔改版)",
    "url": "/docs/csharp/category_3",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "IP模块[IP] - HDIP_有米添加IP",
    "content": "【功能描述】 添加IP 【备注】 软件找HD作者拿(魔改版)",
    "url": "/docs/csharp/category_3",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "IP模块[IP] - HDIP_有米添加进程",
    "content": "【功能描述】 添加代理的进程名 【备注】 软件找HD作者拿(魔改版)",
    "url": "/docs/csharp/category_3",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "IP模块[IP] - HDIP_有米打开",
    "content": "【功能描述】 打开有米软件 【备注】 软件找HD作者拿(魔改版) 流程: 1.先设置路径 2.添加代理进程和IP 3.打开有米",
    "url": "/docs/csharp/category_3",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "IP模块[IP] - HDIP_有米是否打开",
    "content": "【功能描述】 有米软件是否已经打开 【备注】 软件找HD作者拿(魔改版) 流程: 1.先设置路径 2.添加代理进程和IP 3.打开有米",
    "url": "/docs/csharp/category_3",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "IP模块[IP] - HDIP_有米关闭",
    "content": "【功能描述】 关闭有米软件 【备注】 软件找HD作者拿(魔改版) 流程: 1.先设置路径 2.添加代理进程和IP 3.打开有米",
    "url": "/docs/csharp/category_3",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "登录验证(Login) - HD登录_登录",
    "content": "【功能描述】 HD登录验证接口（强烈建议主线程中调用） 【备注】 1.验证接口,所有接口需要通过验证才能调用 2.如果自己写中控可以不用打开自动更新",
    "url": "/docs/csharp/category_4",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "登录验证(Login) - HD登录_获取最近登录点数",
    "content": "【功能描述】 最近登录时候的点数 【备注】 无",
    "url": "/docs/csharp/category_4",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "登录验证(Login) - HD登录_获取最近登录时间",
    "content": "【功能描述】 获取最近登录时间戳 【备注】 无",
    "url": "/docs/csharp/category_4",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "登录验证(Login) - HD登录_获取点数",
    "content": "【功能描述】 获取点数 【备注】 无",
    "url": "/docs/csharp/category_4",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "登录验证(Login) - HD登录_获取最大多开数",
    "content": "【功能描述】 获取最大多少开 【备注】 无",
    "url": "/docs/csharp/category_4",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "安装插件扩展模块[ex] - HD扩展_安装插件1",
    "content": "【功能描述】 第一种通讯安装插件方式(安装插件再打开进程)如果使用HD多线程模块强烈建议在登录回调中使用 【备注】 可以参考表安装插件接口类型表 1.支持重连,重连的前提是不能被HCEnv_UnLoad卸载 回调解析: 打开回调openFun:可以参考表安装插件接口类型表 typedef__int64 (__stdcall* INSTALLPLUGint YPE)(int windowsIndex); 参数:windowsIndex:当前指定序号 说明:1.对于第一种方式打开回调不能为NULL,内部先安装插件再触发回调打开进程(在打开回调中可以手动或者自动打开进程1.如果是手动直接返回1就行或错误值表示中断操作2.如果是自动返回对应的PID或错误值表示中断操作)2.其他二种方式打开回调可以为NULL,表示进程已经打开了,不需要在回调中打开,此时使用指定的PID或者窗口句柄来安装插件,具体是PID还是句柄请查看安装插件接口类型表3.返回值根据当前的安装插件方式不同有不同的含义:（具体请看安装插件接口类型表和覆盖策略） 3.1方式二是通过PID安装插件那么返回值应该为打开进程的PID,并把传递的PID参数给覆盖了(请看PID覆盖策略),可以返回小于等于0的错误值或者不存在的PID,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.1.1PID覆盖策略 \\n1.如果指定的参数PID有效大于0并存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID\\n2.如果指定的参数PID有效大于0并存在同时打开回调返回的PID无效小于等于0不存在就用指定参数的PID\\n3.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID无效小于等于0不存在就直接返回错误\\n4.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID 3.2方式三是通过窗口句柄安装插件那么返回值应该为打开进程的句柄,并把传递的句柄参数给覆盖了(请看窗口句柄覆盖策略),可以返回小于等于0的错误值或者窗口句柄无效,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.2.1窗口句柄覆盖策略 \\n1.如果指定参数的窗口句柄有效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄\\n2.如果指定参数的窗口句柄有效同时打开回调返回的的句柄无效就用指定参数的句柄\\n3.如果指定参数的窗口句柄无效同时打开回调返回的的句柄无效就直接返回错误\\n4.如果指定参数的窗口句柄无效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄 检查回调checkFun: typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int prePid,int error); 参数:windowsIndex:当前指定序号preWindowsIndex:之前绑定的序号或者错误值(小于0)--来源HCInject_GetPreWinIndex返回prePid:之前绑定的序号对应的PID--来源HCInject_GetPid返回error:提示值 error==RET_重连窗口(5)----->返回值含义:(1重连直接进行加载环境0新窗口) error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的) 我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 error==RET_重连窗口序号不一致(6)----->返回值含义:(1重连并使用之前绑定的序号进行加载环境 0新窗口(需要用户在回调中把之前PID给关闭)) error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的) 我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 其他情况可以返回小于0的自定义值:表示直接中断安装插件流程,并返回对应的值(这个值只要小于0即可,可以作为自定义值) 说明: 1.如果指定的检查回调为NULL,当内部检查到是重连窗口的时候 2.如果发现序号不一致就会直接返回(ERROR_当前进程插件序号不一致-1216) 3.如果序号一致就直接加载环境并实现重连 几个核心的点归纳总结出来其实就能规避掉很多坑了比如1.没安装过插件的都不算重连窗口全部当新窗口处理会触发打开回调2.安装过插件的不管是卸载了环境还是崩溃或重启中控都算重连窗口不会触发打开回调会触发检查回调",
    "url": "/docs/csharp/category_5",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "安装插件扩展模块[ex] - HD扩展_安装插件2",
    "content": "【功能描述】 第二种通讯安装插件方式(打开进程然后安装插件),通过pid如果使用HD多线程模块强烈建议在登录回调中使用 【备注】 可以参考表安装插件接口类型表 1.支持重连,重连的前提是不能被HCEnv_UnLoad卸载 回调解析: 打开回调openFun typedef__int64 (__stdcall* INSTALLPLUGint YPE)(int windowsIndex); 参数:windowsIndex:当前指定序号 说明:1.对于第一种方式打开回调不能为NULL,内部先安装插件再触发回调打开进程(在打开回调中可以手动或者自动打开进程1.如果是手动直接返回1就行或错误值表示中断操作2.如果是自动返回对应的PID或错误值表示中断操作)2.其他二种方式打开回调可以为NULL,表示进程已经打开了,不需要在回调中打开,此时使用指定的PID或者窗口句柄来安装插件,具体是PID还是句柄请查看安装插件接口类型表3.返回值根据当前的安装插件方式不同有不同的含义:（具体请看安装插件接口类型表和覆盖策略） 3.1方式二是通过PID安装插件那么返回值应该为打开进程的PID,并把传递的PID参数给覆盖了(请看PID覆盖策略),可以返回小于等于0的错误值或者不存在的PID,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.1.1PID覆盖策略 \\n1.如果指定的参数PID有效大于0并存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID\\n2.如果指定的参数PID有效大于0并存在同时打开回调返回的PID无效小于等于0不存在就用指定参数的PID\\n3.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID无效小于等于0不存在就直接返回错误\\n4.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID 3.2方式三是通过窗口句柄安装插件那么返回值应该为打开进程的句柄,并把传递的句柄参数给覆盖了(请看窗口句柄覆盖策略),可以返回小于等于0的错误值或者窗口句柄无效,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.2.1窗口句柄覆盖策略 \\n1.如果指定参数的窗口句柄有效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄\\n2.如果指定参数的窗口句柄有效同时打开回调返回的的句柄无效就用指定参数的句柄\\n3.如果指定参数的窗口句柄无效同时打开回调返回的的句柄无效就直接返回错误\\n4.如果指定参数的窗口句柄无效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄 检查回调checkFun: typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int prePid,int error); 参数:windowsIndex:当前指定序号preWindowsIndex:之前绑定的序号或者错误值(小于0)--来源HCInject_GetPreWinIndex返回prePid:之前绑定的序号对应的PID--来源HCInject_GetPid返回error:提示值 error==RET_重连窗口(5)----->返回值含义:(1重连直接进行加载环境0新窗口) error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的) 我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 error==RET_重连窗口序号不一致(6)----->返回值含义:(1重连并使用之前绑定的序号进行加载环境0新窗口(需要用户在回调中把之前PID给关闭)) 说明: 1.如果指定的检查回调为NULL,当内部检查到是重连窗口的时候 2.如果发现序号不一致就会直接返回(ERROR_当前进程插件序号不一致-1216) 3.如果序号一致就直接加载环境并实现重连 几个核心的点归纳总结出来其实就能规避掉很多坑了比如1.没安装过插件的都不算重连窗口全部当新窗口处理会触发打开回调2.安装过插件的不管是卸载了环境还是崩溃了中控都算重连窗口不会触发打开回调",
    "url": "/docs/csharp/category_5",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "安装插件扩展模块[ex] - HD扩展_安装插件3",
    "content": "【功能描述】 第三种通讯安装插件方式(打开进程然后安装插件),通过窗口句柄如果使用HD多线程模块强烈建议在登录回调中使用 【备注】 可以参考表安装插件接口类型表 1.支持重连,重连的前提是不能被HCEnv_UnLoad卸载 回调解析: 打开回调openFun:可以参考表安装插件接口类型表 typedef__int64 (__stdcall* INSTALLPLUGint YPE)(int windowsIndex); 参数:windowsIndex:当前指定序号 说明:1.对于第一种方式打开回调不能为NULL,内部先安装插件再触发回调打开进程(在打开回调中可以手动或者自动打开进程1.如果是手动直接返回1就行或错误值表示中断操作2.如果是自动返回对应的PID或错误值表示中断操作)2.其他二种方式打开回调可以为NULL,表示进程已经打开了,不需要在回调中打开,此时使用指定的PID或者窗口句柄来安装插件,具体是PID还是句柄请查看安装插件接口类型表3.返回值根据当前的安装插件方式不同有不同的含义:（具体请看安装插件接口类型表和覆盖策略） 3.1方式二是通过PID安装插件那么返回值应该为打开进程的PID,并把传递的PID参数给覆盖了(请看PID覆盖策略),可以返回小于等于0的错误值或者不存在的PID,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.1.1PID覆盖策略 \\n1.如果指定的参数PID有效大于0并存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID\\n2.如果指定的参数PID有效大于0并存在同时打开回调返回的PID无效小于等于0不存在就用指定参数的PID\\n3.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID无效小于等于0不存在就直接返回错误\\n4.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID 3.2方式三是通过窗口句柄安装插件那么返回值应该为打开进程的句柄,并把传递的句柄参数给覆盖了(请看窗口句柄覆盖策略),可以返回小于等于0的错误值或者窗口句柄无效,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.2.1窗口句柄覆盖策略 \\n1.如果指定参数的窗口句柄有效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄\\n2.如果指定参数的窗口句柄有效同时打开回调返回的的句柄无效就用指定参数的句柄\\n3.如果指定参数的窗口句柄无效同时打开回调返回的的句柄无效就直接返回错误\\n4.如果指定参数的窗口句柄无效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄 检查回调checkFun: typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int prePid,int error); 参数:windowsIndex:当前指定序号preWindowsIndex:之前绑定的序号或者错误值(小于0)--来源HCInject_GetPreWinIndex返回prePid:之前绑定的序号对应的PID--来源HCInject_GetPid返回error:提示值 error==RET_重连窗口(5)----->返回值含义:(1重连直接进行加载环境0新窗口) error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的) 我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 error==RET_重连窗口序号不一致(6)----->返回值含义:(1重连并使用之前绑定的序号进行加载环境0新窗口(需要用户在回调中把之前PID给关闭)) 说明: 1.如果指定的检查回调为NULL,当内部检查到是重连窗口的时候 2.如果发现序号不一致就会直接返回(ERROR_当前进程插件序号不一致-1216) 3.如果序号一致就直接加载环境并实现重连 几个核心的点归纳总结出来其实就能规避掉很多坑了比如1.没安装过插件的都不算重连窗口全部当新窗口处理会触发打开回调2.安装过插件的不管是卸载了环境还是崩溃了中控都算重连窗口不会触发打开回调",
    "url": "/docs/csharp/category_5",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "安装插件扩展模块[ex] - HD扩展_安装插件VM",
    "content": "【功能描述】 打开后安装通过PID针对虚拟机内部自动关联虚拟机如果使用HD多线程模块强烈建议在登录回调中使用 【备注】 可以参考表安装插件接口类型表 1.调用之前记得打开服务器HCVMDMA_StartServer并确定正确打开HCVMDMA_ServerIsStart 2.其他规则和前3种安装插件方式一致 3.支持重连,重连的前提是不能被HCEnv_UnLoad卸载 回调解析: 打开回调openFun:可以参考表安装插件接口类型表 typedef__int64 (__stdcall* INSTALLPLUGint YPE)(int windowsIndex); 参数:windowsIndex:当前指定序号 说明:1.对于第一种方式打开回调不能为NULL,内部先安装插件再触发回调打开进程(在打开回调中可以手动或者自动打开进程1.如果是手动直接返回1就行或错误值表示中断操作2.如果是自动返回对应的PID或错误值表示中断操作)2.其他二种方式打开回调可以为NULL,表示进程已经打开了,不需要在回调中打开,此时使用指定的PID或者窗口句柄来安装插件,具体是PID还是句柄请查看安装插件接口类型表3.返回值根据当前的安装插件方式不同有不同的含义:（具体请看安装插件接口类型表和覆盖策略） 3.1方式二是通过PID安装插件那么返回值应该为打开进程的PID,并把传递的PID参数给覆盖了(请看PID覆盖策略),可以返回小于等于0的错误值或者不存在的PID,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.1.1PID覆盖策略 \\n1.如果指定的参数PID有效大于0并存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID\\n2.如果指定的参数PID有效大于0并存在同时打开回调返回的PID无效小于等于0不存在就用指定参数的PID\\n3.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID无效小于等于0不存在就直接返回错误\\n4.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID 3.2方式三是通过窗口句柄安装插件那么返回值应该为打开进程的句柄,并把传递的句柄参数给覆盖了(请看窗口句柄覆盖策略),可以返回小于等于0的错误值或者窗口句柄无效,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.2.1窗口句柄覆盖策略 \\n1.如果指定参数的窗口句柄有效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄\\n2.如果指定参数的窗口句柄有效同时打开回调返回的的句柄无效就用指定参数的句柄\\n3.如果指定参数的窗口句柄无效同时打开回调返回的的句柄无效就直接返回错误\\n4.如果指定参数的窗口句柄无效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄 检查回调checkFun: typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int prePid,int error); 参数:windowsIndex:当前指定序号preWindowsIndex:之前绑定的序号或者错误值(小于0)--来源HCInject_GetPreWinIndex返回prePid:之前绑定的序号对应的PID--来源HCInject_GetPid返回error:提示值 error==RET_重连窗口(5)----->返回值含义:(1重连直接进行加载环境0新窗口) error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的) 我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 error==RET_重连窗口序号不一致(6)----->返回值含义:(1重连并使用之前绑定的序号进行加载环境0新窗口(需要用户在回调中把之前PID给关闭)) 说明: 1.如果指定的检查回调为NULL,当内部检查到是重连窗口的时候 2.如果发现序号不一致就会直接返回(ERROR_当前进程插件序号不一致-1216) 3.如果序号一致就直接加载环境并实现重连 几个核心的点归纳总结出来其实就能规避掉很多坑了比如1.没安装过插件的都不算重连窗口全部当新窗口处理会触发打开回调2.安装过插件的不管是卸载了环境还是崩溃了中控都算重连窗口不会触发打开回调",
    "url": "/docs/csharp/category_5",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "环境初始化模块(Inject) - HD通讯_初始化",
    "content": "【功能描述】 初始化插件环境 【备注】 每次打开游戏都需要先初始化一次 不要多次初始化 该接口还会把当前全局进程位数HCEnv_SetProcessType与当前窗口序号进程绑定,省去了切换进程位数的操作,如果不绑定可能会返回-1107(ERROR_进程位数不匹配)",
    "url": "/docs/csharp/category_6",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "环境初始化模块(Inject) - HD通讯_初始化Ex",
    "content": "【功能描述】 初始化插件环境 【备注】 每次打开游戏都需要先初始化一次 不要多次初始化 如果不需要用LUA来初始化自己的数据,可以直接使用HCInject_Init 该接口还会把当前全局进程位数HCEnv_SetProcessType与当前窗口序号进程绑定,省去了切换进程位数的操作,如果不绑定可能会返回-1107(ERROR_进程位数不匹配)",
    "url": "/docs/csharp/category_6",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "环境初始化模块(Inject) - HD通讯_初始化Exx",
    "content": "【功能描述】 初始化插件环境 【备注】 每次打开游戏都需要先初始化一次 不要多次初始化 如果不需要用LUA来初始化自己的数据或者预加载DLL,可以直接使用HCInject_Init 该接口还会把当前全局进程位数HCEnv_SetProcessType与当前窗口序号进程绑定,省去了切换进程位数的操作,如果不绑定可能会返回-1107(ERROR_进程位数不匹配)",
    "url": "/docs/csharp/category_6",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "环境初始化模块(Inject) - HD通讯_获取PID",
    "content": "【功能描述】 获取打开的进程PID 【备注】 调用这个接口之前必须保证插件已经加载才会获取PID",
    "url": "/docs/csharp/category_6",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "环境初始化模块(Inject) - HD通讯_获取之前PID",
    "content": "【功能描述】 获取打开的进程之前的PID(可以用于重连) 【备注】 当我们在调试的时候中控如果崩了,如果此时插件还在游戏进程中执行,那么可以当打开中控的时候直接获取PID进行通讯,而不是调用初始化之类的操作",
    "url": "/docs/csharp/category_6",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "环境初始化模块(Inject) - HD通讯_获取绑定窗口序号",
    "content": "【功能描述】 通过进程PID尝试拿到绑定的窗口序号 【备注】 返回如果大于等于0的值表示之前进程绑定的窗口序号 没有进程PID返回-1178 没有绑定过返回-1179",
    "url": "/docs/csharp/category_6",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "环境初始化模块(Inject) - HCInject_GetPreWinIndexEx",
    "content": "【功能描述】 通过进程PID尝试拿到绑定的窗口序号 【备注】 返回如果大于等于0的值表示之前进程绑定的窗口序号 没有进程PID返回-1178 没有绑定过返回-1179",
    "url": "/docs/csharp/category_6",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "环境初始化模块(Inject) - HD通讯_获取窗口句柄",
    "content": "【功能描述】 获取窗口句柄,内部是通过PID获取窗口句柄需要先安装好插件到目标进程 【备注】 内部是通过HCWIN_EnumWindowByProcessId获取",
    "url": "/docs/csharp/category_6",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "环境初始化模块(Inject) - HD通讯_获取窗口句柄Ex",
    "content": "【功能描述】 获取窗口句柄(需要内置,一般不需要调用这个获取句柄),如果需要通过PID获取句柄请调用HCInject_GetHwnd 【备注】 这个接口和内置的游戏接口有关,需要搭建完通讯才能调用 并不是一定获取到 如果要获取进程句柄还需要自行获取,除非内置了游戏数据",
    "url": "/docs/csharp/category_6",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "环境初始化模块(Inject) - HD通讯_继续",
    "content": "【功能描述】 继续环境加载操作 【备注】 当我们调用了HCEnv_Load后需要调用这个接口来验证",
    "url": "/docs/csharp/category_6",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "环境初始化模块(Inject) - HD通讯_存数据",
    "content": "【功能描述】 存自定义二进制数据 【备注】 无",
    "url": "/docs/csharp/category_6",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "环境初始化模块(Inject) - HD通讯_取数据",
    "content": "【功能描述】 取自定义二进制数据 【备注】 取的数据就是用HCInject_SetData接口存的数据",
    "url": "/docs/csharp/category_6",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "通讯环境模块(Env) - HD环境_初始化",
    "content": "【功能描述】 HD插件环境加载(初始化中控环境) 【备注】 中控初始化开始就要调用,仅仅一次",
    "url": "/docs/csharp/category_7",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "通讯环境模块(Env) - HD环境_初始化Ex",
    "content": "【功能描述】 HD插件环境加载(初始化中控环境)(扩展版本)最新版本一般不用了 【备注】 中控初始化开始就要调用,仅仅一次",
    "url": "/docs/csharp/category_7",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "通讯环境模块(Env) - HD环境_加载窗口",
    "content": "【功能描述】 HD插件环境加载 【备注】 调用这个接口需要先调用环境初始化模块中的初始化接口 每次打开进程后都要调用",
    "url": "/docs/csharp/category_7",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "通讯环境模块(Env) - HD环境_加载窗口Ex",
    "content": "【功能描述】 HD插件环境加载(扩展版本),涉及到回调 【备注】 调用这个接口需要先调用环境初始化模块中的初始化接口 每次打开进程后都要调用",
    "url": "/docs/csharp/category_7",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "通讯环境模块(Env) - HD环境_卸载窗口",
    "content": "【功能描述】 HD插件环境卸载 【备注】 调用这个接口需要先调用环境初始化模块中的初始化接口 进程关闭一定要记得卸载窗口序号对应的窗口环境,以便于下次窗口序号使用 1.没安装过插件的都不算重连窗口全部当新窗口处理 2.安装过插件的不管卸载环境还是崩溃或者重启窗口都可以重连窗口一个序号只能绑定到一个窗口操作",
    "url": "/docs/csharp/category_7",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "通讯环境模块(Env) - HD环境_卸载窗口Ex",
    "content": "【功能描述】 HD插件环境卸载(扩展版本) 【备注】 调用这个接口需要先调用环境初始化模块中的初始化接口 进程关闭一定要记得卸载窗口序号对应的窗口环境,以便于下次窗口序号使用 1.没安装过插件的都不算重连窗口全部当新窗口处理 2.安装过插件的不管卸载环境还是崩溃或者重启窗口都可以重连窗口一个序号只能绑定到一个窗口操作",
    "url": "/docs/csharp/category_7",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "通讯环境模块(Env) - HDEnv_GetWinExIndex",
    "content": "【功能描述】 获取副窗口序号 【备注】 这个副窗口序号可以用于登录器的绑定和操作,相当于窗口序号的一个助手,做一些额外的事情相当于一个窗口序号可以操作2个进程如:窗口序号1那么他返回的窗口扩展序号就是1+31也就是32序号",
    "url": "/docs/csharp/category_7",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "通讯环境模块(Env) - HDEnv_GetGlobalWinExIndex",
    "content": "【功能描述】 获取全局副窗口序号,这是一个全局的序号 【备注】 一个中控仅有一个计算方式:0+31也就是这个全局序号为31序号从0开始用途:给当前中控分配一个助手,来控制一个进程来辅助中控做一些事情",
    "url": "/docs/csharp/category_7",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "通讯环境模块(Env) - HD环境_附加心跳",
    "content": "【功能描述】 给中控附加心跳 【备注】 检测主线程心跳 如果需要检测主线程心跳是否卡住,请记得先HOOK主线程接口HC_HookMaint hread 设置心跳回调函数类型 typedef__int32 (* HeartFunType)(__int32 窗口索引,__int32 type);回调函数返回值:0不重置之前的记录1重置之前的记录(一般重新开启新进程会设置为1) \\n0.正常心跳进程存在的情况下会触发\\n1.通讯崩溃/关闭等等原因导致进程不存在->重启窗口\\n2.主线程崩溃/关闭/未响应/目标进程卡死原因导致进程不存在/存在->强制关闭->重启窗口设置挂接主线程\\n2.1.附加心跳的时候可以检查主线程的状态(游戏/目标)\\n2.2.后面的内存操作可以主线程调用\\n2.3.注意:附加心跳的时候设置的检查时间一定要大于安装插件到挂接主线程的时间\\n3.卡屏崩溃/关闭/区域图像卡死了原因导致进程不存在/存在->强制关闭->重启窗口设置屏幕检查范围\\n6.1+2+3",
    "url": "/docs/csharp/category_7",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "通讯环境模块(Env) - HCEnv_SetWindowsSortInfo",
    "content": "【功能描述】 设置窗口排序信息",
    "url": "/docs/csharp/category_7",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "通讯环境模块(Env) - HD环境_设置卡屏检查信息",
    "content": "【功能描述】 当我们心跳检测指定了3或者6需要设置卡屏范围和卡屏检测次数当大于这个次数就调用回调",
    "url": "/docs/csharp/category_7",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "通讯环境模块(Env) - HD环境_脱离心跳",
    "content": "【功能描述】 脱离中控附加的心跳检测 【备注】 脱离会堵塞直到脱离成功一般中控进程结果关闭前调用",
    "url": "/docs/csharp/category_7",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "通讯环境模块(Env) - HD环境_调试模式",
    "content": "【功能描述】 设置导入接口为调试模式 【备注】 中控初始化开始就可以调用,仅仅一次 发布版本不需要调用此接口,默认为发布版本",
    "url": "/docs/csharp/category_7",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "通讯环境模块(Env) - HD环境_开启文件提示",
    "content": "【功能描述】 设置是否打开文件提示窗口 【备注】 当HD内部导致中控关闭或者插件失效会一文件形式提示信息",
    "url": "/docs/csharp/category_7",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "通讯环境模块(Env) - HD环境_添加线程",
    "content": "【功能描述】 添加线程环境 【备注】 这个接口用来测试用的,开发者一般用不到",
    "url": "/docs/csharp/category_7",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "通讯环境模块(Env) - HD环境_测试通讯值",
    "content": "【功能描述】 测试是否通讯成功,返回单一值 【备注】 这个接口用来测试是否环境搭建成功",
    "url": "/docs/csharp/category_7",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "通讯环境模块(Env) - HCEnv_TestCALL_RetArray",
    "content": "【功能描述】 测试是否通讯成功,返回json字符串 【备注】 这个接口用来测试是否环境搭建成功",
    "url": "/docs/csharp/category_7",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "通讯环境模块(Env) - HCEnv_TestCALL_RetValueEx",
    "content": "【功能描述】 测试是否通讯成功,返回单一值 【备注】 这个接口用来测试是否环境搭建成功",
    "url": "/docs/csharp/category_7",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "通讯环境模块(Env) - HD环境_测试通讯字符串Ex",
    "content": "【功能描述】 测试是否通讯成功,返回json字符串 【备注】 这个接口用来测试是否环境搭建成功",
    "url": "/docs/csharp/category_7",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "通讯环境模块(Env) - HD环境_设置目标进程位数",
    "content": "【功能描述】 设置目标进程位数 【备注】 该接口是全局设置,也就是设置了一次,接下来的所有进程都是该位数,可以多次调用切换进程位数,建议使用HCEnv_SetProcessTypeEx这个扩展版本 如果使用了HDEX_InstallPlugin1HDEX_InstallPlugin2HDEX_InstallPlugin3这些接口可以不用调用这个接口设置目标进程位数 如果是自定义通讯流程就需要自己设置后然后初始化序号进行通讯绑定",
    "url": "/docs/csharp/category_7",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "通讯环境模块(Env) - HD环境_设置目标进程位数Ex",
    "content": "【功能描述】 指定某个序号绑定的进程位数 【备注】 如果使用了HDEX_InstallPlugin1HDEX_InstallPlugin2HDEX_InstallPlugin3这些接口可以不用调用这个接口设置目标进程位数 如果是自定义通讯流程就需要自己设置后然后初始化序号进行通讯绑定",
    "url": "/docs/csharp/category_7",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "通讯环境模块(Env) - HD环境_设置中控事件处理回调函数",
    "content": "【功能描述】 设置中控事件处理回调函数 【备注】 这个回调函数作用于当自定义模块通知中控的时候 中控事件处理回调函数接口类型: typedef__int32 (__stdcall* HandleEventFunType)(__int32 窗口序号,__int32 插件序号,HDHandleEventInfoInfo); HDHandleEventInfo结构体: typedefstructHDHandleEventInfo\\n处理事件{__int32 m_callType;\\n自定义HDValuem_call;HDValuem_rcx;HDValuem_rdx;HDValuem_r8;HDValuem_r9;HDValuem_lparam5;HDValuem_lparam6;HDValuem_lparam7;HDValuem_lparam8;HDValuem_value;HDValuem_size;charm_buffer[MAX_PATH];charm_buffer2[MAX_PATH];HDValue* m_pRetValue;\\n值单独char* m_pRetJson;\\n字符串返回}HDHandleEventInfo; 代码案例: __int32 HCLogin::HandleEvent(__int32 窗口序号,__int32 插件序号,HDHandleEventInfoInfo){HDbgPrint f_Normal(\\\"处理接受事件->窗口序号:%dcallType:%dbuffer1:%sbuffer2:%scall:%llXrcx:%llXrdx:%llX\\\",窗口序号,Info.m_callType,Info.m_buffer,Info.m_buffer2,Info.m_call,Info.m_rcx,Info.m_rdx);if(Info.m_callType==1){* Info.m_pRetValue=999;autoret=HCMKB_UnBind(窗口序号);HDbgPrint f_Normal(\\\"解绑后台ret:%d\\\",ret);return8;}elseif(Info.m_callType==2){\\n处理逻辑* Info.m_pRetValue=123;sprint f_s(Info.m_pRetJson,1024* 10,\\\"%s\\\",\\\"我是中控\\\");\\n672637autoret=HCMKB_Bind(窗口序号,Info.m_call,\\\"1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|0|1|\\\");HDbgPrint f_Normal(\\\"绑定后台ret:%d\\\",ret);if(ret==1){Sleep(1000);ret=HCMKB_MoveTo(窗口序号,672,610,0);HDbgPrint f_Normal(\\\"模拟移动一次->672610ret:%d\\\",ret);ret=HCMKB_LeftClick(窗口序号);HDbgPrint f_Normal(\\\"模拟点击一次->ret:%d\\\",ret);}return1024* 10;\\n大于8认为是字符串}* Info.m_pRetValue=1;return8;}",
    "url": "/docs/csharp/category_7",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "通讯环境模块(Env) - HCEnv_SetShutDownCallBack",
    "content": "【功能描述】 设置关闭回调函数(处理HD功能失效,内部自动关闭中控前的操作) 【备注】 当HD出现异常或者失效或者网络验证出现断线,会在自动关闭自身在期间会先调用这个回调(这个回调自己做好关闭前处理工作)然后会自动调用微软API接口ExitProcess();结束自身 在这个回调用户可以自行处理自己的业务逻辑 1.资源清理逻辑 2.接口释放逻辑 3.自启逻辑 4.自定义处理逻辑 回调函数接口类型: typedef__int32 (__stdcall* ShutDownEventFunType)(__int32 code); code:错误代码",
    "url": "/docs/csharp/category_7",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "通讯环境模块(Env) - HCEnv_SetPidCheckBack",
    "content": "【功能描述】 设置PID检查回调(内部检查PID不存在会触发这个回调) 【备注】 1.这是设置全局PID检查回调 2.内部检查PID不存在会触发这个回调 3.如果没有调用此接口设置全局PID检查回调,那么对于4种安装插件方式中,当内部检查不到PID存在也会触发检查回调并传递给回调参数窗口序号:0之前窗口序号:0检查PID:pid提示值:8 回调函数接口类型: typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int checkPid,int error); windowsIndex:窗口序号 preWindowsIndex:窗口序号 checkPid:当前检查的PID error:传递8表示需要检查PID",
    "url": "/docs/csharp/category_7",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "通讯环境模块(Env) - HD环境_设置通讯检测间隔",
    "content": "【功能描述】 设置通讯检测间隔毫秒 【备注】 1.值越小响应越快,随之带来的效率更高但是会导致CPU利用率变高2.值的大小根据当前的项目指定,对于一直要实时响应的最好小点",
    "url": "/docs/csharp/category_7",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "通讯环境模块(Env) - HD环境_设置回调响应间隔",
    "content": "【功能描述】 设置回调响应毫秒 【备注】 1.值越小响应越快,随之带来的效率更高但是会导致CPU利用率变高2.值的大小根据当前的项目指定,对于一直要实时响应的最好小点",
    "url": "/docs/csharp/category_7",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "通讯环境模块(Env) - HD环境_强制结束线程",
    "content": "【功能描述】 强制结束当前线程(可以在卸载环境后调用) 【备注】 强制结束当前线程内部会对锁操作循环拿到锁才会强制关闭并返回成功此接口小心使用1.不到万不得已不要强制关闭线程(因为强制关闭线程不管在任何时候都有可能造成不可能预计的BUG)2.调用此接口的线程不要和结束的线程是同一个(虽然内部有检查)3.该接口如果参数:是否操作锁为真,那么会堵塞,直到拿到锁权限后,才会强制关闭线程,然后解锁(防止死锁).",
    "url": "/docs/csharp/category_7",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "通讯环境模块(Env) - HD环境_强制结束线程Ex",
    "content": "【功能描述】 强制结束当前线程(可以在卸载环境后调用) 【备注】 强制结束当前线程内部会对锁操作循环拿到锁才会强制关闭并返回成功此接口小心使用1.不到万不得已不要强制关闭线程(因为强制关闭线程不管在任何时候都有可能造成不可能预计的BUG)2.调用此接口的线程不要和结束的线程是同一个(虽然内部有检查)3.该接口如果参数:是否操作锁为真,那么会堵塞,直到拿到锁权限后,才会强制关闭线程,然后解锁(防止死锁).",
    "url": "/docs/csharp/category_7",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_29",
    "title": "通讯环境模块(Env) - HD环境_关闭绑定进程",
    "content": "【功能描述】 关闭绑定的目标窗口 【备注】 内部实现可能是正常关闭也可能是强制关闭 至于是哪一种会根据实际情况动态调用",
    "url": "/docs/csharp/category_7",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "多线程模块[MT] - HD多线程_初始化流程回调",
    "content": "【功能描述】 初始化多线程设置相关流程回调 【备注】 1.普通回调1参数windowsIndex:代表的是窗口序号也是主序号 2.每个回调参数的函数类型不一样,注意对应 回调触发顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->结束回调 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/csharp/category_8",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "多线程模块[MT] - HD多线程_初始化流程回调Ex",
    "content": "【功能描述】 初始化多线程设置相关流程回调可以绑定一个全局参数 【备注】 1.普通回调1参数windowsIndex:代表的是窗口序号也是主序号 2.每个回调参数的函数类型不一样,注意对应 回调触发顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->结束回调 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调EXtypedef__int64 (__stdcall* UIFUNTYPEEX)(__int32 windowsIndex,char* stepText,void* lparam,BOOL m_end1,BOOL m_pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 lparam:HCMT_InitProcessEx绑定一个全局参数,一般我们指定为一个UI对象地址,这个回调可以拿到这个地址 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/csharp/category_8",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "多线程模块[MT] - HD多线程_初始化操作回调",
    "content": "【功能描述】 初始化多线程结束/暂停/恢复状态的操作回调 【备注】 1.仅仅对于这3个回调而言普通回调2参数index:大于多开限制数量,就是副序号;小于就是主序号(也是窗口序号);计算公式:if(index>=多开限制数)主序号=index-多开限制数; \\n(index>=多开环境数量)?(index-多开环境数量):(index)2.其他接口的windowsIndex就代表的是窗口序号也是主序号3.多开限制数量最大常量为31,请自行在程序里面定义 4.多开限制数量用HCEnv_GetMaxWindowNum返回一个常数,可以自己写成一个常量 回调触发顺序: 结束窗口操作:endBindCallBack并传递对应的线程序号(线程序号可能是主序号也就是窗口序号,也有可能是副序号) 暂停窗口操作:pauseBindCallBack并传递对应的线程序号(线程序号可能是主序号也就是窗口序号,也有可能是副序号) 恢复窗口操作:recoverBindCallBack并传递对应的线程序号(线程序号可能是主序号也就是窗口序号,也有可能是副序号) 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/csharp/category_8",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "多线程模块[MT] - HD多线程_注册消息回调",
    "content": "【功能描述】 注册窗口消息 【备注】 1.通过HCMT_MsgSend/HCMT_MsgPost来触发回调 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/csharp/category_8",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "多线程模块[MT] - HD多线程_同步发送消息",
    "content": "【功能描述】 发送消息(同步) 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/csharp/category_8",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "多线程模块[MT] - HD多线程_异步发送消息",
    "content": "【功能描述】 发送消息(异步) 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/csharp/category_8",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "多线程模块[MT] - HD多线程_开启窗口Msg",
    "content": "【功能描述】 通过消息开启窗口操作 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.开启成功后会相应触发对应设置的回调函数 3.顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 停止窗口:结束绑定回调->结束回调",
    "url": "/docs/csharp/category_8",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "多线程模块[MT] - HD多线程_停止窗口Msg",
    "content": "【功能描述】 通过消息停止窗口操作 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.开启成功后会相应触发对应设置的回调函数 3.顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 停止窗口:结束绑定回调->结束回调",
    "url": "/docs/csharp/category_8",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "多线程模块[MT] - HD多线程_重启窗口Msg",
    "content": "【功能描述】 通过消息重启窗口操作 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.开启成功后会相应触发对应设置的回调函数 3.顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 停止窗口:结束绑定回调->结束回调",
    "url": "/docs/csharp/category_8",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "多线程模块[MT] - HD多线程_重启窗口MsgEx",
    "content": "【功能描述】 通过消息重启窗口操作(扩展版本) 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.开启成功后会相应触发对应设置的回调函数 3.顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 停止窗口:结束绑定回调->结束回调",
    "url": "/docs/csharp/category_8",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "多线程模块[MT] - HD多线程_更新UI",
    "content": "【功能描述】 通过消息触发UI回调,并传递线程状态信息和日志操作信息给UI回调 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
    "url": "/docs/csharp/category_8",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "多线程模块[MT] - HD多线程_发送文本",
    "content": "【功能描述】 通过消息触发UI回调,并传递线程状态信息和日志操作信息给UI回调 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
    "url": "/docs/csharp/category_8",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "多线程模块[MT] - HD多线程_所有窗口暂停",
    "content": "【功能描述】 设置所有窗口结束 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/csharp/category_8",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "多线程模块[MT] - HD多线程_获取线程状态值",
    "content": "【功能描述】 获取主副序号对应的线程的状态值 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调 typedefenumTHREADSTATE\\n线程状态{THREADSTATE_NONE=-1,\\n未启动THREADSTATE_STARTING=0,\\n开启中THREADSTATE_LOGINING=1,\\n正在登录THREADSTATE_RUNNING=2,\\n正在运行THREADSTATE_PAUSE=3,\\n暂停THREADSTATE_PAUSEING=4,\\n正在暂停THREADSTATE_RECOVERING=5,\\n正在恢复THREADSTATE_WILLSTOP=6,\\n准备停止THREADSTATE_STOPPING=7\\n正在停止}THREADSTATE;",
    "url": "/docs/csharp/category_8",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "多线程模块[MT] - HCMT_GetStateString",
    "content": "【功能描述】 获取状态整数值对应的字符串 【备注】 无",
    "url": "/docs/csharp/category_8",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "多线程模块[MT] - HD多线程_是否能开启",
    "content": "【功能描述】 判断是否能开启新的(主副线程)传递的只能是主序号 【备注】 无",
    "url": "/docs/csharp/category_8",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "多线程模块[MT] - HD多线程_开启窗口",
    "content": "【功能描述】 直接开启窗口操作 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.开启成功后会相应触发对应设置的回调函数 3.顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 停止窗口:结束绑定回调->结束回调",
    "url": "/docs/csharp/category_8",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "多线程模块[MT] - HD多线程_所有窗口恢复",
    "content": "【功能描述】 设置所有窗口恢复 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的恢复绑定回调",
    "url": "/docs/csharp/category_8",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "多线程模块[MT] - HD多线程_所有窗口停止",
    "content": "【功能描述】 设置所有窗口停止 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的停止绑定回调",
    "url": "/docs/csharp/category_8",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "多线程模块[MT] - HD多线程_暂停窗口",
    "content": "【功能描述】 设置窗口暂停 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/csharp/category_8",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "多线程模块[MT] - HD多线程_暂停线程",
    "content": "【功能描述】 设置主副序号对应的线程暂停 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/csharp/category_8",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "多线程模块[MT] - HD多线程_恢复窗口",
    "content": "【功能描述】 设置窗口恢复 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的恢复绑定回调",
    "url": "/docs/csharp/category_8",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "多线程模块[MT] - HD多线程_恢复线程",
    "content": "【功能描述】 设置主副序号对应的线程恢复 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/csharp/category_8",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "多线程模块[MT] - HD多线程_停止窗口",
    "content": "【功能描述】 设置窗口停止 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的结束绑定回调",
    "url": "/docs/csharp/category_8",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "多线程模块[MT] - HD多线程_是否运行中",
    "content": "【功能描述】 (第一第二)回调里面调用,检查当前线程是否结束 【备注】 无",
    "url": "/docs/csharp/category_8",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "多线程模块[MT] - HD多线程_是否暂停",
    "content": "【功能描述】 判断主副序号对应的线程是否是已被暂停状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/csharp/category_8",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "多线程模块[MT] - HD多线程_是否停止",
    "content": "【功能描述】 判断主副序号对应的线程是否是已被结束状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/csharp/category_8",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "多线程模块[MT] - HD多线程_延迟",
    "content": "【功能描述】 设延迟函数,自带暂停/结束/恢复检查 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.检查随后触发HCMT_InitOperate设置的3个回调;理论上不能在HCMT_InitOperate设置的3个回调中调用,因为会导致无限调用自己(但是内部做了检测所以不会无限调用,也就是如果当前第一次已经检查到标志位并触发对应的绑定回调了,在回调中又再一次调用HCMT_Sleep,那么这一次的HCMT_Sleep只会正常休眠,并不继续检查了,防止无限调用); 3.其他回调均可以(无影响) 4.如果要内部检测状态机状态需要调用HCMT_StatusSleep",
    "url": "/docs/csharp/category_8",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "多线程状态机 - HD状态机_开启状态机",
    "content": "【功能描述】 开启状态机 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用配合多线程模块一起使用 2.一般在执行回调或者检查回调调用就行不需要都开启(内部有检测是否开启) 3.支持多线程,但是不建议,执行回调中调用就行了",
    "url": "/docs/csharp/category_9",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "多线程状态机 - HD状态机_操作状态",
    "content": "【功能描述】 全局(全部窗口序号)禁用或者开启状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用配合多线程模块一起使用 2.操作的状态值,必须先调用HCMT_AddStatus添加状态,否则无效 3.支持多线程 4.如果当前状态正在执行中,此时调用该接口使其状态被禁止/无效,那么当前状态对应的状态回调中就会立即退出回调或者立即监控到状态被改变了 5.一旦被禁止,就算我们切换到该状态,也无法去执行绑定的状态回调了",
    "url": "/docs/csharp/category_9",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "多线程状态机 - HD状态机_改变当前状态",
    "content": "【功能描述】 改变状态机状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用 2.操作的状态值,必须先调用HCMT_AddStatus添加状态,否则无效 3.支持多线程,一般在检测回调中调用 4.只能改变比之前优先级低的优先级 《《《特别注意:状态值的大小也表示优先级,优先级越高的回调,享有最先执行权限！！！！》》》 如:登录回调>死亡回调>买药回调>限时副本回调>主线回调 优先级大小策略: 1.优先级用户自行定义大小(-1表示没有,不要重复)建议从0开始123...依次递增值越大优先级越高 2.优先级高回调的可以打断或者中断优先级低的回调,当优先级高的回调执行完毕,会继续执行优先级低的回调 2.如果是优先级一样的回调,只有执行完第一个,才能执行第二个. 3.优先级低的回调是不能打断优先级高的回调,此时如果想执行优先级低的回调,那么必须等待优先级高的回调执行完毕后,方可执行优先级低的回调 4.回调内部如果有循环流程,应加入退出循环条件(一般使用HCMT_IsStatus作为退出循环的条件判断或者其他),不要死循环,否则无法实现状态切换",
    "url": "/docs/csharp/category_9",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "多线程状态机 - HD状态机_回溯上个状态",
    "content": "【功能描述】 回溯状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用 2.操作的状态值,必须先调用HCMT_AddStatus添加状态,否则无效 3.支持多线程,一般在检测回调中调用 4.只能改变比之前优先级低的优先级 《《《特别注意:状态值的大小也表示优先级,优先级越高的回调,享有最先执行权限！！！！》》》 如:登录回调>死亡回调>买药回调>限时副本回调>主线回调 优先级大小策略: 1.优先级用户自行定义大小(-1表示没有,不要重复)建议从0开始123...依次递增值越大优先级越高 2.优先级高回调的可以打断或者中断优先级低的回调,当优先级高的回调执行完毕,会继续执行优先级低的回调 2.如果是优先级一样的回调,只有执行完第一个,才能执行第二个. 3.优先级低的回调是不能打断优先级高的回调,此时如果想执行优先级低的回调,那么必须等待优先级高的回调执行完毕后,方可执行优先级低的回调 4.回调内部如果有循环流程,应加入退出循环条件(一般使用HCMT_IsStatus作为退出循环的条件判断或者其他),不要死循环,否则无法实现状态切换",
    "url": "/docs/csharp/category_9",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "多线程状态机 - HD状态机_是否状态中",
    "content": "【功能描述】 当前状态机的状态在回调中是否有效 【备注】 1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用 2.用在状态回调中,检索是否是当前状态3.在设置的状态回调函数中循环调用检查当前窗口序号的状态类型是否是当前的映射的回调状态类型4.支持多线程 C++例子: ========== __int64 __stdcall HMT::登录状态回调(__int32 windowsIndex,__int64 lparam){while(HCMT_IsStatus()){autoret=HCMT_StatusSleep(1000);HDbgPrint f_Command(\\\"HCMT_StatusSleep:%lld\\\",ret);HCMT_MsgStepText(windowsIndex,\\\"正在登录中...\\\");}return1;} ==========",
    "url": "/docs/csharp/category_9",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "多线程状态机 - HD状态机_状态延迟",
    "content": "【功能描述】 状态机延迟函数(自带暂停/结束/恢复/状态机) 【备注】 1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用2.支持多线程自带暂停/结束/恢复/状态机 3.注意区别于HCMT_Sleep这个接口是没法检索状态机状态的 C++例子: ========== __int64 __stdcall HMT::登录状态回调(__int32 windowsIndex,__int64 lparam){while(HCMT_IsStatus()){autoret=HCMT_StatusSleep(1000);\\n<<<<<<<<-----------------------------这里能及时返回(当我们状态变动的时候)返回值:4表示状态变动HDbgPrint f_Command(\\\"HCMT_StatusSleep:%lld\\\",ret);HCMT_MsgStepText(windowsIndex,\\\"正在登录中...\\\");}return1;} ==========",
    "url": "/docs/csharp/category_9",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "多线程状态机 - HD状态机_获取当前状态",
    "content": "【功能描述】 获取状态机状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用 2.支持多线程,一般在UI回调中调用,获取状态值并显示到控件上",
    "url": "/docs/csharp/category_9",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "多线程状态机 - HCMT_SleepEx",
    "content": "【功能描述】 设延迟函数,自带暂停/结束/恢复检查/状态机状态(可选)(扩展版本) 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.检查随后触发HCMT_InitOperate设置的3个回调;理论上不能在HCMT_InitOperate设置的3个回调中调用,因为会导致无限调用自己(但是内部做了检测所以不会无限调用,也就是如果当前第一次已经检查到标志位并触发对应的绑定回调了,在回调中又再一次调用HCMT_Sleep,那么这一次的HCMT_Sleep只会正常休眠,并不继续检查了,防止无限调用); 3.其他回调均可以(无影响) 4.如果要内部检测状态机状态需要调用HCMT_StatusSleep",
    "url": "/docs/csharp/category_9",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "APIHOOK - HDHOOK_Send发包",
    "content": "【功能描述】 调用SendAPI(目标进程中调用)X86X64 【备注】 无",
    "url": "/docs/csharp/category_10",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "APIHOOK - HDHOOK_SendTo发包",
    "content": "【功能描述】 调用SendtoAPI(目标进程中调用)X86X64 【备注】 无",
    "url": "/docs/csharp/category_10",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "AddressHOOK - HDHOOK_挂钩",
    "content": "【功能描述】 任意HOOK(内置插件)X86X64 【备注】 无 回调写法: ============= X86X64:typedef__int64 (__stdcall* HandleCallBackFunType)(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam); 参数解析: 窗口序号:对应的窗口序号 插件序号:内部自动传递 raxOreaxrbxOrebxrcxOrecxrdxOredxrbpOrebprspOresprsiOresirdiOredi:分别对应X86X64的8个寄存器 r8r9r10r11r12r13r14r15:分别对应X64的8个寄存器 lparam:是HDHK_Hook的第五个参数附加参数 备注: 返回值: 0【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 1【走原有流程】 2【需要修改值】+【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 3【需要修改值】+【走原有流程】 备注:调用约定是__stdcall X86X64通用调用案例: __int32 __stdcall HandleHookCallBackFun(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam){ HDbgPrint f_HOOK(\\\"触发HOOK回调->窗口序号:%d插件序号:%draxOreax:%llXrbxOrebx:%llXrcxOrecx:%llXrdxOredx:%llXrbpOrebp::%llXrspOresp:%llXrsiOresi:%llXrdiOredi:%llXr8:%llXr9:%llXr10:%llXr11:%llXr12:%llXr13:%llXr14:%llXr15:%llXlparam:%d\\\",窗口序号,插件序号,raxOreax,rbxOrebx,rcxOrecx,rdxOredx,rbpOrebp,rspOresp,rsiOresi,rdiOredi,r8,r9,r10,r11,r12,r13,r14,r15,lparam); \\n....中间执行自己的逻辑 \\n....可以用驱动读写 \\n如果需要修改寄存器值就调用HDHK_SetProcessHookCallBackLparam设置__int32 mark=1;autoret=HDHK_SetProcessHookCallBackLparam(窗口序号,插件序号,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,mark);HDbgPrint f_HOOK(\\\"ret:%lld\\\",ret); \\n返回值:0忽视HOOK语句直接跳到原来1走原有流程2需要修改值+直接跳到原来3需要修改值+走原有流程return3;} 回调内修改写法请转至》》》》》修改回调返回方法(X86X64)《《《《《《",
    "url": "/docs/csharp/category_11",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "AddressHOOK - HDHOOK_挂钩Ex",
    "content": "【功能描述】 任意HOOK(内置插件)X64(该接口针对X64有效) 【备注】 无 回调写法: ============= X86X64:typedef__int64 (__stdcall* HandleCallBackFunType)(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam); 参数解析: 窗口序号:对应的窗口序号 插件序号:内部自动传递 raxOreaxrbxOrebxrcxOrecxrdxOredxrbpOrebprspOresprsiOresirdiOredi:分别对应X86X64的8个寄存器 r8r9r10r11r12r13r14r15:分别对应X64的8个寄存器 lparam:是HDHK_Hook的第五个参数附加参数 备注: 返回值: 0【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 1【走原有流程】 2【需要修改值】+【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 3【需要修改值】+【走原有流程】 备注:调用约定是__stdcall X86X64通用调用案例: __int32 __stdcall HandleHookCallBackFun(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam){ HDbgPrint f_HOOK(\\\"触发HOOK回调->窗口序号:%d插件序号:%draxOreax:%llXrbxOrebx:%llXrcxOrecx:%llXrdxOredx:%llXrbpOrebp::%llXrspOresp:%llXrsiOresi:%llXrdiOredi:%llXr8:%llXr9:%llXr10:%llXr11:%llXr12:%llXr13:%llXr14:%llXr15:%llXlparam:%d\\\",窗口序号,插件序号,raxOreax,rbxOrebx,rcxOrecx,rdxOredx,rbpOrebp,rspOresp,rsiOresi,rdiOredi,r8,r9,r10,r11,r12,r13,r14,r15,lparam); \\n....中间执行自己的逻辑 \\n....可以用驱动读写 \\n如果需要修改寄存器值就调用HDHK_SetProcessHookCallBackLparam设置__int32 mark=1;autoret=HDHK_SetProcessHookCallBackLparam(窗口序号,插件序号,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,mark);HDbgPrint f_HOOK(\\\"ret:%lld\\\",ret); \\n返回值:0忽视HOOK语句直接跳到原来1走原有流程2需要修改值+直接跳到原来3需要修改值+走原有流程return3;} 回调内修改写法请转至》》》》》修改回调返回方法(X86X64)《《《《《《",
    "url": "/docs/csharp/category_11",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "AddressHOOK - HDHOOK_挂钩Exx",
    "content": "【功能描述】 任意HOOK(内置插件)X64(该接口针对X64有效) 【备注】 无 回调写法: ============= X86X64:typedef__int64 (__stdcall* HandleCallBackFunType)(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam); 参数解析: 窗口序号:对应的窗口序号 插件序号:内部自动传递 raxOreaxrbxOrebxrcxOrecxrdxOredxrbpOrebprspOresprsiOresirdiOredi:分别对应X86X64的8个寄存器 r8r9r10r11r12r13r14r15:分别对应X64的8个寄存器 lparam:是HDHK_Hook的第五个参数附加参数 备注: 返回值: 0【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 1【走原有流程】 2【需要修改值】+【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 3【需要修改值】+【走原有流程】 备注:调用约定是__stdcall X86X64通用调用案例: __int32 __stdcall HandleHookCallBackFun(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam){ HDbgPrint f_HOOK(\\\"触发HOOK回调->窗口序号:%d插件序号:%draxOreax:%llXrbxOrebx:%llXrcxOrecx:%llXrdxOredx:%llXrbpOrebp::%llXrspOresp:%llXrsiOresi:%llXrdiOredi:%llXr8:%llXr9:%llXr10:%llXr11:%llXr12:%llXr13:%llXr14:%llXr15:%llXlparam:%d\\\",窗口序号,插件序号,raxOreax,rbxOrebx,rcxOrecx,rdxOredx,rbpOrebp,rspOresp,rsiOresi,rdiOredi,r8,r9,r10,r11,r12,r13,r14,r15,lparam); \\n....中间执行自己的逻辑 \\n....可以用驱动读写 \\n如果需要修改寄存器值就调用HDHK_SetProcessHookCallBackLparam设置__int32 mark=1;autoret=HDHK_SetProcessHookCallBackLparam(窗口序号,插件序号,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,mark);HDbgPrint f_HOOK(\\\"ret:%lld\\\",ret); \\n返回值:0忽视HOOK语句直接跳到原来1走原有流程2需要修改值+直接跳到原来3需要修改值+走原有流程return3;} 回调内修改写法请转至》》》》》修改回调返回方法(X86X64)《《《《《《 HDHK_HookExxx 函数简介: 任意HOOK(内置插件)X64(该接口针对X64有效) 函数原型:__int64 HDHK_HookExxx(__int32 窗口序号,__int64 hook地址,char* 所属模块名字,__int64 jmp13空白地址,__int64 保留汇编地址,__int32 破坏字节,__int64 回调地址,__int64 附加参数,BOOL 是否主线程调用=FALSE); 参数定义: 窗口序号:窗口序号(从1开始) 所属模块名字:当前HOOK地址所属那个模块可以不指定为0就行 jmp13空白地址:在当前模块的代码地址找一个空白空间大小为13字节用于存储jmp一些指令 保留汇编地址:用来存储破坏字节数量+5字节大小的空白空间的首地址一般这个地址位于当前所属模块代码空白空间 hook地址:当前HOOK的目标地址(参考适合的HOOK地址X86HOOK地址规则X64HOOK地址规则) 破坏字节数:涉及到的汇编字节数 回调地址:遵循下面回调函数类型 附加参数:自定义参数,此参数会传递给回调函数 是否主线程调用:需要开启才开启,一般默认就行 返回值: 查看返回值表 备注: 无 回调写法: ============= X86X64:typedef__int64 (__stdcall* HandleCallBackFunType)(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam); 参数解析: 窗口序号:对应的窗口序号 插件序号:内部自动传递 raxOreaxrbxOrebxrcxOrecxrdxOredxrbpOrebprspOresprsiOresirdiOredi:分别对应X86X64的8个寄存器 r8r9r10r11r12r13r14r15:分别对应X64的8个寄存器 lparam:是HDHK_Hook的第五个参数附加参数 备注: 返回值: 0【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 1【走原有流程】 2【需要修改值】+【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 3【需要修改值】+【走原有流程】 备注:调用约定是__stdcall X86X64通用调用案例: __int32 __stdcall HandleHookCallBackFun(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam){ HDbgPrint f_HOOK(\\\"触发HOOK回调->窗口序号:%d插件序号:%draxOreax:%llXrbxOrebx:%llXrcxOrecx:%llXrdxOredx:%llXrbpOrebp::%llXrspOresp:%llXrsiOresi:%llXrdiOredi:%llXr8:%llXr9:%llXr10:%llXr11:%llXr12:%llXr13:%llXr14:%llXr15:%llXlparam:%d\\\",窗口序号,插件序号,raxOreax,rbxOrebx,rcxOrecx,rdxOredx,rbpOrebp,rspOresp,rsiOresi,rdiOredi,r8,r9,r10,r11,r12,r13,r14,r15,lparam); \\n....中间执行自己的逻辑 \\n....可以用驱动读写 \\n如果需要修改寄存器值就调用HDHK_SetProcessHookCallBackLparam设置__int32 mark=1;autoret=HDHK_SetProcessHookCallBackLparam(窗口序号,插件序号,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,mark);HDbgPrint f_HOOK(\\\"ret:%lld\\\",ret); \\n返回值:0忽视HOOK语句直接跳到原来1走原有流程2需要修改值+直接跳到原来3需要修改值+走原有流程return3;} 回调内修改写法请转至》》》》》修改回调返回方法(X86X64)《《《《《《",
    "url": "/docs/csharp/category_11",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "AddressHOOK - HDHOOK_暂停挂钩",
    "content": "【功能描述】 暂停任意HOOK(内置插件)X86X64 【备注】 无",
    "url": "/docs/csharp/category_11",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "AddressHOOK - HDHOOK_恢复挂钩",
    "content": "【功能描述】 恢复任意HOOK(内置插件)X86X64 【备注】 无",
    "url": "/docs/csharp/category_11",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "AddressHOOK - HDHOOK_卸载挂钩",
    "content": "【功能描述】 卸载任意HOOK(内置插件)X86X64 【备注】 无",
    "url": "/docs/csharp/category_11",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "通用模块 - HD通用_CALLX64",
    "content": "【功能描述】 通用CALL(适合X64),支持0-8个参数 【备注】 如果需要更多参数传递请联系作者",
    "url": "/docs/csharp/category_12",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "通用模块 - HD通用_CALLX86",
    "content": "【功能描述】 通用CALL(适合X86),支持0到8个参数 【备注】 如果需要更多参数传递请联系作者 HC_HookMaint hread 函数简介: 挂接主线程 函数原型:__int64 __stdcall HC_HookMaint hread(__int32 窗口序号,__int64 窗口句柄); 参数定义: 窗口序号:窗口序号(从1开始) 窗口句柄:窗口句柄 返回值: 查看返回值表 备注: 无",
    "url": "/docs/csharp/category_12",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "ShellCode模块(SH) - HD汇编_转机器码",
    "content": "【功能描述】 汇编文本转换机器码 【备注】 无",
    "url": "/docs/csharp/category_13",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "ShellCode模块(SH) - HD汇编_写入机器码",
    "content": "【功能描述】 机器码写入到进程 【备注】 这里执行用的是HD驱动来申请和写入这个机器码,注意要把HD驱动安装好 拿到了写入地址可以使用HD驱动创建远线程来执行",
    "url": "/docs/csharp/category_13",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "LUA模块(LUA) - HDLUA_读文件",
    "content": "【功能描述】 执行或加载LUA文件 【备注】 LUA标识符:当【是否需要拿到返回值】参数为真的时候,用作线程的标识符,方便主动退出线程，标识符规则:不要太大了{0到100}以内就行是否执行:真表示执行并加载LUA(比如:注入一些自定义LUA接口同时还能执行LUA),反之只是加载LUA文件(比如:注入一些自定义LUA接口)是否需要拿到返回值:真表示堵塞直到LUA文件执行完毕并获取返回值，反之表示开启一根线程执行(无法拿到返回值,可以在LUA文件中做一些耗时的操作)",
    "url": "/docs/csharp/category_14",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "LUA模块(LUA) - HDLUA_结束LUA",
    "content": "【功能描述】 关闭LUA线程 【备注】 LUA标识符:调用【HCLUA_ReadFile】接口指定的【LUA标识符】参数,一一对应,-1表示全部LUA线程退出！！！",
    "url": "/docs/csharp/category_14",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "LUA模块(LUA) - HDLUA_执行CALL",
    "content": "【功能描述】 执行被注册过的LUA函数 【备注】 json:{\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":XXX}",
    "url": "/docs/csharp/category_14",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "驱动模块(N) - HCN_LoadDrv",
    "content": "【功能描述】 加载N驱动 【备注】 需要联网,可以卸载,驱动内置了进程,如需要自定义进程名联系管理员添加或者用HD驱动",
    "url": "/docs/csharp/category_15",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "驱动模块(N) - HCN_InjectDll(W/A)X86",
    "content": "【功能描述】 注入32/64位DLL(需要先加载N驱动) 【备注】 无",
    "url": "/docs/csharp/category_15",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "驱动模块(N) - HCN_InjectDll(W/A)X64",
    "content": "【功能描述】 注入32/64位DLL(需要先加载N驱动) 【备注】 无",
    "url": "/docs/csharp/category_15",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "驱动模块(N) - HCN_InstallPlug(86/64)",
    "content": "【功能描述】 安装32/64位HD插件(需要先加载N驱动) 【备注】 无",
    "url": "/docs/csharp/category_15",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "驱动模块(N) - HCN_UnLoadDrv",
    "content": "【功能描述】 卸载驱动同时清除了注入的DLL缓存 【备注】 取消窗口关联,一定要卸载相关信息,随后所有循环会快速内退,从而线程安全退出！！！！",
    "url": "/docs/csharp/category_15",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "驱动模块(HD) - HD驱动_安装",
    "content": "【功能描述】 加载HD驱动(正式版本) 【备注】 需要联网,不可以卸载驱动,可以清除注入DLL缓存 此接口相当于调用HCHD_LoadDrv2传递-1:HDEx正式版本(云下发正常驱动,无特殊处理)",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "驱动模块(HD) - HD驱动_安装2",
    "content": "【功能描述】 云下发加载驱动或组件(可以通过指定驱动序号,加载不同版本的驱动如:正式版本定制版本备用版本其他保护盾VT等等) 【备注】 需要联网,不可以卸载驱动,可以清除注入DLL缓存",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "驱动模块(HD) - HD驱动_初始化快速读写",
    "content": "【功能描述】 初始化HD驱动快速读写(一般在HD安装驱动接口后的下一句就开始初始化) 【备注】 如果最开始安装HD驱动调用的是HCHD_LoadDrv同时又需要快速读写遍历,就需要先调用此接口,然后调用HCHD_RWExx进行快读内存读写遍历(百万级别) 如果最开始安装HD驱动调用的是HCHD_LoadDrv2并传递驱动序号为0,表示可以直接调用HCHD_RWExx进行快读内存读写遍历(百万级别),不需要再调用此接口了",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "驱动模块(HD) - HD驱动_无痕注入DLL",
    "content": "【功能描述】 把DLL注入到指定进程中(指定DLL二进制文件数据) 【备注】 不能卸载驱动,可以清除注入DLL缓存,支持32/64进程",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "驱动模块(HD) - HCHD_InjectX86X64ByFile",
    "content": "【功能描述】 把DLL注入到指定进程中(指定DLL文件路径) 【备注】 不能卸载驱动,可以清除注入DLL缓存,支持32/64进程",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "驱动模块(HD) - HCHD_InstallPlug(86/64)",
    "content": "【功能描述】 安装HD插件到指定进程中 【备注】 需要联网,可以清除注入DLL缓存,支持32/64进程",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "驱动模块(HD) - HD驱动_卸载插件",
    "content": "【功能描述】 卸载插件(并不是从进程中卸载,而是清除了下一次进程打开的时候安装插件的缓存) 【备注】 无",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "驱动模块(HD) - HD驱动_前台鼠标移动点击",
    "content": "【功能描述】 前台驱动鼠标移动并点击 【备注】 可以通过调用HCHD_SetMMTrackType来设置鼠标全局移动轨迹类型 按键在轨迹坐标集中那些坐标有效:第一个点操作按键-中间点不操作按键-最后一个点不操作按键",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "驱动模块(HD) - HD驱动_前台鼠标移动点击Ex",
    "content": "【功能描述】 前台驱动鼠标移动并点击(可指定句柄) 【备注】 可以通过调用HCHD_SetMMTrackType来设置鼠标全局移动轨迹类型 按键在轨迹坐标集中那些坐标有效:第一个点操作按键-中间点不操作按键-最后一个点不操作按键",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "驱动模块(HD) - HD驱动_前台鼠标移动按下",
    "content": "【功能描述】 前台驱动鼠标移动并按下指定键(可指定句柄) 【备注】 可以通过调用HCHD_SetMMTrackType来设置鼠标全局移动轨迹类型 按键在轨迹坐标集中那些坐标有效:第一个点操作按键-中间点不操作按键-最后一个点不操作按键",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "驱动模块(HD) - HD驱动_前台鼠标移动弹起",
    "content": "【功能描述】 前台驱动鼠标移动并弹起指定键(可指定句柄) 【备注】 可以通过调用HCHD_SetMMTrackType来设置鼠标全局移动轨迹类型 按键在轨迹坐标集中那些坐标有效:第一个点操作按键-中间点不操作按键-最后一个点不操作按键",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "驱动模块(HD) - HD驱动_前台按键",
    "content": "【功能描述】 前台驱动键盘(按下并弹起) 【备注】 无",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "驱动模块(HD) - HD驱动_前台按键按下",
    "content": "【功能描述】 前台驱动键盘(按下某键) 【备注】 无",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "驱动模块(HD) - HD驱动_前台按键弹起",
    "content": "【功能描述】 前台驱动键盘(弹起某键) 【备注】 无",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "驱动模块(HD) - HD驱动_驱动读写",
    "content": "【功能描述】 驱动读写 【备注】 无",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "驱动模块(HD) - HD驱动_开始读写",
    "content": "【功能描述】 驱动读写Ex(开始批读写)与HCHD_EndRWEx成对出现适合快速遍历(百万级别读写单线程) 【备注】 适合快速遍历",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "驱动模块(HD) - HD驱动_驱动读写Ex",
    "content": "【功能描述】 驱动读写Ex(批量读写)(百万级别读写单线程) 【备注】 先调用HCHD_BeginRWEx然后中间调用该接口HCHD_RWEx最后调用HCHD_EndRWEx用于释放环境",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "驱动模块(HD) - HD驱动_结束读写",
    "content": "【功能描述】 驱动读写Ex(结束批读写)与HCHD_BeginRWEx成对出现适合快速遍历(百万级别读写单线程) 【备注】 适合快速遍历",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "驱动模块(HD) - HD驱动_地址是否可读",
    "content": "【功能描述】 检查地址是否可读 【备注】 无",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "驱动模块(HD) - HD驱动_进程保护",
    "content": "【功能描述】 进程保护 【备注】 无",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "驱动模块(HD) - HD驱动_进程隐藏",
    "content": "【功能描述】 开启进程隐藏 【备注】 一次性只能隐藏一个,如果需要隐藏第二个,先把之前的给显示了",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "驱动模块(HD) - HCHD_PHideEx",
    "content": "【功能描述】 开启进程隐藏(加强版本)无法恢复 【备注】 1.隐藏后关闭进程不会蓝屏 2.隐藏后该接口无法恢复显示,其实也没必要恢复显示",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "驱动模块(HD) - HD驱动_进程显示",
    "content": "【功能描述】 进程显示 【备注】 无",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "驱动模块(HD) - HD_进程杀死",
    "content": "【功能描述】 进程杀死 【备注】 无",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "驱动模块(HD) - HD驱动_申请内存",
    "content": "【功能描述】 驱动申请内存 【备注】 无",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "驱动模块(HD) - HD驱动_申请内存Ex",
    "content": "【功能描述】 驱动申请内存(扩展版本) 【备注】 无",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "驱动模块(HD) - HD驱动_内存释放",
    "content": "【功能描述】 驱动内存释放 【备注】 无",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "驱动模块(HD) - HD驱动_修改内存保护",
    "content": "【功能描述】 驱动修改内存保护属性 【备注】 无",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_29",
    "title": "驱动模块(HD) - HD驱动_内存隐藏",
    "content": "【功能描述】 驱动内存隐藏 【备注】 无",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_30",
    "title": "驱动模块(HD) - HD驱动_内存查询",
    "content": "【功能描述】 驱动内存查询 【备注】 无",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_31",
    "title": "驱动模块(HD) - HD驱动_特征码查找地址",
    "content": "【功能描述】 驱动通过特征码查找地址 【备注】 无",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_32",
    "title": "驱动模块(HD) - HD驱动_获取主模块地址",
    "content": "【功能描述】 驱动获取主模块EXE的地址 【备注】 无",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_33",
    "title": "驱动模块(HD) - HD驱动_获取模块地址",
    "content": "【功能描述】 驱动获取指定模块的地址 【备注】 无",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_34",
    "title": "驱动模块(HD) - HD驱动_获取模块函数地址",
    "content": "【功能描述】 驱动获取指定模块的指定的函数地址 【备注】 无",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_35",
    "title": "驱动模块(HD) - HD驱动_修改机器码",
    "content": "【功能描述】 驱动修改机器码 【备注】 无",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_36",
    "title": "驱动模块(HD) - HD驱动_反截图",
    "content": "【功能描述】 驱动内核反截图 【备注】 无",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_37",
    "title": "驱动模块(HD) - HD驱动_远线程执行CALL",
    "content": "【功能描述】 驱动内存远线程执行函数 【备注】 无",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_38",
    "title": "驱动模块(HD) - HD驱动_清除注入缓存",
    "content": "【功能描述】 驱动清除注入缓存(全局插件缓存,DLL缓存) 【备注】 无",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_39",
    "title": "驱动模块(HD) - HD驱动_进程提权",
    "content": "【功能描述】 进程提权 【备注】 无",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_40",
    "title": "驱动模块(HD) - HCHD_HandleRoot",
    "content": "【功能描述】 进程提权 【备注】 无",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_41",
    "title": "驱动模块(HD) - HD驱动_设置鼠标轨迹",
    "content": "【功能描述】 设置驱动鼠标移动轨迹类型 【备注】 无",
    "url": "/docs/csharp/category_16",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "注入模块(Inject) - HD注入_普通安装插件X86",
    "content": "【功能描述】 普通注入插件(X86),不需要安装驱动,这个不是无痕注入,只支持32位的 【备注】 这个不是无痕注入方便操作一些小程序普通注入插件DLL参数->进程PID,进程位数(32)可以在打开进程的经常下安装插件DLL初始化进程环境后调用这个安装插件然后循环等待拿到PID不是驱动级别",
    "url": "/docs/csharp/category_17",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "注入模块(Inject) - HD注入_普通安装插件X86Ex",
    "content": "【功能描述】 普通注入插件(X86)),不需要安装驱动,这个不是无痕注入 【备注】 这个不是无痕注入 方便操作一些小程序 用法和HCN_NormalInstallPlugX86一样这个接口只是参数是句柄防止一些进程一次性打开多个这个句柄可以用来指定某个窗口",
    "url": "/docs/csharp/category_17",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "注入模块(Inject) - HD注入_普通安装插件X64",
    "content": "【功能描述】 普通注入插件(X64),不需要安装驱动,这个不是无痕注入,只支持64位的 【备注】 这个不是无痕注入方便操作一些小程序普通注入插件DLL参数->进程PID,进程位数(32)可以在打开进程的经常下安装插件DLL初始化进程环境后调用这个安装插件然后循环等待拿到PID不是驱动级别",
    "url": "/docs/csharp/category_17",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "注入模块(Inject) - HD注入_普通安装插件X64Ex",
    "content": "【功能描述】 普通注入插件(X64),不需要安装驱动,这个不是无痕注入,只支持64位的 【备注】 这个不是无痕注入 方便操作一些小程序 用法和HCN_NormalInstallPlugX86一样这个接口只是参数是句柄防止一些进程一次性打开多个这个句柄可以用来指定某个窗口",
    "url": "/docs/csharp/category_17",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "注入模块(Inject) - HD注入_驱动安装插件",
    "content": "【功能描述】 安装HD插件(需要预先安装HD驱动),【注入方式1】 【备注】 不是无模块注入可以在打开进程的情况下注入驱动级别的,自动判断目标进程位数",
    "url": "/docs/csharp/category_17",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "注入模块(Inject) - HD注入_驱动注入DLL",
    "content": "【功能描述】 安装指定DLL(需要预先安装HD驱动),【注入方式1】 【备注】 不是无模块注入可以在打开进程的情况下注入驱动级别的,自动判断目标进程位数",
    "url": "/docs/csharp/category_17",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "注入模块(Inject) - HD注入_驱动安装插件Ex",
    "content": "【功能描述】 安装HD插件(需要预先安装HD驱动),【注入方式2】 【备注】 不是无模块注入可以在打开进程的情况下注入驱动级别的,自动判断目标进程位数",
    "url": "/docs/csharp/category_17",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "注入模块(Inject) - HD注入_驱动注入DLLEx",
    "content": "【功能描述】 安装指定DLL(需要预先安装HD驱动),【注入方式2】 【备注】 不是无模块注入可以在打开进程的情况下注入驱动级别的,自动判断目标进程位数",
    "url": "/docs/csharp/category_17",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "盾 - HD盾_保护",
    "content": "【功能描述】 一键保护进程(隐藏等) 【备注】 需要调用HCHD_LoadDrv2传递参数3来安装保护盾HDPP驱动",
    "url": "/docs/csharp/category_18",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "盾 - HD盾_开启窗口保护",
    "content": "【功能描述】 打开窗口保护以及子窗口 【备注】 需要调用HCHD_LoadDrv2传递参数5来安装保护盾HDPW驱动 可以多次指定内部会把指定的保护窗口句柄以及所属子窗口一起保护",
    "url": "/docs/csharp/category_18",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "盾 - HD盾_关闭窗口保护",
    "content": "【功能描述】 取消所有窗口保护(指定保护过的) 【备注】 需要调用HCHD_LoadDrv2传递参数5来安装保护盾HDPW驱动 可以取消调用过HCHDPW_OnProtect所有保护的窗口句柄",
    "url": "/docs/csharp/category_18",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "HDVT - HDVT_申请内存",
    "content": "【功能描述】 VT驱动申请内存 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/csharp/category_19",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "HDVT - HDVT_释放内存",
    "content": "【功能描述】 VT驱动释放内存 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/csharp/category_19",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "HDVT - HDVT_读内存",
    "content": "【功能描述】 VT驱动读内存 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/csharp/category_19",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "HDVT - HDVT_写内存",
    "content": "【功能描述】 VT驱动写内存 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/csharp/category_19",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "HDVT - HDVT_获取模块地址",
    "content": "【功能描述】 VT驱动获取模块地址 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/csharp/category_19",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "HDVT - HDVT_获取模块函数地址",
    "content": "【功能描述】 VT驱动获取模块函数地址 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/csharp/category_19",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "HDVT - HDVT_无痕HOOK",
    "content": "【功能描述】 VT驱动无痕HOOK,过CRC 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/csharp/category_19",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "HDVT - HDVT_远程执行",
    "content": "【功能描述】 VT驱动远程插入执行 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/csharp/category_19",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "HDVT - HCHDVT_InjectX64",
    "content": "【功能描述】 VT驱动无痕无模块注入X64DLL 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/csharp/category_19",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "HDVT - HCHDVT_InjectX86",
    "content": "【功能描述】 VT驱动无痕无模块注入X86DLL 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/csharp/category_19",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "HDVT - HDVT_安装插件X64",
    "content": "【功能描述】 VT驱动无痕无模块安装X64插件到目标进程中 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/csharp/category_19",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "HDVT - HDVT_安装插件X86",
    "content": "【功能描述】 VT驱动无痕无模块安装X86插件到目标进程中 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/csharp/category_19",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "YOLOV(HDYOLOV) - HCYOLO_AddModel",
    "content": "【功能描述】 添加YOLOV(ncnn.bin和ncnn.param)模型文件(从内存中加载模型) 【备注】 ncnn模型bin“＝XXX.ncnn.bin”param“＝XXX.ncnn.param”从内存中加载模型备注:一个进程仅同时支持一个版本的模型 需要调用HCHD_LoadDrv2传递参数4来安装YOLOV组件模块",
    "url": "/docs/csharp/category_20",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "YOLOV(HDYOLOV) - HCYOLO_AddModelFile",
    "content": "【功能描述】 添加YOLOV(ncnn.bin和ncnn.param)模型文件(从文件中加载模型) 【备注】 ncnn模型bin“＝XXX.ncnn.bin”param“＝XXX.ncnn.param”从文件中加载模型备注:一个进程仅同时支持一个版本的模型 需要调用HCHD_LoadDrv2传递参数4来安装YOLOV组件模块",
    "url": "/docs/csharp/category_20",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "YOLOV(HDYOLOV) - HCYOLO_Identify",
    "content": "【功能描述】 添加YOLOV(ncnn.bin和ncnn.param)模型文件(从文件中加载模型),从后台截图缓存识别 【备注】 识别信息调用HCEnv_GetRetJson“获取字符串信息以|”分割,自行切割 %d,%f,%f,%f,%f,%f,%d|%d,%f,%f,%f,%f,%f,%d| 字段含义:类别,X1,Y1,X2,Y2,置信度,耗时|类别,X1,Y1,X2,Y2,置信度,耗时| 需要调用HCHD_LoadDrv2传递参数4来安装YOLOV组件模块",
    "url": "/docs/csharp/category_20",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "YOLOV(HDYOLOV) - HCYOLO_IdentifyByFile",
    "content": "【功能描述】 添加YOLOV(ncnn.bin和ncnn.param)模型文件(从文件中加载模型),从指定图片文件识别 【备注】 识别信息调用HCEnv_GetRetJson“获取字符串信息以|”分割,自行切割 %d,%f,%f,%f,%f,%f,%d|%d,%f,%f,%f,%f,%f,%d| 字段含义:类别,X1,Y1,X2,Y2,置信度,耗时|类别,X1,Y1,X2,Y2,置信度,耗时| 需要调用HCHD_LoadDrv2传递参数4来安装YOLOV组件模块",
    "url": "/docs/csharp/category_20",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "VNC(HDVNC) - HDVNC_连接虚拟机",
    "content": "【功能描述】 连接虚拟机 【备注】 对应的虚拟机请开启VNC并设置好端口 两种使用VNC模式特别注意: 1.安装插件(HDEX_InstallPluginVM)的形式连接VNC:支持重连port==0属于重连会检查安装插件时候的PID同时自动获取之前连接过的端口前提是已经连接过卸载的时候内部调用(HCEnv_UnLoadEx) 2.未安装插件(HCVnc_Connect)的形式连接VNC:重连一直都可以不能port==0因为会检查PID未安装插件的PID为0卸载的时候内部调用(HCEnv_UnLoad)",
    "url": "/docs/csharp/category_21",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "VNC(HDVNC) - HDVNC_关闭连接",
    "content": "【功能描述】 关闭连接虚拟机 【备注】 对应的虚拟机请开启VNC并设置好端口 两种使用VNC模式特别注意: 1.安装插件(HDEX_InstallPluginVM)的形式连接VNC:支持重连port==0属于重连会检查安装插件时候的PID同时自动获取之前连接过的端口前提是已经连接过卸载的时候内部调用(HCEnv_UnLoadEx) 2.未安装插件(HCVnc_Connect)的形式连接VNC:重连一直都可以不能port==0因为会检查PID未安装插件的PID为0卸载的时候内部调用(HCEnv_UnLoad)",
    "url": "/docs/csharp/category_21",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "VNC(HDVNC) - HDVNC_鼠标绝对移动",
    "content": "【功能描述】 VNC鼠标绝对移动(自带移动轨迹直线波动防检测) 【备注】 无",
    "url": "/docs/csharp/category_21",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "VNC(HDVNC) - HDVNC_鼠标相对移动",
    "content": "【功能描述】 VNC鼠标相对移动(自带移动轨迹直线波动防检测) 【备注】 无",
    "url": "/docs/csharp/category_21",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "VNC(HDVNC) - HDVNC_鼠标左键点击",
    "content": "【功能描述】 VNC鼠标左键点击 【备注】 无",
    "url": "/docs/csharp/category_21",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "VNC(HDVNC) - HDVNC_鼠标左键按下",
    "content": "【功能描述】 VNC鼠标左键按下 【备注】 无",
    "url": "/docs/csharp/category_21",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "VNC(HDVNC) - HDVNC_鼠标左键弹起",
    "content": "【功能描述】 VNC鼠标左键弹起 【备注】 无",
    "url": "/docs/csharp/category_21",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "VNC(HDVNC) - HDVNC_鼠标左键双击",
    "content": "【功能描述】 VNC鼠标左键双击 【备注】 无",
    "url": "/docs/csharp/category_21",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "VNC(HDVNC) - HDVNC_鼠标右键点击",
    "content": "【功能描述】 VNC鼠标右键点击 【备注】 无",
    "url": "/docs/csharp/category_21",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "VNC(HDVNC) - HDVNC_鼠标右键按下",
    "content": "【功能描述】 VNC鼠标右键按下 【备注】 无",
    "url": "/docs/csharp/category_21",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "VNC(HDVNC) - HDVNC_鼠标右键弹起",
    "content": "【功能描述】 VNC鼠标右键弹起 【备注】 无",
    "url": "/docs/csharp/category_21",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "VNC(HDVNC) - HDVNC_鼠标滚轮滚下",
    "content": "【功能描述】 VNC鼠标滚轮滚下 【备注】 无",
    "url": "/docs/csharp/category_21",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "VNC(HDVNC) - HDVNC_鼠标滚轮滚上",
    "content": "【功能描述】 VNC鼠标滚轮滚上 【备注】 无",
    "url": "/docs/csharp/category_21",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "VNC(HDVNC) - HCVnc_KeyPress",
    "content": "【功能描述】 VNC键盘按键敲击 【备注】 无",
    "url": "/docs/csharp/category_21",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "VNC(HDVNC) - HDVNC_键盘按键按下",
    "content": "【功能描述】 VNC键盘按键按下 【备注】 无",
    "url": "/docs/csharp/category_21",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "VNC(HDVNC) - HDVNC_键盘按键弹起",
    "content": "【功能描述】 VNC键盘按键弹起 【备注】 无",
    "url": "/docs/csharp/category_21",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "VNC(HDVNC) - HCVnc_KeyPressStr",
    "content": "【功能描述】 VNC键盘连续按键字符串(数字+字母) 【备注】 无",
    "url": "/docs/csharp/category_21",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "VNC(HDVNC) - HCVnc_SendString",
    "content": "【功能描述】 VNC键盘输入字符串(中文+数字+符号+字母) 【备注】 无",
    "url": "/docs/csharp/category_21",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "VNC(HDVNC) - HDVNC_开启截图",
    "content": "【功能描述】 开启截图(内部会开启一根线程循环获取虚拟机画面) 【备注】 可以调用HCVnc_CloseCapture来结束截图线程",
    "url": "/docs/csharp/category_21",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "VNC(HDVNC) - HDVNC_关闭截图",
    "content": "【功能描述】 关闭截图(结束开启截图内部产生的线程) 【备注】 需要多次调用关闭,直到关闭成功,通常情况一次就能关闭成功",
    "url": "/docs/csharp/category_21",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "窗口模块(WIN) - HD窗口_排序通讯窗口",
    "content": "【功能描述】 排序安装过插件的进程 【备注】 安装过插件的经常意思表示: 1.通讯过的窗口序号的对应的进程PID(未被第二次初始化序号HCInject_Init) 2.卸载进程环境不会影响绑定过的进程排序(不能调用始化序号HCInject_Init的前提下,也就是可以重连的情况下) 3.HCInject_Init这个接口一旦调用,就会取消所有关联(意味着不能重连了),从而影响当前绑定的窗口PID,意味着新窗口即将打开",
    "url": "/docs/csharp/category_22",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "窗口模块(WIN) - HD窗口_伪装进程",
    "content": "【功能描述】 伪装进程(防止检查到实际的进程存在) 【备注】 无 案例: 把注入器伪装成了hd.exe",
    "url": "/docs/csharp/category_22",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "窗口模块(WIN) - HD窗口_设置窗口状态",
    "content": "【功能描述】 设置或者操作窗口状态 【备注】 无",
    "url": "/docs/csharp/category_22",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "窗口模块(WIN) - HD窗口_设置窗口大小",
    "content": "【功能描述】 设置窗口大小 【备注】 窗口居中会改变窗口位置",
    "url": "/docs/csharp/category_22",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "窗口模块(WIN) - HD窗口_窗口移动",
    "content": "【功能描述】 移动窗口 【备注】 无",
    "url": "/docs/csharp/category_22",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "窗口模块(WIN) - HD窗口_是否64位进程",
    "content": "【功能描述】 目标窗口句柄/目标进程是否64位 【备注】 窗口句柄或者PID任意指定一个就行 如果2个都指定则PID用于检测",
    "url": "/docs/csharp/category_22",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "窗口模块(WIN) - HD窗口_获取窗口标题",
    "content": "【功能描述】 获取目标窗口标题 【备注】 无",
    "url": "/docs/csharp/category_22",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "窗口模块(WIN) - HD窗口_获取窗口线程ID",
    "content": "【功能描述】 获取目标窗口句柄的线程ID 【备注】 无",
    "url": "/docs/csharp/category_22",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "窗口模块(WIN) - HD窗口_获取窗口进程ID",
    "content": "【功能描述】 获取目标窗口句柄的进程ID 【备注】 无",
    "url": "/docs/csharp/category_22",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "窗口模块(WIN) - HD窗口_获取窗口进程路径",
    "content": "【功能描述】 获取目标窗口句柄的路径 【备注】 无",
    "url": "/docs/csharp/category_22",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "窗口模块(WIN) - HD窗口_获取窗口位置",
    "content": "【功能描述】 获取窗口在屏幕上的位置 【备注】 返回字符串: left|top|rifght|bottom| RECT结构体: typedefstructtagRECT{LONGleft;LONGtop;LONGright;LONGbottom;}RECT,* PRECT;",
    "url": "/docs/csharp/category_22",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "窗口模块(WIN) - HD窗口_获取窗口类名",
    "content": "【功能描述】 获取目标窗口句柄的窗口类名 【备注】 无",
    "url": "/docs/csharp/category_22",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "窗口模块(WIN) - HD窗口_获取窗口状态",
    "content": "【功能描述】 获取目标窗口句柄的窗口状态 【备注】 无",
    "url": "/docs/csharp/category_22",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "窗口模块(WIN) - HD窗口_获取特殊窗口",
    "content": "【功能描述】 获取特殊窗口桌面Shell_TrayWnd 【备注】 无",
    "url": "/docs/csharp/category_22",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "窗口模块(WIN) - HD窗口_获取窗口关联句柄",
    "content": "【功能描述】 获取目标窗口句柄的关联窗口句柄 【备注】 无",
    "url": "/docs/csharp/category_22",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "窗口模块(WIN) - HD窗口_获取顶层活动窗口句柄",
    "content": "【功能描述】 获取顶层活动窗口,可以获取到按键自带插件无法获取到的句柄 【备注】 无",
    "url": "/docs/csharp/category_22",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "窗口模块(WIN) - HD窗口_获取顶层焦点窗口句柄",
    "content": "【功能描述】 获取顶层活动窗口中具有输入焦点的窗口句柄 【备注】 无",
    "url": "/docs/csharp/category_22",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "窗口模块(WIN) - HD窗口_设置焦点到窗口",
    "content": "【功能描述】 设置输入焦点到窗口 【备注】 无",
    "url": "/docs/csharp/category_22",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "窗口模块(WIN) - HD窗口_获取窗口客户区域",
    "content": "【功能描述】 获取窗口客户区域的宽度和高度 【备注】 返回字符串: w|h|",
    "url": "/docs/csharp/category_22",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "窗口模块(WIN) - HD窗口_获取窗口客户区域在屏幕",
    "content": "【功能描述】 获取窗口客户区域在屏幕上的位置 【备注】 返回字符串: left|top|rifght|bottom| RECT结构体: typedefstructtagRECT{LONGleft;LONGtop;LONGright;LONGbottom;}RECT,* PRECT;",
    "url": "/docs/csharp/category_22",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "窗口模块(WIN) - HD窗口_查找窗口",
    "content": "【功能描述】 查找符合类名或者标题名的顶层可见窗口,如果指定了parent,则在parent的第一层子窗口中查找 【备注】 无",
    "url": "/docs/csharp/category_22",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "窗口模块(WIN) - HD窗口_查找顶层窗口",
    "content": "【功能描述】 查找顶层窗口句柄,父窗口句柄为NULL 【备注】 无",
    "url": "/docs/csharp/category_22",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "窗口模块(WIN) - HD窗口_枚举查找窗口",
    "content": "【功能描述】 根据指定进程以及其它条件,枚举系统中符合条件的窗口 【备注】 单PID返回字符串: hwnd 多PID返回字符串:根据创建时间排序过的 hwnd1|hwnd2|hwnd3|",
    "url": "/docs/csharp/category_22",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "窗口模块(WIN) - HD窗口_枚举查找窗口Ex",
    "content": "【功能描述】 根据指定进程pid以及其它条件,枚举系统中符合条件的窗口,可以枚举到按键自带的无法枚举到的窗口 【备注】 单PID返回字符串: hwnd",
    "url": "/docs/csharp/category_22",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "窗口模块(WIN) - HD窗口_枚举进程",
    "content": "【功能描述】 根据指定进程名,枚举系统中符合条件的进程PID 【备注】 返回字符串: pid1|pid2|pid3|",
    "url": "/docs/csharp/category_22",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "窗口模块(WIN) - HD窗口_枚举窗口",
    "content": "【功能描述】 根据指定条件,枚举系统中符合条件的窗口,可以枚举到按键自带的无法枚举到的窗口 【备注】 多句柄返回字符串: hwnd1|hwnd2|hwnd3|",
    "url": "/docs/csharp/category_22",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "目标[TARGET] - HCTarget_UseVT",
    "content": "【功能描述】 目标进程是否使用VT驱动 【备注】 目标进程是否使用VT驱动需要中控安装和开启VT驱动type:0不使用1使用作用模块包含:后台键鼠模块后台截图模块谷歌内置浏览器模块APIHOOK模块自定义HOOK模块目的:过检测能力强",
    "url": "/docs/csharp/category_23",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "内核(NT) - HDNT_窗口句柄取PID",
    "content": "【功能描述】 获取目标窗口句柄的进程ID(R3层内核版本) 【备注】 可以绕过一些检测,比如NP等",
    "url": "/docs/csharp/category_24",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "内存操作模块(M) - HD内存_特征码",
    "content": "【功能描述】 特征码查找 【备注】 无",
    "url": "/docs/csharp/category_25",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "内存操作模块(M) - HD内存_特征码Ex",
    "content": "【功能描述】 特征码查找(通过指定地址) 【备注】 无",
    "url": "/docs/csharp/category_25",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "内存操作模块(M) - HD内存_读表达式",
    "content": "【功能描述】 读整数数据 【备注】 无",
    "url": "/docs/csharp/category_25",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "内存操作模块(M) - HD内存_读地址",
    "content": "【功能描述】 读整数数据 【备注】 无",
    "url": "/docs/csharp/category_25",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "内存操作模块(M) - HD内存_写表达式",
    "content": "【功能描述】 写整数数据 【备注】 无",
    "url": "/docs/csharp/category_25",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "内存操作模块(M) - HD内存_写地址",
    "content": "【功能描述】 写整数数据 【备注】 无",
    "url": "/docs/csharp/category_25",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "内存操作模块(M) - HD内存_读表达式字节流",
    "content": "【功能描述】 读字节流数据 【备注】 json返回字节流利用HCEnv_GetRetJson拿到返回地址,提取的字节数为读取大小数最大读取100KB字节大小,注意这个限制,否则会报错",
    "url": "/docs/csharp/category_25",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "内存操作模块(M) - HCM_ReadFD",
    "content": "【功能描述】 读单/双浮点数 【备注】 返回结果以float举例:json返回字符串如:{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":1,\\\\\"iError\\\\\":0,\\\\\"value\\\\\":999.000}]}",
    "url": "/docs/csharp/category_25",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "内存操作模块(M) - HD内存_读地址字节流",
    "content": "【功能描述】 读字节流数据 【备注】 json返回字节流利用HCEnv_GetRetJson拿到返回地址,提取的字节数为读取大小数最大读取100KB字节大小,注意这个限制,否则会报错",
    "url": "/docs/csharp/category_25",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "内存操作模块(M) - HCM_ReadFDAddr",
    "content": "【功能描述】 读单/双浮点数 【备注】 读取大小:4float单浮点8double双浮点以float举例:json返回字符串如:\\\"999.0000\\\"",
    "url": "/docs/csharp/category_25",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "内存操作模块(M) - HD内存_写表达式字节流",
    "content": "【功能描述】 写字节流数据 【备注】 最大写入100KB字节大小,注意这个限制,否则会报错json返回值{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":1,\\\\\"iError\\\\\":0}]}",
    "url": "/docs/csharp/category_25",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "内存操作模块(M) - HCM_WriteF",
    "content": "【功能描述】 写单浮点数4字节 【备注】 json返回值{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":1,\\\\\"iError\\\\\":0}]}",
    "url": "/docs/csharp/category_25",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "内存操作模块(M) - HCM_WriteD",
    "content": "【功能描述】 写双浮点数8字节 【备注】 json返回值{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":1,\\\\\"iError\\\\\":0}]}",
    "url": "/docs/csharp/category_25",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "内存操作模块(M) - HD内存_写地址字节流",
    "content": "【功能描述】 写字节流数据 【备注】 json返回字节流利用HCEnv_GetRetJson拿到返回地址,提取的字节数为读取大小数最大读取100KB字节大小,注意这个限制,否则会报错",
    "url": "/docs/csharp/category_25",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "内存操作模块(M) - HCM_WriteAddrF",
    "content": "【功能描述】 写单浮点数4字节 【备注】 无",
    "url": "/docs/csharp/category_25",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "内存操作模块(M) - HCM_WriteAddrD",
    "content": "【功能描述】 写双浮点数8字节 【备注】 无",
    "url": "/docs/csharp/category_25",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "内存操作模块(M) - HCM_GetModuleBase",
    "content": "【功能描述】 获取模块地址 【备注】 无",
    "url": "/docs/csharp/category_25",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "内存操作模块(M) - HCM_GetModuleFunAddr",
    "content": "【功能描述】 获取模块中的导出接口地址 【备注】 无",
    "url": "/docs/csharp/category_25",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "内存操作模块(M) - HCM_IsBadReadAddr",
    "content": "【功能描述】 判断指定地址是否在目标进程中有效可读 【备注】 无",
    "url": "/docs/csharp/category_25",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "内存操作模块(M) - HCM_AsmCallX86",
    "content": "【功能描述】 执行汇编CALLX86传递汇编代码 【备注】 无",
    "url": "/docs/csharp/category_25",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "内存操作模块(M) - HCM_AsmCallX64",
    "content": "【功能描述】 执行汇编CALLX64传递汇编代码 【备注】 无",
    "url": "/docs/csharp/category_25",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "找图模块(FP) - HD识图_截图",
    "content": "【功能描述】 截图并保存到文件(.bmp) 【备注】 无",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "找图模块(FP) - HD识图_单点找色",
    "content": "【功能描述】 单点找色 【备注】 注意返回值含义和XY值的提取",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "找图模块(FP) - HD识图_多点找色",
    "content": "【功能描述】 多点找色 【备注】 json: {error:0,ret:[{bRet:1,info:结果}]}\\\" info格式->像素序号,x1,y1|像素序号,x2,y2",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "找图模块(FP) - HD识图_多点偏移找色",
    "content": "【功能描述】 多点偏移找色 【备注】 json: \\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":%lld,\\\\\"info\\\\\":\\\\\"%s\\\\\"}]}\\\", info:x1,y1|x2,y2|",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "找图模块(FP) - HD识图_比较颜色",
    "content": "【功能描述】 比较颜色 【备注】 无",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "找图模块(FP) - HD识图_比较颜色Ex",
    "content": "【功能描述】 多点找色确定某个图像块,指定多个具体点 【备注】 这个接口是给具体的坐标直接比较颜色 而这个HCFP_FindColorsOffset是是先搜索首色然后以首色开始拿到偏移的坐标去比较颜色",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "找图模块(FP) - HD识图_获取颜色",
    "content": "【功能描述】 获取某个点的颜色值(从后台) 【备注】 注意返回值含义和值的提取 #pragmapack(1)typedefstructMYA8R8G8B8{BYTEm_a;\\n0x00BYTEm_r;\\n低8位BYTEm_g;\\n中8位BYTEm_b;\\n高8位MYA8R8G8B8(){m_a=0;m_r=0;m_g=0;m_b=0;}}MYA8R8G8B8; #pragmapack() json: “{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"info\\\":\\\"44,29,5B\\\"}]}”A(0x00)rgbr红色:低8位g绿色:中8位b蓝色:高8位RGBFFFFFF",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "找图模块(FP) - HD识图_范围找图",
    "content": "【功能描述】 在客户区范围内找图(仅支持一个图片) 【备注】 注意返回值含义和xy值的提取 {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "找图模块(FP) - HD识图_范围找图Ex",
    "content": "【功能描述】 在客户区范围内找图(返回找到其中一张信息) 【备注】 注意返回值含义和xy值的提取 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "找图模块(FP) - HCFP_FindPicExx",
    "content": "【功能描述】 在客户区范围内找图(返回全部找到的信息) 【备注】 注意返回值含义和xy值的提取 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "找图模块(FP) - HD识图_是否卡屏",
    "content": "【功能描述】 在客户区范围内检测再规定时间内是否卡图 【备注】 无",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "找图模块(FP) - HD识图_获取区域图像CRC",
    "content": "【功能描述】 在客户区范围内获取像素CRC值,用于卡屏校验 【备注】 json: {\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":%lld,\\\\\"info\\\\\":\\\"%X“,\\\\\"time\\\\\":%d}]} info字段是校验值4字节整数",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "找图模块(FP) - HD识图_单点找色从文件",
    "content": "【功能描述】 单点找色(从文件) 【备注】 注意返回值含义和XY值的提取",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "找图模块(FP) - HD识图_单点找色从内存",
    "content": "【功能描述】 单点找色(从内存) 【备注】 注意返回值含义和XY值的提取 图片内存缓冲区自己维护",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "找图模块(FP) - HD识图_多点找色从文件",
    "content": "【功能描述】 多点找色(从文件) 【备注】 json: {error:0,ret:[{bRet:1,info:结果}]}\\\" info格式->像素序号,x1,y1|像素序号,x2,y2",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "找图模块(FP) - HD识图_多点找色从内存",
    "content": "【功能描述】 多点找色(从内存) 【备注】 json: {error:0,ret:[{bRet:1,info:结果}]}\\\" info格式->像素序号,x1,y1|像素序号,x2,y2 图片内存缓冲区自己维护",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "找图模块(FP) - HD识图_多点偏移找色从文件",
    "content": "【功能描述】 多点偏移找色(从文件) 【备注】 无",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "找图模块(FP) - HD识图_多点偏移找色从内存",
    "content": "【功能描述】 多点偏移找色(从内存) 【备注】 图片内存缓冲区自己维护",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "找图模块(FP) - HD识图_范围找图从文件",
    "content": "【功能描述】 在客户区范围内找图(从文件)(仅支持一个图片) 【备注】 注意返回值含义和xy值的提取 {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "找图模块(FP) - HD识图_范围找图从内存",
    "content": "【功能描述】 在客户区范围内找图(从内存)(仅支持一个图片) 【备注】 注意返回值含义和xy值的提取 图片内存缓冲区自己维护 {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "找图模块(FP) - HD识图_范围找图从文件Ex",
    "content": "【功能描述】 在客户区范围内找图(从文件)(找到一个图片就返回) 【备注】 注意返回值含义和xy值的提取 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "找图模块(FP) - HD识图_范围找图从内存Ex",
    "content": "【功能描述】 在客户区范围内找图(从内存)(找到一个图片就返回) 【备注】 注意返回值含义和xy值的提取 图片内存缓冲区自己维护 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "找图模块(FP) - HCFP_FindPicExxByFile",
    "content": "【功能描述】 在客户区范围内找图(从文件)(找全部图片信息坐标) 【备注】 注意返回值含义和xy值的提取 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "找图模块(FP) - HCFP_FindPicExxByMem",
    "content": "【功能描述】 在客户区范围内找图(从内存)(找全部图片信息坐标) 【备注】 注意返回值含义和xy值的提取 图片内存缓冲区自己维护 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度|</SPAN> NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "找图模块(FP) - HD识图_范围找图来源内存Ex",
    "content": "【功能描述】 在客户区范围内找图(子图从内存)(找到一个图片就返回) 【备注】 注意返回值含义和xy值的提取 图片内存缓冲区自己维护 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "找图模块(FP) - HCFP_FindPicExxFromMem",
    "content": "【功能描述】 在客户区范围内找图(子图从内存)(找全部图片信息坐标) 【备注】 注意返回值含义和xy值的提取 图片内存缓冲区自己维护 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "找图模块(FP) - HD识图_比较颜色从文件",
    "content": "【功能描述】 比较颜色(从文件) 【备注】 无",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "找图模块(FP) - HD识图_比较颜色从内存",
    "content": "【功能描述】 比较颜色(从内存) 【备注】 图片内存缓冲区自己维护",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_29",
    "title": "找图模块(FP) - HD识图_比较颜色从文件Ex",
    "content": "【功能描述】 多点找色确定某个图像块,指定多个具体点,从文件 【备注】 无",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_30",
    "title": "找图模块(FP) - HD识图_比较颜色从内存Ex",
    "content": "【功能描述】 多点找色确定某个图像块,指定多个具体点,从内存 【备注】 无",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_31",
    "title": "找图模块(FP) - HD识图_获取颜色从文件",
    "content": "【功能描述】 获取颜色(从文件) 【备注】 注意返回值含义和值的提取 #pragmapack(1)typedefstructMYA8R8G8B8{BYTEm_a;\\n0x00BYTEm_r;\\n低8位BYTEm_g;\\n中8位BYTEm_b;\\n高8位MYA8R8G8B8(){m_a=0;m_r=0;m_g=0;m_b=0;}}MYA8R8G8B8; #pragmapack() json: “{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"info\\\":\\\"44,29,5B\\\"}]}”A(0x00)rgbr红色:低8位g绿色:中8位b蓝色:高8位RGBFFFFFF",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_32",
    "title": "找图模块(FP) - HD识图_获取颜色从内存",
    "content": "【功能描述】 获取颜色(从内存) 【备注】 图片内存缓冲区自己维护 注意返回值含义和值的提取 #pragmapack(1)typedefstructMYA8R8G8B8{BYTEm_a;\\n0x00BYTEm_r;\\n低8位BYTEm_g;\\n中8位BYTEm_b;\\n高8位MYA8R8G8B8(){m_a=0;m_r=0;m_g=0;m_b=0;}}MYA8R8G8B8; #pragmapack() json: “{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"info\\\":\\\"44,29,5B\\\"}]}”A(0x00)rgbr红色:低8位g绿色:中8位b蓝色:高8位RGBFFFFFF",
    "url": "/docs/csharp/category_26",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "找字模块(FS) - HD识字_设置字库",
    "content": "【功能描述】 设置当前像素识字的字库文件(为了提高识别效率,不支持多线程) 建议在登录回调中最开始初始化调用 其他线程需要那个序号就切换那个序号HCFS_SwitchCurDictFile 调用一次会给所有窗口序号添加当前设置的字库文件 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 这个不支持多线程,请在开启前首先设置好 类型提前添加字库,需要在当前线程使用字库必须调用HCFS_SwitchCurDictFile切换字库 字库文件绑定窗口序号字库序号绑定线程窗口序号支持多线程多进程来操作目标进程可以在多线程中通过窗口序号拿到所有绑定的字库文件信息至于在多线程中要使用的是哪一个字库文件？取决于当前线程所绑定的字库序号 总结:1.所有字库文件只需要和窗口序号关联一次就行\\n2.在多线程中需要使用到那个字库序号就切换就行多线程有自己的字库序号副本互不影响各自切换",
    "url": "/docs/csharp/category_27",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "找字模块(FS) - HD识字_设置字库Ex",
    "content": "【功能描述】 设置当前像素识字的字库文件(为了提高识别效率,不支持多线程) 请在主线程中最开始初始化调用 其他线程需要那个序号就切换那个序号HCFS_SwitchCurDictFile 调用一次会给所有窗口序号添加当前设置的字库文件 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 这个不支持多线程,请在开启前首先设置好 类型提前添加字库,需要在当前线程使用字库必须调用HCFS_SwitchCurDictFile切换字库",
    "url": "/docs/csharp/category_27",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "找字模块(FS) - HD识字_设置字库Exx",
    "content": "【功能描述】 设置当前像素识字的字库文件(为了提高识别效率,不支持多线程) 建议在登录回调中最开始初始化调用 其他线程需要那个序号就切换那个序号HCFS_SwitchCurDictFile 调用一次会给所有窗口序号添加当前设置的字库文件 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 这个不支持多线程,请在开启前首先设置好 类型提前添加字库,需要在当前线程使用字库必须调用HCFS_SwitchCurDictFile切换字库 字库文件绑定窗口序号字库序号绑定线程窗口序号支持多线程多进程来操作目标进程可以在多线程中通过窗口序号拿到所有绑定的字库文件信息至于在多线程中要使用的是哪一个字库文件？取决于当前线程所绑定的字库序号 总结:1.所有字库文件只需要和窗口序号关联一次就行\\n2.在多线程中需要使用到那个字库序号就切换就行多线程有自己的字库序号副本互不影响各自切换",
    "url": "/docs/csharp/category_27",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "找字模块(FS) - HD识字_切换字库序号",
    "content": "【功能描述】 切换当前像素识字的字库文件(支持多线程) 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好 运行起来了就不能设置否则冲突 切换字库文件可以在运行的时候切换,而HCFS_SetDictFile设置字库文件必须在初始化阶段中进行！ 对于多线程操作同一个窗口序号的时候,切换字库支持多线程操作,操作前请先在主执行线程中设置字库就行其他副线程(包含主线程)就只需要切换就行",
    "url": "/docs/csharp/category_27",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "找字模块(FS) - HD识字_获取当前字库",
    "content": "【功能描述】 获取当前线程的加载后的字库文件信息(支持多线程) 【备注】 json: \\\"{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":ret,\\\"info\\\":info}]}\\\" info:窗口索引,当前字库索引,加载了字库文件数量,(加载的字库序号,对应的字条数目)|...如:info:0,1,3,(1,55)|(2,55)|(3,55)| 注意返回的是当前线程的字库信息",
    "url": "/docs/csharp/category_27",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "找字模块(FS) - HD识字_获取当前字库序号",
    "content": "【功能描述】 获取当前线程绑定的字库索引(支持多线程) 【备注】 返回大于等于0的值是当前线程绑定的字库索引",
    "url": "/docs/csharp/category_27",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "找字模块(FS) - HD识字_单字符找字",
    "content": "【功能描述】 在客户区范围内找字(只支持单字符串并且是单字符字库) 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->0,x1,y1,w1,h1,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/csharp/category_27",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "找字模块(FS) - HD识字_单字符找字Ex",
    "content": "【功能描述】 在客户区范围内找字(支持多字符串并且是单字符字库) 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/csharp/category_27",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "找字模块(FS) - HD识字_单字符找字Exx",
    "content": "【功能描述】 在客户区范围内找字(支持多字符串并且是单字符字库)找到一个就返回 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/csharp/category_27",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "找字模块(FS) - HD识字_列表单列找字从文件",
    "content": "【功能描述】 单字符串找(原图从文件) 字库是字符串 例如:洛阳多行返回多个坐标一行只找一列(一次) 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->0,x1,y1,w,h,sim|0,x2,y2,w,h,sim|0,x3,y2,w,h,sim|... 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/csharp/category_27",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "找字模块(FS) - HD识字_列表单列找字从内存",
    "content": "【功能描述】 单字符串找(原图从内存) 字库是字符串 例如:洛阳多行返回多个坐标一行只找一列(一次) 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->0,x1,y1,w,h,sim|0,x2,y2,w,h,sim|0,x3,y2,w,h,sim|... 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/csharp/category_27",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "找字模块(FS) - HD识字_列表多列找字从文件",
    "content": "【功能描述】 单字符串找(原图从文件) 字库是字符串 例如:洛阳多行多列返回多个坐标 一行找多列(多次)找多行 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->0,x1,y1,w,h,sim|0,x2,y2,w,h,sim|0,x3,y2,w,h,sim|... 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/csharp/category_27",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "找字模块(FS) - HD识字_列表多列找字从内存",
    "content": "【功能描述】 单字符串找(原图从内存) 字库是字符串 例如:洛阳多行多列返回多个坐标 一行找多列(多次)找多行 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->0,x1,y1,w,h,sim|0,x2,y2,w,h,sim|0,x3,y2,w,h,sim|... 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/csharp/category_27",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "找字模块(FS) - HD识字_自动识字",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到一个就返回 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号(0开始),x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/csharp/category_27",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "找字模块(FS) - HD识字_自动识字从文件",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到一个就返回 可以通过指定图片来获取截图数据其他功能和HCFS_FindStrMutilsAuto一致 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/csharp/category_27",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "找字模块(FS) - HD识字_自动识字从内存",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到一个就返回 可以通过指定图片来获取截图数据其他功能和HCFS_FindStrMutilsAuto一致 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/csharp/category_27",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "找字模块(FS) - HD识字_自动识字Ex",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到全部或仅仅找一个 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号(0开始),x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/csharp/category_27",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "找字模块(FS) - HD识字_自动识字从文件Ex",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到全部或仅仅找一个 可以通过指定图片来获取截图数据其他功能和HCFS_FindStrMutilsAuto一致 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/csharp/category_27",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "找字模块(FS) - HD识字_自动识字从内存Ex",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到全部或仅仅找一个 可以通过指定图片来获取截图数据其他功能和HCFS_FindStrMutilsAuto一致 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/csharp/category_27",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "找字模块(FS) - HD识字_多字符识字",
    "content": "【功能描述】 单字符串找字库是字符串例如:洛阳 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 在客户区范围内找字符串(只支持单字符串),同时字库是字符串 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/csharp/category_27",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "找字模块(FS) - HD识字_多字符识字Ex",
    "content": "【功能描述】 多字符串找字库是字符串例如:洛阳|北京|广州 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 在客户区范围内找字符串(只支持单字符串),同时字库是字符串 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/csharp/category_27",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "找字模块(FS) - HCFS_FindStrMutilsExx",
    "content": "【功能描述】 多字符串找字库是字符串例如:洛阳|北京|广州找到一个就返回 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 在客户区范围内找字符串(只支持单字符串),同时字库是字符串 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/csharp/category_27",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "找字模块(FS) - HD识字_Ocr",
    "content": "【功能描述】 在客户区范围内识别字 字库是字符串或单字 拼接+字符串都支持 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"info\\\":BBB} AAA:0未找到1找到 BBB:json数组如:[{\\\"x\\\":0,\\\"y\\\":0,\\\"text\\\":“NULL”}]表示未找到类似这样[{\\\"x\\\":123,\\\"y\\\":456,\\\"text\\\":\\\"洛阳\\\"},{\\\"x\\\":654,\\\"y\\\":987,\\\"text\\\":\\\"洱海\\\"}]表示找到了 格式化字符串: 未找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":[{\\\\\"x\\\\\":0,\\\\\"y\\\\\":0,\\\\\"text\\\\\":\\\\\"NULL\\\\\"}]}\\\" 找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":%s}\\\" 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/csharp/category_27",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "找字模块(FS) - HD识字_Ocr从文件",
    "content": "【功能描述】 在客户区范围内识别字 字库是字符串或单字 拼接+字符串都支持 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"info\\\":BBB} AAA:0未找到1找到 BBB:json数组如:[{\\\"x\\\":0,\\\"y\\\":0,\\\"text\\\":“NULL”}]表示未找到类似这样[{\\\"x\\\":123,\\\"y\\\":456,\\\"text\\\":\\\"洛阳\\\"},{\\\"x\\\":654,\\\"y\\\":987,\\\"text\\\":\\\"洱海\\\"}]表示找到了 格式化字符串: 未找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":[{\\\\\"x\\\\\":0,\\\\\"y\\\\\":0,\\\\\"text\\\\\":\\\\\"NULL\\\\\"}]}\\\" 找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":%s}\\\" 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/csharp/category_27",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "找字模块(FS) - HD识字_Ocr从内存",
    "content": "【功能描述】 在客户区范围内识别字 字库是字符串或单字 拼接+字符串都支持 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"info\\\":BBB} AAA:0未找到1找到 BBB:json数组如:[{\\\"x\\\":0,\\\"y\\\":0,\\\"text\\\":“NULL”}]表示未找到类似这样[{\\\"x\\\":123,\\\"y\\\":456,\\\"text\\\":\\\"洛阳\\\"},{\\\"x\\\":654,\\\"y\\\":987,\\\"text\\\":\\\"洱海\\\"}]表示找到了 格式化字符串: 未找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":[{\\\\\"x\\\\\":0,\\\\\"y\\\\\":0,\\\\\"text\\\\\":\\\\\"NULL\\\\\"}]}\\\" 找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":%s}\\\" 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/csharp/category_27",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "找字模块(FS) - HD识字_设置水平垂直间距",
    "content": "【功能描述】 设置间距(在识别拼接字和OCR中尤其重要)-丢弃改为每个接口单独设置 【备注】 1.当相邻的字/数字/字母/符号,在间距范围内,才被认为是一个整体(字符串) 2.不明白什么是水平垂直间距请前往查看水平垂直间距解析和案例分析 3.这种对于数字和符号,尤其重要",
    "url": "/docs/csharp/category_27",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "找字模块(FS) - HD识字_设置11",
    "content": "【功能描述】 设置11行中(同宽)矩形内,是否只有一个字-丢弃改为每个接口单独设置 【备注】 1.如果打开识别速度快,关闭速度慢一点(不影响多少) 2.如果这个i这个字,由2个字符组成'.'和'|' 3.如果打开表示i是一个整体识别,不能拆开识别 4.如果关闭表示i可以拆分成2个字符分别识别",
    "url": "/docs/csharp/category_27",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "找字模块(FS) - HD识字_设置周围占比",
    "content": "【功能描述】 设置字周围一个像素上下左右的像素占比-丢弃改为每个接口单独设置 【备注】 1.对于那种连体字的情况下占比越高,可能识别的不准确2.这个相当于一个容错率占比3.返回当前设置后的占比4.默认0.1 5.这种对于数字和符号,尤其重要,可以准确的提高识别率,越小的字效果越好",
    "url": "/docs/csharp/category_27",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "智能识图模块(FI) - HCFI_FindImage",
    "content": "【功能描述】 识图(返回的是圆型的圆点) 【备注】 图片越多耗时多长 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x\\\":XX,\\\"y\\\":YY},{\\\"x\\\":XX,\\\"y\\\":YY},{\\\"x\\\":XX,\\\"y\\\":YY}],\\\"time\\\":ZZZ} 每张图会有1个坐标点(圆点) AAA:表示找到几个XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置",
    "url": "/docs/csharp/category_28",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "智能识图模块(FI) - HCFI_FindImageEx",
    "content": "【功能描述】 识图(返回的是矩形左上角和右下角) 【备注】 图片越多耗时多长 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY},{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY}],\\\"time\\\":ZZZ} 每张图会有2个坐标点(左上角+右下角) AAA:表示找到几个XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置",
    "url": "/docs/csharp/category_28",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "智能识图模块(FI) - HCFI_FindRangeImage",
    "content": "【功能描述】 范围内识图 【备注】 图片越多耗时多长 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x\\\":XX,\\\"y\\\":YY},{\\\"x\\\":XX,\\\"y\\\":YY},{\\\"x\\\":XX,\\\"y\\\":YY}]}type==0</STRONG> 每张图会有1个坐标点(圆点) {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY},{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY}]}type==1</STRONG> 每张图会有2个坐标点(左上角+右下角) AAA:表示找到几个XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置",
    "url": "/docs/csharp/category_28",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "智能识图模块(FI) - HD智能识图_Tem找图从文件",
    "content": "【功能描述】 从文件中加载截图数据并识图(返回的是矩形左上角和右下角) 【备注】 图片越多耗时多长 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY},{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY}],\\\"time\\\":ZZZ} 每张图会有2个坐标点(左上角+右下角) AAA:表示找到几个XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0max:置信度time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置",
    "url": "/docs/csharp/category_28",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "智能识图模块(FI) - HD智能识图_Tem找图从内存",
    "content": "【功能描述】 从内存中加载截图数据并识图(返回的是矩形左上角和右下角) 【备注】 图片越多耗时多长 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"i\\\":index,\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY\\\"max\\\":0.0f},{\\\"i\\\":index,\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY\\\"max\\\":0.0f}]}每张图对应会有图片索引+2个坐标点(左上角+右下角)+置信度(max)index:图片集合指定的索引(0开始)如:\\\"洛阳.bmp|洱海.bmp|\\\"(洛阳.bmp)索引就是0AAA:表示找到几个(真正的找到数量)XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0max:置信度time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置",
    "url": "/docs/csharp/category_28",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "智能识字模块(RC) - HCRC_InitRCServer",
    "content": "【功能描述】 初始化识别服务器 【备注】 无",
    "url": "/docs/csharp/category_29",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "智能识字模块(RC) - HCRC_OpenRCServer",
    "content": "【功能描述】 打开识别服务器 【备注】 无",
    "url": "/docs/csharp/category_29",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "智能识字模块(RC) - HCRC_StopRCServer",
    "content": "【功能描述】 停止识别服务器 【备注】 无",
    "url": "/docs/csharp/category_29",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "智能识字模块(RC) - HCRC_SwitchRCServer",
    "content": "【功能描述】 切换识字服务:主要针对语言字体文件的切换 【备注】 内部实现原理:先停止之前的服务(HCRC_StopRCServer)重新初始化(HCRC_InitRCServer)然后重新开启(HCRC_OpenRCServer)",
    "url": "/docs/csharp/category_29",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "智能识字模块(RC) - HCRC_RecognitionChar",
    "content": "【功能描述】 智能识字 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"image\\\":XXX},{\\\"image\\\":YYY}],\\\"time\\\":ZZZ}XXX->图片识别后的结果(字符串)每一个{\\\"image\\\":XXX}是一个识别的字符串,对应<参数:图片名字集合>索引 XXX:格式 \\\"%s,%0.2f,%d,%d,%d,%d|\\\" 字符串1,置信度1,x1,y1,x2,y2|字符串2,置信度2,x1,y1,x2,y2|...|",
    "url": "/docs/csharp/category_29",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "智能识字模块(RC) - HCRC_RecognitionCharEx",
    "content": "【功能描述】 指定范围内智能识字 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"image\\\":XXX},{\\\"image\\\":YYY}],\\\"time\\\":ZZZ}XXX->图片识别后的结果(字符串)每一个{\\\"image\\\":XXX}是一个识别的字符串,对应<参数:图片名字集合>索引 XXX:格式 \\\"%s,%0.2f,%d,%d,%d,%d|\\\" 字符串1,置信度1,x1,y1,x2,y2|字符串2,置信度2,x1,y1,x2,y2|...|",
    "url": "/docs/csharp/category_29",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "智能识字模块(RC) - HCRC_RecognitionCharByMemory",
    "content": "【功能描述】 从内存图片数据中范围内智能识字 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"image\\\":XXX},{\\\"image\\\":YYY}],\\\"time\\\":ZZZ}XXX->图片识别后的结果(字符串)每一个{\\\"image\\\":XXX}是一个识别的字符串,对应<参数:图片名字集合>索引. XXX:格式 \\\"%s,%0.2f,%d,%d,%d,%d|\\\" 字符串1,置信度1,x1,y1,x2,y2|字符串2,置信度2,x1,y1,x2,y2|...|",
    "url": "/docs/csharp/category_29",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "后台键鼠(MKB) - HD键鼠_绑定",
    "content": "【功能描述】 绑定窗口 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/csharp/category_30",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "后台键鼠(MKB) - HD键鼠_绑定Ex",
    "content": "【功能描述】 绑定窗口 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/csharp/category_30",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "后台键鼠(MKB) - HD键鼠_模式绑定Ex",
    "content": "【功能描述】 绑定窗口(扩展接口) 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/csharp/category_30",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "后台键鼠(MKB) - HD键鼠_切换绑定",
    "content": "【功能描述】 切换绑定到所属子窗口的句柄上 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/csharp/category_30",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "后台键鼠(MKB) - HD键鼠_切换绑定Ex",
    "content": "【功能描述】 切换绑定到所属子窗口的句柄上 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/csharp/category_30",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "后台键鼠(MKB) - HD键鼠_切换模式绑定Ex",
    "content": "【功能描述】 切换绑定窗口(扩展接口) 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/csharp/category_30",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "后台键鼠(MKB) - HD键鼠_暂停绑定",
    "content": "【功能描述】 暂停/恢复后台绑定 【备注】 无",
    "url": "/docs/csharp/category_30",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "后台键鼠(MKB) - HD键鼠_解绑",
    "content": "【功能描述】 解绑窗口 【备注】 无",
    "url": "/docs/csharp/category_30",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "后台键鼠(MKB) - HD键鼠_右键双击",
    "content": "【功能描述】 鼠标右键双击 【备注】 无",
    "url": "/docs/csharp/category_30",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "后台键鼠(MKB) - HCMKB_KeyPress(A/W)",
    "content": "【功能描述】 连续按键输入字符串(连续单个按键) 【备注】 无",
    "url": "/docs/csharp/category_30",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "后台键鼠(MKB) - HCMKB_SendString(2)",
    "content": "【功能描述】 发送Ascii字符串 【备注】 无",
    "url": "/docs/csharp/category_30",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "后台键鼠(MKB) - HD键鼠_剪切板发送随机文本",
    "content": "【功能描述】 发送剪切板字符串内容到窗口 【备注】 无",
    "url": "/docs/csharp/category_30",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "后台键鼠(MKB) - HD键鼠_设置剪切板文本",
    "content": "【功能描述】 发送随机名字,从2个文本(hf.txt和he.txt)中各获取一个字 【备注】 hf.txt和he.txt放在程序(.exe)同目录下,文件编码为utf-8随机获取一个姓和一个名组成一个词",
    "url": "/docs/csharp/category_30",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "后台键鼠(MKB) - HD键鼠_获取剪切板字符串",
    "content": "【功能描述】 设置剪切板字符串 【备注】 该接口无序窗口序号",
    "url": "/docs/csharp/category_30",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "后台键鼠(MKB) - HD键鼠_句柄发送文本",
    "content": "【功能描述】 获取剪切板字符串 【备注】 无",
    "url": "/docs/csharp/category_30",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "后台键鼠(MKB) - HD键鼠_句柄发送按键按下",
    "content": "【功能描述】 发送Ascii字符串,部分游戏需要激活窗口！（可以不用通讯调用） 【备注】 注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！",
    "url": "/docs/csharp/category_30",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "后台键鼠(MKB) - HD键鼠_句柄发送按键弹起",
    "content": "【功能描述】 按下发送键码到指定窗口（可以不用通讯调用） 【备注】 注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！",
    "url": "/docs/csharp/category_30",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "后台键鼠(MKB) - HD键鼠_句柄发送按键",
    "content": "【功能描述】 弹起发送键码到指定窗口（可以不用通讯调用） 【备注】 注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！",
    "url": "/docs/csharp/category_30",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "后台键鼠(MKB) - HD键鼠_句柄发送清空文本",
    "content": "【功能描述】 按下并弹起发送键码到指定窗口（可以不用通讯调用） 【备注】 注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！",
    "url": "/docs/csharp/category_30",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "后台键鼠(MKB) - HD键鼠_设置鼠标轨迹参数",
    "content": "【功能描述】 可以清空子窗口的内容（可以不用通讯调用） 【备注】 注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！",
    "url": "/docs/csharp/category_30",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "后台键鼠(MKB) - HD键鼠_获取鼠标位置",
    "content": "【功能描述】 设置鼠标轨迹参数(当移动鼠标开启轨迹生效) 【备注】 无",
    "url": "/docs/csharp/category_30",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "后台键鼠(MKB) - HCMKB_GetMousePos",
    "content": "【功能描述】 获取后台/前台鼠标位置 【备注】 无",
    "url": "/docs/csharp/category_30",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "后台截图模块(CS) - HD截图_设置识别模式",
    "content": "【功能描述】 打开截图 【备注】 无",
    "url": "/docs/csharp/category_31",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "后台截图模块(CS) - HD截图_打开",
    "content": "【功能描述】 打开截图 【备注】 无",
    "url": "/docs/csharp/category_31",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "后台截图模块(CS) - HD截图_打开Ex",
    "content": "【功能描述】 打开截图(和HCCS_CloseCSEx是一组接口) 【备注】 1.前台和后台模式,可以随意切换不用调用关闭HCCS_CloseCSEx再开启！！！！！内置处理了 截图模式: typedefenumCAPTURETYPE{\\n无CAPTURETYPE_NONE=0,\\n这个不操作\\nGDICAPTURETYPE_GDI=1,\\n这个直接客户端操作对于浏览器(谷歌等)记得把图像加速关掉\\n32CAPTURETYPE_D3D9_1_x86=2,\\nUECAPTURETYPE_D3D9_2_x86=3,\\nU3DCAPTURETYPE_D3D9_3_x86=4,\\nRGBX\\nD3D11CAPTURETYPE_D3D11_1_x86=5,\\nUECAPTURETYPE_D3D11_2_x86=6,\\nU3DCAPTURETYPE_D3D11_3_x86=7,\\nRGBXD3D11游戏通用\\nD3D12CAPTURETYPE_D3D12_1_x86=70,\\nUECAPTURETYPE_D3D12_2_x86=71,\\nU3DCAPTURETYPE_D3D12_3_x86=72,\\nRGBXD3D12游戏通用\\n64\\nD3D9CAPTURETYPE_D3D9_1_x64=8,\\nUECAPTURETYPE_D3D9_2_x64=9,\\nU3DCAPTURETYPE_D3D9_3_x64=10,\\nRGBXD3D9游戏通用\\nD3D11CAPTURETYPE_D3D11_1_x64=11,\\nUECAPTURETYPE_D3D11_2_x64=12,\\nU3DCAPTURETYPE_D3D11_3_x64=13,\\nRGBXD3D11游戏通用\\nD3D12CAPTURETYPE_D3D12_1_x64=14,\\nUED3D12CAPTURETYPE_D3D12_2_x64=15,\\nU3DD3D12CAPTURETYPE_D3D12_3_x64=16,\\nRGBXD3D12D3D12游戏通用\\n32CAPTURETYPE_OPENGL_1_x86=20,\\n占位CAPTURETYPE_OPENGL_2_x86=21,\\nGL_BGRA模拟器CAPTURETYPE_OPENGL_3_x86=22,\\nGL_BGRA模拟器\\n64CAPTURETYPE_OPENGL_1_x64=30,\\n占位CAPTURETYPE_OPENGL_2_x64=31,\\nGL_BGRA模拟器CAPTURETYPE_OPENGL_3_x64=32,\\nGL_BGRA模拟器\\n定制CAPTURETYPE_D3D9_Steam_x86=40,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用CAPTURETYPE_D3D11_Steam_x86=41,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用CAPTURETYPE_D3D9_Steam_x64=42,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用CAPTURETYPE_D3D11_Steam_x64=43,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用\\nNC模式CAPTURETYPE_D3D9_NC_x86=44,\\nNC游戏CAPTURETYPE_D3D11_NC_x86=45,\\nNC游戏CAPTURETYPE_D3D9_NC_x64=46,\\nNC游戏CAPTURETYPE_D3D11_NC_x64=47,\\nNC游戏\\nCAPTURETYPE_NORMAL=50,\\n这个前台模式\\nCAPTURETYPE_D3D12_Steam_x86=60,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用CAPTURETYPE_D3D12_Steam_x64=61,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用\\nCAPTURETYPE_D3D12_NC_x86=62,\\nNC游戏D3D12CAPTURETYPE_D3D12_NC_x64=63,\\nNC游戏D3D12 }CAPTURETYPE;额外说明:",
    "url": "/docs/csharp/category_31",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "后台截图模块(CS) - HD截图_关闭",
    "content": "【功能描述】 关闭截图 【备注】 无",
    "url": "/docs/csharp/category_31",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "后台截图模块(CS) - HD截图_获取截图数据",
    "content": "【功能描述】 关闭截图(和HCCS_OpenCSEx是一组接口) 【备注】 无",
    "url": "/docs/csharp/category_31",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "后台截图模块(CS) - HD截图_打开查看器",
    "content": "【功能描述】 获取截图数据 【备注】 json:{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":AAA,\\\"addr\\\":XXX,\\\"eleSize\\\":YYY,\\\"len\\\":ZZZ,\\\"w\\\":1222,\\\"h\\\":699}]}AAA:调用接口返回值 XXX:图片二进制数据首地址(不是bmp数据是MYA8R8G8B8结构体缓冲区首地址)可以拿到这个缓冲区自行转换各种图片格式数据 YYY:MYA8R8G8B8结构体数量 ZZZ:字节大小(图片数据=MYA8R8G8B8* YYY) w:宽度 h:高度注意:拿到图片地址数据XXX使用后记得释放(HCCS_FreeArray) 图片数据地址不使用了记得释放掉HCCS_FreeMemPool调用此接口",
    "url": "/docs/csharp/category_31",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "后台截图模块(CS) - HD截图_关闭查看器",
    "content": "【功能描述】 打开查看器 【备注】 无",
    "url": "/docs/csharp/category_31",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "后台截图模块(CS) - HD截图_截图",
    "content": "【功能描述】 关闭查看器 【备注】 无",
    "url": "/docs/csharp/category_31",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "后台截图模块(CS) - HD截图_获取BMP截图数据",
    "content": "【功能描述】 截图数据并保存为BMP图片文件 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":AAA,\\\"w\\\":1222,\\\"h\\\":699}]}",
    "url": "/docs/csharp/category_31",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "后台截图模块(CS) - HD截图_释放数据",
    "content": "【功能描述】 获取当前截图后的BMP数据 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"addr\\\":XXX,\\\"eleSize\\\":YYY,\\\"allLen\\\":ZZZ,\\\"w\\\":1222,\\\"h\\\":699}]} XXX是BMP图片二进制数据首地址 YYY是MYA8R8G8B8结构体数量 ZZZ:BMP图片数据大小(真实的BMP图片数据:54+像素数据) 图片数据地址不使用了记得释放掉HCCS_FreeMemPool调用此接口",
    "url": "/docs/csharp/category_31",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "后台截图模块(CS) - HCCS_GetCaptureBmpRangeData",
    "content": "【功能描述】 获取当前截图后的BMP数据(指定范围) 【备注】 如果想获取全图数据:xywh可以分别为-1也可以直接调用HCCS_GetCaptureBmpData json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"addr\\\":XXX,\\\"eleSize\\\":YYY,\\\"allLen\\\":ZZZ,\\\"w\\\":1222,\\\"h\\\":699}]} XXX是BMP图片二进制数据首地址 YYY是MYA8R8G8B8结构体数量 ZZZ:BMP图片数据大小(真实的BMP图片数据:54+像素数据) 图片数据地址不使用了记得释放掉HCCS_FreeMemPool调用此接口",
    "url": "/docs/csharp/category_31",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "后台截图模块(CS) - HD截图_释放内存池数据",
    "content": "【功能描述】 释放内存 【备注】 释放内存该内存是使用new[]申请的内存",
    "url": "/docs/csharp/category_31",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "后台截图模块(CS) - HD截图_是否后台缓存失败",
    "content": "【功能描述】 释放内存,内存池操作释放内存 【备注】 我们获取了截图数据不需要了都需要调用这个接口来释放掉,防止内存泄露 注意:该接口是释放【使用内存池申请的内存地址】的地址,与HCCS_FreeArray不一样 那个窗口序号返回申请的地址就用那个窗口序号释放",
    "url": "/docs/csharp/category_31",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "后台截图模块(CS) - HCCS_IsCaptureValid",
    "content": "【功能描述】 后台截图缓存获取失败判断接口 【备注】 无",
    "url": "/docs/csharp/category_31",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "黑屏优化模块 - HD黑屏_打开",
    "content": "【功能描述】 打开黑屏 【备注】 无",
    "url": "/docs/csharp/category_32",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "黑屏优化模块 - HD黑屏_设置模型范围",
    "content": "【功能描述】 设置模型序号的过滤范围 【备注】 可以适当调整最小或者最大的序号来过滤模型,来实现黑屏,同时还支持图色识别",
    "url": "/docs/csharp/category_32",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "黑屏优化模块 - HD黑屏_关闭",
    "content": "【功能描述】 关闭黑屏 【备注】 无",
    "url": "/docs/csharp/category_32",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "CPU优化模块() - HD优化_开启CPU",
    "content": "【功能描述】 打开CPU优化 【备注】 无",
    "url": "/docs/csharp/category_33",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "CPU优化模块() - HD优化_设置FPS",
    "content": "【功能描述】 设置帧数(绑定dx.public.down.cpu后台属性有效) 【备注】 并非实际的帧数,这里只是一个参考值,内置默认为30 动态优化调试帧数的(自动计算帧率)",
    "url": "/docs/csharp/category_33",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "CPU优化模块() - HD优化_设置延迟",
    "content": "【功能描述】 设置帧数(绑定dx.public.down.cpu后台属性有效) 【备注】 如果调用了HC_HookMainThread挂接主线程,同时又调用了本接口,那么会动态(根据实际动态计算正数来)修改主线程调用CALL的检查频率",
    "url": "/docs/csharp/category_33",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "CPU优化模块() - HD优化_关闭CPU",
    "content": "【功能描述】 关闭CPU优化 【备注】 无",
    "url": "/docs/csharp/category_33",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "系统模块(SYS) - HD系统_是否开启字体平滑",
    "content": "【功能描述】 检查字体是否开启字体平滑 【备注】 无",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "系统模块(SYS) - HD系统_关闭字体平滑",
    "content": "【功能描述】 关闭字体平滑 【备注】 无",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "系统模块(SYS) - HD系统_打开字体平滑",
    "content": "【功能描述】 打开字体平滑 【备注】 无",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "系统模块(SYS) - HD系统_是否开启UAC",
    "content": "【功能描述】 检查当前系统是否开启了UAC(用户控制) 【备注】 无",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "系统模块(SYS) - HD系统_设置UAC",
    "content": "【功能描述】 设置当前系统的UAC(用户控制)开关 【备注】 无",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "系统模块(SYS) - HD系统_延迟",
    "content": "【功能描述】 延迟 【备注】 不会堵塞主线程",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "系统模块(SYS) - HD系统_随机延迟",
    "content": "【功能描述】 在随机范围内延迟 【备注】 不会堵塞主线程",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "系统模块(SYS) - HD系统_关闭系统",
    "content": "【功能描述】 关闭系统 【备注】 无",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "系统模块(SYS) - HD系统_关闭屏保",
    "content": "【功能描述】 关闭屏保 【备注】 无",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "系统模块(SYS) - HD系统_关闭电源管理",
    "content": "【功能描述】 关闭电源管理,不进入睡眠 【备注】 无",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "系统模块(SYS) - HD系统_恢复最近系统修改",
    "content": "【功能描述】 恢复系统上次的修改 【备注】 如果中控软件运行的时候修改了系统设置 那么这个最好在中控程序退出的时候调用",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "系统模块(SYS) - HD系统_禁止休眠",
    "content": "【功能描述】 设置当前的电源设置(禁止关闭显示器,禁止关闭硬盘,禁止睡眠和待机) 【备注】 无",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "系统模块(SYS) - HD系统_获取路径",
    "content": "【功能描述】 获取路径 【备注】 无",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "系统模块(SYS) - HD系统_获取CPU类型",
    "content": "【功能描述】 获取CPU类型 【备注】 无",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "系统模块(SYS) - HD系统_获取当前CPU使用率",
    "content": "【功能描述】 获取CPU使用率 【备注】 无",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "系统模块(SYS) - HD系统_获取CPU使用率",
    "content": "【功能描述】 获取指定进程的CPU使用率 【备注】 返回值是整数百分比 返回字符串字符串是(含小数百分比)",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "系统模块(SYS) - HD系统_获取内存使用率",
    "content": "【功能描述】 获取指定进程的内存使用率 【备注】 无",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "系统模块(SYS) - HD系统_获取磁盘序列号",
    "content": "【功能描述】 获取磁盘序列号 【备注】 进程要有管理员权限才能获取成功",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "系统模块(SYS) - HD系统_获取显卡信息",
    "content": "【功能描述】 获取显卡信息 【备注】 无",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "系统模块(SYS) - HD系统_获取DPI",
    "content": "【功能描述】 获取DPI 【备注】 无",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "系统模块(SYS) - HD系统_启动EXE",
    "content": "【功能描述】 运行指定路径下的exe 【备注】 这个不支持启动参数",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "系统模块(SYS) - HD系统_执行DOS指令取返回",
    "content": "【功能描述】 获取CMD命令形式的打开进程并获取返回输出",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "系统模块(SYS) - HD系统_管理员打开进程",
    "content": "【功能描述】 获取CMD命令形式的打开进程(支持管理员打开)(扩展版本) 【备注】 内部是调用ShellExecuteExA",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "系统模块(SYS) - HD系统_启动EXE带参数",
    "content": "【功能描述】 运行指定路径下的exe这个支持启动参数 【备注】 这个支持启动参数",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "系统模块(SYS) - HD系统_启动EXE带参数Ex",
    "content": "【功能描述】 运行指定路径下的exe(HCSYS_RunAppEx的扩展版本)这个支持启动参数同时指定了当前进程的路径 【备注】 这个支持启动参数",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "系统模块(SYS) - HD系统_获取磁盘特征码",
    "content": "【功能描述】 获取磁盘特征码 【备注】 无",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "系统模块(SYS) - HD系统_获取CPU特征码",
    "content": "【功能描述】 获取CPU特征码 【备注】 无",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "系统模块(SYS) - HD系统_获取BOIS制造日期",
    "content": "【功能描述】 获取BOIS制造日期 【备注】 无",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_29",
    "title": "系统模块(SYS) - HD系统_获取机器码",
    "content": "【功能描述】 获取机器码(包含网卡) 【备注】 无",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_30",
    "title": "系统模块(SYS) - HD系统_获取机器码无网卡",
    "content": "【功能描述】 获取机器码(不包含网卡) 【备注】 无",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_31",
    "title": "系统模块(SYS) - HD系统_获取网络时间",
    "content": "【功能描述】 获取网络时间 【备注】 北京时间 固定内置服务器IP",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_32",
    "title": "系统模块(SYS) - HD系统_获取网络时间Ex",
    "content": "【功能描述】 获取网络时间(指定服务器IP获取) 【备注】 北京时间",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_33",
    "title": "系统模块(SYS) - HD系统_获取系统版本",
    "content": "【功能描述】 获取系统版本 【备注】 无",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_34",
    "title": "系统模块(SYS) - HD系统_获取系统类型",
    "content": "【功能描述】 获取系统类型 【备注】 无",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_35",
    "title": "系统模块(SYS) - HD系统_开机经过时间",
    "content": "【功能描述】 获取开机到现在过经过的时间(毫秒) 【备注】 无",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_36",
    "title": "系统模块(SYS) - HD系统_当前进程是否X64",
    "content": "【功能描述】 当前进程是否是64位 【备注】 无",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_37",
    "title": "系统模块(SYS) - HD系统_是否支持vt",
    "content": "【功能描述】 是否支持vt 【备注】 可以在Bios中开启vt,如果不支持就没办法了",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_38",
    "title": "系统模块(SYS) - HD系统_获取屏幕的色深",
    "content": "【功能描述】 获取屏幕的色深(24/32之类的) 【备注】 无",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_39",
    "title": "系统模块(SYS) - HD系统_设置屏幕的色深",
    "content": "【功能描述】 设置屏幕的色深 【备注】 无",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_40",
    "title": "系统模块(SYS) - HD系统_获取屏幕高度",
    "content": "【功能描述】 获取屏幕高度 【备注】 无",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_41",
    "title": "系统模块(SYS) - HD系统_获取屏幕宽度",
    "content": "【功能描述】 获取屏幕宽度 【备注】 无",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_42",
    "title": "系统模块(SYS) - HD系统_设置屏幕分辨率",
    "content": "【功能描述】 设置屏幕分辨率 【备注】 无",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_43",
    "title": "系统模块(SYS) - HD系统_获取CMD命令返回值",
    "content": "【功能描述】 获取CMD命令返回值(字符串) 【备注】 无",
    "url": "/docs/csharp/category_34",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "自定义插件模块(Com) - HD插件_加载插件",
    "content": "【功能描述】 添加自定义组件 【备注】 自定义模块需要导入包并来实现接口绑定",
    "url": "/docs/csharp/category_35",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "自定义插件模块(Com) - HD插件_卸载插件",
    "content": "【功能描述】 卸载指定插件 【备注】 自定义模块需要导入包并来实现接口绑定",
    "url": "/docs/csharp/category_35",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "自定义插件模块(Com) - HD插件_CALL",
    "content": "【功能描述】 调用自定义组件中的接口 【备注】 自定义模块需要导入包并来实现接口绑定 参考:X86X64自定义插件接口说明",
    "url": "/docs/csharp/category_35",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "自定义插件模块(Com) - HD插件_CALLEx",
    "content": "【功能描述】 调用自定义组件中的接口(可传递任意参数类型) 【备注】 自定义模块需要导入包并来实现接口绑定 注意:传递的buffer字符串在自定义插件接口 typedefHDComRet(__stdcall* HDComFunType)(__int64 retStrAddr,__int64 rcx,__int64 rdx,__int64 r8,__int64 r9,__int64 l5,__int64 l6); 第一个参数retStrAddr作为字符串首地址(char* )能拿到 如: C++代码演示: char* info=(char* )retStrAddr; 参考:X86X64自定义插件接口说明",
    "url": "/docs/csharp/category_35",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "插件包装器 - HCCOM_Load",
    "content": "【功能描述】 加载组件 【备注】 组件名为当前组件文件的名字(不包含后缀!,如果组件文件无后缀可忽视) 如:hdmad.dll所对应的组件名必须是hdmad 头文件: HDLoader.h 静态库: HDPacker.librelease版本 HDPackerd.libdebug版本",
    "url": "/docs/csharp/category_36",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "插件包装器 - HCCOM_Register",
    "content": "【功能描述】 注册自定义组件中的接口 【备注】 内置数据初始化函数接口名字:HDDataInit(接口类型是HDComFunType)HDDataInit初始化函数会在加载组件的时候首次调用以便于完成对相关组件数据的初始化(比如:基地址相关表达式的获取)如果需要初始化就自己写一个名字叫做HDDataInit的函数,类型为HDComFunType,并调用HCCOM_Register 头文件: HDLoader.h 静态库: HDPacker.librelease版本 HDPackerd.libdebug版本 参考:X86X64自定义插件接口说明",
    "url": "/docs/csharp/category_36",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "插件包装器 - HCCOM_NotifyToTarget",
    "content": "【功能描述】 自定义模块通知目标进程接口 【备注】 内置数据初始化函数接口名字:HDDataInit(接口类型是HDComFunType)HDDataInit初始化函数会在加载组件的时候首次调用以便于完成对相关组件数据的初始化(比如:基地址相关表达式的获取)如果需要初始化就自己写一个名字叫做HDDataInit的函数,类型为HDComFunType,并调用HCCOM_Register 头文件: HDLoader.h 静态库: HDPacker.librelease版本 HDPackerd.libdebug版本",
    "url": "/docs/csharp/category_36",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "插件包装器 - HCCOM_NotifyToController",
    "content": "【功能描述】 自定义模块通知中控进程接口 【备注】 内置数据初始化函数接口名字:HDDataInit(接口类型是HDComFunType)HDDataInit初始化函数会在加载组件的时候首次调用以便于完成对相关组件数据的初始化(比如:基地址相关表达式的获取)如果需要初始化就自己写一个名字叫做HDDataInit的函数,类型为HDComFunType,并调用HCCOM_Register 头文件: HDLoader.h 静态库: HDPacker.librelease版本 HDPackerd.libdebug版本",
    "url": "/docs/csharp/category_36",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "插件包装器 - HCCOM_GetRetJson",
    "content": "【功能描述】 获取自定义模块通知中控进程返回的字符串结果 【备注】 返回的字符串是自定义的 在中控中自己设置的事件处理回调函数中设置返回 头文件: HDLoader.h 静态库: HDPacker.librelease版本 HDPackerd.libdebug版本",
    "url": "/docs/csharp/category_36",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "插件包装器 - HCCOM_FindCode",
    "content": "【功能描述】 特征码查找 【备注】 无",
    "url": "/docs/csharp/category_36",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "插件包装器 - HCCOM_PrintLog",
    "content": "【功能描述】 是否打开debugview调试日志信息 【备注】 返回当前是否开启",
    "url": "/docs/csharp/category_36",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "插件包装器 - HCCOM_GetVersion",
    "content": "【功能描述】 获取自定义内存插件版本号 【备注】 返回当前是否开启",
    "url": "/docs/csharp/category_36",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "状态机模块 - HCHD_GetHDStatusControler",
    "content": "【功能描述】 获取控制器有且只有一个 【备注】 拿到控制器对象可以获取或者操作其他组件对象",
    "url": "/docs/csharp/category_37",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "控制器模块 - HCHD_GetHDController",
    "content": "【功能描述】 获取控制器有且只有一个 【备注】 拿到控制器对象可以获取或者操作其他组件对象",
    "url": "/docs/csharp/category_38",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "主板机模块[SC] - HD主板机_设置路径",
    "content": "【功能描述】 设置HDScrcpy投屏软件根目录,并重启adb相当于重置一下adb环境 【备注】 设置HDScrcpy投屏软件根目录如:J:\\\\hdscrcpy2.7\\\\默认C:\\\\hdscrcpy2.7\\\\ 软件在群文件或者找管理索取",
    "url": "/docs/csharp/category_39",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "主板机模块[SC] - HD主板机_重置ADB服务",
    "content": "【功能描述】 重置adb服务 【备注】 无",
    "url": "/docs/csharp/category_39",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "主板机模块[SC] - HD主板机_查询设备",
    "content": "【功能描述】 查询当前所有可用的设备 【备注】 无 设备号类型:1.emulator-5554/127.0.0.1:5009模拟器Device(-s) 2.01aa8320032fe731手机Device(-d) 3.127.0.0.1:5009tcpipDevice(-e)",
    "url": "/docs/csharp/category_39",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "主板机模块[SC] - HD主板机_连接设备",
    "content": "【功能描述】 连接设备并通讯窗口序号（需要先初始化中控和登录！！HCHD_LoginHCEnv_Init/HCEnv_InitEx） 【备注】 1.该接口会自动连接指定的设备号 2.同时会进行通讯和重连判断(需要加载HD驱动) 3.无需再通讯 设备号类型:1.emulator-5554/127.0.0.1:5009模拟器Device(-s) 2.01aa8320032fe731手机Device(-d) 3.127.0.0.1:5009tcpipDevice(-e)",
    "url": "/docs/csharp/category_39",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "虚拟机[VM] - HCVM_Run",
    "content": "【功能描述】 运行虚拟机(管理员运行) 【备注】 指令: D:\\vmwin10>D:\\vm16\\vmrun-Twsstart\\\"D:/vmwin10/Windows10x64.vmx\\\"guilparam D:\\vmwin10>D:\\vm16\\vmrun-Twsstart\\\"D:/vmwin10/Windows10x64.vmx\\\"noguilparam C++案例: autoret=HCVM_Run(0,\\\"D:\\\\vm16\\\\\\\",\\\"D:\\\\vmwin10\\\\Windows10x64.vmx\\\",TRUE,0,0,0);",
    "url": "/docs/csharp/category_40",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "虚拟机[VM] - HCVM_Rerun",
    "content": "【功能描述】 重启运行虚拟机(管理员运行) 【备注】 指令: D:\\vmwin10>D:\\vm16\\vmrun-Twsrestart\\\"D:/vmwin10/Windows10x64.vmx\\\"guilparam D:\\vmwin10>D:\\vm16\\vmrun-Twsrestart\\\"D:/vmwin10/Windows10x64.vmx\\\"noguilparam C++案例: autoret=HCVM_Rerun(0,\\\"D:\\\\vm16\\\\\\\",\\\"D:\\\\vmwin10\\\\Windows10x64.vmx\\\",m_强制关闭CheckBox.GetCheck(),TRUE,0,0,0);</FONT>",
    "url": "/docs/csharp/category_40",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "虚拟机[VM] - HCVM_Close",
    "content": "【功能描述】 关闭运行虚拟机(管理员运行) 【备注】 指令: D:\\vmwin10>D:\\vm16\\vmrun-Twsstop\\\"D:/vmwin10/Windows10x64.vmx\\\" D:\\vmwin10>D:\\vm16\\vmrun-Twsstop\\\"D:/vmwin10/Windows10x64.vmx\\\" C++案例: autoret=HCVM_Close(0,\\\"D:\\\\vm16\\\\\\\",\\\"D:\\\\vmwin10\\\\Windows10x64.vmx\\\",m_强制关闭CheckBox.GetCheck(),0,0);",
    "url": "/docs/csharp/category_40",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "虚拟机[VM] - HCVM_List",
    "content": "【功能描述】 获取当前正在运行的虚拟机路径和总数(管理员运行) 【备注】 无 C++案例: autoret=HCVM_List(\\\"D:\\\\vm16\\\\\\\");",
    "url": "/docs/csharp/category_40",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "虚拟机[VM] - HCVM_IsStart",
    "content": "【功能描述】 指定虚拟机是否已经开启(管理员运行) 【备注】 无 C++案例: autoret=HCVM_List(\\\"D:\\\\vm16\\\\\\\",\\\"D:/vmwin10/Windows10x64_1.vmx\\\");",
    "url": "/docs/csharp/category_40",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取版本号",
    "content": "【功能描述】 获取DMA服务器版本号 【备注】 返回长整数:如:240401格式:24年-04版本号-01小版本号",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_版本是否一致",
    "content": "【功能描述】 判断HD插件的DMA接口和DMA服务器接口版本是否一致",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_开启服务器",
    "content": "【功能描述】 开启DMA服务器 【备注】 服务器在群下载或者官网下载 兼容指定自定义进程名(全路径\\\\XXXX.exe)XXXX.exe为自定义进程名不指定进程名表示使用内置进程名(全路径\\\\HDVMDma.exe)不指定路径(当前中控exe根目录\\\\HDVMDma.exe)",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_关闭服务器",
    "content": "【功能描述】 关闭服务器,同时结束进程 【备注】 无",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_服务器是否开启",
    "content": "【功能描述】 服务器是否已经开启 【备注】 循环检查直到服务器开启成功 如果使用HCVMDMA_StartServer开启服务器,不指定IP和端口,则使用的是HCVMDMA_ServerIsStart指定的IP和端口",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_关联虚拟机",
    "content": "【功能描述】 初始化并关联虚拟机 【备注】 需要先开启服务器HCVMDMA_StartServer 内部会自动调用HCEnv_Load接口,使窗口序号和虚拟机进程关联绑定然后初始化虚拟机相关资源 后续就可以使用该窗口虚拟机去操作对应的虚拟机中的进程",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取PID",
    "content": "【功能描述】 通过进程名获取PID 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_读地址",
    "content": "【功能描述】 读地址,仅支持1248地址大小 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_读单浮点",
    "content": "【功能描述】 读单浮点数 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_读双浮点",
    "content": "【功能描述】 读双浮点数 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_读字节集",
    "content": "【功能描述】 读字节集 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_写地址",
    "content": "【功能描述】 写地址,仅支持1248地址大小 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_写单浮点",
    "content": "【功能描述】 写单浮点数 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_写双浮点",
    "content": "【功能描述】 写双浮点数 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_写字节集",
    "content": "【功能描述】 写字节集 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取函数",
    "content": "【功能描述】 获取函数地址 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取主模块",
    "content": "【功能描述】 获取主模块地址 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取模块",
    "content": "【功能描述】 获取模块地址 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取执行环境X64",
    "content": "【功能描述】 初始化获取一个某个进程(x64)的执行环境句柄 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 支持内置保存执行环境最多可以保存20个进程执行环境,保存策略为->同线程-同虚拟机-指定虚拟机中的进程PID-执行环境-绑定 执行环境句柄解析: 1.可以理解成一个空间可以与物理机进行交互,实现参数传递和调用CALL 2.每次调用都会获取一个全新的执行环境句柄(实现物理机中控多线程调用) 3.物理机中控在一个执行环境句柄只能同时一个线程执行,如果要多线程执行请获取多个执行环境句柄 4.此接口不适合多线程获取,请在初始化最开始把所需要的执行环境句柄的数量初始化好,方便物理机中控多线程中单独分别使用",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_CALLX64",
    "content": "【功能描述】 通过指定一个初进程(x64)的执行环境句柄来执行CALL 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 执行环境句柄解析: 1.可以理解成一个空间可以与物理机进行交互,实现参数传递和调用CALL 2.如果需要参数传递,请自行往excuteEnvAddr+0x8写参数(参数最大缓冲区为0x200字节),同时自己的汇编机器码要引入自己参数的地址",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_ShellCodeInitX86",
    "content": "【功能描述】 初始化获取一个某个进程(x86)的执行环境句柄 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 支持内置保存执行环境最多可以保存20个进程执行环境,保存策略为->同线程-同虚拟机-指定虚拟机中的进程PID-执行环境-绑定 执行环境句柄解析: 1.可以理解成一个空间可以与物理机进行交互,实现参数传递和调用CALL 2.每次调用都会获取一个全新的执行环境句柄(实现物理机中控多线程调用) 3.物理机中控在一个执行环境句柄只能同时一个线程执行,如果要多线程执行请获取多个执行环境句柄 4.此接口不适合多线程获取,请在初始化最开始把所需要的执行环境句柄的数量初始化好,方便物理机中控多线程中单独分别使用",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_RunShellCodeX86",
    "content": "【功能描述】 通过指定一个初进程(x86)的执行环境句柄来执行CALL 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 执行环境句柄解析: 1.可以理解成一个空间可以与物理机进行交互,实现参数传递和调用CALL 2.如果需要参数传递,请自行往excuteEnvAddr+0x8写参数(参数最大缓冲区为0x200字节),同时自己的汇编机器码要引入自己参数的地址",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_搜索特征码x86",
    "content": "【功能描述】 特征码搜索(X86)(指定模块名) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_搜索特征码x86Ex",
    "content": "【功能描述】 特征码搜索(X86)(指定开始地址和搜索大小) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_搜索特征码x64",
    "content": "【功能描述】 特征码搜索(X64)(指定模块名) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_搜索特征码x64Ex",
    "content": "【功能描述】 特征码搜索(X64)(指定开始地址和搜索大小) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_断开虚拟机",
    "content": "【功能描述】 卸载并关闭连接虚拟机 【备注】 与HCVMDMA_Init是一对接口 内部会自动调用HCEnv_UnLoadEx接口,使窗口序号和虚拟机进程断开绑定然后释放虚拟机相关资源 一旦调用,则虚拟机需要被关闭后开启而不是重启PID不能一样",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取截图环境",
    "content": "【功能描述】 初始化截图环境 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 小技巧: 1.初始化接口有根据不同虚拟机,失败概率不同,为了提高初始化成功率,可以尝试自启动任务管理器,让系统激活起来,初始化完成就可以把任务管理器关掉了 2.步骤:打开虚拟机-关联虚拟机-检查是否有管理器PID-开始初始化键鼠/截图环境-如果失败3次直接重启虚拟机 3.如图操作自启任务管理器就行 4.支持内置保存截图环境一个虚拟机固定一个,自动判断是否之前初始化过 如果有的虚拟机初始化句柄超时建议:",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_29",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_截图一次",
    "content": "【功能描述】 截图一次(获取一次虚拟机全屏数据到物理机) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_30",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_开启截图",
    "content": "【功能描述】 开启截图(内部会开启一条线程循环调用HCVMDMA_Capture) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_31",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_关闭截图",
    "content": "【功能描述】 关闭截图(内部会关闭之前开启的线程)和HCVMDMA_OpenCapture是一对接口 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_32",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取键鼠环境",
    "content": "【功能描述】 初始化键鼠环境 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 小技巧: 1.初始化接口有根据不同虚拟机,失败概率不同,为了提高初始化成功率,可以尝试自启动任务管理器,让系统激活起来,初始化完成就可以把任务管理器关掉了 2.步骤:打开虚拟机-关联虚拟机-检查是否有管理器PID-开始初始化键鼠/截图环境-如果失败3次直接重启虚拟机 3.如图操作自启任务管理器就行 4.支持内置保存键鼠环境一个虚拟机固定一个,自动判断是否之前初始化过 如果有的虚拟机初始化句柄超时建议:",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_33",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_鼠标移动",
    "content": "【功能描述】 鼠标移动(不包含轨迹) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_34",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_左键按下",
    "content": "【功能描述】 鼠标左键按下 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_35",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_左键弹起",
    "content": "【功能描述】 鼠标左键弹起 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_36",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_左键点击",
    "content": "【功能描述】 鼠标左键点击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_37",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_左键双击",
    "content": "【功能描述】 鼠标左键双击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_38",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_中键按下",
    "content": "【功能描述】 鼠标中键按下 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_39",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_中键弹起",
    "content": "【功能描述】 鼠标中键弹起 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_40",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_中键点击",
    "content": "【功能描述】 鼠标中键点击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_41",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_中键双击",
    "content": "【功能描述】 鼠标中键双击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_42",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_右键按下",
    "content": "【功能描述】 鼠标右键按下 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_43",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_右键弹起",
    "content": "【功能描述】 鼠标右键弹起 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_44",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_右键点击",
    "content": "【功能描述】 鼠标右键点击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_45",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_右键双击",
    "content": "【功能描述】 鼠标右键双击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_46",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_滚轮滚上",
    "content": "【功能描述】 鼠标滚轮滚上 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_47",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_滚轮滚下",
    "content": "【功能描述】 鼠标滚轮滚下 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_48",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_键盘按下",
    "content": "【功能描述】 键盘按下 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_49",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_键盘按上",
    "content": "【功能描述】 键盘弹起 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_50",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_键盘敲击",
    "content": "【功能描述】 键盘敲击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_51",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_发送文本Unicode",
    "content": "【功能描述】 发送unicode字符串 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_52",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_发送文本Ascii",
    "content": "【功能描述】 发送ascii字符串 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_53",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_GetPidList",
    "content": "【功能描述】 获取PID列表 【备注】 需要先初始化关联虚拟机HCVMDMA_Init C++解析获取案例: \\n最大51个数量存储量autojsonStr=HCEnv_GetRetJson(windowsIndex);if(jsonStr==NULL)returnERROR_获取数据失败;\\npid1,name1|pid2,name2|pid3,name3|vector<string>pidNameArray;Tool::HSplitStringA(jsonStr,pidNameArray,\\\"|\\\");if(pidNameArray.size()<=0)returnRET_失败;for(int index=0;index<pidSize;index++){\\npid1,name1，vector<string>proArray;Tool::HSplitStringA(pidNameArray[index]+\\\",\\\",proArray,\\\",\\\");if(proArray.size()<2)continue;if(atoi(proArray[0].c_str())==pid)returnRET_成功;\\n元素1就是PID元素2是进程名}returnRET_失败;\\n没找到",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_54",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_IsExistPid",
    "content": "【功能描述】 对应虚拟机中的进程PID是否存在 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/csharp/category_41",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "(B2)剑灵2台服 - HB2_GetPlayerInfo",
    "content": "【功能描述】 调用获取人物信息CALL 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"name\\\":\\\"Jack\\\",\\\"level\\\":26,\\\"curHp\\\":588,\\\"maxHp\\\":999,\\\"curMp\\\":255,\\\"maxMp\\\":666,\\\"gold\\\":99999,\\\"diamond\\\":999999}]}",
    "url": "/docs/csharp/category_42",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "(B2)剑灵2台服 - HB2_GetBagInfo",
    "content": "【功能描述】 调用获取背包信息CALL 【备注】 json: {\\\"error\\\":0,\\\"flag\\\":99,\\\"ret\\\":[{\\\"id\\\":1111,\\\"tId\\\":22222,\\\"dId\\\":33333,\\\"num\\\":588},{\\\"id\\\":1111,\\\"tId\\\":22222,\\\"dId\\\":33333,\\\"num\\\":588},{\\\"id\\\":1111,\\\"tId\\\":22222,\\\"dId\\\":33333,\\\"num\\\":588}]}",
    "url": "/docs/csharp/category_42",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "(B2)剑灵2台服 - HB2_GetShortCutInfo1",
    "content": "【功能描述】 调用获取快捷栏遍历信息CALL（前10个） 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"index\\\":0,\\\"id\\\":1111,\\\"bAct\\\":0},{\\\"index\\\":1,\\\"id\\\":2222,\\\"bAct\\\":1}]}",
    "url": "/docs/csharp/category_42",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "(B2)剑灵2台服 - HB2_GetShortCutInfo2",
    "content": "【功能描述】 调用获取快捷栏遍历信息CALL（后10个） 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"index\\\":0,\\\"id\\\":1111,\\\"bAct\\\":0},{\\\"index\\\":1,\\\"id\\\":2222,\\\"bAct\\\":1}]}",
    "url": "/docs/csharp/category_42",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "(B2)剑灵2台服 - HB2_GetPlayerXYZ",
    "content": "【功能描述】 调用获取人物坐标CALL 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"x\\\":125,\\\"y\\\":125,\\\"z\\\":125}]}",
    "url": "/docs/csharp/category_42",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "(B2)剑灵2台服 - HB2_GetPlayerCurMapId",
    "content": "【功能描述】 调用获取人物当前地图IDCALL 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"mapId\\\":1993}]}",
    "url": "/docs/csharp/category_42",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "(B2)剑灵2台服 - HB2_GetCurChapterTaskId",
    "content": "【功能描述】 调用遍历已结任务章节ID信息(主线+支线) 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"CTaskId\\\":1993,\\\"index\\\":1}]}",
    "url": "/docs/csharp/category_42",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "(B2)剑灵2台服 - HB2_GetAChapterTask",
    "content": "【功能描述】 调用遍历已结任务章节ID信息(主线+支线) 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"CTaskId\\\":1993,\\\"index\\\":1,\\\"curNum\\\":2},{\\\"CTaskId\\\":1998,\\\"index\\\":2,\\\"curNum\\\":2}]}",
    "url": "/docs/csharp/category_42",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "(B2)剑灵2台服 - HB2_PlayerIsMove",
    "content": "【功能描述】 调用人物是否移动CALL 【备注】 无",
    "url": "/docs/csharp/category_42",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "(B2)剑灵2台服 - HB2_IsAutoUseMed",
    "content": "【功能描述】 调用人物是否自动使用药品状态 【备注】 无",
    "url": "/docs/csharp/category_42",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "(B2)剑灵2台服 - HB2_Move",
    "content": "【功能描述】 调用移动CALL 【备注】 无",
    "url": "/docs/csharp/category_42",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "(B2)剑灵2台服 - HB2_GetHuaShen",
    "content": "【功能描述】 调用化身遍历CALL 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"id\\\":0,\\\"xLevel\\\":1111,\\\"type\\\":0},{\\\"id\\\":0,\\\"xLevel\\\":1111,\\\"type\\\":0}]} id:化身IDxLevel:化身星级type:化身品质0123依次递增+1白绿蓝...",
    "url": "/docs/csharp/category_42",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "(B2)剑灵2台服 - HB2_GetChongWu",
    "content": "【功能描述】 调用宠物遍历CALL 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"id\\\":0,\\\"xLevel\\\":1111,\\\"type\\\":0},{\\\"id\\\":0,\\\"xLevel\\\":1111,\\\"type\\\":0}]} id:宠物IDxLevel:宠物星级type:宠物品质0123依次递增+1白绿蓝...",
    "url": "/docs/csharp/category_42",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "(B2)剑灵2台服 - HB2_UseGoods",
    "content": "【功能描述】 调用使用物品CALL 【备注】 无",
    "url": "/docs/csharp/category_42",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "谷歌内置浏览器模块[GB] - HD内置浏览器_附加谷歌1",
    "content": "【功能描述】 附加内置浏览器，附加监听模式1 【备注】 必须游戏进程自带内置谷歌浏览器,才会附加模块成功 由于每个游戏不同,需要定制浏览器接口 当前默认的内置谷歌浏览器接口仅适合夜鸦",
    "url": "/docs/csharp/category_43",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "谷歌内置浏览器模块[GB] - HD内置浏览器_附加谷歌2",
    "content": "【功能描述】 附加内置浏览器，附加监听模式2 【备注】 必须游戏进程自带内置谷歌浏览器,才会附加模块成功 由于每个游戏不同,需要定制浏览器接口 当前默认的内置谷歌浏览器接口仅适合夜鸦",
    "url": "/docs/csharp/category_43",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "谷歌内置浏览器模块[GB] - HD内置浏览器_脱离谷歌",
    "content": "【功能描述】 脱离之前的内置浏览器 【备注】 必须游戏进程自带内置谷歌浏览器,才会附加模块成功",
    "url": "/docs/csharp/category_43",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "谷歌内置浏览器模块[GB] - HD内置浏览器_注入谷歌JS代码",
    "content": "【功能描述】 给内置浏览器注入JS代码 【备注】 必须游戏进程自带内置谷歌浏览器,才会附加模块成功",
    "url": "/docs/csharp/category_43",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "谷歌内置浏览器模块[GB] - HD内置浏览器_注入谷歌JS文件",
    "content": "【功能描述】 给内置浏览器注入指定文件中的JS代码 【备注】 必须游戏进程自带内置谷歌浏览器,才会附加模块成功",
    "url": "/docs/csharp/category_43",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "调试绘制模块(DS) - HD调试_设置颜色",
    "content": "【功能描述】 (用于调试)设置全局可视化标注颜色值 【备注】 颜色值是4字节分别对应XRGB如:0x00FF0000红色如:0x0000FF00绿色如:0x000000FF蓝色",
    "url": "/docs/csharp/category_44",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "调试绘制模块(DS) - HD调试_设置调试窗口跟随",
    "content": "【功能描述】 (用于调试)设置当前调试窗口跟随的进程信息",
    "url": "/docs/csharp/category_44",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "调试绘制模块(DS) - HD调试_标记窗口",
    "content": "【功能描述】 给指定窗口画边框或者填充矩形 【备注】 无",
    "url": "/docs/csharp/category_44",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "调试绘制模块(DS) - HD调试_捕捉异常调用堆栈",
    "content": "【功能描述】 开启/关闭捕捉异常 【备注】 无",
    "url": "/docs/csharp/category_44",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "调试绘制模块(DS) - HD调试_附加控制台",
    "content": "【功能描述】 附加控制台 【备注】 print fcout输入输出到控制台上显示注意:自行定时清空屏幕防止满屏卡主进程运行",
    "url": "/docs/csharp/category_44",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "全局资源设置模块(RES) - HCRES_SetResPath",
    "content": "【功能描述】 设置资源路径 【备注】 图片字库文件都在这个里面找",
    "url": "/docs/csharp/category_45",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "全局资源设置模块(RES) - HD资源_设置路径Ex",
    "content": "【功能描述】 设置资源路径 【备注】 图片字库文件都在这个里面找",
    "url": "/docs/csharp/category_45",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "全局资源设置模块(RES) - HCRES_SetLanguageResPath",
    "content": "【功能描述】 设置语言或者字体文件资源路径 【备注】 语言文件都在这个里面找",
    "url": "/docs/csharp/category_45",
    "source": "api_data_csharp.json",
    "type": "函数"
  },
  {
    "id": "explanation_1",
    "title": "基础说明 - HD简介",
    "content": "【功能描述】 教程以官网为准 后面会出帖子教程 供大家学习使用 官网: https://www.hdgdk.com HD【RPG引擎库】交流群(3群):882724064 1030698387 (有事请主动找群主和管理，群主和管理不会主动私聊任何人,请勿上当受骗！！！！) (有事请主动找群主和管理，群主和管理不会主动私聊任何人,请勿上当受骗！！！！) (有事请主动找群主和管理，群主和管理不会主动私聊任何人,请勿上当受骗！！！！) 功能: 1.自研驱动注入，模拟键鼠 ，读写内存相关操作，进程以及线程相关操作等. 2.自研接口注入模式框架. 3.目前支持 32 位/64位/ASCII/UNICODE(8个版本中控)<->32/64位 (目标程序) 4.还支持LUA编写,自定义模块,谷歌内置浏览器,主板机投屏,多线程框架模块,yolov5,等操作 5.支持易语言 C/C++ 火山 Python C# 炫语言 golong等语言（支持调用C++DLL的语言） 6.具体看对应的模块功能接口 7.支持win7/8/10/11系统 ============================================================= 一.【HD易语言基础课程】 https://www.bilibili.com/video/BV1UgJFz5EKN/?spm_id_from=333.1387.homepage.video_card.click .【HD易语言多线程框架实战课程】 https://www.bilibili.com/video/BV1UgJFz5EKN/?spm_id_from=333.1387.homepage.video_card.click 二.【HD火山基础课程】 https://www.bilibili.com/video/BV1iBftYoE5b/?spm_id_from=333.1387.homepage.video_card.click 三.【HD C++基础课程】 https://www.bilibili.com/video/BV1G9fnYeEEp/?spm_id_from=333.1387.homepage.video_card.click .【HD C++多线程框架实战课程】 https://www.bilibili.com/video/BV1G9fnYeEEp/?spm_id_from=333.1387.homepage.video_card.click .【HD C++ 夜鸦国际服实战课程】 https://www.bilibili.com/video/BV1Ei1sYsELz/?spm_id_from=333.1387.homepage.video_card.click 四.【HD Python基础课程】 https://www.bilibili.com/video/BV1rtRAYXEwQ/?spm_id_from=333.1387.homepage.video_card.click 五.【HD 炫语言基础课程】 https://www.bilibili.com/video/BV1LJXGYPEXy/?spm_id_from=333.1387.homepage.video_card.click https://www.bilibili.com/video/BV1UNqdYqEBQ/?spm_id_from=333.1387.homepage.video_card.click 六.【HD 综合工具使用教程】 https://www.bilibili.com/video/BV1nscbeVEfY/?spm_id_from=333.1387.homepage.video_card.click 七.【HD Yolov8综合工具使用教程】 https://www.bilibili.com/video/BV13c3vzfE2D/?spm_id_from=333.1387.homepage.video_card.click ============================================================= 【备注】 免责声明 一. 本软件完全出于个人兴趣爱好，由本人在业余时间开发，是一款安全，绿色，可靠的软件产品. 二. 利用本软件所做出的任何软件作品，和本人无关. 三. 本软件绝对不针对任何一款游戏或者游戏开发商，如果有人利用本软件开发非法游戏辅助，本人将保留追究其民事以及刑事责任的权利. 四. 因使用本软件而引致的任何意外、疏忽、合约毁坏、诽谤、版权或知识产权侵犯及其所造成的任何损失，本人概不负责，亦概不承担任何民事或刑事法律责任。 五. 当你第一次开始使用本人所提供的任何软件及资源的那一刻起就将被视为对本声明全部内容的认可。同时您必须认可上述免责条款，方可使用本软件及资源。如有任何异议，建议立刻删除本软件及资源并且停止使用. 六. 以上内容，本人保留最终解释权。",
    "url": "/docs/huoshan/category_1",
    "source": "api_data_huoshanpc.json",
    "type": "说明"
  },
  {
    "id": "explanation_2",
    "title": "基础说明 - HD返回值表",
    "content": "【功能描述】 接口返回值： 小于等于0 为错误代码 大于 0为成功 (驱动接口返回值在下面↓) #define RET_检查PID存在 8 #define RET_环境已卸载 7 #define RET_重连窗口序号不一致 6 #define RET_重连窗口 5 #define RET_状态变动 4 #define RET_暂停过 3 #define RET_结束 2 #define RET_成功 1 #define RET_失败 0 #define RET_真 1 #define RET_非 0 #define ERROR_未初始化全局环境 -1000 #define ERROR_未找到进程环境 -1001 #define ERROR_进程环境内存为NULL -1002 #define ERROR_获取CALL环境失败 -1003 #define ERROR_超时返回 -1004 #define ERROR_主线程调用超时返回 -1005 #define ERROR_数据异常 -1006 #define ERROR_参数错误 -1007 #define ERROR_未挂接主线程 -1008 #define ERROR_后台绑定句柄无效 -1009 #define ERROR_未绑定后台 -1010 #define ERROR_多开超出限制 -1011 #define ERROR_字符串为空 -1012 #define ERROR_地址为空 -1013 #define ERROR_未知错误 -1014 #define ERROR_远进程申请内存失败 -1015 #define ERROR_文件夹创建失败 -1016 #define ERROR_异步无法获取返回值 -1017 #define ERROR_语法错误 -1018 #define ERROR_申请内存失败 -1019 #define ERROR_创建线程失败 -1020 #define ERROR_缓冲区大小不足 -1021 #define ERROR_未初始化LUA -1022 #define ERROR_LUA状态机为NULL -1023 #define ERROR_未找到LUA函数 -1024 #define ERROR_返回值未知类型 -1025 #define ERROR_LUA线程标识符不符合 -1026 #define ERROR_模块获取失败 -1027 #define ERROR_地址不可读 -1028 #define ERROR_返回值为JSON -1029 #define ERROR_获取数据失败 -1030 #define ERROR_未初始化 -1031 #define ERROR_已经开启 -1032 #define ERROR_已经结束 -1033 #define ERROR_未开启 -1034 #define ERROR_未结束 -1035 #define ERROR_高宽为0 -1036 #define ERROR_数据为NULL -1037 #define ERROR_数据不符合要求 -1038 #define ERROR_文件打开失败 -1039 #define ERROR_打开失败 -1040 #define ERROR_解析失败 -1041 #define ERROR_无游戏类型 -1042 #define ERROR_HOOK失败 -1043 #define ERROR_UNHOOK失败 -1044 #define ERROR_功能失效 -1045 #define ERROR_无效PE文件格式 -1046 #define ERROR_未找到PE头 -1047 #define ERROR_重定位表失败 -1048 #define ERROR_未找到函数入口 -1049 #define ERROR_无法附加DLL -1050 #define ERROR_接口数量上限 -1051 #define ERROR_已经存在 -1052 #define ERROR_打开句柄失败 -1053 #define ERROR_未找到全局环境 -1054 #define ERROR_组件数量上限 -1055 #define ERROR_未找到组件接口 -1056 #define ERROR_接口类型不匹配 -1057 #define ERROR_组件无效 -1058 #define ERROR_接口地址无效 -1059 #define ERROR_生成密钥失败 -1060 #define ERROR_加密失败 -1061 #define ERROR_解密失败 -1062 #define ERROR_DLL中无此接口 -1063 #define ERROR_下载失败 -1064 #define ERROR_注册表操作失败 -1065 #define ERROR_路径获取失败 -1066 #define ERROR_提权失败 -1067 #define ERROR_驱动已安装 -1068 #define ERROR_HD驱动已安装无法安装HN驱动 -1069 #define ERROR_资源未找到 -1070 #define ERROR_资源加载失败 -1071 #define ERROR_提取资源失败 -1072 #define ERROR_未加载插件 -1073 #define ERROR_文件无法保存 -1074 #define ERROR_打开目录失败 -1075 #define ERROR_写入文件的字节大小不符合要求 -1076 #define ERROR_删除文件失败 -1077 #define ERROR_获取字符串失败 -1078 #define ERROR_获取注册表值失败 -1079 #define ERROR_类型错误 -1080 #define ERROR_参数不符合要求 -1081 #define ERROR_区域超出 -1082 #define ERROR_文件不存在 -1083 #define ERROR_创建文件失败 -1084 #define ERROR_文件读取失败 -1085 #define ERROR_与系统驱动通讯失败 -1086 #define ERROR_创建管道失败 -1087 #define ERROR_创建进程失败 -1088 #define ERROR_未找到相关字符串信息 -1089 #define ERROR_缓冲区大小不充足 -1090 #define ERROR_数据类型转换失败 -1091 #define ERROR_格式化字符串失败 -1092 #define ERROR_网络超时 -1093 #define ERROR_网络连接失败 -1094 #define ERROR_加载指定DLL失败 -1095 #define ERROR_解析字符串失败 -1096 #define ERROR_窗口大小变动导致数据不一致 -1097 #define ERROR_打开剪切板失败 -1098 #define ERROR_加锁失败 -1099 #define ERROR_获取剪切板数据失败 -1100 #define ERROR_版本号获取失败 -1101 #define ERROR_已经绑定其他设备 -1102 #define ERROR_已经达到最大在线数 -1103 #define ERROR_账号或密码为空 -1104 #define ERROR_验证失败 -1105 #define ERROR_打开进程失败 -1106 #define ERROR_进程位数不匹配 -1107 #define ERROR_添加进程环境失败 -1108 #define ERROR_定位特征地址失败 -1109 #define ERROR_寻找空白地址失败 -1110 #define ERROR_无操作类型 -1111 #define ERROR_无相关句柄 -1112 #define ERROR_无HDC句柄 -1113 #define ERROR_获取矩形大小失败 -1114 #define ERROR_拷贝数据失败 -1115 #define ERROR_无效句柄 -1116 #define ERROR_创建对象失败 -1117 #define ERROR_截图方式需要重开才能切换 -1118 #define ERROR_格式有误 -1119 #define ERROR_字库数据为空 -1120 #define ERROR_字库中未找到相应字 -1121 #define ERROR_大小计算为0 -1122 #define ERROR_容器大小不一致 -1123 #define ERROR_句柄无效 -1124 #define ERROR_获取PID无效 -1125 #define ERROR_获取大小失败 -1126 #define ERROR_获取失败 -1127 #define ERROR_未找到 -1128 #define ERROR_立即返回无效值 -1129 #define ERROR_未设置路径 -1130 #define ERROR_文件操作失败 -1131 #define ERROR_写入内存失败 -1132 #define ERROR_模块查找失败 -1133 #define ERROR_接口查找失败 -1134 #define ERROR_组件信息保存失败 -1135 #define ERROR_组件加载失败 -1136 #define ERROR_组件卸载失败 -1137 #define ERROR_组件不符合卸载要求 -1138 #define ERROR_进程环境句柄为NULL -1139 #define ERROR_未绑定PID -1140 #define ERROR_读取图片失败 -1141 #define ERROR_打开注册表失败 -1142 #define ERROR_获取注册表失败 -1143 #define ERROR_写内存失败 -1144 #define ERROR_清除缓存失败 -1145 #define ERROR_字体无宽度 -1146 #define ERROR_裁剪矩形数据失败 -1147 #define ERROR_图片无宽或高 -1148 #define ERROR_功能未开放 -1149 #define ERROR_模块信息获取失败 -1150 #define ERROR_未找到合适的JMP地址 -1151 #define ERROR_HOOK初始化失败 -1152 #define ERROR_无HOOK接口类型 -1153 #define ERROR_CALL类型不匹配 -1154 #define ERROR_创建通讯失败 -1155 #define ERROR_加载通讯失败 -1156 #define ERROR_数据格式错误 -1157 #define ERROR_地址失效 -1158 #define ERROR_坐标转换失败 -1159 #define ERROR_容器为空 -1160 #define ERROR_数据为空 -1161 #define ERROR_特征不符合 -1162 #define ERROR_范围未确定 -1163 #define ERROR_缓冲区不足 -1164 #define ERROR_此接口调试版本无效 -1165 #define ERROR_子图不在范围内 -1166 #define ERROR_插件数量上限 -1167 #define ERROR_API枚举失败 -1168 #define ERROR_无法定位模块 -1169 #define ERROR_无效HOOK地址 -1170 #define ERROR_无对应的HOOK函数 -1171 #define ERROR_破坏字节超过容量 -1172 #define ERROR_指定地址不适合HOOK -1173 #define ERROR_没有充足的HOOK大小 -1174 #define ERROR_设置回调地址失败 -1175 #define ERROR_API获取时间失败 -1176 #define ERROR_无效插件序号 -1177 #define ERROR_进程不存在 -1178 #define ERROR_未安装插件 -1179 #define ERROR_初始化通讯失败 -1180 #define ERROR_未初始化通讯序号 -1181 #define ERROR_当前线程字库为空 -1182 #define ERROR_线程数量超出限制 -1183 #define ERROR_字库序号不存在 -1184 #define ERROR_释放资源失败 -1185 #define ERROR_超出容量 -1186 #define ERROR_空模型 -1187 #define ERROR_环境序号不存在 -1188 #define ERROR_回调处理中 -1189 #define ERROR_无法操作绑定窗口 -1190 #define ERROR_接口已被移除 -1191 #define ERROR_不支持类型 -1192 #define ERROR_初始化失败 -1193 #define ERROR_环境被卸载 -1194 #define ERROR_进程已经关闭 -1195 #define ERROR_中控环境未初始化 -1196 #define ERROR_未加载HD驱动 -1197 #define ERROR_未绑定设备 -1198 #define ERROR_未找到进程 -1199 #define ERROR_进程PID不匹配 -1200 #define ERROR_前台模式无法后台 -1201 #define ERROR_JMP地址无效 -1202 #define ERROR_HOOK地址无效 -1203 #define ERROR_类型和HOOK地址不匹配 -1204 #define ERROR_不在HD多线程环境下 -1205 #define ERROR_未连接 -1206 #define ERROR_进程环境已被卸载 -1207 #define ERROR_安装插件失败 -1208 //检查是否安装了驱动 #define ERROR_安装驱动失败 -1209 //检查是否管理员或者杀毒或者关闭内核隔离 #define ERROR_加载环境失败 -1210 //检查账号是否欠费或者网络问题或者参数不符合要求 #define ERROR_初始化序号失败 -1211 //一般不会失败 #define ERROR_获取PID超时返回 -1212 //确定是否打开进程成功或者增大等待时间 #define ERROR_获取状态值20超时返回 -1213 //未安装插件或被拦截或增大等待时间 #define ERROR_获取状态值120超时返回 -1214 //未安装插件或被拦截或增大等待时间 #define ERROR_继续失败 -1215 //可能未初始化相关环境 一般不会失败 #define ERROR_当前进程插件序号不一致 -1216 //说明指定的PID进程绑定的窗口序号已经存在 与指定的序号不一致 调用HCInject_GetPreWinIndex 获取指定PID的绑定的窗口序号 #define ERROR_PID无效 -1217 #define ERROR_扩展序号不能用 -1218//扩展序号不能自己指定 #define ERROR_接口丢弃 -1219//老版本的接口丢弃 #define ERROR_序号超出限制 -1220 #define ERROR_已经重启 -1221 #define ERROR_登录中无法重启 -1222 #define ERROR_暂停中无法重启 -1223 #define ERROR_操作中无法重启 -1224 #define ERROR_强制关闭线程中无法发送 -1225 #define ERROR_卸载失败 -1226 #define ERROR_未完全开启 -1227 #define ERROR_逻辑异常 -1228 #define ERROR_无法连接VNC -1229 #define ERROR_未连接过VNC -1230 #define ERROR_未关联过VM -1231 #define ERROR_未获取截图环境 -1232 #define ERROR_未获取截图环境 -1232 #define ERROR_环境为NULL -1233 #define ERROR_区域无效 -1234 #define ERROR_继续当前操作 -1235 #define ERROR_加解密失败 -1236 #define ERROR_未安装驱动 -1237 #define ERROR_调试版本无法加解密 -1238 #define ERROR_截图缓存不存在 -1239//检查截图模式不对 或者 未开启截图 请用截图查看器查看是否截图缓存存在 【备注】 也可以可通过工具后台查看",
    "url": "/docs/huoshan/category_1",
    "source": "api_data_huoshanpc.json",
    "type": "说明"
  },
  {
    "id": "function_1",
    "title": "基础功能接口 - HD登录.获取版本号",
    "content": "【功能描述】 获取当前插件版本号 【备注】 无",
    "url": "/docs/huoshan/category_2",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "基础功能接口 - HCEnv_GetRetJson",
    "content": "【功能描述】 获取最近一次调用接口返回的json字符串 【备注】 并不是所有接口都返回json字符串 有一些接口返回单一的值就没必要调用这个接口 一些接口需要拿到字符串信息返回,那么这些字符串会存在json字符串中,需要自己调用此接口获取",
    "url": "/docs/huoshan/category_2",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "基础功能接口 - HD通用.获取最近返回值",
    "content": "【功能描述】 获取最近一次调用接口返回的值(用于检测是否有错) 【备注】 无",
    "url": "/docs/huoshan/category_2",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "基础功能接口 - HCEnv_GetErrorStr",
    "content": "【功能描述】 通过传递HD返回值获取字符串信息",
    "url": "/docs/huoshan/category_2",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "基础功能接口 - HD通用.获取最近API返回值",
    "content": "【功能描述】 获取最近一次调用WIN32API错误值 【备注】 无",
    "url": "/docs/huoshan/category_2",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "基础功能接口 - HD环境.获取最大多开数",
    "content": "【功能描述】 获取最大窗口数 【备注】 窗口序号不能大于等于这个返回值同时也不能小于0",
    "url": "/docs/huoshan/category_2",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "基础功能接口 - HD通用.获取当前插件状态值",
    "content": "【功能描述】 获取当前环境搭建流程中的操作信息 【备注】 这个CALL返回HD状态信息可以确定当前处于那个步骤 typedefenumHD状态信息{HD状态信息_无=0,\\n0HD状态信息_DLL环境_加载全局成功=1,\\n1HD状态信息_DLL环境_加载全局失败=2,\\n2HD状态信息_DLL环境_窗口序号不符合=3,\\n3HD状态信息_DLL环境_进程不符合=4,\\n4HD状态信息_DLL环境_打开句柄失败=5,\\n5HD状态信息_DLL环境_获取内存失败=6,\\n6HD状态信息_DLL环境_等待继续=20,\\n20需要调用HCInject_Continue()HD状态信息_通讯环境_开始=21,\\n21HD状态信息_通讯环境_成功=22,\\n22HD状态信息_通讯环境_失败=23,\\n23HD状态信息_通讯环境_打开句柄失败=24,\\n24HD状态信息_通讯环境_获取内存失败=25,\\n25HD状态信息_接口映射_成功=40,\\n40自制通讯协议创建HD状态信息_接口映射_失败=41,\\n41HD状态信息_LUA_成功=60,\\n60可以执行LUAHD状态信息_LUA_失败=61,\\n61不可以执行LUAHD状态信息_数据库_开启=80,\\n80需要调用HHIT2_Load()的时候参数bOpenData设置为1HD状态信息_数据库_未开启=81,\\n81HD状态信息_数据库_开启失败=82,\\n82内置特征码有误联系管理员HD状态信息_验证_有误=100,\\n100联系管理员HD状态信息_监听_成功=120,\\n120【【【【大于等于120说明可以调用接口了】】】】HD状态信息_监听_失败=121,\\n121基本是不会出现这个错误HD状态信息_挂接主线_开启=140,\\n140调用HD状态信息_挂接主线_进入=141,\\n141准备挂接HD状态信息_挂接主线_尝试中=142,\\n142处于这个阶段需要用SetHwnd()暂时没用HD状态信息_挂接主线_成功=143,\\n143成功挂接所有关于可以主线程调用的接口的参数\\\"是否主线程调用\\\"生效HD状态信息_挂接主线_失败=144,\\n144HD状态信息_挂接主线_已经开启=145,\\n145已经开启了HD状态信息_加载_延迟=146,\\n2秒延迟HD状态信息_通讯加载失败=147\\n2秒延迟}HD状态信息;",
    "url": "/docs/huoshan/category_2",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "基础功能接口 - HD环境.获取插件执行环境信息",
    "content": "【功能描述】 获取通讯插件所绑定的目标进程的执行线程环境信息 【备注】 无",
    "url": "/docs/huoshan/category_2",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "基础功能接口 - HD注入.设置插件信息",
    "content": "【功能描述】 设置插件信息 【备注】 易语言/火山/Python/炫语言/C#等语言:还需要拿到模块源码更改导入DLL名字需要与自定义DLL同名 内置版本名规则: \\n======64位#ifdef_WIN64#ifdef_UNICODE\\n64位W版本std::stringHCInject::g_发布版本DLL名字=\\\"hd64.dll\\\";std::stringHCInject::g_调试版本DLL名字=\\\"hddebug64.dll\\\";#else\\n64位A版本std::stringHCInject::g_发布版本DLL名字=\\\"hd64a.dll\\\";std::stringHCInject::g_调试版本DLL名字=\\\"hddebug64a.dll\\\";#endif\\n======32位#else#ifdef_UNICODE\\n32位W版本std::stringHCInject::g_发布版本DLL名字=\\\"hd.dll\\\";std::stringHCInject::g_调试版本DLL名字=\\\"hddebug.dll\\\";#else\\n32位A版本std::stringHCInject::g_发布版本DLL名字=\\\"hda.dll\\\";std::stringHCInject::g_调试版本DLL名字=\\\"hddebuga.dll\\\";#endif#endif\\n》》》》》》",
    "url": "/docs/huoshan/category_2",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "IP模块[IP] - HDIP.有米设置路径",
    "content": "【功能描述】 设置有米软件路径(EXE路径) 【备注】 软件找HD作者拿(魔改版)",
    "url": "/docs/huoshan/category_3",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "IP模块[IP] - HDIP.有米添加IP",
    "content": "【功能描述】 添加IP 【备注】 软件找HD作者拿(魔改版)",
    "url": "/docs/huoshan/category_3",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "IP模块[IP] - HDIP.有米添加进程",
    "content": "【功能描述】 添加代理的进程名 【备注】 软件找HD作者拿(魔改版)",
    "url": "/docs/huoshan/category_3",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "IP模块[IP] - HDIP.有米打开",
    "content": "【功能描述】 打开有米软件 【备注】 软件找HD作者拿(魔改版) 流程: 1.先设置路径 2.添加代理进程和IP 3.打开有米",
    "url": "/docs/huoshan/category_3",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "IP模块[IP] - HDIP.有米是否打开",
    "content": "【功能描述】 有米软件是否已经打开 【备注】 软件找HD作者拿(魔改版) 流程: 1.先设置路径 2.添加代理进程和IP 3.打开有米",
    "url": "/docs/huoshan/category_3",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "IP模块[IP] - HDIP.有米关闭",
    "content": "【功能描述】 关闭有米软件 【备注】 软件找HD作者拿(魔改版) 流程: 1.先设置路径 2.添加代理进程和IP 3.打开有米",
    "url": "/docs/huoshan/category_3",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "登录验证(Login) - HD登录.登录",
    "content": "【功能描述】 HD登录验证接口（强烈建议主线程中调用） 【备注】 1.验证接口,所有接口需要通过验证才能调用 2.如果自己写中控可以不用打开自动更新",
    "url": "/docs/huoshan/category_4",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "登录验证(Login) - HD登录.获取最近登录点数",
    "content": "【功能描述】 最近登录时候的点数 【备注】 无",
    "url": "/docs/huoshan/category_4",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "登录验证(Login) - HD登录.获取最近登录时间",
    "content": "【功能描述】 获取最近登录时间戳 【备注】 无",
    "url": "/docs/huoshan/category_4",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "登录验证(Login) - HD登录.获取点数",
    "content": "【功能描述】 获取点数 【备注】 无",
    "url": "/docs/huoshan/category_4",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "登录验证(Login) - HD登录.获取最大多开数",
    "content": "【功能描述】 获取最大多少开 【备注】 无",
    "url": "/docs/huoshan/category_4",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "安装插件扩展模块[ex] - HD扩展.安装插件1",
    "content": "【功能描述】 第一种通讯安装插件方式(安装插件再打开进程)如果使用HD多线程模块强烈建议在登录回调中使用 【备注】 可以参考表安装插件接口类型表 1.支持重连,重连的前提是不能被HCEnv_UnLoad卸载 回调解析: 打开回调openFun:可以参考表安装插件接口类型表 typedef__int64 (__stdcall* INSTALLPLUGint YPE)(int windowsIndex); 参数:windowsIndex:当前指定序号 说明:1.对于第一种方式打开回调不能为NULL,内部先安装插件再触发回调打开进程(在打开回调中可以手动或者自动打开进程1.如果是手动直接返回1就行或错误值表示中断操作2.如果是自动返回对应的PID或错误值表示中断操作)2.其他二种方式打开回调可以为NULL,表示进程已经打开了,不需要在回调中打开,此时使用指定的PID或者窗口句柄来安装插件,具体是PID还是句柄请查看安装插件接口类型表3.返回值根据当前的安装插件方式不同有不同的含义:（具体请看安装插件接口类型表和覆盖策略） 3.1方式二是通过PID安装插件那么返回值应该为打开进程的PID,并把传递的PID参数给覆盖了(请看PID覆盖策略),可以返回小于等于0的错误值或者不存在的PID,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.1.1PID覆盖策略 \\n1.如果指定的参数PID有效大于0并存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID\\n2.如果指定的参数PID有效大于0并存在同时打开回调返回的PID无效小于等于0不存在就用指定参数的PID\\n3.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID无效小于等于0不存在就直接返回错误\\n4.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID 3.2方式三是通过窗口句柄安装插件那么返回值应该为打开进程的句柄,并把传递的句柄参数给覆盖了(请看窗口句柄覆盖策略),可以返回小于等于0的错误值或者窗口句柄无效,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.2.1窗口句柄覆盖策略 \\n1.如果指定参数的窗口句柄有效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄\\n2.如果指定参数的窗口句柄有效同时打开回调返回的的句柄无效就用指定参数的句柄\\n3.如果指定参数的窗口句柄无效同时打开回调返回的的句柄无效就直接返回错误\\n4.如果指定参数的窗口句柄无效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄 检查回调checkFun: typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int prePid,int error); 参数:windowsIndex:当前指定序号preWindowsIndex:之前绑定的序号或者错误值(小于0)--来源HCInject_GetPreWinIndex返回prePid:之前绑定的序号对应的PID--来源HCInject_GetPid返回error:提示值 error==RET_重连窗口(5)----->返回值含义:(1重连直接进行加载环境0新窗口) error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的) 我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 error==RET_重连窗口序号不一致(6)----->返回值含义:(1重连并使用之前绑定的序号进行加载环境 0新窗口(需要用户在回调中把之前PID给关闭)) error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的) 我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 其他情况可以返回小于0的自定义值:表示直接中断安装插件流程,并返回对应的值(这个值只要小于0即可,可以作为自定义值) 说明: 1.如果指定的检查回调为NULL,当内部检查到是重连窗口的时候 2.如果发现序号不一致就会直接返回(ERROR_当前进程插件序号不一致-1216) 3.如果序号一致就直接加载环境并实现重连 几个核心的点归纳总结出来其实就能规避掉很多坑了比如1.没安装过插件的都不算重连窗口全部当新窗口处理会触发打开回调2.安装过插件的不管是卸载了环境还是崩溃或重启中控都算重连窗口不会触发打开回调会触发检查回调",
    "url": "/docs/huoshan/category_5",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "安装插件扩展模块[ex] - HD扩展.安装插件2",
    "content": "【功能描述】 第二种通讯安装插件方式(打开进程然后安装插件),通过pid如果使用HD多线程模块强烈建议在登录回调中使用 【备注】 可以参考表安装插件接口类型表 1.支持重连,重连的前提是不能被HCEnv_UnLoad卸载 回调解析: 打开回调openFun typedef__int64 (__stdcall* INSTALLPLUGint YPE)(int windowsIndex); 参数:windowsIndex:当前指定序号 说明:1.对于第一种方式打开回调不能为NULL,内部先安装插件再触发回调打开进程(在打开回调中可以手动或者自动打开进程1.如果是手动直接返回1就行或错误值表示中断操作2.如果是自动返回对应的PID或错误值表示中断操作)2.其他二种方式打开回调可以为NULL,表示进程已经打开了,不需要在回调中打开,此时使用指定的PID或者窗口句柄来安装插件,具体是PID还是句柄请查看安装插件接口类型表3.返回值根据当前的安装插件方式不同有不同的含义:（具体请看安装插件接口类型表和覆盖策略） 3.1方式二是通过PID安装插件那么返回值应该为打开进程的PID,并把传递的PID参数给覆盖了(请看PID覆盖策略),可以返回小于等于0的错误值或者不存在的PID,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.1.1PID覆盖策略 \\n1.如果指定的参数PID有效大于0并存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID\\n2.如果指定的参数PID有效大于0并存在同时打开回调返回的PID无效小于等于0不存在就用指定参数的PID\\n3.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID无效小于等于0不存在就直接返回错误\\n4.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID 3.2方式三是通过窗口句柄安装插件那么返回值应该为打开进程的句柄,并把传递的句柄参数给覆盖了(请看窗口句柄覆盖策略),可以返回小于等于0的错误值或者窗口句柄无效,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.2.1窗口句柄覆盖策略 \\n1.如果指定参数的窗口句柄有效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄\\n2.如果指定参数的窗口句柄有效同时打开回调返回的的句柄无效就用指定参数的句柄\\n3.如果指定参数的窗口句柄无效同时打开回调返回的的句柄无效就直接返回错误\\n4.如果指定参数的窗口句柄无效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄 检查回调checkFun: typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int prePid,int error); 参数:windowsIndex:当前指定序号preWindowsIndex:之前绑定的序号或者错误值(小于0)--来源HCInject_GetPreWinIndex返回prePid:之前绑定的序号对应的PID--来源HCInject_GetPid返回error:提示值 error==RET_重连窗口(5)----->返回值含义:(1重连直接进行加载环境0新窗口) error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的) 我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 error==RET_重连窗口序号不一致(6)----->返回值含义:(1重连并使用之前绑定的序号进行加载环境0新窗口(需要用户在回调中把之前PID给关闭)) 说明: 1.如果指定的检查回调为NULL,当内部检查到是重连窗口的时候 2.如果发现序号不一致就会直接返回(ERROR_当前进程插件序号不一致-1216) 3.如果序号一致就直接加载环境并实现重连 几个核心的点归纳总结出来其实就能规避掉很多坑了比如1.没安装过插件的都不算重连窗口全部当新窗口处理会触发打开回调2.安装过插件的不管是卸载了环境还是崩溃了中控都算重连窗口不会触发打开回调",
    "url": "/docs/huoshan/category_5",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "安装插件扩展模块[ex] - HD扩展.安装插件3",
    "content": "【功能描述】 第三种通讯安装插件方式(打开进程然后安装插件),通过窗口句柄如果使用HD多线程模块强烈建议在登录回调中使用 【备注】 可以参考表安装插件接口类型表 1.支持重连,重连的前提是不能被HCEnv_UnLoad卸载 回调解析: 打开回调openFun:可以参考表安装插件接口类型表 typedef__int64 (__stdcall* INSTALLPLUGint YPE)(int windowsIndex); 参数:windowsIndex:当前指定序号 说明:1.对于第一种方式打开回调不能为NULL,内部先安装插件再触发回调打开进程(在打开回调中可以手动或者自动打开进程1.如果是手动直接返回1就行或错误值表示中断操作2.如果是自动返回对应的PID或错误值表示中断操作)2.其他二种方式打开回调可以为NULL,表示进程已经打开了,不需要在回调中打开,此时使用指定的PID或者窗口句柄来安装插件,具体是PID还是句柄请查看安装插件接口类型表3.返回值根据当前的安装插件方式不同有不同的含义:（具体请看安装插件接口类型表和覆盖策略） 3.1方式二是通过PID安装插件那么返回值应该为打开进程的PID,并把传递的PID参数给覆盖了(请看PID覆盖策略),可以返回小于等于0的错误值或者不存在的PID,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.1.1PID覆盖策略 \\n1.如果指定的参数PID有效大于0并存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID\\n2.如果指定的参数PID有效大于0并存在同时打开回调返回的PID无效小于等于0不存在就用指定参数的PID\\n3.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID无效小于等于0不存在就直接返回错误\\n4.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID 3.2方式三是通过窗口句柄安装插件那么返回值应该为打开进程的句柄,并把传递的句柄参数给覆盖了(请看窗口句柄覆盖策略),可以返回小于等于0的错误值或者窗口句柄无效,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.2.1窗口句柄覆盖策略 \\n1.如果指定参数的窗口句柄有效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄\\n2.如果指定参数的窗口句柄有效同时打开回调返回的的句柄无效就用指定参数的句柄\\n3.如果指定参数的窗口句柄无效同时打开回调返回的的句柄无效就直接返回错误\\n4.如果指定参数的窗口句柄无效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄 检查回调checkFun: typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int prePid,int error); 参数:windowsIndex:当前指定序号preWindowsIndex:之前绑定的序号或者错误值(小于0)--来源HCInject_GetPreWinIndex返回prePid:之前绑定的序号对应的PID--来源HCInject_GetPid返回error:提示值 error==RET_重连窗口(5)----->返回值含义:(1重连直接进行加载环境0新窗口) error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的) 我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 error==RET_重连窗口序号不一致(6)----->返回值含义:(1重连并使用之前绑定的序号进行加载环境0新窗口(需要用户在回调中把之前PID给关闭)) 说明: 1.如果指定的检查回调为NULL,当内部检查到是重连窗口的时候 2.如果发现序号不一致就会直接返回(ERROR_当前进程插件序号不一致-1216) 3.如果序号一致就直接加载环境并实现重连 几个核心的点归纳总结出来其实就能规避掉很多坑了比如1.没安装过插件的都不算重连窗口全部当新窗口处理会触发打开回调2.安装过插件的不管是卸载了环境还是崩溃了中控都算重连窗口不会触发打开回调",
    "url": "/docs/huoshan/category_5",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "安装插件扩展模块[ex] - HD扩展.安装插件VM",
    "content": "【功能描述】 打开后安装通过PID针对虚拟机内部自动关联虚拟机如果使用HD多线程模块强烈建议在登录回调中使用 【备注】 可以参考表安装插件接口类型表 1.调用之前记得打开服务器HCVMDMA_StartServer并确定正确打开HCVMDMA_ServerIsStart 2.其他规则和前3种安装插件方式一致 3.支持重连,重连的前提是不能被HCEnv_UnLoad卸载 回调解析: 打开回调openFun:可以参考表安装插件接口类型表 typedef__int64 (__stdcall* INSTALLPLUGint YPE)(int windowsIndex); 参数:windowsIndex:当前指定序号 说明:1.对于第一种方式打开回调不能为NULL,内部先安装插件再触发回调打开进程(在打开回调中可以手动或者自动打开进程1.如果是手动直接返回1就行或错误值表示中断操作2.如果是自动返回对应的PID或错误值表示中断操作)2.其他二种方式打开回调可以为NULL,表示进程已经打开了,不需要在回调中打开,此时使用指定的PID或者窗口句柄来安装插件,具体是PID还是句柄请查看安装插件接口类型表3.返回值根据当前的安装插件方式不同有不同的含义:（具体请看安装插件接口类型表和覆盖策略） 3.1方式二是通过PID安装插件那么返回值应该为打开进程的PID,并把传递的PID参数给覆盖了(请看PID覆盖策略),可以返回小于等于0的错误值或者不存在的PID,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.1.1PID覆盖策略 \\n1.如果指定的参数PID有效大于0并存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID\\n2.如果指定的参数PID有效大于0并存在同时打开回调返回的PID无效小于等于0不存在就用指定参数的PID\\n3.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID无效小于等于0不存在就直接返回错误\\n4.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID 3.2方式三是通过窗口句柄安装插件那么返回值应该为打开进程的句柄,并把传递的句柄参数给覆盖了(请看窗口句柄覆盖策略),可以返回小于等于0的错误值或者窗口句柄无效,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.2.1窗口句柄覆盖策略 \\n1.如果指定参数的窗口句柄有效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄\\n2.如果指定参数的窗口句柄有效同时打开回调返回的的句柄无效就用指定参数的句柄\\n3.如果指定参数的窗口句柄无效同时打开回调返回的的句柄无效就直接返回错误\\n4.如果指定参数的窗口句柄无效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄 检查回调checkFun: typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int prePid,int error); 参数:windowsIndex:当前指定序号preWindowsIndex:之前绑定的序号或者错误值(小于0)--来源HCInject_GetPreWinIndex返回prePid:之前绑定的序号对应的PID--来源HCInject_GetPid返回error:提示值 error==RET_重连窗口(5)----->返回值含义:(1重连直接进行加载环境0新窗口) error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的) 我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 error==RET_重连窗口序号不一致(6)----->返回值含义:(1重连并使用之前绑定的序号进行加载环境0新窗口(需要用户在回调中把之前PID给关闭)) 说明: 1.如果指定的检查回调为NULL,当内部检查到是重连窗口的时候 2.如果发现序号不一致就会直接返回(ERROR_当前进程插件序号不一致-1216) 3.如果序号一致就直接加载环境并实现重连 几个核心的点归纳总结出来其实就能规避掉很多坑了比如1.没安装过插件的都不算重连窗口全部当新窗口处理会触发打开回调2.安装过插件的不管是卸载了环境还是崩溃了中控都算重连窗口不会触发打开回调",
    "url": "/docs/huoshan/category_5",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "环境初始化模块(Inject) - HD通讯.初始化",
    "content": "【功能描述】 初始化插件环境 【备注】 每次打开游戏都需要先初始化一次 不要多次初始化 该接口还会把当前全局进程位数HCEnv_SetProcessType与当前窗口序号进程绑定,省去了切换进程位数的操作,如果不绑定可能会返回-1107(ERROR_进程位数不匹配)",
    "url": "/docs/huoshan/category_6",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "环境初始化模块(Inject) - HD通讯.初始化Ex",
    "content": "【功能描述】 初始化插件环境 【备注】 每次打开游戏都需要先初始化一次 不要多次初始化 如果不需要用LUA来初始化自己的数据,可以直接使用HCInject_Init 该接口还会把当前全局进程位数HCEnv_SetProcessType与当前窗口序号进程绑定,省去了切换进程位数的操作,如果不绑定可能会返回-1107(ERROR_进程位数不匹配)",
    "url": "/docs/huoshan/category_6",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "环境初始化模块(Inject) - HD通讯.初始化Exx",
    "content": "【功能描述】 初始化插件环境 【备注】 每次打开游戏都需要先初始化一次 不要多次初始化 如果不需要用LUA来初始化自己的数据或者预加载DLL,可以直接使用HCInject_Init 该接口还会把当前全局进程位数HCEnv_SetProcessType与当前窗口序号进程绑定,省去了切换进程位数的操作,如果不绑定可能会返回-1107(ERROR_进程位数不匹配)",
    "url": "/docs/huoshan/category_6",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "环境初始化模块(Inject) - HD通讯.获取PID",
    "content": "【功能描述】 获取打开的进程PID 【备注】 调用这个接口之前必须保证插件已经加载才会获取PID",
    "url": "/docs/huoshan/category_6",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "环境初始化模块(Inject) - HD通讯.获取之前PID",
    "content": "【功能描述】 获取打开的进程之前的PID(可以用于重连) 【备注】 当我们在调试的时候中控如果崩了,如果此时插件还在游戏进程中执行,那么可以当打开中控的时候直接获取PID进行通讯,而不是调用初始化之类的操作",
    "url": "/docs/huoshan/category_6",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "环境初始化模块(Inject) - HD通讯.获取绑定窗口序号",
    "content": "【功能描述】 通过进程PID尝试拿到绑定的窗口序号 【备注】 返回如果大于等于0的值表示之前进程绑定的窗口序号 没有进程PID返回-1178 没有绑定过返回-1179",
    "url": "/docs/huoshan/category_6",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "环境初始化模块(Inject) - HCInject_GetPreWinIndexEx",
    "content": "【功能描述】 通过进程PID尝试拿到绑定的窗口序号 【备注】 返回如果大于等于0的值表示之前进程绑定的窗口序号 没有进程PID返回-1178 没有绑定过返回-1179",
    "url": "/docs/huoshan/category_6",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "环境初始化模块(Inject) - HD通讯.获取窗口句柄",
    "content": "【功能描述】 获取窗口句柄,内部是通过PID获取窗口句柄需要先安装好插件到目标进程 【备注】 内部是通过HCWIN_EnumWindowByProcessId获取",
    "url": "/docs/huoshan/category_6",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "环境初始化模块(Inject) - HD通讯.获取窗口句柄Ex",
    "content": "【功能描述】 获取窗口句柄(需要内置,一般不需要调用这个获取句柄),如果需要通过PID获取句柄请调用HCInject_GetHwnd 【备注】 这个接口和内置的游戏接口有关,需要搭建完通讯才能调用 并不是一定获取到 如果要获取进程句柄还需要自行获取,除非内置了游戏数据",
    "url": "/docs/huoshan/category_6",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "环境初始化模块(Inject) - HD通讯.继续",
    "content": "【功能描述】 继续环境加载操作 【备注】 当我们调用了HCEnv_Load后需要调用这个接口来验证",
    "url": "/docs/huoshan/category_6",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "环境初始化模块(Inject) - HD通讯.存数据",
    "content": "【功能描述】 存自定义二进制数据 【备注】 无",
    "url": "/docs/huoshan/category_6",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "环境初始化模块(Inject) - HD通讯.取数据",
    "content": "【功能描述】 取自定义二进制数据 【备注】 取的数据就是用HCInject_SetData接口存的数据",
    "url": "/docs/huoshan/category_6",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "通讯环境模块(Env) - HD环境.初始化",
    "content": "【功能描述】 HD插件环境加载(初始化中控环境) 【备注】 中控初始化开始就要调用,仅仅一次",
    "url": "/docs/huoshan/category_7",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "通讯环境模块(Env) - HD环境.初始化Ex",
    "content": "【功能描述】 HD插件环境加载(初始化中控环境)(扩展版本)最新版本一般不用了 【备注】 中控初始化开始就要调用,仅仅一次",
    "url": "/docs/huoshan/category_7",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "通讯环境模块(Env) - HD环境.加载窗口",
    "content": "【功能描述】 HD插件环境加载 【备注】 调用这个接口需要先调用环境初始化模块中的初始化接口 每次打开进程后都要调用",
    "url": "/docs/huoshan/category_7",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "通讯环境模块(Env) - HD环境.加载窗口Ex",
    "content": "【功能描述】 HD插件环境加载(扩展版本),涉及到回调 【备注】 调用这个接口需要先调用环境初始化模块中的初始化接口 每次打开进程后都要调用",
    "url": "/docs/huoshan/category_7",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "通讯环境模块(Env) - HD环境.卸载窗口",
    "content": "【功能描述】 HD插件环境卸载 【备注】 调用这个接口需要先调用环境初始化模块中的初始化接口 进程关闭一定要记得卸载窗口序号对应的窗口环境,以便于下次窗口序号使用 1.没安装过插件的都不算重连窗口全部当新窗口处理 2.安装过插件的不管卸载环境还是崩溃或者重启窗口都可以重连窗口一个序号只能绑定到一个窗口操作",
    "url": "/docs/huoshan/category_7",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "通讯环境模块(Env) - HD环境.卸载窗口Ex",
    "content": "【功能描述】 HD插件环境卸载(扩展版本) 【备注】 调用这个接口需要先调用环境初始化模块中的初始化接口 进程关闭一定要记得卸载窗口序号对应的窗口环境,以便于下次窗口序号使用 1.没安装过插件的都不算重连窗口全部当新窗口处理 2.安装过插件的不管卸载环境还是崩溃或者重启窗口都可以重连窗口一个序号只能绑定到一个窗口操作",
    "url": "/docs/huoshan/category_7",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "通讯环境模块(Env) - HDEnv_GetWinExIndex",
    "content": "【功能描述】 获取副窗口序号 【备注】 这个副窗口序号可以用于登录器的绑定和操作,相当于窗口序号的一个助手,做一些额外的事情相当于一个窗口序号可以操作2个进程如:窗口序号1那么他返回的窗口扩展序号就是1+31也就是32序号",
    "url": "/docs/huoshan/category_7",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "通讯环境模块(Env) - HDEnv_GetGlobalWinExIndex",
    "content": "【功能描述】 获取全局副窗口序号,这是一个全局的序号 【备注】 一个中控仅有一个计算方式:0+31也就是这个全局序号为31序号从0开始用途:给当前中控分配一个助手,来控制一个进程来辅助中控做一些事情",
    "url": "/docs/huoshan/category_7",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "通讯环境模块(Env) - HD环境.附加心跳",
    "content": "【功能描述】 给中控附加心跳 【备注】 检测主线程心跳 如果需要检测主线程心跳是否卡住,请记得先HOOK主线程接口HC_HookMaint hread 设置心跳回调函数类型 typedef__int32 (* HeartFunType)(__int32 窗口索引,__int32 type);回调函数返回值:0不重置之前的记录1重置之前的记录(一般重新开启新进程会设置为1) \\n0.正常心跳进程存在的情况下会触发\\n1.通讯崩溃/关闭等等原因导致进程不存在->重启窗口\\n2.主线程崩溃/关闭/未响应/目标进程卡死原因导致进程不存在/存在->强制关闭->重启窗口设置挂接主线程\\n2.1.附加心跳的时候可以检查主线程的状态(游戏/目标)\\n2.2.后面的内存操作可以主线程调用\\n2.3.注意:附加心跳的时候设置的检查时间一定要大于安装插件到挂接主线程的时间\\n3.卡屏崩溃/关闭/区域图像卡死了原因导致进程不存在/存在->强制关闭->重启窗口设置屏幕检查范围\\n6.1+2+3",
    "url": "/docs/huoshan/category_7",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "通讯环境模块(Env) - HCEnv_SetWindowsSortInfo",
    "content": "【功能描述】 设置窗口排序信息",
    "url": "/docs/huoshan/category_7",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "通讯环境模块(Env) - HD环境.设置卡屏检查信息",
    "content": "【功能描述】 当我们心跳检测指定了3或者6需要设置卡屏范围和卡屏检测次数当大于这个次数就调用回调",
    "url": "/docs/huoshan/category_7",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "通讯环境模块(Env) - HD环境.脱离心跳",
    "content": "【功能描述】 脱离中控附加的心跳检测 【备注】 脱离会堵塞直到脱离成功一般中控进程结果关闭前调用",
    "url": "/docs/huoshan/category_7",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "通讯环境模块(Env) - HD环境.调试模式",
    "content": "【功能描述】 设置导入接口为调试模式 【备注】 中控初始化开始就可以调用,仅仅一次 发布版本不需要调用此接口,默认为发布版本",
    "url": "/docs/huoshan/category_7",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "通讯环境模块(Env) - HD环境.开启文件提示",
    "content": "【功能描述】 设置是否打开文件提示窗口 【备注】 当HD内部导致中控关闭或者插件失效会一文件形式提示信息",
    "url": "/docs/huoshan/category_7",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "通讯环境模块(Env) - HD环境.添加线程",
    "content": "【功能描述】 添加线程环境 【备注】 这个接口用来测试用的,开发者一般用不到",
    "url": "/docs/huoshan/category_7",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "通讯环境模块(Env) - HD环境.测试通讯值",
    "content": "【功能描述】 测试是否通讯成功,返回单一值 【备注】 这个接口用来测试是否环境搭建成功",
    "url": "/docs/huoshan/category_7",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "通讯环境模块(Env) - HCEnv_TestCALL_RetArray",
    "content": "【功能描述】 测试是否通讯成功,返回json字符串 【备注】 这个接口用来测试是否环境搭建成功",
    "url": "/docs/huoshan/category_7",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "通讯环境模块(Env) - HCEnv_TestCALL_RetValueEx",
    "content": "【功能描述】 测试是否通讯成功,返回单一值 【备注】 这个接口用来测试是否环境搭建成功",
    "url": "/docs/huoshan/category_7",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "通讯环境模块(Env) - HD环境.测试通讯字符串Ex",
    "content": "【功能描述】 测试是否通讯成功,返回json字符串 【备注】 这个接口用来测试是否环境搭建成功",
    "url": "/docs/huoshan/category_7",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "通讯环境模块(Env) - HD环境.设置目标进程位数",
    "content": "【功能描述】 设置目标进程位数 【备注】 该接口是全局设置,也就是设置了一次,接下来的所有进程都是该位数,可以多次调用切换进程位数,建议使用HCEnv_SetProcessTypeEx这个扩展版本 如果使用了HDEX_InstallPlugin1HDEX_InstallPlugin2HDEX_InstallPlugin3这些接口可以不用调用这个接口设置目标进程位数 如果是自定义通讯流程就需要自己设置后然后初始化序号进行通讯绑定",
    "url": "/docs/huoshan/category_7",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "通讯环境模块(Env) - HD环境.设置目标进程位数Ex",
    "content": "【功能描述】 指定某个序号绑定的进程位数 【备注】 如果使用了HDEX_InstallPlugin1HDEX_InstallPlugin2HDEX_InstallPlugin3这些接口可以不用调用这个接口设置目标进程位数 如果是自定义通讯流程就需要自己设置后然后初始化序号进行通讯绑定",
    "url": "/docs/huoshan/category_7",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "通讯环境模块(Env) - HD环境.设置中控事件处理回调函数",
    "content": "【功能描述】 设置中控事件处理回调函数 【备注】 这个回调函数作用于当自定义模块通知中控的时候 中控事件处理回调函数接口类型: typedef__int32 (__stdcall* HandleEventFunType)(__int32 窗口序号,__int32 插件序号,HDHandleEventInfoInfo); HDHandleEventInfo结构体: typedefstructHDHandleEventInfo\\n处理事件{__int32 m_callType;\\n自定义HDValuem_call;HDValuem_rcx;HDValuem_rdx;HDValuem_r8;HDValuem_r9;HDValuem_lparam5;HDValuem_lparam6;HDValuem_lparam7;HDValuem_lparam8;HDValuem_value;HDValuem_size;charm_buffer[MAX_PATH];charm_buffer2[MAX_PATH];HDValue* m_pRetValue;\\n值单独char* m_pRetJson;\\n字符串返回}HDHandleEventInfo; 代码案例: __int32 HCLogin::HandleEvent(__int32 窗口序号,__int32 插件序号,HDHandleEventInfoInfo){HDbgPrint f_Normal(\\\"处理接受事件->窗口序号:%dcallType:%dbuffer1:%sbuffer2:%scall:%llXrcx:%llXrdx:%llX\\\",窗口序号,Info.m_callType,Info.m_buffer,Info.m_buffer2,Info.m_call,Info.m_rcx,Info.m_rdx);if(Info.m_callType==1){* Info.m_pRetValue=999;autoret=HCMKB_UnBind(窗口序号);HDbgPrint f_Normal(\\\"解绑后台ret:%d\\\",ret);return8;}elseif(Info.m_callType==2){\\n处理逻辑* Info.m_pRetValue=123;sprint f_s(Info.m_pRetJson,1024* 10,\\\"%s\\\",\\\"我是中控\\\");\\n672637autoret=HCMKB_Bind(窗口序号,Info.m_call,\\\"1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|0|1|\\\");HDbgPrint f_Normal(\\\"绑定后台ret:%d\\\",ret);if(ret==1){Sleep(1000);ret=HCMKB_MoveTo(窗口序号,672,610,0);HDbgPrint f_Normal(\\\"模拟移动一次->672610ret:%d\\\",ret);ret=HCMKB_LeftClick(窗口序号);HDbgPrint f_Normal(\\\"模拟点击一次->ret:%d\\\",ret);}return1024* 10;\\n大于8认为是字符串}* Info.m_pRetValue=1;return8;}",
    "url": "/docs/huoshan/category_7",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "通讯环境模块(Env) - HCEnv_SetShutDownCallBack",
    "content": "【功能描述】 设置关闭回调函数(处理HD功能失效,内部自动关闭中控前的操作) 【备注】 当HD出现异常或者失效或者网络验证出现断线,会在自动关闭自身在期间会先调用这个回调(这个回调自己做好关闭前处理工作)然后会自动调用微软API接口ExitProcess();结束自身 在这个回调用户可以自行处理自己的业务逻辑 1.资源清理逻辑 2.接口释放逻辑 3.自启逻辑 4.自定义处理逻辑 回调函数接口类型: typedef__int32 (__stdcall* ShutDownEventFunType)(__int32 code); code:错误代码",
    "url": "/docs/huoshan/category_7",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "通讯环境模块(Env) - HCEnv_SetPidCheckBack",
    "content": "【功能描述】 设置PID检查回调(内部检查PID不存在会触发这个回调) 【备注】 1.这是设置全局PID检查回调 2.内部检查PID不存在会触发这个回调 3.如果没有调用此接口设置全局PID检查回调,那么对于4种安装插件方式中,当内部检查不到PID存在也会触发检查回调并传递给回调参数窗口序号:0之前窗口序号:0检查PID:pid提示值:8 回调函数接口类型: typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int checkPid,int error); windowsIndex:窗口序号 preWindowsIndex:窗口序号 checkPid:当前检查的PID error:传递8表示需要检查PID",
    "url": "/docs/huoshan/category_7",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "通讯环境模块(Env) - HD环境.设置通讯检测间隔",
    "content": "【功能描述】 设置通讯检测间隔毫秒 【备注】 1.值越小响应越快,随之带来的效率更高但是会导致CPU利用率变高2.值的大小根据当前的项目指定,对于一直要实时响应的最好小点",
    "url": "/docs/huoshan/category_7",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "通讯环境模块(Env) - HD环境.设置回调响应间隔",
    "content": "【功能描述】 设置回调响应毫秒 【备注】 1.值越小响应越快,随之带来的效率更高但是会导致CPU利用率变高2.值的大小根据当前的项目指定,对于一直要实时响应的最好小点",
    "url": "/docs/huoshan/category_7",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "通讯环境模块(Env) - HD环境.强制结束线程",
    "content": "【功能描述】 强制结束当前线程(可以在卸载环境后调用) 【备注】 强制结束当前线程内部会对锁操作循环拿到锁才会强制关闭并返回成功此接口小心使用1.不到万不得已不要强制关闭线程(因为强制关闭线程不管在任何时候都有可能造成不可能预计的BUG)2.调用此接口的线程不要和结束的线程是同一个(虽然内部有检查)3.该接口如果参数:是否操作锁为真,那么会堵塞,直到拿到锁权限后,才会强制关闭线程,然后解锁(防止死锁).",
    "url": "/docs/huoshan/category_7",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "通讯环境模块(Env) - HD环境.强制结束线程Ex",
    "content": "【功能描述】 强制结束当前线程(可以在卸载环境后调用) 【备注】 强制结束当前线程内部会对锁操作循环拿到锁才会强制关闭并返回成功此接口小心使用1.不到万不得已不要强制关闭线程(因为强制关闭线程不管在任何时候都有可能造成不可能预计的BUG)2.调用此接口的线程不要和结束的线程是同一个(虽然内部有检查)3.该接口如果参数:是否操作锁为真,那么会堵塞,直到拿到锁权限后,才会强制关闭线程,然后解锁(防止死锁).",
    "url": "/docs/huoshan/category_7",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_29",
    "title": "通讯环境模块(Env) - HD环境.关闭绑定进程",
    "content": "【功能描述】 关闭绑定的目标窗口 【备注】 内部实现可能是正常关闭也可能是强制关闭 至于是哪一种会根据实际情况动态调用",
    "url": "/docs/huoshan/category_7",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "多线程模块[MT] - HD多线程.初始化流程回调",
    "content": "【功能描述】 初始化多线程设置相关流程回调 【备注】 1.普通回调1参数windowsIndex:代表的是窗口序号也是主序号 2.每个回调参数的函数类型不一样,注意对应 回调触发顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->结束回调 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/huoshan/category_8",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "多线程模块[MT] - HD多线程.初始化流程回调Ex",
    "content": "【功能描述】 初始化多线程设置相关流程回调可以绑定一个全局参数 【备注】 1.普通回调1参数windowsIndex:代表的是窗口序号也是主序号 2.每个回调参数的函数类型不一样,注意对应 回调触发顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->结束回调 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调EXtypedef__int64 (__stdcall* UIFUNTYPEEX)(__int32 windowsIndex,char* stepText,void* lparam,BOOL m_end1,BOOL m_pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 lparam:HCMT_InitProcessEx绑定一个全局参数,一般我们指定为一个UI对象地址,这个回调可以拿到这个地址 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/huoshan/category_8",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "多线程模块[MT] - HD多线程.初始化操作回调",
    "content": "【功能描述】 初始化多线程结束/暂停/恢复状态的操作回调 【备注】 1.仅仅对于这3个回调而言普通回调2参数index:大于多开限制数量,就是副序号;小于就是主序号(也是窗口序号);计算公式:if(index>=多开限制数)主序号=index-多开限制数; \\n(index>=多开环境数量)?(index-多开环境数量):(index)2.其他接口的windowsIndex就代表的是窗口序号也是主序号3.多开限制数量最大常量为31,请自行在程序里面定义 4.多开限制数量用HCEnv_GetMaxWindowNum返回一个常数,可以自己写成一个常量 回调触发顺序: 结束窗口操作:endBindCallBack并传递对应的线程序号(线程序号可能是主序号也就是窗口序号,也有可能是副序号) 暂停窗口操作:pauseBindCallBack并传递对应的线程序号(线程序号可能是主序号也就是窗口序号,也有可能是副序号) 恢复窗口操作:recoverBindCallBack并传递对应的线程序号(线程序号可能是主序号也就是窗口序号,也有可能是副序号) 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/huoshan/category_8",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "多线程模块[MT] - HD多线程.注册消息回调",
    "content": "【功能描述】 注册窗口消息 【备注】 1.通过HCMT_MsgSend/HCMT_MsgPost来触发回调 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/huoshan/category_8",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "多线程模块[MT] - HD多线程.同步发送消息",
    "content": "【功能描述】 发送消息(同步) 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/huoshan/category_8",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "多线程模块[MT] - HD多线程.异步发送消息",
    "content": "【功能描述】 发送消息(异步) 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/huoshan/category_8",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "多线程模块[MT] - HD多线程.开启窗口Msg",
    "content": "【功能描述】 通过消息开启窗口操作 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.开启成功后会相应触发对应设置的回调函数 3.顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 停止窗口:结束绑定回调->结束回调",
    "url": "/docs/huoshan/category_8",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "多线程模块[MT] - HD多线程.停止窗口Msg",
    "content": "【功能描述】 通过消息停止窗口操作 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.开启成功后会相应触发对应设置的回调函数 3.顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 停止窗口:结束绑定回调->结束回调",
    "url": "/docs/huoshan/category_8",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "多线程模块[MT] - HD多线程.重启窗口Msg",
    "content": "【功能描述】 通过消息重启窗口操作 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.开启成功后会相应触发对应设置的回调函数 3.顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 停止窗口:结束绑定回调->结束回调",
    "url": "/docs/huoshan/category_8",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "多线程模块[MT] - HD多线程.重启窗口MsgEx",
    "content": "【功能描述】 通过消息重启窗口操作(扩展版本) 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.开启成功后会相应触发对应设置的回调函数 3.顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 停止窗口:结束绑定回调->结束回调",
    "url": "/docs/huoshan/category_8",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "多线程模块[MT] - HD多线程.更新UI",
    "content": "【功能描述】 通过消息触发UI回调,并传递线程状态信息和日志操作信息给UI回调 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
    "url": "/docs/huoshan/category_8",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "多线程模块[MT] - HD多线程.发送文本",
    "content": "【功能描述】 通过消息触发UI回调,并传递线程状态信息和日志操作信息给UI回调 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
    "url": "/docs/huoshan/category_8",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "多线程模块[MT] - HD多线程.所有窗口暂停",
    "content": "【功能描述】 设置所有窗口结束 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/huoshan/category_8",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "多线程模块[MT] - HD多线程.获取线程状态值",
    "content": "【功能描述】 获取主副序号对应的线程的状态值 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调 typedefenumTHREADSTATE\\n线程状态{THREADSTATE_NONE=-1,\\n未启动THREADSTATE_STARTING=0,\\n开启中THREADSTATE_LOGINING=1,\\n正在登录THREADSTATE_RUNNING=2,\\n正在运行THREADSTATE_PAUSE=3,\\n暂停THREADSTATE_PAUSEING=4,\\n正在暂停THREADSTATE_RECOVERING=5,\\n正在恢复THREADSTATE_WILLSTOP=6,\\n准备停止THREADSTATE_STOPPING=7\\n正在停止}THREADSTATE;",
    "url": "/docs/huoshan/category_8",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "多线程模块[MT] - HCMT_GetStateString",
    "content": "【功能描述】 获取状态整数值对应的字符串 【备注】 无",
    "url": "/docs/huoshan/category_8",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "多线程模块[MT] - HD多线程.是否能开启",
    "content": "【功能描述】 判断是否能开启新的(主副线程)传递的只能是主序号 【备注】 无",
    "url": "/docs/huoshan/category_8",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "多线程模块[MT] - HD多线程.开启窗口",
    "content": "【功能描述】 直接开启窗口操作 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.开启成功后会相应触发对应设置的回调函数 3.顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 停止窗口:结束绑定回调->结束回调",
    "url": "/docs/huoshan/category_8",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "多线程模块[MT] - HD多线程.所有窗口恢复",
    "content": "【功能描述】 设置所有窗口恢复 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的恢复绑定回调",
    "url": "/docs/huoshan/category_8",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "多线程模块[MT] - HD多线程.所有窗口停止",
    "content": "【功能描述】 设置所有窗口停止 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的停止绑定回调",
    "url": "/docs/huoshan/category_8",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "多线程模块[MT] - HD多线程.暂停窗口",
    "content": "【功能描述】 设置窗口暂停 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/huoshan/category_8",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "多线程模块[MT] - HD多线程.暂停线程",
    "content": "【功能描述】 设置主副序号对应的线程暂停 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/huoshan/category_8",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "多线程模块[MT] - HD多线程.恢复窗口",
    "content": "【功能描述】 设置窗口恢复 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的恢复绑定回调",
    "url": "/docs/huoshan/category_8",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "多线程模块[MT] - HD多线程.恢复线程",
    "content": "【功能描述】 设置主副序号对应的线程恢复 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/huoshan/category_8",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "多线程模块[MT] - HD多线程.停止窗口",
    "content": "【功能描述】 设置窗口停止 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的结束绑定回调",
    "url": "/docs/huoshan/category_8",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "多线程模块[MT] - HD多线程.是否运行中",
    "content": "【功能描述】 (第一第二)回调里面调用,检查当前线程是否结束 【备注】 无",
    "url": "/docs/huoshan/category_8",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "多线程模块[MT] - HD多线程.是否暂停",
    "content": "【功能描述】 判断主副序号对应的线程是否是已被暂停状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/huoshan/category_8",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "多线程模块[MT] - HD多线程.是否停止",
    "content": "【功能描述】 判断主副序号对应的线程是否是已被结束状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/huoshan/category_8",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "多线程模块[MT] - HD多线程.延迟",
    "content": "【功能描述】 设延迟函数,自带暂停/结束/恢复检查 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.检查随后触发HCMT_InitOperate设置的3个回调;理论上不能在HCMT_InitOperate设置的3个回调中调用,因为会导致无限调用自己(但是内部做了检测所以不会无限调用,也就是如果当前第一次已经检查到标志位并触发对应的绑定回调了,在回调中又再一次调用HCMT_Sleep,那么这一次的HCMT_Sleep只会正常休眠,并不继续检查了,防止无限调用); 3.其他回调均可以(无影响) 4.如果要内部检测状态机状态需要调用HCMT_StatusSleep",
    "url": "/docs/huoshan/category_8",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "多线程状态机 - HD状态机.开启状态机",
    "content": "【功能描述】 开启状态机 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用配合多线程模块一起使用 2.一般在执行回调或者检查回调调用就行不需要都开启(内部有检测是否开启) 3.支持多线程,但是不建议,执行回调中调用就行了",
    "url": "/docs/huoshan/category_9",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "多线程状态机 - HD状态机.操作状态",
    "content": "【功能描述】 全局(全部窗口序号)禁用或者开启状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用配合多线程模块一起使用 2.操作的状态值,必须先调用HCMT_AddStatus添加状态,否则无效 3.支持多线程 4.如果当前状态正在执行中,此时调用该接口使其状态被禁止/无效,那么当前状态对应的状态回调中就会立即退出回调或者立即监控到状态被改变了 5.一旦被禁止,就算我们切换到该状态,也无法去执行绑定的状态回调了",
    "url": "/docs/huoshan/category_9",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "多线程状态机 - HD状态机.改变当前状态",
    "content": "【功能描述】 改变状态机状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用 2.操作的状态值,必须先调用HCMT_AddStatus添加状态,否则无效 3.支持多线程,一般在检测回调中调用 4.只能改变比之前优先级低的优先级 《《《特别注意:状态值的大小也表示优先级,优先级越高的回调,享有最先执行权限！！！！》》》 如:登录回调>死亡回调>买药回调>限时副本回调>主线回调 优先级大小策略: 1.优先级用户自行定义大小(-1表示没有,不要重复)建议从0开始123...依次递增值越大优先级越高 2.优先级高回调的可以打断或者中断优先级低的回调,当优先级高的回调执行完毕,会继续执行优先级低的回调 2.如果是优先级一样的回调,只有执行完第一个,才能执行第二个. 3.优先级低的回调是不能打断优先级高的回调,此时如果想执行优先级低的回调,那么必须等待优先级高的回调执行完毕后,方可执行优先级低的回调 4.回调内部如果有循环流程,应加入退出循环条件(一般使用HCMT_IsStatus作为退出循环的条件判断或者其他),不要死循环,否则无法实现状态切换",
    "url": "/docs/huoshan/category_9",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "多线程状态机 - HD状态机.回溯上个状态",
    "content": "【功能描述】 回溯状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用 2.操作的状态值,必须先调用HCMT_AddStatus添加状态,否则无效 3.支持多线程,一般在检测回调中调用 4.只能改变比之前优先级低的优先级 《《《特别注意:状态值的大小也表示优先级,优先级越高的回调,享有最先执行权限！！！！》》》 如:登录回调>死亡回调>买药回调>限时副本回调>主线回调 优先级大小策略: 1.优先级用户自行定义大小(-1表示没有,不要重复)建议从0开始123...依次递增值越大优先级越高 2.优先级高回调的可以打断或者中断优先级低的回调,当优先级高的回调执行完毕,会继续执行优先级低的回调 2.如果是优先级一样的回调,只有执行完第一个,才能执行第二个. 3.优先级低的回调是不能打断优先级高的回调,此时如果想执行优先级低的回调,那么必须等待优先级高的回调执行完毕后,方可执行优先级低的回调 4.回调内部如果有循环流程,应加入退出循环条件(一般使用HCMT_IsStatus作为退出循环的条件判断或者其他),不要死循环,否则无法实现状态切换",
    "url": "/docs/huoshan/category_9",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "多线程状态机 - HD状态机.是否状态中",
    "content": "【功能描述】 当前状态机的状态在回调中是否有效 【备注】 1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用 2.用在状态回调中,检索是否是当前状态3.在设置的状态回调函数中循环调用检查当前窗口序号的状态类型是否是当前的映射的回调状态类型4.支持多线程 C++例子: ========== __int64 __stdcall HMT::登录状态回调(__int32 windowsIndex,__int64 lparam){while(HCMT_IsStatus()){autoret=HCMT_StatusSleep(1000);HDbgPrint f_Command(\\\"HCMT_StatusSleep:%lld\\\",ret);HCMT_MsgStepText(windowsIndex,\\\"正在登录中...\\\");}return1;} ==========",
    "url": "/docs/huoshan/category_9",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "多线程状态机 - HD状态机.状态延迟",
    "content": "【功能描述】 状态机延迟函数(自带暂停/结束/恢复/状态机) 【备注】 1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用2.支持多线程自带暂停/结束/恢复/状态机 3.注意区别于HCMT_Sleep这个接口是没法检索状态机状态的 C++例子: ========== __int64 __stdcall HMT::登录状态回调(__int32 windowsIndex,__int64 lparam){while(HCMT_IsStatus()){autoret=HCMT_StatusSleep(1000);\\n<<<<<<<<-----------------------------这里能及时返回(当我们状态变动的时候)返回值:4表示状态变动HDbgPrint f_Command(\\\"HCMT_StatusSleep:%lld\\\",ret);HCMT_MsgStepText(windowsIndex,\\\"正在登录中...\\\");}return1;} ==========",
    "url": "/docs/huoshan/category_9",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "多线程状态机 - HD状态机.获取当前状态",
    "content": "【功能描述】 获取状态机状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用 2.支持多线程,一般在UI回调中调用,获取状态值并显示到控件上",
    "url": "/docs/huoshan/category_9",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "多线程状态机 - HCMT_SleepEx",
    "content": "【功能描述】 设延迟函数,自带暂停/结束/恢复检查/状态机状态(可选)(扩展版本) 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.检查随后触发HCMT_InitOperate设置的3个回调;理论上不能在HCMT_InitOperate设置的3个回调中调用,因为会导致无限调用自己(但是内部做了检测所以不会无限调用,也就是如果当前第一次已经检查到标志位并触发对应的绑定回调了,在回调中又再一次调用HCMT_Sleep,那么这一次的HCMT_Sleep只会正常休眠,并不继续检查了,防止无限调用); 3.其他回调均可以(无影响) 4.如果要内部检测状态机状态需要调用HCMT_StatusSleep",
    "url": "/docs/huoshan/category_9",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "APIHOOK - HDHOOK.Send发包",
    "content": "【功能描述】 调用SendAPI(目标进程中调用)X86X64 【备注】 无",
    "url": "/docs/huoshan/category_10",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "APIHOOK - HDHOOK.SendTo发包",
    "content": "【功能描述】 调用SendtoAPI(目标进程中调用)X86X64 【备注】 无",
    "url": "/docs/huoshan/category_10",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "AddressHOOK - HDHOOK.挂钩",
    "content": "【功能描述】 任意HOOK(内置插件)X86X64 【备注】 无 回调写法: ============= X86X64:typedef__int64 (__stdcall* HandleCallBackFunType)(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam); 参数解析: 窗口序号:对应的窗口序号 插件序号:内部自动传递 raxOreaxrbxOrebxrcxOrecxrdxOredxrbpOrebprspOresprsiOresirdiOredi:分别对应X86X64的8个寄存器 r8r9r10r11r12r13r14r15:分别对应X64的8个寄存器 lparam:是HDHK_Hook的第五个参数附加参数 备注: 返回值: 0【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 1【走原有流程】 2【需要修改值】+【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 3【需要修改值】+【走原有流程】 备注:调用约定是__stdcall X86X64通用调用案例: __int32 __stdcall HandleHookCallBackFun(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam){ HDbgPrint f_HOOK(\\\"触发HOOK回调->窗口序号:%d插件序号:%draxOreax:%llXrbxOrebx:%llXrcxOrecx:%llXrdxOredx:%llXrbpOrebp::%llXrspOresp:%llXrsiOresi:%llXrdiOredi:%llXr8:%llXr9:%llXr10:%llXr11:%llXr12:%llXr13:%llXr14:%llXr15:%llXlparam:%d\\\",窗口序号,插件序号,raxOreax,rbxOrebx,rcxOrecx,rdxOredx,rbpOrebp,rspOresp,rsiOresi,rdiOredi,r8,r9,r10,r11,r12,r13,r14,r15,lparam); \\n....中间执行自己的逻辑 \\n....可以用驱动读写 \\n如果需要修改寄存器值就调用HDHK_SetProcessHookCallBackLparam设置__int32 mark=1;autoret=HDHK_SetProcessHookCallBackLparam(窗口序号,插件序号,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,mark);HDbgPrint f_HOOK(\\\"ret:%lld\\\",ret); \\n返回值:0忽视HOOK语句直接跳到原来1走原有流程2需要修改值+直接跳到原来3需要修改值+走原有流程return3;} 回调内修改写法请转至》》》》》修改回调返回方法(X86X64)《《《《《《",
    "url": "/docs/huoshan/category_11",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "AddressHOOK - HDHOOK.挂钩Ex",
    "content": "【功能描述】 任意HOOK(内置插件)X64(该接口针对X64有效) 【备注】 无 回调写法: ============= X86X64:typedef__int64 (__stdcall* HandleCallBackFunType)(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam); 参数解析: 窗口序号:对应的窗口序号 插件序号:内部自动传递 raxOreaxrbxOrebxrcxOrecxrdxOredxrbpOrebprspOresprsiOresirdiOredi:分别对应X86X64的8个寄存器 r8r9r10r11r12r13r14r15:分别对应X64的8个寄存器 lparam:是HDHK_Hook的第五个参数附加参数 备注: 返回值: 0【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 1【走原有流程】 2【需要修改值】+【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 3【需要修改值】+【走原有流程】 备注:调用约定是__stdcall X86X64通用调用案例: __int32 __stdcall HandleHookCallBackFun(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam){ HDbgPrint f_HOOK(\\\"触发HOOK回调->窗口序号:%d插件序号:%draxOreax:%llXrbxOrebx:%llXrcxOrecx:%llXrdxOredx:%llXrbpOrebp::%llXrspOresp:%llXrsiOresi:%llXrdiOredi:%llXr8:%llXr9:%llXr10:%llXr11:%llXr12:%llXr13:%llXr14:%llXr15:%llXlparam:%d\\\",窗口序号,插件序号,raxOreax,rbxOrebx,rcxOrecx,rdxOredx,rbpOrebp,rspOresp,rsiOresi,rdiOredi,r8,r9,r10,r11,r12,r13,r14,r15,lparam); \\n....中间执行自己的逻辑 \\n....可以用驱动读写 \\n如果需要修改寄存器值就调用HDHK_SetProcessHookCallBackLparam设置__int32 mark=1;autoret=HDHK_SetProcessHookCallBackLparam(窗口序号,插件序号,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,mark);HDbgPrint f_HOOK(\\\"ret:%lld\\\",ret); \\n返回值:0忽视HOOK语句直接跳到原来1走原有流程2需要修改值+直接跳到原来3需要修改值+走原有流程return3;} 回调内修改写法请转至》》》》》修改回调返回方法(X86X64)《《《《《《",
    "url": "/docs/huoshan/category_11",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "AddressHOOK - HDHOOK.挂钩Exx",
    "content": "【功能描述】 任意HOOK(内置插件)X64(该接口针对X64有效) 【备注】 无 回调写法: ============= X86X64:typedef__int64 (__stdcall* HandleCallBackFunType)(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam); 参数解析: 窗口序号:对应的窗口序号 插件序号:内部自动传递 raxOreaxrbxOrebxrcxOrecxrdxOredxrbpOrebprspOresprsiOresirdiOredi:分别对应X86X64的8个寄存器 r8r9r10r11r12r13r14r15:分别对应X64的8个寄存器 lparam:是HDHK_Hook的第五个参数附加参数 备注: 返回值: 0【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 1【走原有流程】 2【需要修改值】+【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 3【需要修改值】+【走原有流程】 备注:调用约定是__stdcall X86X64通用调用案例: __int32 __stdcall HandleHookCallBackFun(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam){ HDbgPrint f_HOOK(\\\"触发HOOK回调->窗口序号:%d插件序号:%draxOreax:%llXrbxOrebx:%llXrcxOrecx:%llXrdxOredx:%llXrbpOrebp::%llXrspOresp:%llXrsiOresi:%llXrdiOredi:%llXr8:%llXr9:%llXr10:%llXr11:%llXr12:%llXr13:%llXr14:%llXr15:%llXlparam:%d\\\",窗口序号,插件序号,raxOreax,rbxOrebx,rcxOrecx,rdxOredx,rbpOrebp,rspOresp,rsiOresi,rdiOredi,r8,r9,r10,r11,r12,r13,r14,r15,lparam); \\n....中间执行自己的逻辑 \\n....可以用驱动读写 \\n如果需要修改寄存器值就调用HDHK_SetProcessHookCallBackLparam设置__int32 mark=1;autoret=HDHK_SetProcessHookCallBackLparam(窗口序号,插件序号,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,mark);HDbgPrint f_HOOK(\\\"ret:%lld\\\",ret); \\n返回值:0忽视HOOK语句直接跳到原来1走原有流程2需要修改值+直接跳到原来3需要修改值+走原有流程return3;} 回调内修改写法请转至》》》》》修改回调返回方法(X86X64)《《《《《《 HDHK_HookExxx 函数简介: 任意HOOK(内置插件)X64(该接口针对X64有效) 函数原型:__int64 HDHK_HookExxx(__int32 窗口序号,__int64 hook地址,char* 所属模块名字,__int64 jmp13空白地址,__int64 保留汇编地址,__int32 破坏字节,__int64 回调地址,__int64 附加参数,BOOL 是否主线程调用=FALSE); 参数定义: 窗口序号:窗口序号(从1开始) 所属模块名字:当前HOOK地址所属那个模块可以不指定为0就行 jmp13空白地址:在当前模块的代码地址找一个空白空间大小为13字节用于存储jmp一些指令 保留汇编地址:用来存储破坏字节数量+5字节大小的空白空间的首地址一般这个地址位于当前所属模块代码空白空间 hook地址:当前HOOK的目标地址(参考适合的HOOK地址X86HOOK地址规则X64HOOK地址规则) 破坏字节数:涉及到的汇编字节数 回调地址:遵循下面回调函数类型 附加参数:自定义参数,此参数会传递给回调函数 是否主线程调用:需要开启才开启,一般默认就行 返回值: 查看返回值表 备注: 无 回调写法: ============= X86X64:typedef__int64 (__stdcall* HandleCallBackFunType)(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam); 参数解析: 窗口序号:对应的窗口序号 插件序号:内部自动传递 raxOreaxrbxOrebxrcxOrecxrdxOredxrbpOrebprspOresprsiOresirdiOredi:分别对应X86X64的8个寄存器 r8r9r10r11r12r13r14r15:分别对应X64的8个寄存器 lparam:是HDHK_Hook的第五个参数附加参数 备注: 返回值: 0【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 1【走原有流程】 2【需要修改值】+【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 3【需要修改值】+【走原有流程】 备注:调用约定是__stdcall X86X64通用调用案例: __int32 __stdcall HandleHookCallBackFun(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam){ HDbgPrint f_HOOK(\\\"触发HOOK回调->窗口序号:%d插件序号:%draxOreax:%llXrbxOrebx:%llXrcxOrecx:%llXrdxOredx:%llXrbpOrebp::%llXrspOresp:%llXrsiOresi:%llXrdiOredi:%llXr8:%llXr9:%llXr10:%llXr11:%llXr12:%llXr13:%llXr14:%llXr15:%llXlparam:%d\\\",窗口序号,插件序号,raxOreax,rbxOrebx,rcxOrecx,rdxOredx,rbpOrebp,rspOresp,rsiOresi,rdiOredi,r8,r9,r10,r11,r12,r13,r14,r15,lparam); \\n....中间执行自己的逻辑 \\n....可以用驱动读写 \\n如果需要修改寄存器值就调用HDHK_SetProcessHookCallBackLparam设置__int32 mark=1;autoret=HDHK_SetProcessHookCallBackLparam(窗口序号,插件序号,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,mark);HDbgPrint f_HOOK(\\\"ret:%lld\\\",ret); \\n返回值:0忽视HOOK语句直接跳到原来1走原有流程2需要修改值+直接跳到原来3需要修改值+走原有流程return3;} 回调内修改写法请转至》》》》》修改回调返回方法(X86X64)《《《《《《",
    "url": "/docs/huoshan/category_11",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "AddressHOOK - HDHOOK.暂停挂钩",
    "content": "【功能描述】 暂停任意HOOK(内置插件)X86X64 【备注】 无",
    "url": "/docs/huoshan/category_11",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "AddressHOOK - HDHOOK.恢复挂钩",
    "content": "【功能描述】 恢复任意HOOK(内置插件)X86X64 【备注】 无",
    "url": "/docs/huoshan/category_11",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "AddressHOOK - HDHOOK.卸载挂钩",
    "content": "【功能描述】 卸载任意HOOK(内置插件)X86X64 【备注】 无",
    "url": "/docs/huoshan/category_11",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "通用模块 - HD通用.CALLX64",
    "content": "【功能描述】 通用CALL(适合X64),支持0-8个参数 【备注】 如果需要更多参数传递请联系作者",
    "url": "/docs/huoshan/category_12",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "通用模块 - HD通用.CALLX86",
    "content": "【功能描述】 通用CALL(适合X86),支持0到8个参数 【备注】 如果需要更多参数传递请联系作者 HC_HookMaint hread 函数简介: 挂接主线程 函数原型:__int64 __stdcall HC_HookMaint hread(__int32 窗口序号,__int64 窗口句柄); 参数定义: 窗口序号:窗口序号(从1开始) 窗口句柄:窗口句柄 返回值: 查看返回值表 备注: 无",
    "url": "/docs/huoshan/category_12",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "ShellCode模块(SH) - HD汇编.转机器码",
    "content": "【功能描述】 汇编文本转换机器码 【备注】 无",
    "url": "/docs/huoshan/category_13",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "ShellCode模块(SH) - HD汇编.写入机器码",
    "content": "【功能描述】 机器码写入到进程 【备注】 这里执行用的是HD驱动来申请和写入这个机器码,注意要把HD驱动安装好 拿到了写入地址可以使用HD驱动创建远线程来执行",
    "url": "/docs/huoshan/category_13",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "LUA模块(LUA) - HDLUA.读文件",
    "content": "【功能描述】 执行或加载LUA文件 【备注】 LUA标识符:当【是否需要拿到返回值】参数为真的时候,用作线程的标识符,方便主动退出线程，标识符规则:不要太大了{0到100}以内就行是否执行:真表示执行并加载LUA(比如:注入一些自定义LUA接口同时还能执行LUA),反之只是加载LUA文件(比如:注入一些自定义LUA接口)是否需要拿到返回值:真表示堵塞直到LUA文件执行完毕并获取返回值，反之表示开启一根线程执行(无法拿到返回值,可以在LUA文件中做一些耗时的操作)",
    "url": "/docs/huoshan/category_14",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "LUA模块(LUA) - HDLUA.结束LUA",
    "content": "【功能描述】 关闭LUA线程 【备注】 LUA标识符:调用【HCLUA_ReadFile】接口指定的【LUA标识符】参数,一一对应,-1表示全部LUA线程退出！！！",
    "url": "/docs/huoshan/category_14",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "LUA模块(LUA) - HDLUA.执行CALL",
    "content": "【功能描述】 执行被注册过的LUA函数 【备注】 json:{\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":XXX}",
    "url": "/docs/huoshan/category_14",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "驱动模块(N) - HCN_LoadDrv",
    "content": "【功能描述】 加载N驱动 【备注】 需要联网,可以卸载,驱动内置了进程,如需要自定义进程名联系管理员添加或者用HD驱动",
    "url": "/docs/huoshan/category_15",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "驱动模块(N) - HCN_InjectDll(W/A)X86",
    "content": "【功能描述】 注入32/64位DLL(需要先加载N驱动) 【备注】 无",
    "url": "/docs/huoshan/category_15",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "驱动模块(N) - HCN_InjectDll(W/A)X64",
    "content": "【功能描述】 注入32/64位DLL(需要先加载N驱动) 【备注】 无",
    "url": "/docs/huoshan/category_15",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "驱动模块(N) - HCN_InstallPlug(86/64)",
    "content": "【功能描述】 安装32/64位HD插件(需要先加载N驱动) 【备注】 无",
    "url": "/docs/huoshan/category_15",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "驱动模块(N) - HCN_UnLoadDrv",
    "content": "【功能描述】 卸载驱动同时清除了注入的DLL缓存 【备注】 取消窗口关联,一定要卸载相关信息,随后所有循环会快速内退,从而线程安全退出！！！！",
    "url": "/docs/huoshan/category_15",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "驱动模块(HD) - HD驱动.安装",
    "content": "【功能描述】 加载HD驱动(正式版本) 【备注】 需要联网,不可以卸载驱动,可以清除注入DLL缓存 此接口相当于调用HCHD_LoadDrv2传递-1:HDEx正式版本(云下发正常驱动,无特殊处理)",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "驱动模块(HD) - HD驱动.安装2",
    "content": "【功能描述】 云下发加载驱动或组件(可以通过指定驱动序号,加载不同版本的驱动如:正式版本定制版本备用版本其他保护盾VT等等) 【备注】 需要联网,不可以卸载驱动,可以清除注入DLL缓存",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "驱动模块(HD) - HD驱动.初始化快速读写",
    "content": "【功能描述】 初始化HD驱动快速读写(一般在HD安装驱动接口后的下一句就开始初始化) 【备注】 如果最开始安装HD驱动调用的是HCHD_LoadDrv同时又需要快速读写遍历,就需要先调用此接口,然后调用HCHD_RWExx进行快读内存读写遍历(百万级别) 如果最开始安装HD驱动调用的是HCHD_LoadDrv2并传递驱动序号为0,表示可以直接调用HCHD_RWExx进行快读内存读写遍历(百万级别),不需要再调用此接口了",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "驱动模块(HD) - HD驱动.无痕注入DLL",
    "content": "【功能描述】 把DLL注入到指定进程中(指定DLL二进制文件数据) 【备注】 不能卸载驱动,可以清除注入DLL缓存,支持32/64进程",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "驱动模块(HD) - HCHD_InjectX86X64ByFile",
    "content": "【功能描述】 把DLL注入到指定进程中(指定DLL文件路径) 【备注】 不能卸载驱动,可以清除注入DLL缓存,支持32/64进程",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "驱动模块(HD) - HCHD_InstallPlug(86/64)",
    "content": "【功能描述】 安装HD插件到指定进程中 【备注】 需要联网,可以清除注入DLL缓存,支持32/64进程",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "驱动模块(HD) - HD驱动.卸载插件",
    "content": "【功能描述】 卸载插件(并不是从进程中卸载,而是清除了下一次进程打开的时候安装插件的缓存) 【备注】 无",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "驱动模块(HD) - HD驱动.前台鼠标移动点击",
    "content": "【功能描述】 前台驱动鼠标移动并点击 【备注】 可以通过调用HCHD_SetMMTrackType来设置鼠标全局移动轨迹类型 按键在轨迹坐标集中那些坐标有效:第一个点操作按键-中间点不操作按键-最后一个点不操作按键",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "驱动模块(HD) - HD驱动.前台鼠标移动点击Ex",
    "content": "【功能描述】 前台驱动鼠标移动并点击(可指定句柄) 【备注】 可以通过调用HCHD_SetMMTrackType来设置鼠标全局移动轨迹类型 按键在轨迹坐标集中那些坐标有效:第一个点操作按键-中间点不操作按键-最后一个点不操作按键",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "驱动模块(HD) - HD驱动.前台鼠标移动按下",
    "content": "【功能描述】 前台驱动鼠标移动并按下指定键(可指定句柄) 【备注】 可以通过调用HCHD_SetMMTrackType来设置鼠标全局移动轨迹类型 按键在轨迹坐标集中那些坐标有效:第一个点操作按键-中间点不操作按键-最后一个点不操作按键",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "驱动模块(HD) - HD驱动.前台鼠标移动弹起",
    "content": "【功能描述】 前台驱动鼠标移动并弹起指定键(可指定句柄) 【备注】 可以通过调用HCHD_SetMMTrackType来设置鼠标全局移动轨迹类型 按键在轨迹坐标集中那些坐标有效:第一个点操作按键-中间点不操作按键-最后一个点不操作按键",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "驱动模块(HD) - HD驱动.前台按键",
    "content": "【功能描述】 前台驱动键盘(按下并弹起) 【备注】 无",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "驱动模块(HD) - HD驱动.前台按键按下",
    "content": "【功能描述】 前台驱动键盘(按下某键) 【备注】 无",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "驱动模块(HD) - HD驱动.前台按键弹起",
    "content": "【功能描述】 前台驱动键盘(弹起某键) 【备注】 无",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "驱动模块(HD) - HD驱动.驱动读写",
    "content": "【功能描述】 驱动读写 【备注】 无",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "驱动模块(HD) - HD驱动.开始读写",
    "content": "【功能描述】 驱动读写Ex(开始批读写)与HCHD_EndRWEx成对出现适合快速遍历(百万级别读写单线程) 【备注】 适合快速遍历",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "驱动模块(HD) - HD驱动.驱动读写Ex",
    "content": "【功能描述】 驱动读写Ex(批量读写)(百万级别读写单线程) 【备注】 先调用HCHD_BeginRWEx然后中间调用该接口HCHD_RWEx最后调用HCHD_EndRWEx用于释放环境",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "驱动模块(HD) - HD驱动.结束读写",
    "content": "【功能描述】 驱动读写Ex(结束批读写)与HCHD_BeginRWEx成对出现适合快速遍历(百万级别读写单线程) 【备注】 适合快速遍历",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "驱动模块(HD) - HD驱动.地址是否可读",
    "content": "【功能描述】 检查地址是否可读 【备注】 无",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "驱动模块(HD) - HD驱动.进程保护",
    "content": "【功能描述】 进程保护 【备注】 无",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "驱动模块(HD) - HD驱动.进程隐藏",
    "content": "【功能描述】 开启进程隐藏 【备注】 一次性只能隐藏一个,如果需要隐藏第二个,先把之前的给显示了",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "驱动模块(HD) - HCHD_PHideEx",
    "content": "【功能描述】 开启进程隐藏(加强版本)无法恢复 【备注】 1.隐藏后关闭进程不会蓝屏 2.隐藏后该接口无法恢复显示,其实也没必要恢复显示",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "驱动模块(HD) - HD驱动.进程显示",
    "content": "【功能描述】 进程显示 【备注】 无",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "驱动模块(HD) - HD.进程杀死",
    "content": "【功能描述】 进程杀死 【备注】 无",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "驱动模块(HD) - HD驱动.申请内存",
    "content": "【功能描述】 驱动申请内存 【备注】 无",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "驱动模块(HD) - HD驱动.申请内存Ex",
    "content": "【功能描述】 驱动申请内存(扩展版本) 【备注】 无",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "驱动模块(HD) - HD驱动.内存释放",
    "content": "【功能描述】 驱动内存释放 【备注】 无",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "驱动模块(HD) - HD驱动.修改内存保护",
    "content": "【功能描述】 驱动修改内存保护属性 【备注】 无",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_29",
    "title": "驱动模块(HD) - HD驱动.内存隐藏",
    "content": "【功能描述】 驱动内存隐藏 【备注】 无",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_30",
    "title": "驱动模块(HD) - HD驱动.内存查询",
    "content": "【功能描述】 驱动内存查询 【备注】 无",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_31",
    "title": "驱动模块(HD) - HD驱动.特征码查找地址",
    "content": "【功能描述】 驱动通过特征码查找地址 【备注】 无",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_32",
    "title": "驱动模块(HD) - HD驱动.获取主模块地址",
    "content": "【功能描述】 驱动获取主模块EXE的地址 【备注】 无",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_33",
    "title": "驱动模块(HD) - HD驱动.获取模块地址",
    "content": "【功能描述】 驱动获取指定模块的地址 【备注】 无",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_34",
    "title": "驱动模块(HD) - HD驱动.获取模块函数地址",
    "content": "【功能描述】 驱动获取指定模块的指定的函数地址 【备注】 无",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_35",
    "title": "驱动模块(HD) - HD驱动.修改机器码",
    "content": "【功能描述】 驱动修改机器码 【备注】 无",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_36",
    "title": "驱动模块(HD) - HD驱动.反截图",
    "content": "【功能描述】 驱动内核反截图 【备注】 无",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_37",
    "title": "驱动模块(HD) - HD驱动.远线程执行CALL",
    "content": "【功能描述】 驱动内存远线程执行函数 【备注】 无",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_38",
    "title": "驱动模块(HD) - HD驱动.清除注入缓存",
    "content": "【功能描述】 驱动清除注入缓存(全局插件缓存,DLL缓存) 【备注】 无",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_39",
    "title": "驱动模块(HD) - HD驱动.进程提权",
    "content": "【功能描述】 进程提权 【备注】 无",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_40",
    "title": "驱动模块(HD) - HCHD_HandleRoot",
    "content": "【功能描述】 进程提权 【备注】 无",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_41",
    "title": "驱动模块(HD) - HD驱动.设置鼠标轨迹",
    "content": "【功能描述】 设置驱动鼠标移动轨迹类型 【备注】 无",
    "url": "/docs/huoshan/category_16",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "注入模块(Inject) - HD注入.普通安装插件X86",
    "content": "【功能描述】 普通注入插件(X86),不需要安装驱动,这个不是无痕注入,只支持32位的 【备注】 这个不是无痕注入方便操作一些小程序普通注入插件DLL参数->进程PID,进程位数(32)可以在打开进程的经常下安装插件DLL初始化进程环境后调用这个安装插件然后循环等待拿到PID不是驱动级别",
    "url": "/docs/huoshan/category_17",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "注入模块(Inject) - HD注入.普通安装插件X86Ex",
    "content": "【功能描述】 普通注入插件(X86)),不需要安装驱动,这个不是无痕注入 【备注】 这个不是无痕注入 方便操作一些小程序 用法和HCN_NormalInstallPlugX86一样这个接口只是参数是句柄防止一些进程一次性打开多个这个句柄可以用来指定某个窗口",
    "url": "/docs/huoshan/category_17",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "注入模块(Inject) - HD注入.普通安装插件X64",
    "content": "【功能描述】 普通注入插件(X64),不需要安装驱动,这个不是无痕注入,只支持64位的 【备注】 这个不是无痕注入方便操作一些小程序普通注入插件DLL参数->进程PID,进程位数(32)可以在打开进程的经常下安装插件DLL初始化进程环境后调用这个安装插件然后循环等待拿到PID不是驱动级别",
    "url": "/docs/huoshan/category_17",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "注入模块(Inject) - HD注入.普通安装插件X64Ex",
    "content": "【功能描述】 普通注入插件(X64),不需要安装驱动,这个不是无痕注入,只支持64位的 【备注】 这个不是无痕注入 方便操作一些小程序 用法和HCN_NormalInstallPlugX86一样这个接口只是参数是句柄防止一些进程一次性打开多个这个句柄可以用来指定某个窗口",
    "url": "/docs/huoshan/category_17",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "注入模块(Inject) - HD注入.驱动安装插件",
    "content": "【功能描述】 安装HD插件(需要预先安装HD驱动),【注入方式1】 【备注】 不是无模块注入可以在打开进程的情况下注入驱动级别的,自动判断目标进程位数",
    "url": "/docs/huoshan/category_17",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "注入模块(Inject) - HD注入.驱动注入DLL",
    "content": "【功能描述】 安装指定DLL(需要预先安装HD驱动),【注入方式1】 【备注】 不是无模块注入可以在打开进程的情况下注入驱动级别的,自动判断目标进程位数",
    "url": "/docs/huoshan/category_17",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "注入模块(Inject) - HD注入.驱动安装插件Ex",
    "content": "【功能描述】 安装HD插件(需要预先安装HD驱动),【注入方式2】 【备注】 不是无模块注入可以在打开进程的情况下注入驱动级别的,自动判断目标进程位数",
    "url": "/docs/huoshan/category_17",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "注入模块(Inject) - HD注入.驱动注入DLLEx",
    "content": "【功能描述】 安装指定DLL(需要预先安装HD驱动),【注入方式2】 【备注】 不是无模块注入可以在打开进程的情况下注入驱动级别的,自动判断目标进程位数",
    "url": "/docs/huoshan/category_17",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "盾 - HD盾.保护",
    "content": "【功能描述】 一键保护进程(隐藏等) 【备注】 需要调用HCHD_LoadDrv2传递参数3来安装保护盾HDPP驱动",
    "url": "/docs/huoshan/category_18",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "盾 - HD盾.开启窗口保护",
    "content": "【功能描述】 打开窗口保护以及子窗口 【备注】 需要调用HCHD_LoadDrv2传递参数5来安装保护盾HDPW驱动 可以多次指定内部会把指定的保护窗口句柄以及所属子窗口一起保护",
    "url": "/docs/huoshan/category_18",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "盾 - HD盾.关闭窗口保护",
    "content": "【功能描述】 取消所有窗口保护(指定保护过的) 【备注】 需要调用HCHD_LoadDrv2传递参数5来安装保护盾HDPW驱动 可以取消调用过HCHDPW_OnProtect所有保护的窗口句柄",
    "url": "/docs/huoshan/category_18",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "HDVT - HDVT.申请内存",
    "content": "【功能描述】 VT驱动申请内存 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/huoshan/category_19",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "HDVT - HDVT.释放内存",
    "content": "【功能描述】 VT驱动释放内存 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/huoshan/category_19",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "HDVT - HDVT.读内存",
    "content": "【功能描述】 VT驱动读内存 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/huoshan/category_19",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "HDVT - HDVT.写内存",
    "content": "【功能描述】 VT驱动写内存 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/huoshan/category_19",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "HDVT - HDVT.获取模块地址",
    "content": "【功能描述】 VT驱动获取模块地址 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/huoshan/category_19",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "HDVT - HDVT.获取模块函数地址",
    "content": "【功能描述】 VT驱动获取模块函数地址 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/huoshan/category_19",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "HDVT - HDVT.无痕HOOK",
    "content": "【功能描述】 VT驱动无痕HOOK,过CRC 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/huoshan/category_19",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "HDVT - HDVT.远程执行",
    "content": "【功能描述】 VT驱动远程插入执行 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/huoshan/category_19",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "HDVT - HCHDVT_InjectX64",
    "content": "【功能描述】 VT驱动无痕无模块注入X64DLL 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/huoshan/category_19",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "HDVT - HCHDVT_InjectX86",
    "content": "【功能描述】 VT驱动无痕无模块注入X86DLL 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/huoshan/category_19",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "HDVT - HDVT.安装插件X64",
    "content": "【功能描述】 VT驱动无痕无模块安装X64插件到目标进程中 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/huoshan/category_19",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "HDVT - HDVT.安装插件X86",
    "content": "【功能描述】 VT驱动无痕无模块安装X86插件到目标进程中 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/huoshan/category_19",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "YOLOV(HDYOLOV) - HCYOLO_AddModel",
    "content": "【功能描述】 添加YOLOV(ncnn.bin和ncnn.param)模型文件(从内存中加载模型) 【备注】 ncnn模型bin“＝XXX.ncnn.bin”param“＝XXX.ncnn.param”从内存中加载模型备注:一个进程仅同时支持一个版本的模型 需要调用HCHD_LoadDrv2传递参数4来安装YOLOV组件模块",
    "url": "/docs/huoshan/category_20",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "YOLOV(HDYOLOV) - HCYOLO_AddModelFile",
    "content": "【功能描述】 添加YOLOV(ncnn.bin和ncnn.param)模型文件(从文件中加载模型) 【备注】 ncnn模型bin“＝XXX.ncnn.bin”param“＝XXX.ncnn.param”从文件中加载模型备注:一个进程仅同时支持一个版本的模型 需要调用HCHD_LoadDrv2传递参数4来安装YOLOV组件模块",
    "url": "/docs/huoshan/category_20",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "YOLOV(HDYOLOV) - HCYOLO_Identify",
    "content": "【功能描述】 添加YOLOV(ncnn.bin和ncnn.param)模型文件(从文件中加载模型),从后台截图缓存识别 【备注】 识别信息调用HCEnv_GetRetJson“获取字符串信息以|”分割,自行切割 %d,%f,%f,%f,%f,%f,%d|%d,%f,%f,%f,%f,%f,%d| 字段含义:类别,X1,Y1,X2,Y2,置信度,耗时|类别,X1,Y1,X2,Y2,置信度,耗时| 需要调用HCHD_LoadDrv2传递参数4来安装YOLOV组件模块",
    "url": "/docs/huoshan/category_20",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "YOLOV(HDYOLOV) - HCYOLO_IdentifyByFile",
    "content": "【功能描述】 添加YOLOV(ncnn.bin和ncnn.param)模型文件(从文件中加载模型),从指定图片文件识别 【备注】 识别信息调用HCEnv_GetRetJson“获取字符串信息以|”分割,自行切割 %d,%f,%f,%f,%f,%f,%d|%d,%f,%f,%f,%f,%f,%d| 字段含义:类别,X1,Y1,X2,Y2,置信度,耗时|类别,X1,Y1,X2,Y2,置信度,耗时| 需要调用HCHD_LoadDrv2传递参数4来安装YOLOV组件模块",
    "url": "/docs/huoshan/category_20",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "VNC(HDVNC) - HDVNC.连接虚拟机",
    "content": "【功能描述】 连接虚拟机 【备注】 对应的虚拟机请开启VNC并设置好端口 两种使用VNC模式特别注意: 1.安装插件(HDEX_InstallPluginVM)的形式连接VNC:支持重连port==0属于重连会检查安装插件时候的PID同时自动获取之前连接过的端口前提是已经连接过卸载的时候内部调用(HCEnv_UnLoadEx) 2.未安装插件(HCVnc_Connect)的形式连接VNC:重连一直都可以不能port==0因为会检查PID未安装插件的PID为0卸载的时候内部调用(HCEnv_UnLoad)",
    "url": "/docs/huoshan/category_21",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "VNC(HDVNC) - HDVNC.关闭连接",
    "content": "【功能描述】 关闭连接虚拟机 【备注】 对应的虚拟机请开启VNC并设置好端口 两种使用VNC模式特别注意: 1.安装插件(HDEX_InstallPluginVM)的形式连接VNC:支持重连port==0属于重连会检查安装插件时候的PID同时自动获取之前连接过的端口前提是已经连接过卸载的时候内部调用(HCEnv_UnLoadEx) 2.未安装插件(HCVnc_Connect)的形式连接VNC:重连一直都可以不能port==0因为会检查PID未安装插件的PID为0卸载的时候内部调用(HCEnv_UnLoad)",
    "url": "/docs/huoshan/category_21",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "VNC(HDVNC) - HDVNC.鼠标绝对移动",
    "content": "【功能描述】 VNC鼠标绝对移动(自带移动轨迹直线波动防检测) 【备注】 无",
    "url": "/docs/huoshan/category_21",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "VNC(HDVNC) - HDVNC.鼠标相对移动",
    "content": "【功能描述】 VNC鼠标相对移动(自带移动轨迹直线波动防检测) 【备注】 无",
    "url": "/docs/huoshan/category_21",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "VNC(HDVNC) - HDVNC.鼠标左键点击",
    "content": "【功能描述】 VNC鼠标左键点击 【备注】 无",
    "url": "/docs/huoshan/category_21",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "VNC(HDVNC) - HDVNC.鼠标左键按下",
    "content": "【功能描述】 VNC鼠标左键按下 【备注】 无",
    "url": "/docs/huoshan/category_21",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "VNC(HDVNC) - HDVNC.鼠标左键弹起",
    "content": "【功能描述】 VNC鼠标左键弹起 【备注】 无",
    "url": "/docs/huoshan/category_21",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "VNC(HDVNC) - HDVNC.鼠标左键双击",
    "content": "【功能描述】 VNC鼠标左键双击 【备注】 无",
    "url": "/docs/huoshan/category_21",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "VNC(HDVNC) - HDVNC.鼠标右键点击",
    "content": "【功能描述】 VNC鼠标右键点击 【备注】 无",
    "url": "/docs/huoshan/category_21",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "VNC(HDVNC) - HDVNC.鼠标右键按下",
    "content": "【功能描述】 VNC鼠标右键按下 【备注】 无",
    "url": "/docs/huoshan/category_21",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "VNC(HDVNC) - HDVNC.鼠标右键弹起",
    "content": "【功能描述】 VNC鼠标右键弹起 【备注】 无",
    "url": "/docs/huoshan/category_21",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "VNC(HDVNC) - HDVNC.鼠标滚轮滚下",
    "content": "【功能描述】 VNC鼠标滚轮滚下 【备注】 无",
    "url": "/docs/huoshan/category_21",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "VNC(HDVNC) - HDVNC.鼠标滚轮滚上",
    "content": "【功能描述】 VNC鼠标滚轮滚上 【备注】 无",
    "url": "/docs/huoshan/category_21",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "VNC(HDVNC) - HCVnc_KeyPress",
    "content": "【功能描述】 VNC键盘按键敲击 【备注】 无",
    "url": "/docs/huoshan/category_21",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "VNC(HDVNC) - HDVNC.键盘按键按下",
    "content": "【功能描述】 VNC键盘按键按下 【备注】 无",
    "url": "/docs/huoshan/category_21",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "VNC(HDVNC) - HDVNC.键盘按键弹起",
    "content": "【功能描述】 VNC键盘按键弹起 【备注】 无",
    "url": "/docs/huoshan/category_21",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "VNC(HDVNC) - HCVnc_KeyPressStr",
    "content": "【功能描述】 VNC键盘连续按键字符串(数字+字母) 【备注】 无",
    "url": "/docs/huoshan/category_21",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "VNC(HDVNC) - HCVnc_SendString",
    "content": "【功能描述】 VNC键盘输入字符串(中文+数字+符号+字母) 【备注】 无",
    "url": "/docs/huoshan/category_21",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "VNC(HDVNC) - HDVNC.开启截图",
    "content": "【功能描述】 开启截图(内部会开启一根线程循环获取虚拟机画面) 【备注】 可以调用HCVnc_CloseCapture来结束截图线程",
    "url": "/docs/huoshan/category_21",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "VNC(HDVNC) - HDVNC.关闭截图",
    "content": "【功能描述】 关闭截图(结束开启截图内部产生的线程) 【备注】 需要多次调用关闭,直到关闭成功,通常情况一次就能关闭成功",
    "url": "/docs/huoshan/category_21",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "窗口模块(WIN) - HD窗口.排序通讯窗口",
    "content": "【功能描述】 排序安装过插件的进程 【备注】 安装过插件的经常意思表示: 1.通讯过的窗口序号的对应的进程PID(未被第二次初始化序号HCInject_Init) 2.卸载进程环境不会影响绑定过的进程排序(不能调用始化序号HCInject_Init的前提下,也就是可以重连的情况下) 3.HCInject_Init这个接口一旦调用,就会取消所有关联(意味着不能重连了),从而影响当前绑定的窗口PID,意味着新窗口即将打开",
    "url": "/docs/huoshan/category_22",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "窗口模块(WIN) - HD窗口.伪装进程",
    "content": "【功能描述】 伪装进程(防止检查到实际的进程存在) 【备注】 无 案例: 把注入器伪装成了hd.exe",
    "url": "/docs/huoshan/category_22",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "窗口模块(WIN) - HD窗口.设置窗口状态",
    "content": "【功能描述】 设置或者操作窗口状态 【备注】 无",
    "url": "/docs/huoshan/category_22",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "窗口模块(WIN) - HD窗口.设置窗口大小",
    "content": "【功能描述】 设置窗口大小 【备注】 窗口居中会改变窗口位置",
    "url": "/docs/huoshan/category_22",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "窗口模块(WIN) - HD窗口.窗口移动",
    "content": "【功能描述】 移动窗口 【备注】 无",
    "url": "/docs/huoshan/category_22",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "窗口模块(WIN) - HD窗口.是否64位进程",
    "content": "【功能描述】 目标窗口句柄/目标进程是否64位 【备注】 窗口句柄或者PID任意指定一个就行 如果2个都指定则PID用于检测",
    "url": "/docs/huoshan/category_22",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "窗口模块(WIN) - HD窗口.获取窗口标题",
    "content": "【功能描述】 获取目标窗口标题 【备注】 无",
    "url": "/docs/huoshan/category_22",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "窗口模块(WIN) - HD窗口.获取窗口线程ID",
    "content": "【功能描述】 获取目标窗口句柄的线程ID 【备注】 无",
    "url": "/docs/huoshan/category_22",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "窗口模块(WIN) - HD窗口.获取窗口进程ID",
    "content": "【功能描述】 获取目标窗口句柄的进程ID 【备注】 无",
    "url": "/docs/huoshan/category_22",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "窗口模块(WIN) - HD窗口.获取窗口进程路径",
    "content": "【功能描述】 获取目标窗口句柄的路径 【备注】 无",
    "url": "/docs/huoshan/category_22",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "窗口模块(WIN) - HD窗口.获取窗口位置",
    "content": "【功能描述】 获取窗口在屏幕上的位置 【备注】 返回字符串: left|top|rifght|bottom| RECT结构体: typedefstructtagRECT{LONGleft;LONGtop;LONGright;LONGbottom;}RECT,* PRECT;",
    "url": "/docs/huoshan/category_22",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "窗口模块(WIN) - HD窗口.获取窗口类名",
    "content": "【功能描述】 获取目标窗口句柄的窗口类名 【备注】 无",
    "url": "/docs/huoshan/category_22",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "窗口模块(WIN) - HD窗口.获取窗口状态",
    "content": "【功能描述】 获取目标窗口句柄的窗口状态 【备注】 无",
    "url": "/docs/huoshan/category_22",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "窗口模块(WIN) - HD窗口.获取特殊窗口",
    "content": "【功能描述】 获取特殊窗口桌面Shell_TrayWnd 【备注】 无",
    "url": "/docs/huoshan/category_22",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "窗口模块(WIN) - HD窗口.获取窗口关联句柄",
    "content": "【功能描述】 获取目标窗口句柄的关联窗口句柄 【备注】 无",
    "url": "/docs/huoshan/category_22",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "窗口模块(WIN) - HD窗口.获取顶层活动窗口句柄",
    "content": "【功能描述】 获取顶层活动窗口,可以获取到按键自带插件无法获取到的句柄 【备注】 无",
    "url": "/docs/huoshan/category_22",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "窗口模块(WIN) - HD窗口.获取顶层焦点窗口句柄",
    "content": "【功能描述】 获取顶层活动窗口中具有输入焦点的窗口句柄 【备注】 无",
    "url": "/docs/huoshan/category_22",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "窗口模块(WIN) - HD窗口.设置焦点到窗口",
    "content": "【功能描述】 设置输入焦点到窗口 【备注】 无",
    "url": "/docs/huoshan/category_22",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "窗口模块(WIN) - HD窗口.获取窗口客户区域",
    "content": "【功能描述】 获取窗口客户区域的宽度和高度 【备注】 返回字符串: w|h|",
    "url": "/docs/huoshan/category_22",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "窗口模块(WIN) - HD窗口.获取窗口客户区域在屏幕",
    "content": "【功能描述】 获取窗口客户区域在屏幕上的位置 【备注】 返回字符串: left|top|rifght|bottom| RECT结构体: typedefstructtagRECT{LONGleft;LONGtop;LONGright;LONGbottom;}RECT,* PRECT;",
    "url": "/docs/huoshan/category_22",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "窗口模块(WIN) - HD窗口.查找窗口",
    "content": "【功能描述】 查找符合类名或者标题名的顶层可见窗口,如果指定了parent,则在parent的第一层子窗口中查找 【备注】 无",
    "url": "/docs/huoshan/category_22",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "窗口模块(WIN) - HD窗口.查找顶层窗口",
    "content": "【功能描述】 查找顶层窗口句柄,父窗口句柄为NULL 【备注】 无",
    "url": "/docs/huoshan/category_22",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "窗口模块(WIN) - HD窗口.枚举查找窗口",
    "content": "【功能描述】 根据指定进程以及其它条件,枚举系统中符合条件的窗口 【备注】 单PID返回字符串: hwnd 多PID返回字符串:根据创建时间排序过的 hwnd1|hwnd2|hwnd3|",
    "url": "/docs/huoshan/category_22",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "窗口模块(WIN) - HD窗口.枚举查找窗口Ex",
    "content": "【功能描述】 根据指定进程pid以及其它条件,枚举系统中符合条件的窗口,可以枚举到按键自带的无法枚举到的窗口 【备注】 单PID返回字符串: hwnd",
    "url": "/docs/huoshan/category_22",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "窗口模块(WIN) - HD窗口.枚举进程",
    "content": "【功能描述】 根据指定进程名,枚举系统中符合条件的进程PID 【备注】 返回字符串: pid1|pid2|pid3|",
    "url": "/docs/huoshan/category_22",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "窗口模块(WIN) - HD窗口.枚举窗口",
    "content": "【功能描述】 根据指定条件,枚举系统中符合条件的窗口,可以枚举到按键自带的无法枚举到的窗口 【备注】 多句柄返回字符串: hwnd1|hwnd2|hwnd3|",
    "url": "/docs/huoshan/category_22",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "目标[TARGET] - HCTarget_UseVT",
    "content": "【功能描述】 目标进程是否使用VT驱动 【备注】 目标进程是否使用VT驱动需要中控安装和开启VT驱动type:0不使用1使用作用模块包含:后台键鼠模块后台截图模块谷歌内置浏览器模块APIHOOK模块自定义HOOK模块目的:过检测能力强",
    "url": "/docs/huoshan/category_23",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "内核(NT) - HDNT.窗口句柄取PID",
    "content": "【功能描述】 获取目标窗口句柄的进程ID(R3层内核版本) 【备注】 可以绕过一些检测,比如NP等",
    "url": "/docs/huoshan/category_24",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "内存操作模块(M) - HD内存.特征码",
    "content": "【功能描述】 特征码查找 【备注】 无",
    "url": "/docs/huoshan/category_25",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "内存操作模块(M) - HD内存.特征码Ex",
    "content": "【功能描述】 特征码查找(通过指定地址) 【备注】 无",
    "url": "/docs/huoshan/category_25",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "内存操作模块(M) - HD内存.读表达式",
    "content": "【功能描述】 读整数数据 【备注】 无",
    "url": "/docs/huoshan/category_25",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "内存操作模块(M) - HD内存.读地址",
    "content": "【功能描述】 读整数数据 【备注】 无",
    "url": "/docs/huoshan/category_25",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "内存操作模块(M) - HD内存.写表达式",
    "content": "【功能描述】 写整数数据 【备注】 无",
    "url": "/docs/huoshan/category_25",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "内存操作模块(M) - HD内存.写地址",
    "content": "【功能描述】 写整数数据 【备注】 无",
    "url": "/docs/huoshan/category_25",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "内存操作模块(M) - HD内存.读表达式字节流",
    "content": "【功能描述】 读字节流数据 【备注】 json返回字节流利用HCEnv_GetRetJson拿到返回地址,提取的字节数为读取大小数最大读取100KB字节大小,注意这个限制,否则会报错",
    "url": "/docs/huoshan/category_25",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "内存操作模块(M) - HCM_ReadFD",
    "content": "【功能描述】 读单/双浮点数 【备注】 返回结果以float举例:json返回字符串如:{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":1,\\\\\"iError\\\\\":0,\\\\\"value\\\\\":999.000}]}",
    "url": "/docs/huoshan/category_25",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "内存操作模块(M) - HD内存.读地址字节流",
    "content": "【功能描述】 读字节流数据 【备注】 json返回字节流利用HCEnv_GetRetJson拿到返回地址,提取的字节数为读取大小数最大读取100KB字节大小,注意这个限制,否则会报错",
    "url": "/docs/huoshan/category_25",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "内存操作模块(M) - HCM_ReadFDAddr",
    "content": "【功能描述】 读单/双浮点数 【备注】 读取大小:4float单浮点8double双浮点以float举例:json返回字符串如:\\\"999.0000\\\"",
    "url": "/docs/huoshan/category_25",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "内存操作模块(M) - HD内存.写表达式字节流",
    "content": "【功能描述】 写字节流数据 【备注】 最大写入100KB字节大小,注意这个限制,否则会报错json返回值{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":1,\\\\\"iError\\\\\":0}]}",
    "url": "/docs/huoshan/category_25",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "内存操作模块(M) - HCM_WriteF",
    "content": "【功能描述】 写单浮点数4字节 【备注】 json返回值{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":1,\\\\\"iError\\\\\":0}]}",
    "url": "/docs/huoshan/category_25",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "内存操作模块(M) - HCM_WriteD",
    "content": "【功能描述】 写双浮点数8字节 【备注】 json返回值{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":1,\\\\\"iError\\\\\":0}]}",
    "url": "/docs/huoshan/category_25",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "内存操作模块(M) - HD内存.写地址字节流",
    "content": "【功能描述】 写字节流数据 【备注】 json返回字节流利用HCEnv_GetRetJson拿到返回地址,提取的字节数为读取大小数最大读取100KB字节大小,注意这个限制,否则会报错",
    "url": "/docs/huoshan/category_25",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "内存操作模块(M) - HCM_WriteAddrF",
    "content": "【功能描述】 写单浮点数4字节 【备注】 无",
    "url": "/docs/huoshan/category_25",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "内存操作模块(M) - HCM_WriteAddrD",
    "content": "【功能描述】 写双浮点数8字节 【备注】 无",
    "url": "/docs/huoshan/category_25",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "内存操作模块(M) - HCM_GetModuleBase",
    "content": "【功能描述】 获取模块地址 【备注】 无",
    "url": "/docs/huoshan/category_25",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "内存操作模块(M) - HCM_GetModuleFunAddr",
    "content": "【功能描述】 获取模块中的导出接口地址 【备注】 无",
    "url": "/docs/huoshan/category_25",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "内存操作模块(M) - HCM_IsBadReadAddr",
    "content": "【功能描述】 判断指定地址是否在目标进程中有效可读 【备注】 无",
    "url": "/docs/huoshan/category_25",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "内存操作模块(M) - HCM_AsmCallX86",
    "content": "【功能描述】 执行汇编CALLX86传递汇编代码 【备注】 无",
    "url": "/docs/huoshan/category_25",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "内存操作模块(M) - HCM_AsmCallX64",
    "content": "【功能描述】 执行汇编CALLX64传递汇编代码 【备注】 无",
    "url": "/docs/huoshan/category_25",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "找图模块(FP) - HD识图.截图",
    "content": "【功能描述】 截图并保存到文件(.bmp) 【备注】 无",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "找图模块(FP) - HD识图.单点找色",
    "content": "【功能描述】 单点找色 【备注】 注意返回值含义和XY值的提取",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "找图模块(FP) - HD识图.多点找色",
    "content": "【功能描述】 多点找色 【备注】 json: {error:0,ret:[{bRet:1,info:结果}]}\\\" info格式->像素序号,x1,y1|像素序号,x2,y2",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "找图模块(FP) - HD识图.多点偏移找色",
    "content": "【功能描述】 多点偏移找色 【备注】 json: \\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":%lld,\\\\\"info\\\\\":\\\\\"%s\\\\\"}]}\\\", info:x1,y1|x2,y2|",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "找图模块(FP) - HD识图.比较颜色",
    "content": "【功能描述】 比较颜色 【备注】 无",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "找图模块(FP) - HD识图.比较颜色Ex",
    "content": "【功能描述】 多点找色确定某个图像块,指定多个具体点 【备注】 这个接口是给具体的坐标直接比较颜色 而这个HCFP_FindColorsOffset是是先搜索首色然后以首色开始拿到偏移的坐标去比较颜色",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "找图模块(FP) - HD识图.获取颜色",
    "content": "【功能描述】 获取某个点的颜色值(从后台) 【备注】 注意返回值含义和值的提取 #pragmapack(1)typedefstructMYA8R8G8B8{BYTEm_a;\\n0x00BYTEm_r;\\n低8位BYTEm_g;\\n中8位BYTEm_b;\\n高8位MYA8R8G8B8(){m_a=0;m_r=0;m_g=0;m_b=0;}}MYA8R8G8B8; #pragmapack() json: “{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"info\\\":\\\"44,29,5B\\\"}]}”A(0x00)rgbr红色:低8位g绿色:中8位b蓝色:高8位RGBFFFFFF",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "找图模块(FP) - HD识图.范围找图",
    "content": "【功能描述】 在客户区范围内找图(仅支持一个图片) 【备注】 注意返回值含义和xy值的提取 {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "找图模块(FP) - HD识图.范围找图Ex",
    "content": "【功能描述】 在客户区范围内找图(返回找到其中一张信息) 【备注】 注意返回值含义和xy值的提取 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "找图模块(FP) - HCFP_FindPicExx",
    "content": "【功能描述】 在客户区范围内找图(返回全部找到的信息) 【备注】 注意返回值含义和xy值的提取 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "找图模块(FP) - HD识图.是否卡屏",
    "content": "【功能描述】 在客户区范围内检测再规定时间内是否卡图 【备注】 无",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "找图模块(FP) - HD识图.获取区域图像CRC",
    "content": "【功能描述】 在客户区范围内获取像素CRC值,用于卡屏校验 【备注】 json: {\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":%lld,\\\\\"info\\\\\":\\\"%X“,\\\\\"time\\\\\":%d}]} info字段是校验值4字节整数",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "找图模块(FP) - HD识图.单点找色从文件",
    "content": "【功能描述】 单点找色(从文件) 【备注】 注意返回值含义和XY值的提取",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "找图模块(FP) - HD识图.单点找色从内存",
    "content": "【功能描述】 单点找色(从内存) 【备注】 注意返回值含义和XY值的提取 图片内存缓冲区自己维护",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "找图模块(FP) - HD识图.多点找色从文件",
    "content": "【功能描述】 多点找色(从文件) 【备注】 json: {error:0,ret:[{bRet:1,info:结果}]}\\\" info格式->像素序号,x1,y1|像素序号,x2,y2",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "找图模块(FP) - HD识图.多点找色从内存",
    "content": "【功能描述】 多点找色(从内存) 【备注】 json: {error:0,ret:[{bRet:1,info:结果}]}\\\" info格式->像素序号,x1,y1|像素序号,x2,y2 图片内存缓冲区自己维护",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "找图模块(FP) - HD识图.多点偏移找色从文件",
    "content": "【功能描述】 多点偏移找色(从文件) 【备注】 无",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "找图模块(FP) - HD识图.多点偏移找色从内存",
    "content": "【功能描述】 多点偏移找色(从内存) 【备注】 图片内存缓冲区自己维护",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "找图模块(FP) - HD识图.范围找图从文件",
    "content": "【功能描述】 在客户区范围内找图(从文件)(仅支持一个图片) 【备注】 注意返回值含义和xy值的提取 {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "找图模块(FP) - HD识图.范围找图从内存",
    "content": "【功能描述】 在客户区范围内找图(从内存)(仅支持一个图片) 【备注】 注意返回值含义和xy值的提取 图片内存缓冲区自己维护 {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "找图模块(FP) - HD识图.范围找图从文件Ex",
    "content": "【功能描述】 在客户区范围内找图(从文件)(找到一个图片就返回) 【备注】 注意返回值含义和xy值的提取 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "找图模块(FP) - HD识图.范围找图从内存Ex",
    "content": "【功能描述】 在客户区范围内找图(从内存)(找到一个图片就返回) 【备注】 注意返回值含义和xy值的提取 图片内存缓冲区自己维护 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "找图模块(FP) - HCFP_FindPicExxByFile",
    "content": "【功能描述】 在客户区范围内找图(从文件)(找全部图片信息坐标) 【备注】 注意返回值含义和xy值的提取 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "找图模块(FP) - HCFP_FindPicExxByMem",
    "content": "【功能描述】 在客户区范围内找图(从内存)(找全部图片信息坐标) 【备注】 注意返回值含义和xy值的提取 图片内存缓冲区自己维护 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度|</SPAN> NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "找图模块(FP) - HD识图.范围找图来源内存Ex",
    "content": "【功能描述】 在客户区范围内找图(子图从内存)(找到一个图片就返回) 【备注】 注意返回值含义和xy值的提取 图片内存缓冲区自己维护 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "找图模块(FP) - HCFP_FindPicExxFromMem",
    "content": "【功能描述】 在客户区范围内找图(子图从内存)(找全部图片信息坐标) 【备注】 注意返回值含义和xy值的提取 图片内存缓冲区自己维护 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "找图模块(FP) - HD识图.比较颜色从文件",
    "content": "【功能描述】 比较颜色(从文件) 【备注】 无",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "找图模块(FP) - HD识图.比较颜色从内存",
    "content": "【功能描述】 比较颜色(从内存) 【备注】 图片内存缓冲区自己维护",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_29",
    "title": "找图模块(FP) - HD识图.比较颜色从文件Ex",
    "content": "【功能描述】 多点找色确定某个图像块,指定多个具体点,从文件 【备注】 无",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_30",
    "title": "找图模块(FP) - HD识图.比较颜色从内存Ex",
    "content": "【功能描述】 多点找色确定某个图像块,指定多个具体点,从内存 【备注】 无",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_31",
    "title": "找图模块(FP) - HD识图.获取颜色从文件",
    "content": "【功能描述】 获取颜色(从文件) 【备注】 注意返回值含义和值的提取 #pragmapack(1)typedefstructMYA8R8G8B8{BYTEm_a;\\n0x00BYTEm_r;\\n低8位BYTEm_g;\\n中8位BYTEm_b;\\n高8位MYA8R8G8B8(){m_a=0;m_r=0;m_g=0;m_b=0;}}MYA8R8G8B8; #pragmapack() json: “{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"info\\\":\\\"44,29,5B\\\"}]}”A(0x00)rgbr红色:低8位g绿色:中8位b蓝色:高8位RGBFFFFFF",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_32",
    "title": "找图模块(FP) - HD识图.获取颜色从内存",
    "content": "【功能描述】 获取颜色(从内存) 【备注】 图片内存缓冲区自己维护 注意返回值含义和值的提取 #pragmapack(1)typedefstructMYA8R8G8B8{BYTEm_a;\\n0x00BYTEm_r;\\n低8位BYTEm_g;\\n中8位BYTEm_b;\\n高8位MYA8R8G8B8(){m_a=0;m_r=0;m_g=0;m_b=0;}}MYA8R8G8B8; #pragmapack() json: “{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"info\\\":\\\"44,29,5B\\\"}]}”A(0x00)rgbr红色:低8位g绿色:中8位b蓝色:高8位RGBFFFFFF",
    "url": "/docs/huoshan/category_26",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "找字模块(FS) - HD识字.设置字库",
    "content": "【功能描述】 设置当前像素识字的字库文件(为了提高识别效率,不支持多线程) 建议在登录回调中最开始初始化调用 其他线程需要那个序号就切换那个序号HCFS_SwitchCurDictFile 调用一次会给所有窗口序号添加当前设置的字库文件 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 这个不支持多线程,请在开启前首先设置好 类型提前添加字库,需要在当前线程使用字库必须调用HCFS_SwitchCurDictFile切换字库 字库文件绑定窗口序号字库序号绑定线程窗口序号支持多线程多进程来操作目标进程可以在多线程中通过窗口序号拿到所有绑定的字库文件信息至于在多线程中要使用的是哪一个字库文件？取决于当前线程所绑定的字库序号 总结:1.所有字库文件只需要和窗口序号关联一次就行\\n2.在多线程中需要使用到那个字库序号就切换就行多线程有自己的字库序号副本互不影响各自切换",
    "url": "/docs/huoshan/category_27",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "找字模块(FS) - HD识字.设置字库Ex",
    "content": "【功能描述】 设置当前像素识字的字库文件(为了提高识别效率,不支持多线程) 请在主线程中最开始初始化调用 其他线程需要那个序号就切换那个序号HCFS_SwitchCurDictFile 调用一次会给所有窗口序号添加当前设置的字库文件 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 这个不支持多线程,请在开启前首先设置好 类型提前添加字库,需要在当前线程使用字库必须调用HCFS_SwitchCurDictFile切换字库",
    "url": "/docs/huoshan/category_27",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "找字模块(FS) - HD识字.设置字库Exx",
    "content": "【功能描述】 设置当前像素识字的字库文件(为了提高识别效率,不支持多线程) 建议在登录回调中最开始初始化调用 其他线程需要那个序号就切换那个序号HCFS_SwitchCurDictFile 调用一次会给所有窗口序号添加当前设置的字库文件 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 这个不支持多线程,请在开启前首先设置好 类型提前添加字库,需要在当前线程使用字库必须调用HCFS_SwitchCurDictFile切换字库 字库文件绑定窗口序号字库序号绑定线程窗口序号支持多线程多进程来操作目标进程可以在多线程中通过窗口序号拿到所有绑定的字库文件信息至于在多线程中要使用的是哪一个字库文件？取决于当前线程所绑定的字库序号 总结:1.所有字库文件只需要和窗口序号关联一次就行\\n2.在多线程中需要使用到那个字库序号就切换就行多线程有自己的字库序号副本互不影响各自切换",
    "url": "/docs/huoshan/category_27",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "找字模块(FS) - HD识字.切换字库序号",
    "content": "【功能描述】 切换当前像素识字的字库文件(支持多线程) 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好 运行起来了就不能设置否则冲突 切换字库文件可以在运行的时候切换,而HCFS_SetDictFile设置字库文件必须在初始化阶段中进行！ 对于多线程操作同一个窗口序号的时候,切换字库支持多线程操作,操作前请先在主执行线程中设置字库就行其他副线程(包含主线程)就只需要切换就行",
    "url": "/docs/huoshan/category_27",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "找字模块(FS) - HD识字.获取当前字库",
    "content": "【功能描述】 获取当前线程的加载后的字库文件信息(支持多线程) 【备注】 json: \\\"{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":ret,\\\"info\\\":info}]}\\\" info:窗口索引,当前字库索引,加载了字库文件数量,(加载的字库序号,对应的字条数目)|...如:info:0,1,3,(1,55)|(2,55)|(3,55)| 注意返回的是当前线程的字库信息",
    "url": "/docs/huoshan/category_27",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "找字模块(FS) - HD识字.获取当前字库序号",
    "content": "【功能描述】 获取当前线程绑定的字库索引(支持多线程) 【备注】 返回大于等于0的值是当前线程绑定的字库索引",
    "url": "/docs/huoshan/category_27",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "找字模块(FS) - HD识字.单字符找字",
    "content": "【功能描述】 在客户区范围内找字(只支持单字符串并且是单字符字库) 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->0,x1,y1,w1,h1,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/huoshan/category_27",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "找字模块(FS) - HD识字.单字符找字Ex",
    "content": "【功能描述】 在客户区范围内找字(支持多字符串并且是单字符字库) 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/huoshan/category_27",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "找字模块(FS) - HD识字.单字符找字Exx",
    "content": "【功能描述】 在客户区范围内找字(支持多字符串并且是单字符字库)找到一个就返回 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/huoshan/category_27",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "找字模块(FS) - HD识字.列表单列找字从文件",
    "content": "【功能描述】 单字符串找(原图从文件) 字库是字符串 例如:洛阳多行返回多个坐标一行只找一列(一次) 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->0,x1,y1,w,h,sim|0,x2,y2,w,h,sim|0,x3,y2,w,h,sim|... 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/huoshan/category_27",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "找字模块(FS) - HD识字.列表单列找字从内存",
    "content": "【功能描述】 单字符串找(原图从内存) 字库是字符串 例如:洛阳多行返回多个坐标一行只找一列(一次) 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->0,x1,y1,w,h,sim|0,x2,y2,w,h,sim|0,x3,y2,w,h,sim|... 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/huoshan/category_27",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "找字模块(FS) - HD识字.列表多列找字从文件",
    "content": "【功能描述】 单字符串找(原图从文件) 字库是字符串 例如:洛阳多行多列返回多个坐标 一行找多列(多次)找多行 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->0,x1,y1,w,h,sim|0,x2,y2,w,h,sim|0,x3,y2,w,h,sim|... 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/huoshan/category_27",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "找字模块(FS) - HD识字.列表多列找字从内存",
    "content": "【功能描述】 单字符串找(原图从内存) 字库是字符串 例如:洛阳多行多列返回多个坐标 一行找多列(多次)找多行 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->0,x1,y1,w,h,sim|0,x2,y2,w,h,sim|0,x3,y2,w,h,sim|... 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/huoshan/category_27",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "找字模块(FS) - HD识字.自动识字",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到一个就返回 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号(0开始),x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/huoshan/category_27",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "找字模块(FS) - HD识字.自动识字从文件",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到一个就返回 可以通过指定图片来获取截图数据其他功能和HCFS_FindStrMutilsAuto一致 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/huoshan/category_27",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "找字模块(FS) - HD识字.自动识字从内存",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到一个就返回 可以通过指定图片来获取截图数据其他功能和HCFS_FindStrMutilsAuto一致 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/huoshan/category_27",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "找字模块(FS) - HD识字.自动识字Ex",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到全部或仅仅找一个 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号(0开始),x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/huoshan/category_27",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "找字模块(FS) - HD识字.自动识字从文件Ex",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到全部或仅仅找一个 可以通过指定图片来获取截图数据其他功能和HCFS_FindStrMutilsAuto一致 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/huoshan/category_27",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "找字模块(FS) - HD识字.自动识字从内存Ex",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到全部或仅仅找一个 可以通过指定图片来获取截图数据其他功能和HCFS_FindStrMutilsAuto一致 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/huoshan/category_27",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "找字模块(FS) - HD识字.多字符识字",
    "content": "【功能描述】 单字符串找字库是字符串例如:洛阳 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 在客户区范围内找字符串(只支持单字符串),同时字库是字符串 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/huoshan/category_27",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "找字模块(FS) - HD识字.多字符识字Ex",
    "content": "【功能描述】 多字符串找字库是字符串例如:洛阳|北京|广州 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 在客户区范围内找字符串(只支持单字符串),同时字库是字符串 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/huoshan/category_27",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "找字模块(FS) - HCFS_FindStrMutilsExx",
    "content": "【功能描述】 多字符串找字库是字符串例如:洛阳|北京|广州找到一个就返回 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 在客户区范围内找字符串(只支持单字符串),同时字库是字符串 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/huoshan/category_27",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "找字模块(FS) - HD识字.Ocr",
    "content": "【功能描述】 在客户区范围内识别字 字库是字符串或单字 拼接+字符串都支持 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"info\\\":BBB} AAA:0未找到1找到 BBB:json数组如:[{\\\"x\\\":0,\\\"y\\\":0,\\\"text\\\":“NULL”}]表示未找到类似这样[{\\\"x\\\":123,\\\"y\\\":456,\\\"text\\\":\\\"洛阳\\\"},{\\\"x\\\":654,\\\"y\\\":987,\\\"text\\\":\\\"洱海\\\"}]表示找到了 格式化字符串: 未找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":[{\\\\\"x\\\\\":0,\\\\\"y\\\\\":0,\\\\\"text\\\\\":\\\\\"NULL\\\\\"}]}\\\" 找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":%s}\\\" 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/huoshan/category_27",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "找字模块(FS) - HD识字.Ocr从文件",
    "content": "【功能描述】 在客户区范围内识别字 字库是字符串或单字 拼接+字符串都支持 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"info\\\":BBB} AAA:0未找到1找到 BBB:json数组如:[{\\\"x\\\":0,\\\"y\\\":0,\\\"text\\\":“NULL”}]表示未找到类似这样[{\\\"x\\\":123,\\\"y\\\":456,\\\"text\\\":\\\"洛阳\\\"},{\\\"x\\\":654,\\\"y\\\":987,\\\"text\\\":\\\"洱海\\\"}]表示找到了 格式化字符串: 未找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":[{\\\\\"x\\\\\":0,\\\\\"y\\\\\":0,\\\\\"text\\\\\":\\\\\"NULL\\\\\"}]}\\\" 找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":%s}\\\" 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/huoshan/category_27",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "找字模块(FS) - HD识字.Ocr从内存",
    "content": "【功能描述】 在客户区范围内识别字 字库是字符串或单字 拼接+字符串都支持 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"info\\\":BBB} AAA:0未找到1找到 BBB:json数组如:[{\\\"x\\\":0,\\\"y\\\":0,\\\"text\\\":“NULL”}]表示未找到类似这样[{\\\"x\\\":123,\\\"y\\\":456,\\\"text\\\":\\\"洛阳\\\"},{\\\"x\\\":654,\\\"y\\\":987,\\\"text\\\":\\\"洱海\\\"}]表示找到了 格式化字符串: 未找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":[{\\\\\"x\\\\\":0,\\\\\"y\\\\\":0,\\\\\"text\\\\\":\\\\\"NULL\\\\\"}]}\\\" 找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":%s}\\\" 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/huoshan/category_27",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "找字模块(FS) - HD识字.设置水平垂直间距",
    "content": "【功能描述】 设置间距(在识别拼接字和OCR中尤其重要)-丢弃改为每个接口单独设置 【备注】 1.当相邻的字/数字/字母/符号,在间距范围内,才被认为是一个整体(字符串) 2.不明白什么是水平垂直间距请前往查看水平垂直间距解析和案例分析 3.这种对于数字和符号,尤其重要",
    "url": "/docs/huoshan/category_27",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "找字模块(FS) - HD识字.设置11",
    "content": "【功能描述】 设置11行中(同宽)矩形内,是否只有一个字-丢弃改为每个接口单独设置 【备注】 1.如果打开识别速度快,关闭速度慢一点(不影响多少) 2.如果这个i这个字,由2个字符组成'.'和'|' 3.如果打开表示i是一个整体识别,不能拆开识别 4.如果关闭表示i可以拆分成2个字符分别识别",
    "url": "/docs/huoshan/category_27",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "找字模块(FS) - HD识字.设置周围占比",
    "content": "【功能描述】 设置字周围一个像素上下左右的像素占比-丢弃改为每个接口单独设置 【备注】 1.对于那种连体字的情况下占比越高,可能识别的不准确2.这个相当于一个容错率占比3.返回当前设置后的占比4.默认0.1 5.这种对于数字和符号,尤其重要,可以准确的提高识别率,越小的字效果越好",
    "url": "/docs/huoshan/category_27",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "智能识图模块(FI) - HCFI_FindImage",
    "content": "【功能描述】 识图(返回的是圆型的圆点) 【备注】 图片越多耗时多长 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x\\\":XX,\\\"y\\\":YY},{\\\"x\\\":XX,\\\"y\\\":YY},{\\\"x\\\":XX,\\\"y\\\":YY}],\\\"time\\\":ZZZ} 每张图会有1个坐标点(圆点) AAA:表示找到几个XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置",
    "url": "/docs/huoshan/category_28",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "智能识图模块(FI) - HCFI_FindImageEx",
    "content": "【功能描述】 识图(返回的是矩形左上角和右下角) 【备注】 图片越多耗时多长 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY},{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY}],\\\"time\\\":ZZZ} 每张图会有2个坐标点(左上角+右下角) AAA:表示找到几个XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置",
    "url": "/docs/huoshan/category_28",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "智能识图模块(FI) - HCFI_FindRangeImage",
    "content": "【功能描述】 范围内识图 【备注】 图片越多耗时多长 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x\\\":XX,\\\"y\\\":YY},{\\\"x\\\":XX,\\\"y\\\":YY},{\\\"x\\\":XX,\\\"y\\\":YY}]}type==0</STRONG> 每张图会有1个坐标点(圆点) {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY},{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY}]}type==1</STRONG> 每张图会有2个坐标点(左上角+右下角) AAA:表示找到几个XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置",
    "url": "/docs/huoshan/category_28",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "智能识图模块(FI) - HD智能识图.Tem找图从文件",
    "content": "【功能描述】 从文件中加载截图数据并识图(返回的是矩形左上角和右下角) 【备注】 图片越多耗时多长 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY},{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY}],\\\"time\\\":ZZZ} 每张图会有2个坐标点(左上角+右下角) AAA:表示找到几个XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0max:置信度time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置",
    "url": "/docs/huoshan/category_28",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "智能识图模块(FI) - HD智能识图.Tem找图从内存",
    "content": "【功能描述】 从内存中加载截图数据并识图(返回的是矩形左上角和右下角) 【备注】 图片越多耗时多长 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"i\\\":index,\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY\\\"max\\\":0.0f},{\\\"i\\\":index,\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY\\\"max\\\":0.0f}]}每张图对应会有图片索引+2个坐标点(左上角+右下角)+置信度(max)index:图片集合指定的索引(0开始)如:\\\"洛阳.bmp|洱海.bmp|\\\"(洛阳.bmp)索引就是0AAA:表示找到几个(真正的找到数量)XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0max:置信度time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置",
    "url": "/docs/huoshan/category_28",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "智能识字模块(RC) - HCRC_InitRCServer",
    "content": "【功能描述】 初始化识别服务器 【备注】 无",
    "url": "/docs/huoshan/category_29",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "智能识字模块(RC) - HCRC_OpenRCServer",
    "content": "【功能描述】 打开识别服务器 【备注】 无",
    "url": "/docs/huoshan/category_29",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "智能识字模块(RC) - HCRC_StopRCServer",
    "content": "【功能描述】 停止识别服务器 【备注】 无",
    "url": "/docs/huoshan/category_29",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "智能识字模块(RC) - HCRC_SwitchRCServer",
    "content": "【功能描述】 切换识字服务:主要针对语言字体文件的切换 【备注】 内部实现原理:先停止之前的服务(HCRC_StopRCServer)重新初始化(HCRC_InitRCServer)然后重新开启(HCRC_OpenRCServer)",
    "url": "/docs/huoshan/category_29",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "智能识字模块(RC) - HCRC_RecognitionChar",
    "content": "【功能描述】 智能识字 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"image\\\":XXX},{\\\"image\\\":YYY}],\\\"time\\\":ZZZ}XXX->图片识别后的结果(字符串)每一个{\\\"image\\\":XXX}是一个识别的字符串,对应<参数:图片名字集合>索引 XXX:格式 \\\"%s,%0.2f,%d,%d,%d,%d|\\\" 字符串1,置信度1,x1,y1,x2,y2|字符串2,置信度2,x1,y1,x2,y2|...|",
    "url": "/docs/huoshan/category_29",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "智能识字模块(RC) - HCRC_RecognitionCharEx",
    "content": "【功能描述】 指定范围内智能识字 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"image\\\":XXX},{\\\"image\\\":YYY}],\\\"time\\\":ZZZ}XXX->图片识别后的结果(字符串)每一个{\\\"image\\\":XXX}是一个识别的字符串,对应<参数:图片名字集合>索引 XXX:格式 \\\"%s,%0.2f,%d,%d,%d,%d|\\\" 字符串1,置信度1,x1,y1,x2,y2|字符串2,置信度2,x1,y1,x2,y2|...|",
    "url": "/docs/huoshan/category_29",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "智能识字模块(RC) - HCRC_RecognitionCharByMemory",
    "content": "【功能描述】 从内存图片数据中范围内智能识字 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"image\\\":XXX},{\\\"image\\\":YYY}],\\\"time\\\":ZZZ}XXX->图片识别后的结果(字符串)每一个{\\\"image\\\":XXX}是一个识别的字符串,对应<参数:图片名字集合>索引. XXX:格式 \\\"%s,%0.2f,%d,%d,%d,%d|\\\" 字符串1,置信度1,x1,y1,x2,y2|字符串2,置信度2,x1,y1,x2,y2|...|",
    "url": "/docs/huoshan/category_29",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "后台键鼠(MKB) - HD键鼠.绑定",
    "content": "【功能描述】 绑定窗口 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/huoshan/category_30",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "后台键鼠(MKB) - HD键鼠.绑定Ex",
    "content": "【功能描述】 绑定窗口 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/huoshan/category_30",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "后台键鼠(MKB) - HD键鼠.模式绑定Ex",
    "content": "【功能描述】 绑定窗口(扩展接口) 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/huoshan/category_30",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "后台键鼠(MKB) - HD键鼠.切换绑定",
    "content": "【功能描述】 切换绑定到所属子窗口的句柄上 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/huoshan/category_30",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "后台键鼠(MKB) - HD键鼠.切换绑定Ex",
    "content": "【功能描述】 切换绑定到所属子窗口的句柄上 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/huoshan/category_30",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "后台键鼠(MKB) - HD键鼠.切换模式绑定Ex",
    "content": "【功能描述】 切换绑定窗口(扩展接口) 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/huoshan/category_30",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "后台键鼠(MKB) - HD键鼠.暂停绑定",
    "content": "【功能描述】 暂停/恢复后台绑定 【备注】 无",
    "url": "/docs/huoshan/category_30",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "后台键鼠(MKB) - HD键鼠.解绑",
    "content": "【功能描述】 解绑窗口 【备注】 无",
    "url": "/docs/huoshan/category_30",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "后台键鼠(MKB) - HD键鼠.右键双击",
    "content": "【功能描述】 鼠标右键双击 【备注】 无",
    "url": "/docs/huoshan/category_30",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "后台键鼠(MKB) - HCMKB_KeyPress(A/W)",
    "content": "【功能描述】 连续按键输入字符串(连续单个按键) 【备注】 无",
    "url": "/docs/huoshan/category_30",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "后台键鼠(MKB) - HCMKB_SendString(2)",
    "content": "【功能描述】 发送Ascii字符串 【备注】 无",
    "url": "/docs/huoshan/category_30",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "后台键鼠(MKB) - HD键鼠.剪切板发送随机文本",
    "content": "【功能描述】 发送剪切板字符串内容到窗口 【备注】 无",
    "url": "/docs/huoshan/category_30",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "后台键鼠(MKB) - HD键鼠.设置剪切板文本",
    "content": "【功能描述】 发送随机名字,从2个文本(hf.txt和he.txt)中各获取一个字 【备注】 hf.txt和he.txt放在程序(.exe)同目录下,文件编码为utf-8随机获取一个姓和一个名组成一个词",
    "url": "/docs/huoshan/category_30",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "后台键鼠(MKB) - HD键鼠.获取剪切板字符串",
    "content": "【功能描述】 设置剪切板字符串 【备注】 该接口无序窗口序号",
    "url": "/docs/huoshan/category_30",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "后台键鼠(MKB) - HD键鼠.句柄发送文本",
    "content": "【功能描述】 获取剪切板字符串 【备注】 无",
    "url": "/docs/huoshan/category_30",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "后台键鼠(MKB) - HD键鼠.句柄发送按键按下",
    "content": "【功能描述】 发送Ascii字符串,部分游戏需要激活窗口！（可以不用通讯调用） 【备注】 注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！",
    "url": "/docs/huoshan/category_30",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "后台键鼠(MKB) - HD键鼠.句柄发送按键弹起",
    "content": "【功能描述】 按下发送键码到指定窗口（可以不用通讯调用） 【备注】 注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！",
    "url": "/docs/huoshan/category_30",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "后台键鼠(MKB) - HD键鼠.句柄发送按键",
    "content": "【功能描述】 弹起发送键码到指定窗口（可以不用通讯调用） 【备注】 注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！",
    "url": "/docs/huoshan/category_30",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "后台键鼠(MKB) - HD键鼠.句柄发送清空文本",
    "content": "【功能描述】 按下并弹起发送键码到指定窗口（可以不用通讯调用） 【备注】 注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！",
    "url": "/docs/huoshan/category_30",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "后台键鼠(MKB) - HD键鼠.设置鼠标轨迹参数",
    "content": "【功能描述】 可以清空子窗口的内容（可以不用通讯调用） 【备注】 注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！",
    "url": "/docs/huoshan/category_30",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "后台键鼠(MKB) - HD键鼠.获取鼠标位置",
    "content": "【功能描述】 设置鼠标轨迹参数(当移动鼠标开启轨迹生效) 【备注】 无",
    "url": "/docs/huoshan/category_30",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "后台键鼠(MKB) - HCMKB_GetMousePos",
    "content": "【功能描述】 获取后台/前台鼠标位置 【备注】 无",
    "url": "/docs/huoshan/category_30",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "后台截图模块(CS) - HD截图.设置识别模式",
    "content": "【功能描述】 打开截图 【备注】 无",
    "url": "/docs/huoshan/category_31",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "后台截图模块(CS) - HD截图.打开",
    "content": "【功能描述】 打开截图 【备注】 无",
    "url": "/docs/huoshan/category_31",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "后台截图模块(CS) - HD截图.打开Ex",
    "content": "【功能描述】 打开截图(和HCCS_CloseCSEx是一组接口) 【备注】 1.前台和后台模式,可以随意切换不用调用关闭HCCS_CloseCSEx再开启！！！！！内置处理了 截图模式: typedefenumCAPTURETYPE{\\n无CAPTURETYPE_NONE=0,\\n这个不操作\\nGDICAPTURETYPE_GDI=1,\\n这个直接客户端操作对于浏览器(谷歌等)记得把图像加速关掉\\n32CAPTURETYPE_D3D9_1_x86=2,\\nUECAPTURETYPE_D3D9_2_x86=3,\\nU3DCAPTURETYPE_D3D9_3_x86=4,\\nRGBX\\nD3D11CAPTURETYPE_D3D11_1_x86=5,\\nUECAPTURETYPE_D3D11_2_x86=6,\\nU3DCAPTURETYPE_D3D11_3_x86=7,\\nRGBXD3D11游戏通用\\nD3D12CAPTURETYPE_D3D12_1_x86=70,\\nUECAPTURETYPE_D3D12_2_x86=71,\\nU3DCAPTURETYPE_D3D12_3_x86=72,\\nRGBXD3D12游戏通用\\n64\\nD3D9CAPTURETYPE_D3D9_1_x64=8,\\nUECAPTURETYPE_D3D9_2_x64=9,\\nU3DCAPTURETYPE_D3D9_3_x64=10,\\nRGBXD3D9游戏通用\\nD3D11CAPTURETYPE_D3D11_1_x64=11,\\nUECAPTURETYPE_D3D11_2_x64=12,\\nU3DCAPTURETYPE_D3D11_3_x64=13,\\nRGBXD3D11游戏通用\\nD3D12CAPTURETYPE_D3D12_1_x64=14,\\nUED3D12CAPTURETYPE_D3D12_2_x64=15,\\nU3DD3D12CAPTURETYPE_D3D12_3_x64=16,\\nRGBXD3D12D3D12游戏通用\\n32CAPTURETYPE_OPENGL_1_x86=20,\\n占位CAPTURETYPE_OPENGL_2_x86=21,\\nGL_BGRA模拟器CAPTURETYPE_OPENGL_3_x86=22,\\nGL_BGRA模拟器\\n64CAPTURETYPE_OPENGL_1_x64=30,\\n占位CAPTURETYPE_OPENGL_2_x64=31,\\nGL_BGRA模拟器CAPTURETYPE_OPENGL_3_x64=32,\\nGL_BGRA模拟器\\n定制CAPTURETYPE_D3D9_Steam_x86=40,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用CAPTURETYPE_D3D11_Steam_x86=41,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用CAPTURETYPE_D3D9_Steam_x64=42,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用CAPTURETYPE_D3D11_Steam_x64=43,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用\\nNC模式CAPTURETYPE_D3D9_NC_x86=44,\\nNC游戏CAPTURETYPE_D3D11_NC_x86=45,\\nNC游戏CAPTURETYPE_D3D9_NC_x64=46,\\nNC游戏CAPTURETYPE_D3D11_NC_x64=47,\\nNC游戏\\nCAPTURETYPE_NORMAL=50,\\n这个前台模式\\nCAPTURETYPE_D3D12_Steam_x86=60,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用CAPTURETYPE_D3D12_Steam_x64=61,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用\\nCAPTURETYPE_D3D12_NC_x86=62,\\nNC游戏D3D12CAPTURETYPE_D3D12_NC_x64=63,\\nNC游戏D3D12 }CAPTURETYPE;额外说明:",
    "url": "/docs/huoshan/category_31",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "后台截图模块(CS) - HD截图.关闭",
    "content": "【功能描述】 关闭截图 【备注】 无",
    "url": "/docs/huoshan/category_31",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "后台截图模块(CS) - HD截图.获取截图数据",
    "content": "【功能描述】 关闭截图(和HCCS_OpenCSEx是一组接口) 【备注】 无",
    "url": "/docs/huoshan/category_31",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "后台截图模块(CS) - HD截图.打开查看器",
    "content": "【功能描述】 获取截图数据 【备注】 json:{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":AAA,\\\"addr\\\":XXX,\\\"eleSize\\\":YYY,\\\"len\\\":ZZZ,\\\"w\\\":1222,\\\"h\\\":699}]}AAA:调用接口返回值 XXX:图片二进制数据首地址(不是bmp数据是MYA8R8G8B8结构体缓冲区首地址)可以拿到这个缓冲区自行转换各种图片格式数据 YYY:MYA8R8G8B8结构体数量 ZZZ:字节大小(图片数据=MYA8R8G8B8* YYY) w:宽度 h:高度注意:拿到图片地址数据XXX使用后记得释放(HCCS_FreeArray) 图片数据地址不使用了记得释放掉HCCS_FreeMemPool调用此接口",
    "url": "/docs/huoshan/category_31",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "后台截图模块(CS) - HD截图.关闭查看器",
    "content": "【功能描述】 打开查看器 【备注】 无",
    "url": "/docs/huoshan/category_31",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "后台截图模块(CS) - HD截图.截图",
    "content": "【功能描述】 关闭查看器 【备注】 无",
    "url": "/docs/huoshan/category_31",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "后台截图模块(CS) - HD截图.获取BMP截图数据",
    "content": "【功能描述】 截图数据并保存为BMP图片文件 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":AAA,\\\"w\\\":1222,\\\"h\\\":699}]}",
    "url": "/docs/huoshan/category_31",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "后台截图模块(CS) - HD截图.释放数据",
    "content": "【功能描述】 获取当前截图后的BMP数据 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"addr\\\":XXX,\\\"eleSize\\\":YYY,\\\"allLen\\\":ZZZ,\\\"w\\\":1222,\\\"h\\\":699}]} XXX是BMP图片二进制数据首地址 YYY是MYA8R8G8B8结构体数量 ZZZ:BMP图片数据大小(真实的BMP图片数据:54+像素数据) 图片数据地址不使用了记得释放掉HCCS_FreeMemPool调用此接口",
    "url": "/docs/huoshan/category_31",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "后台截图模块(CS) - HCCS_GetCaptureBmpRangeData",
    "content": "【功能描述】 获取当前截图后的BMP数据(指定范围) 【备注】 如果想获取全图数据:xywh可以分别为-1也可以直接调用HCCS_GetCaptureBmpData json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"addr\\\":XXX,\\\"eleSize\\\":YYY,\\\"allLen\\\":ZZZ,\\\"w\\\":1222,\\\"h\\\":699}]} XXX是BMP图片二进制数据首地址 YYY是MYA8R8G8B8结构体数量 ZZZ:BMP图片数据大小(真实的BMP图片数据:54+像素数据) 图片数据地址不使用了记得释放掉HCCS_FreeMemPool调用此接口",
    "url": "/docs/huoshan/category_31",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "后台截图模块(CS) - HD截图.释放内存池数据",
    "content": "【功能描述】 释放内存 【备注】 释放内存该内存是使用new[]申请的内存",
    "url": "/docs/huoshan/category_31",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "后台截图模块(CS) - HD截图.是否后台缓存失败",
    "content": "【功能描述】 释放内存,内存池操作释放内存 【备注】 我们获取了截图数据不需要了都需要调用这个接口来释放掉,防止内存泄露 注意:该接口是释放【使用内存池申请的内存地址】的地址,与HCCS_FreeArray不一样 那个窗口序号返回申请的地址就用那个窗口序号释放",
    "url": "/docs/huoshan/category_31",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "后台截图模块(CS) - HCCS_IsCaptureValid",
    "content": "【功能描述】 后台截图缓存获取失败判断接口 【备注】 无",
    "url": "/docs/huoshan/category_31",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "黑屏优化模块 - HD黑屏.打开",
    "content": "【功能描述】 打开黑屏 【备注】 无",
    "url": "/docs/huoshan/category_32",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "黑屏优化模块 - HD黑屏.设置模型范围",
    "content": "【功能描述】 设置模型序号的过滤范围 【备注】 可以适当调整最小或者最大的序号来过滤模型,来实现黑屏,同时还支持图色识别",
    "url": "/docs/huoshan/category_32",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "黑屏优化模块 - HD黑屏.关闭",
    "content": "【功能描述】 关闭黑屏 【备注】 无",
    "url": "/docs/huoshan/category_32",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "CPU优化模块() - HD优化.开启CPU",
    "content": "【功能描述】 打开CPU优化 【备注】 无",
    "url": "/docs/huoshan/category_33",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "CPU优化模块() - HD优化.设置FPS",
    "content": "【功能描述】 设置帧数(绑定dx.public.down.cpu后台属性有效) 【备注】 并非实际的帧数,这里只是一个参考值,内置默认为30 动态优化调试帧数的(自动计算帧率)",
    "url": "/docs/huoshan/category_33",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "CPU优化模块() - HD优化.设置延迟",
    "content": "【功能描述】 设置帧数(绑定dx.public.down.cpu后台属性有效) 【备注】 如果调用了HC_HookMainThread挂接主线程,同时又调用了本接口,那么会动态(根据实际动态计算正数来)修改主线程调用CALL的检查频率",
    "url": "/docs/huoshan/category_33",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "CPU优化模块() - HD优化.关闭CPU",
    "content": "【功能描述】 关闭CPU优化 【备注】 无",
    "url": "/docs/huoshan/category_33",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "系统模块(SYS) - HD系统.是否开启字体平滑",
    "content": "【功能描述】 检查字体是否开启字体平滑 【备注】 无",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "系统模块(SYS) - HD系统.关闭字体平滑",
    "content": "【功能描述】 关闭字体平滑 【备注】 无",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "系统模块(SYS) - HD系统.打开字体平滑",
    "content": "【功能描述】 打开字体平滑 【备注】 无",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "系统模块(SYS) - HD系统.是否开启UAC",
    "content": "【功能描述】 检查当前系统是否开启了UAC(用户控制) 【备注】 无",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "系统模块(SYS) - HD系统.设置UAC",
    "content": "【功能描述】 设置当前系统的UAC(用户控制)开关 【备注】 无",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "系统模块(SYS) - HD系统.延迟",
    "content": "【功能描述】 延迟 【备注】 不会堵塞主线程",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "系统模块(SYS) - HD系统.随机延迟",
    "content": "【功能描述】 在随机范围内延迟 【备注】 不会堵塞主线程",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "系统模块(SYS) - HD系统.关闭系统",
    "content": "【功能描述】 关闭系统 【备注】 无",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "系统模块(SYS) - HD系统.关闭屏保",
    "content": "【功能描述】 关闭屏保 【备注】 无",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "系统模块(SYS) - HD系统.关闭电源管理",
    "content": "【功能描述】 关闭电源管理,不进入睡眠 【备注】 无",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "系统模块(SYS) - HD系统.恢复最近系统修改",
    "content": "【功能描述】 恢复系统上次的修改 【备注】 如果中控软件运行的时候修改了系统设置 那么这个最好在中控程序退出的时候调用",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "系统模块(SYS) - HD系统.禁止休眠",
    "content": "【功能描述】 设置当前的电源设置(禁止关闭显示器,禁止关闭硬盘,禁止睡眠和待机) 【备注】 无",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "系统模块(SYS) - HD系统.获取路径",
    "content": "【功能描述】 获取路径 【备注】 无",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "系统模块(SYS) - HD系统.获取CPU类型",
    "content": "【功能描述】 获取CPU类型 【备注】 无",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "系统模块(SYS) - HD系统.获取当前CPU使用率",
    "content": "【功能描述】 获取CPU使用率 【备注】 无",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "系统模块(SYS) - HD系统.获取CPU使用率",
    "content": "【功能描述】 获取指定进程的CPU使用率 【备注】 返回值是整数百分比 返回字符串字符串是(含小数百分比)",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "系统模块(SYS) - HD系统.获取内存使用率",
    "content": "【功能描述】 获取指定进程的内存使用率 【备注】 无",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "系统模块(SYS) - HD系统.获取磁盘序列号",
    "content": "【功能描述】 获取磁盘序列号 【备注】 进程要有管理员权限才能获取成功",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "系统模块(SYS) - HD系统.获取显卡信息",
    "content": "【功能描述】 获取显卡信息 【备注】 无",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "系统模块(SYS) - HD系统.获取DPI",
    "content": "【功能描述】 获取DPI 【备注】 无",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "系统模块(SYS) - HD系统.启动EXE",
    "content": "【功能描述】 运行指定路径下的exe 【备注】 这个不支持启动参数",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "系统模块(SYS) - HD系统.执行DOS指令取返回",
    "content": "【功能描述】 获取CMD命令形式的打开进程并获取返回输出",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "系统模块(SYS) - HD系统.管理员打开进程",
    "content": "【功能描述】 获取CMD命令形式的打开进程(支持管理员打开)(扩展版本) 【备注】 内部是调用ShellExecuteExA",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "系统模块(SYS) - HD系统.启动EXE带参数",
    "content": "【功能描述】 运行指定路径下的exe这个支持启动参数 【备注】 这个支持启动参数",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "系统模块(SYS) - HD系统.启动EXE带参数Ex",
    "content": "【功能描述】 运行指定路径下的exe(HCSYS_RunAppEx的扩展版本)这个支持启动参数同时指定了当前进程的路径 【备注】 这个支持启动参数",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "系统模块(SYS) - HD系统.获取磁盘特征码",
    "content": "【功能描述】 获取磁盘特征码 【备注】 无",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "系统模块(SYS) - HD系统.获取CPU特征码",
    "content": "【功能描述】 获取CPU特征码 【备注】 无",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "系统模块(SYS) - HD系统.获取BOIS制造日期",
    "content": "【功能描述】 获取BOIS制造日期 【备注】 无",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_29",
    "title": "系统模块(SYS) - HD系统.获取机器码",
    "content": "【功能描述】 获取机器码(包含网卡) 【备注】 无",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_30",
    "title": "系统模块(SYS) - HD系统.获取机器码无网卡",
    "content": "【功能描述】 获取机器码(不包含网卡) 【备注】 无",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_31",
    "title": "系统模块(SYS) - HD系统.获取网络时间",
    "content": "【功能描述】 获取网络时间 【备注】 北京时间 固定内置服务器IP",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_32",
    "title": "系统模块(SYS) - HD系统.获取网络时间Ex",
    "content": "【功能描述】 获取网络时间(指定服务器IP获取) 【备注】 北京时间",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_33",
    "title": "系统模块(SYS) - HD系统.获取系统版本",
    "content": "【功能描述】 获取系统版本 【备注】 无",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_34",
    "title": "系统模块(SYS) - HD系统.获取系统类型",
    "content": "【功能描述】 获取系统类型 【备注】 无",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_35",
    "title": "系统模块(SYS) - HD系统.开机经过时间",
    "content": "【功能描述】 获取开机到现在过经过的时间(毫秒) 【备注】 无",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_36",
    "title": "系统模块(SYS) - HD系统.当前进程是否X64",
    "content": "【功能描述】 当前进程是否是64位 【备注】 无",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_37",
    "title": "系统模块(SYS) - HD系统.是否支持vt",
    "content": "【功能描述】 是否支持vt 【备注】 可以在Bios中开启vt,如果不支持就没办法了",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_38",
    "title": "系统模块(SYS) - HD系统.获取屏幕的色深",
    "content": "【功能描述】 获取屏幕的色深(24/32之类的) 【备注】 无",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_39",
    "title": "系统模块(SYS) - HD系统.设置屏幕的色深",
    "content": "【功能描述】 设置屏幕的色深 【备注】 无",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_40",
    "title": "系统模块(SYS) - HD系统.获取屏幕高度",
    "content": "【功能描述】 获取屏幕高度 【备注】 无",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_41",
    "title": "系统模块(SYS) - HD系统.获取屏幕宽度",
    "content": "【功能描述】 获取屏幕宽度 【备注】 无",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_42",
    "title": "系统模块(SYS) - HD系统.设置屏幕分辨率",
    "content": "【功能描述】 设置屏幕分辨率 【备注】 无",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_43",
    "title": "系统模块(SYS) - HD系统.获取CMD命令返回值",
    "content": "【功能描述】 获取CMD命令返回值(字符串) 【备注】 无",
    "url": "/docs/huoshan/category_34",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "自定义插件模块(Com) - HD插件.加载插件",
    "content": "【功能描述】 添加自定义组件 【备注】 自定义模块需要导入包并来实现接口绑定",
    "url": "/docs/huoshan/category_35",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "自定义插件模块(Com) - HD插件.卸载插件",
    "content": "【功能描述】 卸载指定插件 【备注】 自定义模块需要导入包并来实现接口绑定",
    "url": "/docs/huoshan/category_35",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "自定义插件模块(Com) - HD插件.CALL",
    "content": "【功能描述】 调用自定义组件中的接口 【备注】 自定义模块需要导入包并来实现接口绑定 参考:X86X64自定义插件接口说明",
    "url": "/docs/huoshan/category_35",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "自定义插件模块(Com) - HD插件.CALLEx",
    "content": "【功能描述】 调用自定义组件中的接口(可传递任意参数类型) 【备注】 自定义模块需要导入包并来实现接口绑定 注意:传递的buffer字符串在自定义插件接口 typedefHDComRet(__stdcall* HDComFunType)(__int64 retStrAddr,__int64 rcx,__int64 rdx,__int64 r8,__int64 r9,__int64 l5,__int64 l6); 第一个参数retStrAddr作为字符串首地址(char* )能拿到 如: C++代码演示: char* info=(char* )retStrAddr; 参考:X86X64自定义插件接口说明",
    "url": "/docs/huoshan/category_35",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "插件包装器 - HCCOM_Load",
    "content": "【功能描述】 加载组件 【备注】 组件名为当前组件文件的名字(不包含后缀!,如果组件文件无后缀可忽视) 如:hdmad.dll所对应的组件名必须是hdmad 头文件: HDLoader.h 静态库: HDPacker.librelease版本 HDPackerd.libdebug版本",
    "url": "/docs/huoshan/category_36",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "插件包装器 - HCCOM_Register",
    "content": "【功能描述】 注册自定义组件中的接口 【备注】 内置数据初始化函数接口名字:HDDataInit(接口类型是HDComFunType)HDDataInit初始化函数会在加载组件的时候首次调用以便于完成对相关组件数据的初始化(比如:基地址相关表达式的获取)如果需要初始化就自己写一个名字叫做HDDataInit的函数,类型为HDComFunType,并调用HCCOM_Register 头文件: HDLoader.h 静态库: HDPacker.librelease版本 HDPackerd.libdebug版本 参考:X86X64自定义插件接口说明",
    "url": "/docs/huoshan/category_36",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "插件包装器 - HCCOM_NotifyToTarget",
    "content": "【功能描述】 自定义模块通知目标进程接口 【备注】 内置数据初始化函数接口名字:HDDataInit(接口类型是HDComFunType)HDDataInit初始化函数会在加载组件的时候首次调用以便于完成对相关组件数据的初始化(比如:基地址相关表达式的获取)如果需要初始化就自己写一个名字叫做HDDataInit的函数,类型为HDComFunType,并调用HCCOM_Register 头文件: HDLoader.h 静态库: HDPacker.librelease版本 HDPackerd.libdebug版本",
    "url": "/docs/huoshan/category_36",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "插件包装器 - HCCOM_NotifyToController",
    "content": "【功能描述】 自定义模块通知中控进程接口 【备注】 内置数据初始化函数接口名字:HDDataInit(接口类型是HDComFunType)HDDataInit初始化函数会在加载组件的时候首次调用以便于完成对相关组件数据的初始化(比如:基地址相关表达式的获取)如果需要初始化就自己写一个名字叫做HDDataInit的函数,类型为HDComFunType,并调用HCCOM_Register 头文件: HDLoader.h 静态库: HDPacker.librelease版本 HDPackerd.libdebug版本",
    "url": "/docs/huoshan/category_36",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "插件包装器 - HCCOM_GetRetJson",
    "content": "【功能描述】 获取自定义模块通知中控进程返回的字符串结果 【备注】 返回的字符串是自定义的 在中控中自己设置的事件处理回调函数中设置返回 头文件: HDLoader.h 静态库: HDPacker.librelease版本 HDPackerd.libdebug版本",
    "url": "/docs/huoshan/category_36",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "插件包装器 - HCCOM_FindCode",
    "content": "【功能描述】 特征码查找 【备注】 无",
    "url": "/docs/huoshan/category_36",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "插件包装器 - HCCOM_PrintLog",
    "content": "【功能描述】 是否打开debugview调试日志信息 【备注】 返回当前是否开启",
    "url": "/docs/huoshan/category_36",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "插件包装器 - HCCOM_GetVersion",
    "content": "【功能描述】 获取自定义内存插件版本号 【备注】 返回当前是否开启",
    "url": "/docs/huoshan/category_36",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "状态机模块 - HCHD_GetHDStatusControler",
    "content": "【功能描述】 获取控制器有且只有一个 【备注】 拿到控制器对象可以获取或者操作其他组件对象",
    "url": "/docs/huoshan/category_37",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "控制器模块 - HCHD_GetHDController",
    "content": "【功能描述】 获取控制器有且只有一个 【备注】 拿到控制器对象可以获取或者操作其他组件对象",
    "url": "/docs/huoshan/category_38",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "主板机模块[SC] - HD主板机.设置路径",
    "content": "【功能描述】 设置HDScrcpy投屏软件根目录,并重启adb相当于重置一下adb环境 【备注】 设置HDScrcpy投屏软件根目录如:J:\\\\hdscrcpy2.7\\\\默认C:\\\\hdscrcpy2.7\\\\ 软件在群文件或者找管理索取",
    "url": "/docs/huoshan/category_39",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "主板机模块[SC] - HD主板机.重置ADB服务",
    "content": "【功能描述】 重置adb服务 【备注】 无",
    "url": "/docs/huoshan/category_39",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "主板机模块[SC] - HD主板机.查询设备",
    "content": "【功能描述】 查询当前所有可用的设备 【备注】 无 设备号类型:1.emulator-5554/127.0.0.1:5009模拟器Device(-s) 2.01aa8320032fe731手机Device(-d) 3.127.0.0.1:5009tcpipDevice(-e)",
    "url": "/docs/huoshan/category_39",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "主板机模块[SC] - HD主板机.连接设备",
    "content": "【功能描述】 连接设备并通讯窗口序号（需要先初始化中控和登录！！HCHD_LoginHCEnv_Init/HCEnv_InitEx） 【备注】 1.该接口会自动连接指定的设备号 2.同时会进行通讯和重连判断(需要加载HD驱动) 3.无需再通讯 设备号类型:1.emulator-5554/127.0.0.1:5009模拟器Device(-s) 2.01aa8320032fe731手机Device(-d) 3.127.0.0.1:5009tcpipDevice(-e)",
    "url": "/docs/huoshan/category_39",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "虚拟机[VM] - HCVM_Run",
    "content": "【功能描述】 运行虚拟机(管理员运行) 【备注】 指令: D:\\vmwin10>D:\\vm16\\vmrun-Twsstart\\\"D:/vmwin10/Windows10x64.vmx\\\"guilparam D:\\vmwin10>D:\\vm16\\vmrun-Twsstart\\\"D:/vmwin10/Windows10x64.vmx\\\"noguilparam C++案例: autoret=HCVM_Run(0,\\\"D:\\\\vm16\\\\\\\",\\\"D:\\\\vmwin10\\\\Windows10x64.vmx\\\",TRUE,0,0,0);",
    "url": "/docs/huoshan/category_40",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "虚拟机[VM] - HCVM_Rerun",
    "content": "【功能描述】 重启运行虚拟机(管理员运行) 【备注】 指令: D:\\vmwin10>D:\\vm16\\vmrun-Twsrestart\\\"D:/vmwin10/Windows10x64.vmx\\\"guilparam D:\\vmwin10>D:\\vm16\\vmrun-Twsrestart\\\"D:/vmwin10/Windows10x64.vmx\\\"noguilparam C++案例: autoret=HCVM_Rerun(0,\\\"D:\\\\vm16\\\\\\\",\\\"D:\\\\vmwin10\\\\Windows10x64.vmx\\\",m_强制关闭CheckBox.GetCheck(),TRUE,0,0,0);</FONT>",
    "url": "/docs/huoshan/category_40",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "虚拟机[VM] - HCVM_Close",
    "content": "【功能描述】 关闭运行虚拟机(管理员运行) 【备注】 指令: D:\\vmwin10>D:\\vm16\\vmrun-Twsstop\\\"D:/vmwin10/Windows10x64.vmx\\\" D:\\vmwin10>D:\\vm16\\vmrun-Twsstop\\\"D:/vmwin10/Windows10x64.vmx\\\" C++案例: autoret=HCVM_Close(0,\\\"D:\\\\vm16\\\\\\\",\\\"D:\\\\vmwin10\\\\Windows10x64.vmx\\\",m_强制关闭CheckBox.GetCheck(),0,0);",
    "url": "/docs/huoshan/category_40",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "虚拟机[VM] - HCVM_List",
    "content": "【功能描述】 获取当前正在运行的虚拟机路径和总数(管理员运行) 【备注】 无 C++案例: autoret=HCVM_List(\\\"D:\\\\vm16\\\\\\\");",
    "url": "/docs/huoshan/category_40",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "虚拟机[VM] - HCVM_IsStart",
    "content": "【功能描述】 指定虚拟机是否已经开启(管理员运行) 【备注】 无 C++案例: autoret=HCVM_List(\\\"D:\\\\vm16\\\\\\\",\\\"D:/vmwin10/Windows10x64_1.vmx\\\");",
    "url": "/docs/huoshan/category_40",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.获取版本号",
    "content": "【功能描述】 获取DMA服务器版本号 【备注】 返回长整数:如:240401格式:24年-04版本号-01小版本号",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.版本是否一致",
    "content": "【功能描述】 判断HD插件的DMA接口和DMA服务器接口版本是否一致",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.开启服务器",
    "content": "【功能描述】 开启DMA服务器 【备注】 服务器在群下载或者官网下载 兼容指定自定义进程名(全路径\\\\XXXX.exe)XXXX.exe为自定义进程名不指定进程名表示使用内置进程名(全路径\\\\HDVMDma.exe)不指定路径(当前中控exe根目录\\\\HDVMDma.exe)",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.关闭服务器",
    "content": "【功能描述】 关闭服务器,同时结束进程 【备注】 无",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.服务器是否开启",
    "content": "【功能描述】 服务器是否已经开启 【备注】 循环检查直到服务器开启成功 如果使用HCVMDMA_StartServer开启服务器,不指定IP和端口,则使用的是HCVMDMA_ServerIsStart指定的IP和端口",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.关联虚拟机",
    "content": "【功能描述】 初始化并关联虚拟机 【备注】 需要先开启服务器HCVMDMA_StartServer 内部会自动调用HCEnv_Load接口,使窗口序号和虚拟机进程关联绑定然后初始化虚拟机相关资源 后续就可以使用该窗口虚拟机去操作对应的虚拟机中的进程",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.获取PID",
    "content": "【功能描述】 通过进程名获取PID 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.读地址",
    "content": "【功能描述】 读地址,仅支持1248地址大小 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.读单浮点",
    "content": "【功能描述】 读单浮点数 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.读双浮点",
    "content": "【功能描述】 读双浮点数 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.读字节集",
    "content": "【功能描述】 读字节集 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.写地址",
    "content": "【功能描述】 写地址,仅支持1248地址大小 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.写单浮点",
    "content": "【功能描述】 写单浮点数 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.写双浮点",
    "content": "【功能描述】 写双浮点数 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.写字节集",
    "content": "【功能描述】 写字节集 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.获取函数",
    "content": "【功能描述】 获取函数地址 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.获取主模块",
    "content": "【功能描述】 获取主模块地址 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.获取模块",
    "content": "【功能描述】 获取模块地址 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.获取执行环境X64",
    "content": "【功能描述】 初始化获取一个某个进程(x64)的执行环境句柄 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 支持内置保存执行环境最多可以保存20个进程执行环境,保存策略为->同线程-同虚拟机-指定虚拟机中的进程PID-执行环境-绑定 执行环境句柄解析: 1.可以理解成一个空间可以与物理机进行交互,实现参数传递和调用CALL 2.每次调用都会获取一个全新的执行环境句柄(实现物理机中控多线程调用) 3.物理机中控在一个执行环境句柄只能同时一个线程执行,如果要多线程执行请获取多个执行环境句柄 4.此接口不适合多线程获取,请在初始化最开始把所需要的执行环境句柄的数量初始化好,方便物理机中控多线程中单独分别使用",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.CALLX64",
    "content": "【功能描述】 通过指定一个初进程(x64)的执行环境句柄来执行CALL 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 执行环境句柄解析: 1.可以理解成一个空间可以与物理机进行交互,实现参数传递和调用CALL 2.如果需要参数传递,请自行往excuteEnvAddr+0x8写参数(参数最大缓冲区为0x200字节),同时自己的汇编机器码要引入自己参数的地址",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_ShellCodeInitX86",
    "content": "【功能描述】 初始化获取一个某个进程(x86)的执行环境句柄 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 支持内置保存执行环境最多可以保存20个进程执行环境,保存策略为->同线程-同虚拟机-指定虚拟机中的进程PID-执行环境-绑定 执行环境句柄解析: 1.可以理解成一个空间可以与物理机进行交互,实现参数传递和调用CALL 2.每次调用都会获取一个全新的执行环境句柄(实现物理机中控多线程调用) 3.物理机中控在一个执行环境句柄只能同时一个线程执行,如果要多线程执行请获取多个执行环境句柄 4.此接口不适合多线程获取,请在初始化最开始把所需要的执行环境句柄的数量初始化好,方便物理机中控多线程中单独分别使用",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_RunShellCodeX86",
    "content": "【功能描述】 通过指定一个初进程(x86)的执行环境句柄来执行CALL 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 执行环境句柄解析: 1.可以理解成一个空间可以与物理机进行交互,实现参数传递和调用CALL 2.如果需要参数传递,请自行往excuteEnvAddr+0x8写参数(参数最大缓冲区为0x200字节),同时自己的汇编机器码要引入自己参数的地址",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.搜索特征码x86",
    "content": "【功能描述】 特征码搜索(X86)(指定模块名) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.搜索特征码x86Ex",
    "content": "【功能描述】 特征码搜索(X86)(指定开始地址和搜索大小) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.搜索特征码x64",
    "content": "【功能描述】 特征码搜索(X64)(指定模块名) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.搜索特征码x64Ex",
    "content": "【功能描述】 特征码搜索(X64)(指定开始地址和搜索大小) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.断开虚拟机",
    "content": "【功能描述】 卸载并关闭连接虚拟机 【备注】 与HCVMDMA_Init是一对接口 内部会自动调用HCEnv_UnLoadEx接口,使窗口序号和虚拟机进程断开绑定然后释放虚拟机相关资源 一旦调用,则虚拟机需要被关闭后开启而不是重启PID不能一样",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.获取截图环境",
    "content": "【功能描述】 初始化截图环境 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 小技巧: 1.初始化接口有根据不同虚拟机,失败概率不同,为了提高初始化成功率,可以尝试自启动任务管理器,让系统激活起来,初始化完成就可以把任务管理器关掉了 2.步骤:打开虚拟机-关联虚拟机-检查是否有管理器PID-开始初始化键鼠/截图环境-如果失败3次直接重启虚拟机 3.如图操作自启任务管理器就行 4.支持内置保存截图环境一个虚拟机固定一个,自动判断是否之前初始化过 如果有的虚拟机初始化句柄超时建议:",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_29",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.截图一次",
    "content": "【功能描述】 截图一次(获取一次虚拟机全屏数据到物理机) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_30",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.开启截图",
    "content": "【功能描述】 开启截图(内部会开启一条线程循环调用HCVMDMA_Capture) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_31",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.关闭截图",
    "content": "【功能描述】 关闭截图(内部会关闭之前开启的线程)和HCVMDMA_OpenCapture是一对接口 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_32",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.获取键鼠环境",
    "content": "【功能描述】 初始化键鼠环境 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 小技巧: 1.初始化接口有根据不同虚拟机,失败概率不同,为了提高初始化成功率,可以尝试自启动任务管理器,让系统激活起来,初始化完成就可以把任务管理器关掉了 2.步骤:打开虚拟机-关联虚拟机-检查是否有管理器PID-开始初始化键鼠/截图环境-如果失败3次直接重启虚拟机 3.如图操作自启任务管理器就行 4.支持内置保存键鼠环境一个虚拟机固定一个,自动判断是否之前初始化过 如果有的虚拟机初始化句柄超时建议:",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_33",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.鼠标移动",
    "content": "【功能描述】 鼠标移动(不包含轨迹) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_34",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.左键按下",
    "content": "【功能描述】 鼠标左键按下 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_35",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.左键弹起",
    "content": "【功能描述】 鼠标左键弹起 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_36",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.左键点击",
    "content": "【功能描述】 鼠标左键点击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_37",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.左键双击",
    "content": "【功能描述】 鼠标左键双击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_38",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.中键按下",
    "content": "【功能描述】 鼠标中键按下 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_39",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.中键弹起",
    "content": "【功能描述】 鼠标中键弹起 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_40",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.中键点击",
    "content": "【功能描述】 鼠标中键点击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_41",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.中键双击",
    "content": "【功能描述】 鼠标中键双击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_42",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.右键按下",
    "content": "【功能描述】 鼠标右键按下 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_43",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.右键弹起",
    "content": "【功能描述】 鼠标右键弹起 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_44",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.右键点击",
    "content": "【功能描述】 鼠标右键点击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_45",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.右键双击",
    "content": "【功能描述】 鼠标右键双击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_46",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.滚轮滚上",
    "content": "【功能描述】 鼠标滚轮滚上 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_47",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.滚轮滚下",
    "content": "【功能描述】 鼠标滚轮滚下 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_48",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.键盘按下",
    "content": "【功能描述】 键盘按下 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_49",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.键盘按上",
    "content": "【功能描述】 键盘弹起 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_50",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.键盘敲击",
    "content": "【功能描述】 键盘敲击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_51",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.发送文本Unicode",
    "content": "【功能描述】 发送unicode字符串 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_52",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA.发送文本Ascii",
    "content": "【功能描述】 发送ascii字符串 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_53",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_GetPidList",
    "content": "【功能描述】 获取PID列表 【备注】 需要先初始化关联虚拟机HCVMDMA_Init C++解析获取案例: \\n最大51个数量存储量autojsonStr=HCEnv_GetRetJson(windowsIndex);if(jsonStr==NULL)returnERROR_获取数据失败;\\npid1,name1|pid2,name2|pid3,name3|vector<string>pidNameArray;Tool::HSplitStringA(jsonStr,pidNameArray,\\\"|\\\");if(pidNameArray.size()<=0)returnRET_失败;for(int index=0;index<pidSize;index++){\\npid1,name1，vector<string>proArray;Tool::HSplitStringA(pidNameArray[index]+\\\",\\\",proArray,\\\",\\\");if(proArray.size()<2)continue;if(atoi(proArray[0].c_str())==pid)returnRET_成功;\\n元素1就是PID元素2是进程名}returnRET_失败;\\n没找到",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_54",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_IsExistPid",
    "content": "【功能描述】 对应虚拟机中的进程PID是否存在 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/huoshan/category_41",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "(B2)剑灵2台服 - HB2_GetPlayerInfo",
    "content": "【功能描述】 调用获取人物信息CALL 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"name\\\":\\\"Jack\\\",\\\"level\\\":26,\\\"curHp\\\":588,\\\"maxHp\\\":999,\\\"curMp\\\":255,\\\"maxMp\\\":666,\\\"gold\\\":99999,\\\"diamond\\\":999999}]}",
    "url": "/docs/huoshan/category_42",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "(B2)剑灵2台服 - HB2_GetBagInfo",
    "content": "【功能描述】 调用获取背包信息CALL 【备注】 json: {\\\"error\\\":0,\\\"flag\\\":99,\\\"ret\\\":[{\\\"id\\\":1111,\\\"tId\\\":22222,\\\"dId\\\":33333,\\\"num\\\":588},{\\\"id\\\":1111,\\\"tId\\\":22222,\\\"dId\\\":33333,\\\"num\\\":588},{\\\"id\\\":1111,\\\"tId\\\":22222,\\\"dId\\\":33333,\\\"num\\\":588}]}",
    "url": "/docs/huoshan/category_42",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "(B2)剑灵2台服 - HB2_GetShortCutInfo1",
    "content": "【功能描述】 调用获取快捷栏遍历信息CALL（前10个） 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"index\\\":0,\\\"id\\\":1111,\\\"bAct\\\":0},{\\\"index\\\":1,\\\"id\\\":2222,\\\"bAct\\\":1}]}",
    "url": "/docs/huoshan/category_42",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "(B2)剑灵2台服 - HB2_GetShortCutInfo2",
    "content": "【功能描述】 调用获取快捷栏遍历信息CALL（后10个） 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"index\\\":0,\\\"id\\\":1111,\\\"bAct\\\":0},{\\\"index\\\":1,\\\"id\\\":2222,\\\"bAct\\\":1}]}",
    "url": "/docs/huoshan/category_42",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "(B2)剑灵2台服 - HB2_GetPlayerXYZ",
    "content": "【功能描述】 调用获取人物坐标CALL 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"x\\\":125,\\\"y\\\":125,\\\"z\\\":125}]}",
    "url": "/docs/huoshan/category_42",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "(B2)剑灵2台服 - HB2_GetPlayerCurMapId",
    "content": "【功能描述】 调用获取人物当前地图IDCALL 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"mapId\\\":1993}]}",
    "url": "/docs/huoshan/category_42",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "(B2)剑灵2台服 - HB2_GetCurChapterTaskId",
    "content": "【功能描述】 调用遍历已结任务章节ID信息(主线+支线) 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"CTaskId\\\":1993,\\\"index\\\":1}]}",
    "url": "/docs/huoshan/category_42",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "(B2)剑灵2台服 - HB2_GetAChapterTask",
    "content": "【功能描述】 调用遍历已结任务章节ID信息(主线+支线) 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"CTaskId\\\":1993,\\\"index\\\":1,\\\"curNum\\\":2},{\\\"CTaskId\\\":1998,\\\"index\\\":2,\\\"curNum\\\":2}]}",
    "url": "/docs/huoshan/category_42",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "(B2)剑灵2台服 - HB2_PlayerIsMove",
    "content": "【功能描述】 调用人物是否移动CALL 【备注】 无",
    "url": "/docs/huoshan/category_42",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "(B2)剑灵2台服 - HB2_IsAutoUseMed",
    "content": "【功能描述】 调用人物是否自动使用药品状态 【备注】 无",
    "url": "/docs/huoshan/category_42",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "(B2)剑灵2台服 - HB2_Move",
    "content": "【功能描述】 调用移动CALL 【备注】 无",
    "url": "/docs/huoshan/category_42",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "(B2)剑灵2台服 - HB2_GetHuaShen",
    "content": "【功能描述】 调用化身遍历CALL 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"id\\\":0,\\\"xLevel\\\":1111,\\\"type\\\":0},{\\\"id\\\":0,\\\"xLevel\\\":1111,\\\"type\\\":0}]} id:化身IDxLevel:化身星级type:化身品质0123依次递增+1白绿蓝...",
    "url": "/docs/huoshan/category_42",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "(B2)剑灵2台服 - HB2_GetChongWu",
    "content": "【功能描述】 调用宠物遍历CALL 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"id\\\":0,\\\"xLevel\\\":1111,\\\"type\\\":0},{\\\"id\\\":0,\\\"xLevel\\\":1111,\\\"type\\\":0}]} id:宠物IDxLevel:宠物星级type:宠物品质0123依次递增+1白绿蓝...",
    "url": "/docs/huoshan/category_42",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "(B2)剑灵2台服 - HB2_UseGoods",
    "content": "【功能描述】 调用使用物品CALL 【备注】 无",
    "url": "/docs/huoshan/category_42",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "谷歌内置浏览器模块[GB] - HD内置浏览器.附加谷歌1",
    "content": "【功能描述】 附加内置浏览器，附加监听模式1 【备注】 必须游戏进程自带内置谷歌浏览器,才会附加模块成功 由于每个游戏不同,需要定制浏览器接口 当前默认的内置谷歌浏览器接口仅适合夜鸦",
    "url": "/docs/huoshan/category_43",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "谷歌内置浏览器模块[GB] - HD内置浏览器.附加谷歌2",
    "content": "【功能描述】 附加内置浏览器，附加监听模式2 【备注】 必须游戏进程自带内置谷歌浏览器,才会附加模块成功 由于每个游戏不同,需要定制浏览器接口 当前默认的内置谷歌浏览器接口仅适合夜鸦",
    "url": "/docs/huoshan/category_43",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "谷歌内置浏览器模块[GB] - HD内置浏览器.脱离谷歌",
    "content": "【功能描述】 脱离之前的内置浏览器 【备注】 必须游戏进程自带内置谷歌浏览器,才会附加模块成功",
    "url": "/docs/huoshan/category_43",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "谷歌内置浏览器模块[GB] - HD内置浏览器.注入谷歌JS代码",
    "content": "【功能描述】 给内置浏览器注入JS代码 【备注】 必须游戏进程自带内置谷歌浏览器,才会附加模块成功",
    "url": "/docs/huoshan/category_43",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "谷歌内置浏览器模块[GB] - HD内置浏览器.注入谷歌JS文件",
    "content": "【功能描述】 给内置浏览器注入指定文件中的JS代码 【备注】 必须游戏进程自带内置谷歌浏览器,才会附加模块成功",
    "url": "/docs/huoshan/category_43",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "调试绘制模块(DS) - HD调试.设置颜色",
    "content": "【功能描述】 (用于调试)设置全局可视化标注颜色值 【备注】 颜色值是4字节分别对应XRGB如:0x00FF0000红色如:0x0000FF00绿色如:0x000000FF蓝色",
    "url": "/docs/huoshan/category_44",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "调试绘制模块(DS) - HD调试.设置调试窗口跟随",
    "content": "【功能描述】 (用于调试)设置当前调试窗口跟随的进程信息",
    "url": "/docs/huoshan/category_44",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "调试绘制模块(DS) - HD调试.标记窗口",
    "content": "【功能描述】 给指定窗口画边框或者填充矩形 【备注】 无",
    "url": "/docs/huoshan/category_44",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "调试绘制模块(DS) - HD调试.捕捉异常调用堆栈",
    "content": "【功能描述】 开启/关闭捕捉异常 【备注】 无",
    "url": "/docs/huoshan/category_44",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "调试绘制模块(DS) - HD调试.附加控制台",
    "content": "【功能描述】 附加控制台 【备注】 print fcout输入输出到控制台上显示注意:自行定时清空屏幕防止满屏卡主进程运行",
    "url": "/docs/huoshan/category_44",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "全局资源设置模块(RES) - HCRES_SetResPath",
    "content": "【功能描述】 设置资源路径 【备注】 图片字库文件都在这个里面找",
    "url": "/docs/huoshan/category_45",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "全局资源设置模块(RES) - HD资源.设置路径Ex",
    "content": "【功能描述】 设置资源路径 【备注】 图片字库文件都在这个里面找",
    "url": "/docs/huoshan/category_45",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "全局资源设置模块(RES) - HCRES_SetLanguageResPath",
    "content": "【功能描述】 设置语言或者字体文件资源路径 【备注】 语言文件都在这个里面找",
    "url": "/docs/huoshan/category_45",
    "source": "api_data_huoshanpc.json",
    "type": "函数"
  },
  {
    "id": "explanation_1",
    "title": "基础说明 - HD简介",
    "content": "【功能描述】 教程以官网为准 后面会出帖子教程 供大家学习使用 官网: https://www.hdgdk.com HD【RPG引擎库】交流群(3群):882724064 1030698387 (有事请主动找群主和管理，群主和管理不会主动私聊任何人,请勿上当受骗！！！！) (有事请主动找群主和管理，群主和管理不会主动私聊任何人,请勿上当受骗！！！！) (有事请主动找群主和管理，群主和管理不会主动私聊任何人,请勿上当受骗！！！！) 功能: 1.自研驱动注入，模拟键鼠 ，读写内存相关操作，进程以及线程相关操作等. 2.自研接口注入模式框架. 3.目前支持 32 位/64位/ASCII/UNICODE(8个版本中控)<->32/64位 (目标程序) 4.还支持LUA编写,自定义模块,谷歌内置浏览器,主板机投屏,多线程框架模块,yolov5,等操作 5.支持易语言 C/C++ 火山 Python C# 炫语言 golong等语言（支持调用C++DLL的语言） 6.具体看对应的模块功能接口 7.支持win7/8/10/11系统 ============================================================= 一.【HD易语言基础课程】 https://www.bilibili.com/video/BV1UgJFz5EKN/?spm_id_from=333.1387.homepage.video_card.click .【HD易语言多线程框架实战课程】 https://www.bilibili.com/video/BV1UgJFz5EKN/?spm_id_from=333.1387.homepage.video_card.click 二.【HD火山基础课程】 https://www.bilibili.com/video/BV1iBftYoE5b/?spm_id_from=333.1387.homepage.video_card.click 三.【HD C++基础课程】 https://www.bilibili.com/video/BV1G9fnYeEEp/?spm_id_from=333.1387.homepage.video_card.click .【HD C++多线程框架实战课程】 https://www.bilibili.com/video/BV1G9fnYeEEp/?spm_id_from=333.1387.homepage.video_card.click .【HD C++ 夜鸦国际服实战课程】 https://www.bilibili.com/video/BV1Ei1sYsELz/?spm_id_from=333.1387.homepage.video_card.click 四.【HD Python基础课程】 https://www.bilibili.com/video/BV1rtRAYXEwQ/?spm_id_from=333.1387.homepage.video_card.click 五.【HD 炫语言基础课程】 https://www.bilibili.com/video/BV1LJXGYPEXy/?spm_id_from=333.1387.homepage.video_card.click https://www.bilibili.com/video/BV1UNqdYqEBQ/?spm_id_from=333.1387.homepage.video_card.click 六.【HD 综合工具使用教程】 https://www.bilibili.com/video/BV1nscbeVEfY/?spm_id_from=333.1387.homepage.video_card.click 七.【HD Yolov8综合工具使用教程】 https://www.bilibili.com/video/BV13c3vzfE2D/?spm_id_from=333.1387.homepage.video_card.click ============================================================= 【备注】 免责声明 一. 本软件完全出于个人兴趣爱好，由本人在业余时间开发，是一款安全，绿色，可靠的软件产品. 二. 利用本软件所做出的任何软件作品，和本人无关. 三. 本软件绝对不针对任何一款游戏或者游戏开发商，如果有人利用本软件开发非法游戏辅助，本人将保留追究其民事以及刑事责任的权利. 四. 因使用本软件而引致的任何意外、疏忽、合约毁坏、诽谤、版权或知识产权侵犯及其所造成的任何损失，本人概不负责，亦概不承担任何民事或刑事法律责任。 五. 当你第一次开始使用本人所提供的任何软件及资源的那一刻起就将被视为对本声明全部内容的认可。同时您必须认可上述免责条款，方可使用本软件及资源。如有任何异议，建议立刻删除本软件及资源并且停止使用. 六. 以上内容，本人保留最终解释权。",
    "url": "/docs/python/category_1",
    "source": "api_data_python.json",
    "type": "说明"
  },
  {
    "id": "explanation_2",
    "title": "基础说明 - HD返回值表",
    "content": "【功能描述】 接口返回值： 小于等于0 为错误代码 大于 0为成功 (驱动接口返回值在下面↓) #define RET_检查PID存在 8 #define RET_环境已卸载 7 #define RET_重连窗口序号不一致 6 #define RET_重连窗口 5 #define RET_状态变动 4 #define RET_暂停过 3 #define RET_结束 2 #define RET_成功 1 #define RET_失败 0 #define RET_真 1 #define RET_非 0 #define ERROR_未初始化全局环境 -1000 #define ERROR_未找到进程环境 -1001 #define ERROR_进程环境内存为NULL -1002 #define ERROR_获取CALL环境失败 -1003 #define ERROR_超时返回 -1004 #define ERROR_主线程调用超时返回 -1005 #define ERROR_数据异常 -1006 #define ERROR_参数错误 -1007 #define ERROR_未挂接主线程 -1008 #define ERROR_后台绑定句柄无效 -1009 #define ERROR_未绑定后台 -1010 #define ERROR_多开超出限制 -1011 #define ERROR_字符串为空 -1012 #define ERROR_地址为空 -1013 #define ERROR_未知错误 -1014 #define ERROR_远进程申请内存失败 -1015 #define ERROR_文件夹创建失败 -1016 #define ERROR_异步无法获取返回值 -1017 #define ERROR_语法错误 -1018 #define ERROR_申请内存失败 -1019 #define ERROR_创建线程失败 -1020 #define ERROR_缓冲区大小不足 -1021 #define ERROR_未初始化LUA -1022 #define ERROR_LUA状态机为NULL -1023 #define ERROR_未找到LUA函数 -1024 #define ERROR_返回值未知类型 -1025 #define ERROR_LUA线程标识符不符合 -1026 #define ERROR_模块获取失败 -1027 #define ERROR_地址不可读 -1028 #define ERROR_返回值为JSON -1029 #define ERROR_获取数据失败 -1030 #define ERROR_未初始化 -1031 #define ERROR_已经开启 -1032 #define ERROR_已经结束 -1033 #define ERROR_未开启 -1034 #define ERROR_未结束 -1035 #define ERROR_高宽为0 -1036 #define ERROR_数据为NULL -1037 #define ERROR_数据不符合要求 -1038 #define ERROR_文件打开失败 -1039 #define ERROR_打开失败 -1040 #define ERROR_解析失败 -1041 #define ERROR_无游戏类型 -1042 #define ERROR_HOOK失败 -1043 #define ERROR_UNHOOK失败 -1044 #define ERROR_功能失效 -1045 #define ERROR_无效PE文件格式 -1046 #define ERROR_未找到PE头 -1047 #define ERROR_重定位表失败 -1048 #define ERROR_未找到函数入口 -1049 #define ERROR_无法附加DLL -1050 #define ERROR_接口数量上限 -1051 #define ERROR_已经存在 -1052 #define ERROR_打开句柄失败 -1053 #define ERROR_未找到全局环境 -1054 #define ERROR_组件数量上限 -1055 #define ERROR_未找到组件接口 -1056 #define ERROR_接口类型不匹配 -1057 #define ERROR_组件无效 -1058 #define ERROR_接口地址无效 -1059 #define ERROR_生成密钥失败 -1060 #define ERROR_加密失败 -1061 #define ERROR_解密失败 -1062 #define ERROR_DLL中无此接口 -1063 #define ERROR_下载失败 -1064 #define ERROR_注册表操作失败 -1065 #define ERROR_路径获取失败 -1066 #define ERROR_提权失败 -1067 #define ERROR_驱动已安装 -1068 #define ERROR_HD驱动已安装无法安装HN驱动 -1069 #define ERROR_资源未找到 -1070 #define ERROR_资源加载失败 -1071 #define ERROR_提取资源失败 -1072 #define ERROR_未加载插件 -1073 #define ERROR_文件无法保存 -1074 #define ERROR_打开目录失败 -1075 #define ERROR_写入文件的字节大小不符合要求 -1076 #define ERROR_删除文件失败 -1077 #define ERROR_获取字符串失败 -1078 #define ERROR_获取注册表值失败 -1079 #define ERROR_类型错误 -1080 #define ERROR_参数不符合要求 -1081 #define ERROR_区域超出 -1082 #define ERROR_文件不存在 -1083 #define ERROR_创建文件失败 -1084 #define ERROR_文件读取失败 -1085 #define ERROR_与系统驱动通讯失败 -1086 #define ERROR_创建管道失败 -1087 #define ERROR_创建进程失败 -1088 #define ERROR_未找到相关字符串信息 -1089 #define ERROR_缓冲区大小不充足 -1090 #define ERROR_数据类型转换失败 -1091 #define ERROR_格式化字符串失败 -1092 #define ERROR_网络超时 -1093 #define ERROR_网络连接失败 -1094 #define ERROR_加载指定DLL失败 -1095 #define ERROR_解析字符串失败 -1096 #define ERROR_窗口大小变动导致数据不一致 -1097 #define ERROR_打开剪切板失败 -1098 #define ERROR_加锁失败 -1099 #define ERROR_获取剪切板数据失败 -1100 #define ERROR_版本号获取失败 -1101 #define ERROR_已经绑定其他设备 -1102 #define ERROR_已经达到最大在线数 -1103 #define ERROR_账号或密码为空 -1104 #define ERROR_验证失败 -1105 #define ERROR_打开进程失败 -1106 #define ERROR_进程位数不匹配 -1107 #define ERROR_添加进程环境失败 -1108 #define ERROR_定位特征地址失败 -1109 #define ERROR_寻找空白地址失败 -1110 #define ERROR_无操作类型 -1111 #define ERROR_无相关句柄 -1112 #define ERROR_无HDC句柄 -1113 #define ERROR_获取矩形大小失败 -1114 #define ERROR_拷贝数据失败 -1115 #define ERROR_无效句柄 -1116 #define ERROR_创建对象失败 -1117 #define ERROR_截图方式需要重开才能切换 -1118 #define ERROR_格式有误 -1119 #define ERROR_字库数据为空 -1120 #define ERROR_字库中未找到相应字 -1121 #define ERROR_大小计算为0 -1122 #define ERROR_容器大小不一致 -1123 #define ERROR_句柄无效 -1124 #define ERROR_获取PID无效 -1125 #define ERROR_获取大小失败 -1126 #define ERROR_获取失败 -1127 #define ERROR_未找到 -1128 #define ERROR_立即返回无效值 -1129 #define ERROR_未设置路径 -1130 #define ERROR_文件操作失败 -1131 #define ERROR_写入内存失败 -1132 #define ERROR_模块查找失败 -1133 #define ERROR_接口查找失败 -1134 #define ERROR_组件信息保存失败 -1135 #define ERROR_组件加载失败 -1136 #define ERROR_组件卸载失败 -1137 #define ERROR_组件不符合卸载要求 -1138 #define ERROR_进程环境句柄为NULL -1139 #define ERROR_未绑定PID -1140 #define ERROR_读取图片失败 -1141 #define ERROR_打开注册表失败 -1142 #define ERROR_获取注册表失败 -1143 #define ERROR_写内存失败 -1144 #define ERROR_清除缓存失败 -1145 #define ERROR_字体无宽度 -1146 #define ERROR_裁剪矩形数据失败 -1147 #define ERROR_图片无宽或高 -1148 #define ERROR_功能未开放 -1149 #define ERROR_模块信息获取失败 -1150 #define ERROR_未找到合适的JMP地址 -1151 #define ERROR_HOOK初始化失败 -1152 #define ERROR_无HOOK接口类型 -1153 #define ERROR_CALL类型不匹配 -1154 #define ERROR_创建通讯失败 -1155 #define ERROR_加载通讯失败 -1156 #define ERROR_数据格式错误 -1157 #define ERROR_地址失效 -1158 #define ERROR_坐标转换失败 -1159 #define ERROR_容器为空 -1160 #define ERROR_数据为空 -1161 #define ERROR_特征不符合 -1162 #define ERROR_范围未确定 -1163 #define ERROR_缓冲区不足 -1164 #define ERROR_此接口调试版本无效 -1165 #define ERROR_子图不在范围内 -1166 #define ERROR_插件数量上限 -1167 #define ERROR_API枚举失败 -1168 #define ERROR_无法定位模块 -1169 #define ERROR_无效HOOK地址 -1170 #define ERROR_无对应的HOOK函数 -1171 #define ERROR_破坏字节超过容量 -1172 #define ERROR_指定地址不适合HOOK -1173 #define ERROR_没有充足的HOOK大小 -1174 #define ERROR_设置回调地址失败 -1175 #define ERROR_API获取时间失败 -1176 #define ERROR_无效插件序号 -1177 #define ERROR_进程不存在 -1178 #define ERROR_未安装插件 -1179 #define ERROR_初始化通讯失败 -1180 #define ERROR_未初始化通讯序号 -1181 #define ERROR_当前线程字库为空 -1182 #define ERROR_线程数量超出限制 -1183 #define ERROR_字库序号不存在 -1184 #define ERROR_释放资源失败 -1185 #define ERROR_超出容量 -1186 #define ERROR_空模型 -1187 #define ERROR_环境序号不存在 -1188 #define ERROR_回调处理中 -1189 #define ERROR_无法操作绑定窗口 -1190 #define ERROR_接口已被移除 -1191 #define ERROR_不支持类型 -1192 #define ERROR_初始化失败 -1193 #define ERROR_环境被卸载 -1194 #define ERROR_进程已经关闭 -1195 #define ERROR_中控环境未初始化 -1196 #define ERROR_未加载HD驱动 -1197 #define ERROR_未绑定设备 -1198 #define ERROR_未找到进程 -1199 #define ERROR_进程PID不匹配 -1200 #define ERROR_前台模式无法后台 -1201 #define ERROR_JMP地址无效 -1202 #define ERROR_HOOK地址无效 -1203 #define ERROR_类型和HOOK地址不匹配 -1204 #define ERROR_不在HD多线程环境下 -1205 #define ERROR_未连接 -1206 #define ERROR_进程环境已被卸载 -1207 #define ERROR_安装插件失败 -1208 //检查是否安装了驱动 #define ERROR_安装驱动失败 -1209 //检查是否管理员或者杀毒或者关闭内核隔离 #define ERROR_加载环境失败 -1210 //检查账号是否欠费或者网络问题或者参数不符合要求 #define ERROR_初始化序号失败 -1211 //一般不会失败 #define ERROR_获取PID超时返回 -1212 //确定是否打开进程成功或者增大等待时间 #define ERROR_获取状态值20超时返回 -1213 //未安装插件或被拦截或增大等待时间 #define ERROR_获取状态值120超时返回 -1214 //未安装插件或被拦截或增大等待时间 #define ERROR_继续失败 -1215 //可能未初始化相关环境 一般不会失败 #define ERROR_当前进程插件序号不一致 -1216 //说明指定的PID进程绑定的窗口序号已经存在 与指定的序号不一致 调用HCInject_GetPreWinIndex 获取指定PID的绑定的窗口序号 #define ERROR_PID无效 -1217 #define ERROR_扩展序号不能用 -1218//扩展序号不能自己指定 #define ERROR_接口丢弃 -1219//老版本的接口丢弃 #define ERROR_序号超出限制 -1220 #define ERROR_已经重启 -1221 #define ERROR_登录中无法重启 -1222 #define ERROR_暂停中无法重启 -1223 #define ERROR_操作中无法重启 -1224 #define ERROR_强制关闭线程中无法发送 -1225 #define ERROR_卸载失败 -1226 #define ERROR_未完全开启 -1227 #define ERROR_逻辑异常 -1228 #define ERROR_无法连接VNC -1229 #define ERROR_未连接过VNC -1230 #define ERROR_未关联过VM -1231 #define ERROR_未获取截图环境 -1232 #define ERROR_未获取截图环境 -1232 #define ERROR_环境为NULL -1233 #define ERROR_区域无效 -1234 #define ERROR_继续当前操作 -1235 #define ERROR_加解密失败 -1236 #define ERROR_未安装驱动 -1237 #define ERROR_调试版本无法加解密 -1238 #define ERROR_截图缓存不存在 -1239//检查截图模式不对 或者 未开启截图 请用截图查看器查看是否截图缓存存在 【备注】 也可以可通过工具后台查看",
    "url": "/docs/python/category_1",
    "source": "api_data_python.json",
    "type": "说明"
  },
  {
    "id": "function_1",
    "title": "基础功能接口 - HD登录_获取版本号",
    "content": "【功能描述】 获取当前插件版本号 【备注】 无",
    "url": "/docs/python/category_2",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "基础功能接口 - HCEnv_GetRetJson",
    "content": "【功能描述】 获取最近一次调用接口返回的json字符串 【备注】 并不是所有接口都返回json字符串 有一些接口返回单一的值就没必要调用这个接口 一些接口需要拿到字符串信息返回,那么这些字符串会存在json字符串中,需要自己调用此接口获取",
    "url": "/docs/python/category_2",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "基础功能接口 - HD通用_获取最近返回值",
    "content": "【功能描述】 获取最近一次调用接口返回的值(用于检测是否有错) 【备注】 无",
    "url": "/docs/python/category_2",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "基础功能接口 - HCEnv_GetErrorStr",
    "content": "【功能描述】 通过传递HD返回值获取字符串信息",
    "url": "/docs/python/category_2",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "基础功能接口 - HD通用_获取最近API返回值",
    "content": "【功能描述】 获取最近一次调用WIN32API错误值 【备注】 无",
    "url": "/docs/python/category_2",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "基础功能接口 - HD环境_获取最大多开数",
    "content": "【功能描述】 获取最大窗口数 【备注】 窗口序号不能大于等于这个返回值同时也不能小于0",
    "url": "/docs/python/category_2",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "基础功能接口 - HD通用_获取当前插件状态值",
    "content": "【功能描述】 获取当前环境搭建流程中的操作信息 【备注】 这个CALL返回HD状态信息可以确定当前处于那个步骤 typedefenumHD状态信息{HD状态信息_无=0,\\n0HD状态信息_DLL环境_加载全局成功=1,\\n1HD状态信息_DLL环境_加载全局失败=2,\\n2HD状态信息_DLL环境_窗口序号不符合=3,\\n3HD状态信息_DLL环境_进程不符合=4,\\n4HD状态信息_DLL环境_打开句柄失败=5,\\n5HD状态信息_DLL环境_获取内存失败=6,\\n6HD状态信息_DLL环境_等待继续=20,\\n20需要调用HCInject_Continue()HD状态信息_通讯环境_开始=21,\\n21HD状态信息_通讯环境_成功=22,\\n22HD状态信息_通讯环境_失败=23,\\n23HD状态信息_通讯环境_打开句柄失败=24,\\n24HD状态信息_通讯环境_获取内存失败=25,\\n25HD状态信息_接口映射_成功=40,\\n40自制通讯协议创建HD状态信息_接口映射_失败=41,\\n41HD状态信息_LUA_成功=60,\\n60可以执行LUAHD状态信息_LUA_失败=61,\\n61不可以执行LUAHD状态信息_数据库_开启=80,\\n80需要调用HHIT2_Load()的时候参数bOpenData设置为1HD状态信息_数据库_未开启=81,\\n81HD状态信息_数据库_开启失败=82,\\n82内置特征码有误联系管理员HD状态信息_验证_有误=100,\\n100联系管理员HD状态信息_监听_成功=120,\\n120【【【【大于等于120说明可以调用接口了】】】】HD状态信息_监听_失败=121,\\n121基本是不会出现这个错误HD状态信息_挂接主线_开启=140,\\n140调用HD状态信息_挂接主线_进入=141,\\n141准备挂接HD状态信息_挂接主线_尝试中=142,\\n142处于这个阶段需要用SetHwnd()暂时没用HD状态信息_挂接主线_成功=143,\\n143成功挂接所有关于可以主线程调用的接口的参数\\\"是否主线程调用\\\"生效HD状态信息_挂接主线_失败=144,\\n144HD状态信息_挂接主线_已经开启=145,\\n145已经开启了HD状态信息_加载_延迟=146,\\n2秒延迟HD状态信息_通讯加载失败=147\\n2秒延迟}HD状态信息;",
    "url": "/docs/python/category_2",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "基础功能接口 - HD环境_获取插件执行环境信息",
    "content": "【功能描述】 获取通讯插件所绑定的目标进程的执行线程环境信息 【备注】 无",
    "url": "/docs/python/category_2",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "基础功能接口 - HD注入_设置插件信息",
    "content": "【功能描述】 设置插件信息 【备注】 易语言/火山/Python/炫语言/C#等语言:还需要拿到模块源码更改导入DLL名字需要与自定义DLL同名 内置版本名规则: \\n======64位#ifdef_WIN64#ifdef_UNICODE\\n64位W版本std::stringHCInject::g_发布版本DLL名字=\\\"hd64.dll\\\";std::stringHCInject::g_调试版本DLL名字=\\\"hddebug64.dll\\\";#else\\n64位A版本std::stringHCInject::g_发布版本DLL名字=\\\"hd64a.dll\\\";std::stringHCInject::g_调试版本DLL名字=\\\"hddebug64a.dll\\\";#endif\\n======32位#else#ifdef_UNICODE\\n32位W版本std::stringHCInject::g_发布版本DLL名字=\\\"hd.dll\\\";std::stringHCInject::g_调试版本DLL名字=\\\"hddebug.dll\\\";#else\\n32位A版本std::stringHCInject::g_发布版本DLL名字=\\\"hda.dll\\\";std::stringHCInject::g_调试版本DLL名字=\\\"hddebuga.dll\\\";#endif#endif\\n》》》》》》",
    "url": "/docs/python/category_2",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "IP模块[IP] - HDIP_有米设置路径",
    "content": "【功能描述】 设置有米软件路径(EXE路径) 【备注】 软件找HD作者拿(魔改版)",
    "url": "/docs/python/category_3",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "IP模块[IP] - HDIP_有米添加IP",
    "content": "【功能描述】 添加IP 【备注】 软件找HD作者拿(魔改版)",
    "url": "/docs/python/category_3",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "IP模块[IP] - HDIP_有米添加进程",
    "content": "【功能描述】 添加代理的进程名 【备注】 软件找HD作者拿(魔改版)",
    "url": "/docs/python/category_3",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "IP模块[IP] - HDIP_有米打开",
    "content": "【功能描述】 打开有米软件 【备注】 软件找HD作者拿(魔改版) 流程: 1.先设置路径 2.添加代理进程和IP 3.打开有米",
    "url": "/docs/python/category_3",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "IP模块[IP] - HDIP_有米是否打开",
    "content": "【功能描述】 有米软件是否已经打开 【备注】 软件找HD作者拿(魔改版) 流程: 1.先设置路径 2.添加代理进程和IP 3.打开有米",
    "url": "/docs/python/category_3",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "IP模块[IP] - HDIP_有米关闭",
    "content": "【功能描述】 关闭有米软件 【备注】 软件找HD作者拿(魔改版) 流程: 1.先设置路径 2.添加代理进程和IP 3.打开有米",
    "url": "/docs/python/category_3",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "登录验证(Login) - HD登录_登录",
    "content": "【功能描述】 HD登录验证接口（强烈建议主线程中调用） 【备注】 1.验证接口,所有接口需要通过验证才能调用 2.如果自己写中控可以不用打开自动更新",
    "url": "/docs/python/category_4",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "登录验证(Login) - HD登录_获取最近登录点数",
    "content": "【功能描述】 最近登录时候的点数 【备注】 无",
    "url": "/docs/python/category_4",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "登录验证(Login) - HD登录_获取最近登录时间",
    "content": "【功能描述】 获取最近登录时间戳 【备注】 无",
    "url": "/docs/python/category_4",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "登录验证(Login) - HD登录_获取点数",
    "content": "【功能描述】 获取点数 【备注】 无",
    "url": "/docs/python/category_4",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "登录验证(Login) - HD登录_获取最大多开数",
    "content": "【功能描述】 获取最大多少开 【备注】 无",
    "url": "/docs/python/category_4",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "安装插件扩展模块[ex] - HD扩展_安装插件1",
    "content": "【功能描述】 第一种通讯安装插件方式(安装插件再打开进程)如果使用HD多线程模块强烈建议在登录回调中使用 【备注】 可以参考表安装插件接口类型表 1.支持重连,重连的前提是不能被HCEnv_UnLoad卸载 回调解析: 打开回调openFun:可以参考表安装插件接口类型表 typedef__int64 (__stdcall* INSTALLPLUGint YPE)(int windowsIndex); 参数:windowsIndex:当前指定序号 说明:1.对于第一种方式打开回调不能为NULL,内部先安装插件再触发回调打开进程(在打开回调中可以手动或者自动打开进程1.如果是手动直接返回1就行或错误值表示中断操作2.如果是自动返回对应的PID或错误值表示中断操作)2.其他二种方式打开回调可以为NULL,表示进程已经打开了,不需要在回调中打开,此时使用指定的PID或者窗口句柄来安装插件,具体是PID还是句柄请查看安装插件接口类型表3.返回值根据当前的安装插件方式不同有不同的含义:（具体请看安装插件接口类型表和覆盖策略） 3.1方式二是通过PID安装插件那么返回值应该为打开进程的PID,并把传递的PID参数给覆盖了(请看PID覆盖策略),可以返回小于等于0的错误值或者不存在的PID,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.1.1PID覆盖策略 \\n1.如果指定的参数PID有效大于0并存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID\\n2.如果指定的参数PID有效大于0并存在同时打开回调返回的PID无效小于等于0不存在就用指定参数的PID\\n3.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID无效小于等于0不存在就直接返回错误\\n4.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID 3.2方式三是通过窗口句柄安装插件那么返回值应该为打开进程的句柄,并把传递的句柄参数给覆盖了(请看窗口句柄覆盖策略),可以返回小于等于0的错误值或者窗口句柄无效,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.2.1窗口句柄覆盖策略 \\n1.如果指定参数的窗口句柄有效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄\\n2.如果指定参数的窗口句柄有效同时打开回调返回的的句柄无效就用指定参数的句柄\\n3.如果指定参数的窗口句柄无效同时打开回调返回的的句柄无效就直接返回错误\\n4.如果指定参数的窗口句柄无效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄 检查回调checkFun: typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int prePid,int error); 参数:windowsIndex:当前指定序号preWindowsIndex:之前绑定的序号或者错误值(小于0)--来源HCInject_GetPreWinIndex返回prePid:之前绑定的序号对应的PID--来源HCInject_GetPid返回error:提示值 error==RET_重连窗口(5)----->返回值含义:(1重连直接进行加载环境0新窗口) error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的) 我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 error==RET_重连窗口序号不一致(6)----->返回值含义:(1重连并使用之前绑定的序号进行加载环境 0新窗口(需要用户在回调中把之前PID给关闭)) error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的) 我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 其他情况可以返回小于0的自定义值:表示直接中断安装插件流程,并返回对应的值(这个值只要小于0即可,可以作为自定义值) 说明: 1.如果指定的检查回调为NULL,当内部检查到是重连窗口的时候 2.如果发现序号不一致就会直接返回(ERROR_当前进程插件序号不一致-1216) 3.如果序号一致就直接加载环境并实现重连 几个核心的点归纳总结出来其实就能规避掉很多坑了比如1.没安装过插件的都不算重连窗口全部当新窗口处理会触发打开回调2.安装过插件的不管是卸载了环境还是崩溃或重启中控都算重连窗口不会触发打开回调会触发检查回调",
    "url": "/docs/python/category_5",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "安装插件扩展模块[ex] - HD扩展_安装插件2",
    "content": "【功能描述】 第二种通讯安装插件方式(打开进程然后安装插件),通过pid如果使用HD多线程模块强烈建议在登录回调中使用 【备注】 可以参考表安装插件接口类型表 1.支持重连,重连的前提是不能被HCEnv_UnLoad卸载 回调解析: 打开回调openFun typedef__int64 (__stdcall* INSTALLPLUGint YPE)(int windowsIndex); 参数:windowsIndex:当前指定序号 说明:1.对于第一种方式打开回调不能为NULL,内部先安装插件再触发回调打开进程(在打开回调中可以手动或者自动打开进程1.如果是手动直接返回1就行或错误值表示中断操作2.如果是自动返回对应的PID或错误值表示中断操作)2.其他二种方式打开回调可以为NULL,表示进程已经打开了,不需要在回调中打开,此时使用指定的PID或者窗口句柄来安装插件,具体是PID还是句柄请查看安装插件接口类型表3.返回值根据当前的安装插件方式不同有不同的含义:（具体请看安装插件接口类型表和覆盖策略） 3.1方式二是通过PID安装插件那么返回值应该为打开进程的PID,并把传递的PID参数给覆盖了(请看PID覆盖策略),可以返回小于等于0的错误值或者不存在的PID,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.1.1PID覆盖策略 \\n1.如果指定的参数PID有效大于0并存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID\\n2.如果指定的参数PID有效大于0并存在同时打开回调返回的PID无效小于等于0不存在就用指定参数的PID\\n3.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID无效小于等于0不存在就直接返回错误\\n4.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID 3.2方式三是通过窗口句柄安装插件那么返回值应该为打开进程的句柄,并把传递的句柄参数给覆盖了(请看窗口句柄覆盖策略),可以返回小于等于0的错误值或者窗口句柄无效,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.2.1窗口句柄覆盖策略 \\n1.如果指定参数的窗口句柄有效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄\\n2.如果指定参数的窗口句柄有效同时打开回调返回的的句柄无效就用指定参数的句柄\\n3.如果指定参数的窗口句柄无效同时打开回调返回的的句柄无效就直接返回错误\\n4.如果指定参数的窗口句柄无效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄 检查回调checkFun: typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int prePid,int error); 参数:windowsIndex:当前指定序号preWindowsIndex:之前绑定的序号或者错误值(小于0)--来源HCInject_GetPreWinIndex返回prePid:之前绑定的序号对应的PID--来源HCInject_GetPid返回error:提示值 error==RET_重连窗口(5)----->返回值含义:(1重连直接进行加载环境0新窗口) error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的) 我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 error==RET_重连窗口序号不一致(6)----->返回值含义:(1重连并使用之前绑定的序号进行加载环境0新窗口(需要用户在回调中把之前PID给关闭)) 说明: 1.如果指定的检查回调为NULL,当内部检查到是重连窗口的时候 2.如果发现序号不一致就会直接返回(ERROR_当前进程插件序号不一致-1216) 3.如果序号一致就直接加载环境并实现重连 几个核心的点归纳总结出来其实就能规避掉很多坑了比如1.没安装过插件的都不算重连窗口全部当新窗口处理会触发打开回调2.安装过插件的不管是卸载了环境还是崩溃了中控都算重连窗口不会触发打开回调",
    "url": "/docs/python/category_5",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "安装插件扩展模块[ex] - HD扩展_安装插件3",
    "content": "【功能描述】 第三种通讯安装插件方式(打开进程然后安装插件),通过窗口句柄如果使用HD多线程模块强烈建议在登录回调中使用 【备注】 可以参考表安装插件接口类型表 1.支持重连,重连的前提是不能被HCEnv_UnLoad卸载 回调解析: 打开回调openFun:可以参考表安装插件接口类型表 typedef__int64 (__stdcall* INSTALLPLUGint YPE)(int windowsIndex); 参数:windowsIndex:当前指定序号 说明:1.对于第一种方式打开回调不能为NULL,内部先安装插件再触发回调打开进程(在打开回调中可以手动或者自动打开进程1.如果是手动直接返回1就行或错误值表示中断操作2.如果是自动返回对应的PID或错误值表示中断操作)2.其他二种方式打开回调可以为NULL,表示进程已经打开了,不需要在回调中打开,此时使用指定的PID或者窗口句柄来安装插件,具体是PID还是句柄请查看安装插件接口类型表3.返回值根据当前的安装插件方式不同有不同的含义:（具体请看安装插件接口类型表和覆盖策略） 3.1方式二是通过PID安装插件那么返回值应该为打开进程的PID,并把传递的PID参数给覆盖了(请看PID覆盖策略),可以返回小于等于0的错误值或者不存在的PID,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.1.1PID覆盖策略 \\n1.如果指定的参数PID有效大于0并存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID\\n2.如果指定的参数PID有效大于0并存在同时打开回调返回的PID无效小于等于0不存在就用指定参数的PID\\n3.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID无效小于等于0不存在就直接返回错误\\n4.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID 3.2方式三是通过窗口句柄安装插件那么返回值应该为打开进程的句柄,并把传递的句柄参数给覆盖了(请看窗口句柄覆盖策略),可以返回小于等于0的错误值或者窗口句柄无效,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.2.1窗口句柄覆盖策略 \\n1.如果指定参数的窗口句柄有效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄\\n2.如果指定参数的窗口句柄有效同时打开回调返回的的句柄无效就用指定参数的句柄\\n3.如果指定参数的窗口句柄无效同时打开回调返回的的句柄无效就直接返回错误\\n4.如果指定参数的窗口句柄无效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄 检查回调checkFun: typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int prePid,int error); 参数:windowsIndex:当前指定序号preWindowsIndex:之前绑定的序号或者错误值(小于0)--来源HCInject_GetPreWinIndex返回prePid:之前绑定的序号对应的PID--来源HCInject_GetPid返回error:提示值 error==RET_重连窗口(5)----->返回值含义:(1重连直接进行加载环境0新窗口) error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的) 我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 error==RET_重连窗口序号不一致(6)----->返回值含义:(1重连并使用之前绑定的序号进行加载环境0新窗口(需要用户在回调中把之前PID给关闭)) 说明: 1.如果指定的检查回调为NULL,当内部检查到是重连窗口的时候 2.如果发现序号不一致就会直接返回(ERROR_当前进程插件序号不一致-1216) 3.如果序号一致就直接加载环境并实现重连 几个核心的点归纳总结出来其实就能规避掉很多坑了比如1.没安装过插件的都不算重连窗口全部当新窗口处理会触发打开回调2.安装过插件的不管是卸载了环境还是崩溃了中控都算重连窗口不会触发打开回调",
    "url": "/docs/python/category_5",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "安装插件扩展模块[ex] - HD扩展_安装插件VM",
    "content": "【功能描述】 打开后安装通过PID针对虚拟机内部自动关联虚拟机如果使用HD多线程模块强烈建议在登录回调中使用 【备注】 可以参考表安装插件接口类型表 1.调用之前记得打开服务器HCVMDMA_StartServer并确定正确打开HCVMDMA_ServerIsStart 2.其他规则和前3种安装插件方式一致 3.支持重连,重连的前提是不能被HCEnv_UnLoad卸载 回调解析: 打开回调openFun:可以参考表安装插件接口类型表 typedef__int64 (__stdcall* INSTALLPLUGint YPE)(int windowsIndex); 参数:windowsIndex:当前指定序号 说明:1.对于第一种方式打开回调不能为NULL,内部先安装插件再触发回调打开进程(在打开回调中可以手动或者自动打开进程1.如果是手动直接返回1就行或错误值表示中断操作2.如果是自动返回对应的PID或错误值表示中断操作)2.其他二种方式打开回调可以为NULL,表示进程已经打开了,不需要在回调中打开,此时使用指定的PID或者窗口句柄来安装插件,具体是PID还是句柄请查看安装插件接口类型表3.返回值根据当前的安装插件方式不同有不同的含义:（具体请看安装插件接口类型表和覆盖策略） 3.1方式二是通过PID安装插件那么返回值应该为打开进程的PID,并把传递的PID参数给覆盖了(请看PID覆盖策略),可以返回小于等于0的错误值或者不存在的PID,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.1.1PID覆盖策略 \\n1.如果指定的参数PID有效大于0并存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID\\n2.如果指定的参数PID有效大于0并存在同时打开回调返回的PID无效小于等于0不存在就用指定参数的PID\\n3.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID无效小于等于0不存在就直接返回错误\\n4.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID 3.2方式三是通过窗口句柄安装插件那么返回值应该为打开进程的句柄,并把传递的句柄参数给覆盖了(请看窗口句柄覆盖策略),可以返回小于等于0的错误值或者窗口句柄无效,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.2.1窗口句柄覆盖策略 \\n1.如果指定参数的窗口句柄有效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄\\n2.如果指定参数的窗口句柄有效同时打开回调返回的的句柄无效就用指定参数的句柄\\n3.如果指定参数的窗口句柄无效同时打开回调返回的的句柄无效就直接返回错误\\n4.如果指定参数的窗口句柄无效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄 检查回调checkFun: typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int prePid,int error); 参数:windowsIndex:当前指定序号preWindowsIndex:之前绑定的序号或者错误值(小于0)--来源HCInject_GetPreWinIndex返回prePid:之前绑定的序号对应的PID--来源HCInject_GetPid返回error:提示值 error==RET_重连窗口(5)----->返回值含义:(1重连直接进行加载环境0新窗口) error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的) 我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 error==RET_重连窗口序号不一致(6)----->返回值含义:(1重连并使用之前绑定的序号进行加载环境0新窗口(需要用户在回调中把之前PID给关闭)) 说明: 1.如果指定的检查回调为NULL,当内部检查到是重连窗口的时候 2.如果发现序号不一致就会直接返回(ERROR_当前进程插件序号不一致-1216) 3.如果序号一致就直接加载环境并实现重连 几个核心的点归纳总结出来其实就能规避掉很多坑了比如1.没安装过插件的都不算重连窗口全部当新窗口处理会触发打开回调2.安装过插件的不管是卸载了环境还是崩溃了中控都算重连窗口不会触发打开回调",
    "url": "/docs/python/category_5",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "环境初始化模块(Inject) - HD通讯_初始化",
    "content": "【功能描述】 初始化插件环境 【备注】 每次打开游戏都需要先初始化一次 不要多次初始化 该接口还会把当前全局进程位数HCEnv_SetProcessType与当前窗口序号进程绑定,省去了切换进程位数的操作,如果不绑定可能会返回-1107(ERROR_进程位数不匹配)",
    "url": "/docs/python/category_6",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "环境初始化模块(Inject) - HD通讯_初始化Ex",
    "content": "【功能描述】 初始化插件环境 【备注】 每次打开游戏都需要先初始化一次 不要多次初始化 如果不需要用LUA来初始化自己的数据,可以直接使用HCInject_Init 该接口还会把当前全局进程位数HCEnv_SetProcessType与当前窗口序号进程绑定,省去了切换进程位数的操作,如果不绑定可能会返回-1107(ERROR_进程位数不匹配)",
    "url": "/docs/python/category_6",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "环境初始化模块(Inject) - HD通讯_初始化Exx",
    "content": "【功能描述】 初始化插件环境 【备注】 每次打开游戏都需要先初始化一次 不要多次初始化 如果不需要用LUA来初始化自己的数据或者预加载DLL,可以直接使用HCInject_Init 该接口还会把当前全局进程位数HCEnv_SetProcessType与当前窗口序号进程绑定,省去了切换进程位数的操作,如果不绑定可能会返回-1107(ERROR_进程位数不匹配)",
    "url": "/docs/python/category_6",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "环境初始化模块(Inject) - HD通讯_获取PID",
    "content": "【功能描述】 获取打开的进程PID 【备注】 调用这个接口之前必须保证插件已经加载才会获取PID",
    "url": "/docs/python/category_6",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "环境初始化模块(Inject) - HD通讯_获取之前PID",
    "content": "【功能描述】 获取打开的进程之前的PID(可以用于重连) 【备注】 当我们在调试的时候中控如果崩了,如果此时插件还在游戏进程中执行,那么可以当打开中控的时候直接获取PID进行通讯,而不是调用初始化之类的操作",
    "url": "/docs/python/category_6",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "环境初始化模块(Inject) - HD通讯_获取绑定窗口序号",
    "content": "【功能描述】 通过进程PID尝试拿到绑定的窗口序号 【备注】 返回如果大于等于0的值表示之前进程绑定的窗口序号 没有进程PID返回-1178 没有绑定过返回-1179",
    "url": "/docs/python/category_6",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "环境初始化模块(Inject) - HCInject_GetPreWinIndexEx",
    "content": "【功能描述】 通过进程PID尝试拿到绑定的窗口序号 【备注】 返回如果大于等于0的值表示之前进程绑定的窗口序号 没有进程PID返回-1178 没有绑定过返回-1179",
    "url": "/docs/python/category_6",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "环境初始化模块(Inject) - HD通讯_获取窗口句柄",
    "content": "【功能描述】 获取窗口句柄,内部是通过PID获取窗口句柄需要先安装好插件到目标进程 【备注】 内部是通过HCWIN_EnumWindowByProcessId获取",
    "url": "/docs/python/category_6",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "环境初始化模块(Inject) - HD通讯_获取窗口句柄Ex",
    "content": "【功能描述】 获取窗口句柄(需要内置,一般不需要调用这个获取句柄),如果需要通过PID获取句柄请调用HCInject_GetHwnd 【备注】 这个接口和内置的游戏接口有关,需要搭建完通讯才能调用 并不是一定获取到 如果要获取进程句柄还需要自行获取,除非内置了游戏数据",
    "url": "/docs/python/category_6",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "环境初始化模块(Inject) - HD通讯_继续",
    "content": "【功能描述】 继续环境加载操作 【备注】 当我们调用了HCEnv_Load后需要调用这个接口来验证",
    "url": "/docs/python/category_6",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "环境初始化模块(Inject) - HD通讯_存数据",
    "content": "【功能描述】 存自定义二进制数据 【备注】 无",
    "url": "/docs/python/category_6",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "环境初始化模块(Inject) - HD通讯_取数据",
    "content": "【功能描述】 取自定义二进制数据 【备注】 取的数据就是用HCInject_SetData接口存的数据",
    "url": "/docs/python/category_6",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "通讯环境模块(Env) - HD环境_初始化",
    "content": "【功能描述】 HD插件环境加载(初始化中控环境) 【备注】 中控初始化开始就要调用,仅仅一次",
    "url": "/docs/python/category_7",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "通讯环境模块(Env) - HD环境_初始化Ex",
    "content": "【功能描述】 HD插件环境加载(初始化中控环境)(扩展版本)最新版本一般不用了 【备注】 中控初始化开始就要调用,仅仅一次",
    "url": "/docs/python/category_7",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "通讯环境模块(Env) - HD环境_加载窗口",
    "content": "【功能描述】 HD插件环境加载 【备注】 调用这个接口需要先调用环境初始化模块中的初始化接口 每次打开进程后都要调用",
    "url": "/docs/python/category_7",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "通讯环境模块(Env) - HD环境_加载窗口Ex",
    "content": "【功能描述】 HD插件环境加载(扩展版本),涉及到回调 【备注】 调用这个接口需要先调用环境初始化模块中的初始化接口 每次打开进程后都要调用",
    "url": "/docs/python/category_7",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "通讯环境模块(Env) - HD环境_卸载窗口",
    "content": "【功能描述】 HD插件环境卸载 【备注】 调用这个接口需要先调用环境初始化模块中的初始化接口 进程关闭一定要记得卸载窗口序号对应的窗口环境,以便于下次窗口序号使用 1.没安装过插件的都不算重连窗口全部当新窗口处理 2.安装过插件的不管卸载环境还是崩溃或者重启窗口都可以重连窗口一个序号只能绑定到一个窗口操作",
    "url": "/docs/python/category_7",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "通讯环境模块(Env) - HD环境_卸载窗口Ex",
    "content": "【功能描述】 HD插件环境卸载(扩展版本) 【备注】 调用这个接口需要先调用环境初始化模块中的初始化接口 进程关闭一定要记得卸载窗口序号对应的窗口环境,以便于下次窗口序号使用 1.没安装过插件的都不算重连窗口全部当新窗口处理 2.安装过插件的不管卸载环境还是崩溃或者重启窗口都可以重连窗口一个序号只能绑定到一个窗口操作",
    "url": "/docs/python/category_7",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "通讯环境模块(Env) - HDEnv_GetWinExIndex",
    "content": "【功能描述】 获取副窗口序号 【备注】 这个副窗口序号可以用于登录器的绑定和操作,相当于窗口序号的一个助手,做一些额外的事情相当于一个窗口序号可以操作2个进程如:窗口序号1那么他返回的窗口扩展序号就是1+31也就是32序号",
    "url": "/docs/python/category_7",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "通讯环境模块(Env) - HDEnv_GetGlobalWinExIndex",
    "content": "【功能描述】 获取全局副窗口序号,这是一个全局的序号 【备注】 一个中控仅有一个计算方式:0+31也就是这个全局序号为31序号从0开始用途:给当前中控分配一个助手,来控制一个进程来辅助中控做一些事情",
    "url": "/docs/python/category_7",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "通讯环境模块(Env) - HD环境_附加心跳",
    "content": "【功能描述】 给中控附加心跳 【备注】 检测主线程心跳 如果需要检测主线程心跳是否卡住,请记得先HOOK主线程接口HC_HookMaint hread 设置心跳回调函数类型 typedef__int32 (* HeartFunType)(__int32 窗口索引,__int32 type);回调函数返回值:0不重置之前的记录1重置之前的记录(一般重新开启新进程会设置为1) \\n0.正常心跳进程存在的情况下会触发\\n1.通讯崩溃/关闭等等原因导致进程不存在->重启窗口\\n2.主线程崩溃/关闭/未响应/目标进程卡死原因导致进程不存在/存在->强制关闭->重启窗口设置挂接主线程\\n2.1.附加心跳的时候可以检查主线程的状态(游戏/目标)\\n2.2.后面的内存操作可以主线程调用\\n2.3.注意:附加心跳的时候设置的检查时间一定要大于安装插件到挂接主线程的时间\\n3.卡屏崩溃/关闭/区域图像卡死了原因导致进程不存在/存在->强制关闭->重启窗口设置屏幕检查范围\\n6.1+2+3",
    "url": "/docs/python/category_7",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "通讯环境模块(Env) - HCEnv_SetWindowsSortInfo",
    "content": "【功能描述】 设置窗口排序信息",
    "url": "/docs/python/category_7",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "通讯环境模块(Env) - HD环境_设置卡屏检查信息",
    "content": "【功能描述】 当我们心跳检测指定了3或者6需要设置卡屏范围和卡屏检测次数当大于这个次数就调用回调",
    "url": "/docs/python/category_7",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "通讯环境模块(Env) - HD环境_脱离心跳",
    "content": "【功能描述】 脱离中控附加的心跳检测 【备注】 脱离会堵塞直到脱离成功一般中控进程结果关闭前调用",
    "url": "/docs/python/category_7",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "通讯环境模块(Env) - HD环境_调试模式",
    "content": "【功能描述】 设置导入接口为调试模式 【备注】 中控初始化开始就可以调用,仅仅一次 发布版本不需要调用此接口,默认为发布版本",
    "url": "/docs/python/category_7",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "通讯环境模块(Env) - HD环境_开启文件提示",
    "content": "【功能描述】 设置是否打开文件提示窗口 【备注】 当HD内部导致中控关闭或者插件失效会一文件形式提示信息",
    "url": "/docs/python/category_7",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "通讯环境模块(Env) - HD环境_添加线程",
    "content": "【功能描述】 添加线程环境 【备注】 这个接口用来测试用的,开发者一般用不到",
    "url": "/docs/python/category_7",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "通讯环境模块(Env) - HD环境_测试通讯值",
    "content": "【功能描述】 测试是否通讯成功,返回单一值 【备注】 这个接口用来测试是否环境搭建成功",
    "url": "/docs/python/category_7",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "通讯环境模块(Env) - HCEnv_TestCALL_RetArray",
    "content": "【功能描述】 测试是否通讯成功,返回json字符串 【备注】 这个接口用来测试是否环境搭建成功",
    "url": "/docs/python/category_7",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "通讯环境模块(Env) - HCEnv_TestCALL_RetValueEx",
    "content": "【功能描述】 测试是否通讯成功,返回单一值 【备注】 这个接口用来测试是否环境搭建成功",
    "url": "/docs/python/category_7",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "通讯环境模块(Env) - HD环境_测试通讯字符串Ex",
    "content": "【功能描述】 测试是否通讯成功,返回json字符串 【备注】 这个接口用来测试是否环境搭建成功",
    "url": "/docs/python/category_7",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "通讯环境模块(Env) - HD环境_设置目标进程位数",
    "content": "【功能描述】 设置目标进程位数 【备注】 该接口是全局设置,也就是设置了一次,接下来的所有进程都是该位数,可以多次调用切换进程位数,建议使用HCEnv_SetProcessTypeEx这个扩展版本 如果使用了HDEX_InstallPlugin1HDEX_InstallPlugin2HDEX_InstallPlugin3这些接口可以不用调用这个接口设置目标进程位数 如果是自定义通讯流程就需要自己设置后然后初始化序号进行通讯绑定",
    "url": "/docs/python/category_7",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "通讯环境模块(Env) - HD环境_设置目标进程位数Ex",
    "content": "【功能描述】 指定某个序号绑定的进程位数 【备注】 如果使用了HDEX_InstallPlugin1HDEX_InstallPlugin2HDEX_InstallPlugin3这些接口可以不用调用这个接口设置目标进程位数 如果是自定义通讯流程就需要自己设置后然后初始化序号进行通讯绑定",
    "url": "/docs/python/category_7",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "通讯环境模块(Env) - HD环境_设置中控事件处理回调函数",
    "content": "【功能描述】 设置中控事件处理回调函数 【备注】 这个回调函数作用于当自定义模块通知中控的时候 中控事件处理回调函数接口类型: typedef__int32 (__stdcall* HandleEventFunType)(__int32 窗口序号,__int32 插件序号,HDHandleEventInfoInfo); HDHandleEventInfo结构体: typedefstructHDHandleEventInfo\\n处理事件{__int32 m_callType;\\n自定义HDValuem_call;HDValuem_rcx;HDValuem_rdx;HDValuem_r8;HDValuem_r9;HDValuem_lparam5;HDValuem_lparam6;HDValuem_lparam7;HDValuem_lparam8;HDValuem_value;HDValuem_size;charm_buffer[MAX_PATH];charm_buffer2[MAX_PATH];HDValue* m_pRetValue;\\n值单独char* m_pRetJson;\\n字符串返回}HDHandleEventInfo; 代码案例: __int32 HCLogin::HandleEvent(__int32 窗口序号,__int32 插件序号,HDHandleEventInfoInfo){HDbgPrint f_Normal(\\\"处理接受事件->窗口序号:%dcallType:%dbuffer1:%sbuffer2:%scall:%llXrcx:%llXrdx:%llX\\\",窗口序号,Info.m_callType,Info.m_buffer,Info.m_buffer2,Info.m_call,Info.m_rcx,Info.m_rdx);if(Info.m_callType==1){* Info.m_pRetValue=999;autoret=HCMKB_UnBind(窗口序号);HDbgPrint f_Normal(\\\"解绑后台ret:%d\\\",ret);return8;}elseif(Info.m_callType==2){\\n处理逻辑* Info.m_pRetValue=123;sprint f_s(Info.m_pRetJson,1024* 10,\\\"%s\\\",\\\"我是中控\\\");\\n672637autoret=HCMKB_Bind(窗口序号,Info.m_call,\\\"1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|0|1|\\\");HDbgPrint f_Normal(\\\"绑定后台ret:%d\\\",ret);if(ret==1){Sleep(1000);ret=HCMKB_MoveTo(窗口序号,672,610,0);HDbgPrint f_Normal(\\\"模拟移动一次->672610ret:%d\\\",ret);ret=HCMKB_LeftClick(窗口序号);HDbgPrint f_Normal(\\\"模拟点击一次->ret:%d\\\",ret);}return1024* 10;\\n大于8认为是字符串}* Info.m_pRetValue=1;return8;}",
    "url": "/docs/python/category_7",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "通讯环境模块(Env) - HCEnv_SetShutDownCallBack",
    "content": "【功能描述】 设置关闭回调函数(处理HD功能失效,内部自动关闭中控前的操作) 【备注】 当HD出现异常或者失效或者网络验证出现断线,会在自动关闭自身在期间会先调用这个回调(这个回调自己做好关闭前处理工作)然后会自动调用微软API接口ExitProcess();结束自身 在这个回调用户可以自行处理自己的业务逻辑 1.资源清理逻辑 2.接口释放逻辑 3.自启逻辑 4.自定义处理逻辑 回调函数接口类型: typedef__int32 (__stdcall* ShutDownEventFunType)(__int32 code); code:错误代码",
    "url": "/docs/python/category_7",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "通讯环境模块(Env) - HCEnv_SetPidCheckBack",
    "content": "【功能描述】 设置PID检查回调(内部检查PID不存在会触发这个回调) 【备注】 1.这是设置全局PID检查回调 2.内部检查PID不存在会触发这个回调 3.如果没有调用此接口设置全局PID检查回调,那么对于4种安装插件方式中,当内部检查不到PID存在也会触发检查回调并传递给回调参数窗口序号:0之前窗口序号:0检查PID:pid提示值:8 回调函数接口类型: typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int checkPid,int error); windowsIndex:窗口序号 preWindowsIndex:窗口序号 checkPid:当前检查的PID error:传递8表示需要检查PID",
    "url": "/docs/python/category_7",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "通讯环境模块(Env) - HD环境_设置通讯检测间隔",
    "content": "【功能描述】 设置通讯检测间隔毫秒 【备注】 1.值越小响应越快,随之带来的效率更高但是会导致CPU利用率变高2.值的大小根据当前的项目指定,对于一直要实时响应的最好小点",
    "url": "/docs/python/category_7",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "通讯环境模块(Env) - HD环境_设置回调响应间隔",
    "content": "【功能描述】 设置回调响应毫秒 【备注】 1.值越小响应越快,随之带来的效率更高但是会导致CPU利用率变高2.值的大小根据当前的项目指定,对于一直要实时响应的最好小点",
    "url": "/docs/python/category_7",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "通讯环境模块(Env) - HD环境_强制结束线程",
    "content": "【功能描述】 强制结束当前线程(可以在卸载环境后调用) 【备注】 强制结束当前线程内部会对锁操作循环拿到锁才会强制关闭并返回成功此接口小心使用1.不到万不得已不要强制关闭线程(因为强制关闭线程不管在任何时候都有可能造成不可能预计的BUG)2.调用此接口的线程不要和结束的线程是同一个(虽然内部有检查)3.该接口如果参数:是否操作锁为真,那么会堵塞,直到拿到锁权限后,才会强制关闭线程,然后解锁(防止死锁).",
    "url": "/docs/python/category_7",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "通讯环境模块(Env) - HD环境_强制结束线程Ex",
    "content": "【功能描述】 强制结束当前线程(可以在卸载环境后调用) 【备注】 强制结束当前线程内部会对锁操作循环拿到锁才会强制关闭并返回成功此接口小心使用1.不到万不得已不要强制关闭线程(因为强制关闭线程不管在任何时候都有可能造成不可能预计的BUG)2.调用此接口的线程不要和结束的线程是同一个(虽然内部有检查)3.该接口如果参数:是否操作锁为真,那么会堵塞,直到拿到锁权限后,才会强制关闭线程,然后解锁(防止死锁).",
    "url": "/docs/python/category_7",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_29",
    "title": "通讯环境模块(Env) - HD环境_关闭绑定进程",
    "content": "【功能描述】 关闭绑定的目标窗口 【备注】 内部实现可能是正常关闭也可能是强制关闭 至于是哪一种会根据实际情况动态调用",
    "url": "/docs/python/category_7",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "多线程模块[MT] - HD多线程_初始化流程回调",
    "content": "【功能描述】 初始化多线程设置相关流程回调 【备注】 1.普通回调1参数windowsIndex:代表的是窗口序号也是主序号 2.每个回调参数的函数类型不一样,注意对应 回调触发顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->结束回调 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/python/category_8",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "多线程模块[MT] - HD多线程_初始化流程回调Ex",
    "content": "【功能描述】 初始化多线程设置相关流程回调可以绑定一个全局参数 【备注】 1.普通回调1参数windowsIndex:代表的是窗口序号也是主序号 2.每个回调参数的函数类型不一样,注意对应 回调触发顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->结束回调 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调EXtypedef__int64 (__stdcall* UIFUNTYPEEX)(__int32 windowsIndex,char* stepText,void* lparam,BOOL m_end1,BOOL m_pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 lparam:HCMT_InitProcessEx绑定一个全局参数,一般我们指定为一个UI对象地址,这个回调可以拿到这个地址 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/python/category_8",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "多线程模块[MT] - HD多线程_初始化操作回调",
    "content": "【功能描述】 初始化多线程结束/暂停/恢复状态的操作回调 【备注】 1.仅仅对于这3个回调而言普通回调2参数index:大于多开限制数量,就是副序号;小于就是主序号(也是窗口序号);计算公式:if(index>=多开限制数)主序号=index-多开限制数; \\n(index>=多开环境数量)?(index-多开环境数量):(index)2.其他接口的windowsIndex就代表的是窗口序号也是主序号3.多开限制数量最大常量为31,请自行在程序里面定义 4.多开限制数量用HCEnv_GetMaxWindowNum返回一个常数,可以自己写成一个常量 回调触发顺序: 结束窗口操作:endBindCallBack并传递对应的线程序号(线程序号可能是主序号也就是窗口序号,也有可能是副序号) 暂停窗口操作:pauseBindCallBack并传递对应的线程序号(线程序号可能是主序号也就是窗口序号,也有可能是副序号) 恢复窗口操作:recoverBindCallBack并传递对应的线程序号(线程序号可能是主序号也就是窗口序号,也有可能是副序号) 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/python/category_8",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "多线程模块[MT] - HD多线程_注册消息回调",
    "content": "【功能描述】 注册窗口消息 【备注】 1.通过HCMT_MsgSend/HCMT_MsgPost来触发回调 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/python/category_8",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "多线程模块[MT] - HD多线程_同步发送消息",
    "content": "【功能描述】 发送消息(同步) 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/python/category_8",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "多线程模块[MT] - HD多线程_异步发送消息",
    "content": "【功能描述】 发送消息(异步) 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/python/category_8",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "多线程模块[MT] - HD多线程_开启窗口Msg",
    "content": "【功能描述】 通过消息开启窗口操作 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.开启成功后会相应触发对应设置的回调函数 3.顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 停止窗口:结束绑定回调->结束回调",
    "url": "/docs/python/category_8",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "多线程模块[MT] - HD多线程_停止窗口Msg",
    "content": "【功能描述】 通过消息停止窗口操作 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.开启成功后会相应触发对应设置的回调函数 3.顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 停止窗口:结束绑定回调->结束回调",
    "url": "/docs/python/category_8",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "多线程模块[MT] - HD多线程_重启窗口Msg",
    "content": "【功能描述】 通过消息重启窗口操作 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.开启成功后会相应触发对应设置的回调函数 3.顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 停止窗口:结束绑定回调->结束回调",
    "url": "/docs/python/category_8",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "多线程模块[MT] - HD多线程_重启窗口MsgEx",
    "content": "【功能描述】 通过消息重启窗口操作(扩展版本) 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.开启成功后会相应触发对应设置的回调函数 3.顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 停止窗口:结束绑定回调->结束回调",
    "url": "/docs/python/category_8",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "多线程模块[MT] - HD多线程_更新UI",
    "content": "【功能描述】 通过消息触发UI回调,并传递线程状态信息和日志操作信息给UI回调 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
    "url": "/docs/python/category_8",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "多线程模块[MT] - HD多线程_发送文本",
    "content": "【功能描述】 通过消息触发UI回调,并传递线程状态信息和日志操作信息给UI回调 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
    "url": "/docs/python/category_8",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "多线程模块[MT] - HD多线程_所有窗口暂停",
    "content": "【功能描述】 设置所有窗口结束 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/python/category_8",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "多线程模块[MT] - HD多线程_获取线程状态值",
    "content": "【功能描述】 获取主副序号对应的线程的状态值 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调 typedefenumTHREADSTATE\\n线程状态{THREADSTATE_NONE=-1,\\n未启动THREADSTATE_STARTING=0,\\n开启中THREADSTATE_LOGINING=1,\\n正在登录THREADSTATE_RUNNING=2,\\n正在运行THREADSTATE_PAUSE=3,\\n暂停THREADSTATE_PAUSEING=4,\\n正在暂停THREADSTATE_RECOVERING=5,\\n正在恢复THREADSTATE_WILLSTOP=6,\\n准备停止THREADSTATE_STOPPING=7\\n正在停止}THREADSTATE;",
    "url": "/docs/python/category_8",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "多线程模块[MT] - HCMT_GetStateString",
    "content": "【功能描述】 获取状态整数值对应的字符串 【备注】 无",
    "url": "/docs/python/category_8",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "多线程模块[MT] - HD多线程_是否能开启",
    "content": "【功能描述】 判断是否能开启新的(主副线程)传递的只能是主序号 【备注】 无",
    "url": "/docs/python/category_8",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "多线程模块[MT] - HD多线程_开启窗口",
    "content": "【功能描述】 直接开启窗口操作 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.开启成功后会相应触发对应设置的回调函数 3.顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 停止窗口:结束绑定回调->结束回调",
    "url": "/docs/python/category_8",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "多线程模块[MT] - HD多线程_所有窗口恢复",
    "content": "【功能描述】 设置所有窗口恢复 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的恢复绑定回调",
    "url": "/docs/python/category_8",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "多线程模块[MT] - HD多线程_所有窗口停止",
    "content": "【功能描述】 设置所有窗口停止 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的停止绑定回调",
    "url": "/docs/python/category_8",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "多线程模块[MT] - HD多线程_暂停窗口",
    "content": "【功能描述】 设置窗口暂停 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/python/category_8",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "多线程模块[MT] - HD多线程_暂停线程",
    "content": "【功能描述】 设置主副序号对应的线程暂停 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/python/category_8",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "多线程模块[MT] - HD多线程_恢复窗口",
    "content": "【功能描述】 设置窗口恢复 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的恢复绑定回调",
    "url": "/docs/python/category_8",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "多线程模块[MT] - HD多线程_恢复线程",
    "content": "【功能描述】 设置主副序号对应的线程恢复 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/python/category_8",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "多线程模块[MT] - HD多线程_停止窗口",
    "content": "【功能描述】 设置窗口停止 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的结束绑定回调",
    "url": "/docs/python/category_8",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "多线程模块[MT] - HD多线程_是否运行中",
    "content": "【功能描述】 (第一第二)回调里面调用,检查当前线程是否结束 【备注】 无",
    "url": "/docs/python/category_8",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "多线程模块[MT] - HD多线程_是否暂停",
    "content": "【功能描述】 判断主副序号对应的线程是否是已被暂停状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/python/category_8",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "多线程模块[MT] - HD多线程_是否停止",
    "content": "【功能描述】 判断主副序号对应的线程是否是已被结束状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/python/category_8",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "多线程模块[MT] - HD多线程_延迟",
    "content": "【功能描述】 设延迟函数,自带暂停/结束/恢复检查 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.检查随后触发HCMT_InitOperate设置的3个回调;理论上不能在HCMT_InitOperate设置的3个回调中调用,因为会导致无限调用自己(但是内部做了检测所以不会无限调用,也就是如果当前第一次已经检查到标志位并触发对应的绑定回调了,在回调中又再一次调用HCMT_Sleep,那么这一次的HCMT_Sleep只会正常休眠,并不继续检查了,防止无限调用); 3.其他回调均可以(无影响) 4.如果要内部检测状态机状态需要调用HCMT_StatusSleep",
    "url": "/docs/python/category_8",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "多线程状态机 - HD状态机_开启状态机",
    "content": "【功能描述】 开启状态机 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用配合多线程模块一起使用 2.一般在执行回调或者检查回调调用就行不需要都开启(内部有检测是否开启) 3.支持多线程,但是不建议,执行回调中调用就行了",
    "url": "/docs/python/category_9",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "多线程状态机 - HD状态机_操作状态",
    "content": "【功能描述】 全局(全部窗口序号)禁用或者开启状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用配合多线程模块一起使用 2.操作的状态值,必须先调用HCMT_AddStatus添加状态,否则无效 3.支持多线程 4.如果当前状态正在执行中,此时调用该接口使其状态被禁止/无效,那么当前状态对应的状态回调中就会立即退出回调或者立即监控到状态被改变了 5.一旦被禁止,就算我们切换到该状态,也无法去执行绑定的状态回调了",
    "url": "/docs/python/category_9",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "多线程状态机 - HD状态机_改变当前状态",
    "content": "【功能描述】 改变状态机状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用 2.操作的状态值,必须先调用HCMT_AddStatus添加状态,否则无效 3.支持多线程,一般在检测回调中调用 4.只能改变比之前优先级低的优先级 《《《特别注意:状态值的大小也表示优先级,优先级越高的回调,享有最先执行权限！！！！》》》 如:登录回调>死亡回调>买药回调>限时副本回调>主线回调 优先级大小策略: 1.优先级用户自行定义大小(-1表示没有,不要重复)建议从0开始123...依次递增值越大优先级越高 2.优先级高回调的可以打断或者中断优先级低的回调,当优先级高的回调执行完毕,会继续执行优先级低的回调 2.如果是优先级一样的回调,只有执行完第一个,才能执行第二个. 3.优先级低的回调是不能打断优先级高的回调,此时如果想执行优先级低的回调,那么必须等待优先级高的回调执行完毕后,方可执行优先级低的回调 4.回调内部如果有循环流程,应加入退出循环条件(一般使用HCMT_IsStatus作为退出循环的条件判断或者其他),不要死循环,否则无法实现状态切换",
    "url": "/docs/python/category_9",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "多线程状态机 - HD状态机_回溯上个状态",
    "content": "【功能描述】 回溯状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用 2.操作的状态值,必须先调用HCMT_AddStatus添加状态,否则无效 3.支持多线程,一般在检测回调中调用 4.只能改变比之前优先级低的优先级 《《《特别注意:状态值的大小也表示优先级,优先级越高的回调,享有最先执行权限！！！！》》》 如:登录回调>死亡回调>买药回调>限时副本回调>主线回调 优先级大小策略: 1.优先级用户自行定义大小(-1表示没有,不要重复)建议从0开始123...依次递增值越大优先级越高 2.优先级高回调的可以打断或者中断优先级低的回调,当优先级高的回调执行完毕,会继续执行优先级低的回调 2.如果是优先级一样的回调,只有执行完第一个,才能执行第二个. 3.优先级低的回调是不能打断优先级高的回调,此时如果想执行优先级低的回调,那么必须等待优先级高的回调执行完毕后,方可执行优先级低的回调 4.回调内部如果有循环流程,应加入退出循环条件(一般使用HCMT_IsStatus作为退出循环的条件判断或者其他),不要死循环,否则无法实现状态切换",
    "url": "/docs/python/category_9",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "多线程状态机 - HD状态机_是否状态中",
    "content": "【功能描述】 当前状态机的状态在回调中是否有效 【备注】 1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用 2.用在状态回调中,检索是否是当前状态3.在设置的状态回调函数中循环调用检查当前窗口序号的状态类型是否是当前的映射的回调状态类型4.支持多线程 C++例子: ========== __int64 __stdcall HMT::登录状态回调(__int32 windowsIndex,__int64 lparam){while(HCMT_IsStatus()){autoret=HCMT_StatusSleep(1000);HDbgPrint f_Command(\\\"HCMT_StatusSleep:%lld\\\",ret);HCMT_MsgStepText(windowsIndex,\\\"正在登录中...\\\");}return1;} ==========",
    "url": "/docs/python/category_9",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "多线程状态机 - HD状态机_状态延迟",
    "content": "【功能描述】 状态机延迟函数(自带暂停/结束/恢复/状态机) 【备注】 1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用2.支持多线程自带暂停/结束/恢复/状态机 3.注意区别于HCMT_Sleep这个接口是没法检索状态机状态的 C++例子: ========== __int64 __stdcall HMT::登录状态回调(__int32 windowsIndex,__int64 lparam){while(HCMT_IsStatus()){autoret=HCMT_StatusSleep(1000);\\n<<<<<<<<-----------------------------这里能及时返回(当我们状态变动的时候)返回值:4表示状态变动HDbgPrint f_Command(\\\"HCMT_StatusSleep:%lld\\\",ret);HCMT_MsgStepText(windowsIndex,\\\"正在登录中...\\\");}return1;} ==========",
    "url": "/docs/python/category_9",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "多线程状态机 - HD状态机_获取当前状态",
    "content": "【功能描述】 获取状态机状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用 2.支持多线程,一般在UI回调中调用,获取状态值并显示到控件上",
    "url": "/docs/python/category_9",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "多线程状态机 - HCMT_SleepEx",
    "content": "【功能描述】 设延迟函数,自带暂停/结束/恢复检查/状态机状态(可选)(扩展版本) 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.检查随后触发HCMT_InitOperate设置的3个回调;理论上不能在HCMT_InitOperate设置的3个回调中调用,因为会导致无限调用自己(但是内部做了检测所以不会无限调用,也就是如果当前第一次已经检查到标志位并触发对应的绑定回调了,在回调中又再一次调用HCMT_Sleep,那么这一次的HCMT_Sleep只会正常休眠,并不继续检查了,防止无限调用); 3.其他回调均可以(无影响) 4.如果要内部检测状态机状态需要调用HCMT_StatusSleep",
    "url": "/docs/python/category_9",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "APIHOOK - HDHOOK_Send发包",
    "content": "【功能描述】 调用SendAPI(目标进程中调用)X86X64 【备注】 无",
    "url": "/docs/python/category_10",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "APIHOOK - HDHOOK_SendTo发包",
    "content": "【功能描述】 调用SendtoAPI(目标进程中调用)X86X64 【备注】 无",
    "url": "/docs/python/category_10",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "AddressHOOK - HDHOOK_挂钩",
    "content": "【功能描述】 任意HOOK(内置插件)X86X64 【备注】 无 回调写法: ============= X86X64:typedef__int64 (__stdcall* HandleCallBackFunType)(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam); 参数解析: 窗口序号:对应的窗口序号 插件序号:内部自动传递 raxOreaxrbxOrebxrcxOrecxrdxOredxrbpOrebprspOresprsiOresirdiOredi:分别对应X86X64的8个寄存器 r8r9r10r11r12r13r14r15:分别对应X64的8个寄存器 lparam:是HDHK_Hook的第五个参数附加参数 备注: 返回值: 0【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 1【走原有流程】 2【需要修改值】+【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 3【需要修改值】+【走原有流程】 备注:调用约定是__stdcall X86X64通用调用案例: __int32 __stdcall HandleHookCallBackFun(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam){ HDbgPrint f_HOOK(\\\"触发HOOK回调->窗口序号:%d插件序号:%draxOreax:%llXrbxOrebx:%llXrcxOrecx:%llXrdxOredx:%llXrbpOrebp::%llXrspOresp:%llXrsiOresi:%llXrdiOredi:%llXr8:%llXr9:%llXr10:%llXr11:%llXr12:%llXr13:%llXr14:%llXr15:%llXlparam:%d\\\",窗口序号,插件序号,raxOreax,rbxOrebx,rcxOrecx,rdxOredx,rbpOrebp,rspOresp,rsiOresi,rdiOredi,r8,r9,r10,r11,r12,r13,r14,r15,lparam); \\n....中间执行自己的逻辑 \\n....可以用驱动读写 \\n如果需要修改寄存器值就调用HDHK_SetProcessHookCallBackLparam设置__int32 mark=1;autoret=HDHK_SetProcessHookCallBackLparam(窗口序号,插件序号,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,mark);HDbgPrint f_HOOK(\\\"ret:%lld\\\",ret); \\n返回值:0忽视HOOK语句直接跳到原来1走原有流程2需要修改值+直接跳到原来3需要修改值+走原有流程return3;} 回调内修改写法请转至》》》》》修改回调返回方法(X86X64)《《《《《《",
    "url": "/docs/python/category_11",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "AddressHOOK - HDHOOK_挂钩Ex",
    "content": "【功能描述】 任意HOOK(内置插件)X64(该接口针对X64有效) 【备注】 无 回调写法: ============= X86X64:typedef__int64 (__stdcall* HandleCallBackFunType)(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam); 参数解析: 窗口序号:对应的窗口序号 插件序号:内部自动传递 raxOreaxrbxOrebxrcxOrecxrdxOredxrbpOrebprspOresprsiOresirdiOredi:分别对应X86X64的8个寄存器 r8r9r10r11r12r13r14r15:分别对应X64的8个寄存器 lparam:是HDHK_Hook的第五个参数附加参数 备注: 返回值: 0【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 1【走原有流程】 2【需要修改值】+【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 3【需要修改值】+【走原有流程】 备注:调用约定是__stdcall X86X64通用调用案例: __int32 __stdcall HandleHookCallBackFun(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam){ HDbgPrint f_HOOK(\\\"触发HOOK回调->窗口序号:%d插件序号:%draxOreax:%llXrbxOrebx:%llXrcxOrecx:%llXrdxOredx:%llXrbpOrebp::%llXrspOresp:%llXrsiOresi:%llXrdiOredi:%llXr8:%llXr9:%llXr10:%llXr11:%llXr12:%llXr13:%llXr14:%llXr15:%llXlparam:%d\\\",窗口序号,插件序号,raxOreax,rbxOrebx,rcxOrecx,rdxOredx,rbpOrebp,rspOresp,rsiOresi,rdiOredi,r8,r9,r10,r11,r12,r13,r14,r15,lparam); \\n....中间执行自己的逻辑 \\n....可以用驱动读写 \\n如果需要修改寄存器值就调用HDHK_SetProcessHookCallBackLparam设置__int32 mark=1;autoret=HDHK_SetProcessHookCallBackLparam(窗口序号,插件序号,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,mark);HDbgPrint f_HOOK(\\\"ret:%lld\\\",ret); \\n返回值:0忽视HOOK语句直接跳到原来1走原有流程2需要修改值+直接跳到原来3需要修改值+走原有流程return3;} 回调内修改写法请转至》》》》》修改回调返回方法(X86X64)《《《《《《",
    "url": "/docs/python/category_11",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "AddressHOOK - HDHOOK_挂钩Exx",
    "content": "【功能描述】 任意HOOK(内置插件)X64(该接口针对X64有效) 【备注】 无 回调写法: ============= X86X64:typedef__int64 (__stdcall* HandleCallBackFunType)(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam); 参数解析: 窗口序号:对应的窗口序号 插件序号:内部自动传递 raxOreaxrbxOrebxrcxOrecxrdxOredxrbpOrebprspOresprsiOresirdiOredi:分别对应X86X64的8个寄存器 r8r9r10r11r12r13r14r15:分别对应X64的8个寄存器 lparam:是HDHK_Hook的第五个参数附加参数 备注: 返回值: 0【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 1【走原有流程】 2【需要修改值】+【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 3【需要修改值】+【走原有流程】 备注:调用约定是__stdcall X86X64通用调用案例: __int32 __stdcall HandleHookCallBackFun(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam){ HDbgPrint f_HOOK(\\\"触发HOOK回调->窗口序号:%d插件序号:%draxOreax:%llXrbxOrebx:%llXrcxOrecx:%llXrdxOredx:%llXrbpOrebp::%llXrspOresp:%llXrsiOresi:%llXrdiOredi:%llXr8:%llXr9:%llXr10:%llXr11:%llXr12:%llXr13:%llXr14:%llXr15:%llXlparam:%d\\\",窗口序号,插件序号,raxOreax,rbxOrebx,rcxOrecx,rdxOredx,rbpOrebp,rspOresp,rsiOresi,rdiOredi,r8,r9,r10,r11,r12,r13,r14,r15,lparam); \\n....中间执行自己的逻辑 \\n....可以用驱动读写 \\n如果需要修改寄存器值就调用HDHK_SetProcessHookCallBackLparam设置__int32 mark=1;autoret=HDHK_SetProcessHookCallBackLparam(窗口序号,插件序号,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,mark);HDbgPrint f_HOOK(\\\"ret:%lld\\\",ret); \\n返回值:0忽视HOOK语句直接跳到原来1走原有流程2需要修改值+直接跳到原来3需要修改值+走原有流程return3;} 回调内修改写法请转至》》》》》修改回调返回方法(X86X64)《《《《《《 HDHK_HookExxx 函数简介: 任意HOOK(内置插件)X64(该接口针对X64有效) 函数原型:__int64 HDHK_HookExxx(__int32 窗口序号,__int64 hook地址,char* 所属模块名字,__int64 jmp13空白地址,__int64 保留汇编地址,__int32 破坏字节,__int64 回调地址,__int64 附加参数,BOOL 是否主线程调用=FALSE); 参数定义: 窗口序号:窗口序号(从1开始) 所属模块名字:当前HOOK地址所属那个模块可以不指定为0就行 jmp13空白地址:在当前模块的代码地址找一个空白空间大小为13字节用于存储jmp一些指令 保留汇编地址:用来存储破坏字节数量+5字节大小的空白空间的首地址一般这个地址位于当前所属模块代码空白空间 hook地址:当前HOOK的目标地址(参考适合的HOOK地址X86HOOK地址规则X64HOOK地址规则) 破坏字节数:涉及到的汇编字节数 回调地址:遵循下面回调函数类型 附加参数:自定义参数,此参数会传递给回调函数 是否主线程调用:需要开启才开启,一般默认就行 返回值: 查看返回值表 备注: 无 回调写法: ============= X86X64:typedef__int64 (__stdcall* HandleCallBackFunType)(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam); 参数解析: 窗口序号:对应的窗口序号 插件序号:内部自动传递 raxOreaxrbxOrebxrcxOrecxrdxOredxrbpOrebprspOresprsiOresirdiOredi:分别对应X86X64的8个寄存器 r8r9r10r11r12r13r14r15:分别对应X64的8个寄存器 lparam:是HDHK_Hook的第五个参数附加参数 备注: 返回值: 0【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 1【走原有流程】 2【需要修改值】+【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 3【需要修改值】+【走原有流程】 备注:调用约定是__stdcall X86X64通用调用案例: __int32 __stdcall HandleHookCallBackFun(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam){ HDbgPrint f_HOOK(\\\"触发HOOK回调->窗口序号:%d插件序号:%draxOreax:%llXrbxOrebx:%llXrcxOrecx:%llXrdxOredx:%llXrbpOrebp::%llXrspOresp:%llXrsiOresi:%llXrdiOredi:%llXr8:%llXr9:%llXr10:%llXr11:%llXr12:%llXr13:%llXr14:%llXr15:%llXlparam:%d\\\",窗口序号,插件序号,raxOreax,rbxOrebx,rcxOrecx,rdxOredx,rbpOrebp,rspOresp,rsiOresi,rdiOredi,r8,r9,r10,r11,r12,r13,r14,r15,lparam); \\n....中间执行自己的逻辑 \\n....可以用驱动读写 \\n如果需要修改寄存器值就调用HDHK_SetProcessHookCallBackLparam设置__int32 mark=1;autoret=HDHK_SetProcessHookCallBackLparam(窗口序号,插件序号,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,mark);HDbgPrint f_HOOK(\\\"ret:%lld\\\",ret); \\n返回值:0忽视HOOK语句直接跳到原来1走原有流程2需要修改值+直接跳到原来3需要修改值+走原有流程return3;} 回调内修改写法请转至》》》》》修改回调返回方法(X86X64)《《《《《《",
    "url": "/docs/python/category_11",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "AddressHOOK - HDHOOK_暂停挂钩",
    "content": "【功能描述】 暂停任意HOOK(内置插件)X86X64 【备注】 无",
    "url": "/docs/python/category_11",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "AddressHOOK - HDHOOK_恢复挂钩",
    "content": "【功能描述】 恢复任意HOOK(内置插件)X86X64 【备注】 无",
    "url": "/docs/python/category_11",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "AddressHOOK - HDHOOK_卸载挂钩",
    "content": "【功能描述】 卸载任意HOOK(内置插件)X86X64 【备注】 无",
    "url": "/docs/python/category_11",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "通用模块 - HD通用_CALLX64",
    "content": "【功能描述】 通用CALL(适合X64),支持0-8个参数 【备注】 如果需要更多参数传递请联系作者",
    "url": "/docs/python/category_12",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "通用模块 - HD通用_CALLX86",
    "content": "【功能描述】 通用CALL(适合X86),支持0到8个参数 【备注】 如果需要更多参数传递请联系作者 HC_HookMaint hread 函数简介: 挂接主线程 函数原型:__int64 __stdcall HC_HookMaint hread(__int32 窗口序号,__int64 窗口句柄); 参数定义: 窗口序号:窗口序号(从1开始) 窗口句柄:窗口句柄 返回值: 查看返回值表 备注: 无",
    "url": "/docs/python/category_12",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "ShellCode模块(SH) - HD汇编_转机器码",
    "content": "【功能描述】 汇编文本转换机器码 【备注】 无",
    "url": "/docs/python/category_13",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "ShellCode模块(SH) - HD汇编_写入机器码",
    "content": "【功能描述】 机器码写入到进程 【备注】 这里执行用的是HD驱动来申请和写入这个机器码,注意要把HD驱动安装好 拿到了写入地址可以使用HD驱动创建远线程来执行",
    "url": "/docs/python/category_13",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "LUA模块(LUA) - HDLUA_读文件",
    "content": "【功能描述】 执行或加载LUA文件 【备注】 LUA标识符:当【是否需要拿到返回值】参数为真的时候,用作线程的标识符,方便主动退出线程，标识符规则:不要太大了{0到100}以内就行是否执行:真表示执行并加载LUA(比如:注入一些自定义LUA接口同时还能执行LUA),反之只是加载LUA文件(比如:注入一些自定义LUA接口)是否需要拿到返回值:真表示堵塞直到LUA文件执行完毕并获取返回值，反之表示开启一根线程执行(无法拿到返回值,可以在LUA文件中做一些耗时的操作)",
    "url": "/docs/python/category_14",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "LUA模块(LUA) - HDLUA_结束LUA",
    "content": "【功能描述】 关闭LUA线程 【备注】 LUA标识符:调用【HCLUA_ReadFile】接口指定的【LUA标识符】参数,一一对应,-1表示全部LUA线程退出！！！",
    "url": "/docs/python/category_14",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "LUA模块(LUA) - HDLUA_执行CALL",
    "content": "【功能描述】 执行被注册过的LUA函数 【备注】 json:{\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":XXX}",
    "url": "/docs/python/category_14",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "驱动模块(N) - HCN_LoadDrv",
    "content": "【功能描述】 加载N驱动 【备注】 需要联网,可以卸载,驱动内置了进程,如需要自定义进程名联系管理员添加或者用HD驱动",
    "url": "/docs/python/category_15",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "驱动模块(N) - HCN_InjectDll(W/A)X86",
    "content": "【功能描述】 注入32/64位DLL(需要先加载N驱动) 【备注】 无",
    "url": "/docs/python/category_15",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "驱动模块(N) - HCN_InjectDll(W/A)X64",
    "content": "【功能描述】 注入32/64位DLL(需要先加载N驱动) 【备注】 无",
    "url": "/docs/python/category_15",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "驱动模块(N) - HCN_InstallPlug(86/64)",
    "content": "【功能描述】 安装32/64位HD插件(需要先加载N驱动) 【备注】 无",
    "url": "/docs/python/category_15",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "驱动模块(N) - HCN_UnLoadDrv",
    "content": "【功能描述】 卸载驱动同时清除了注入的DLL缓存 【备注】 取消窗口关联,一定要卸载相关信息,随后所有循环会快速内退,从而线程安全退出！！！！",
    "url": "/docs/python/category_15",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "驱动模块(HD) - HD驱动_安装",
    "content": "【功能描述】 加载HD驱动(正式版本) 【备注】 需要联网,不可以卸载驱动,可以清除注入DLL缓存 此接口相当于调用HCHD_LoadDrv2传递-1:HDEx正式版本(云下发正常驱动,无特殊处理)",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "驱动模块(HD) - HD驱动_安装2",
    "content": "【功能描述】 云下发加载驱动或组件(可以通过指定驱动序号,加载不同版本的驱动如:正式版本定制版本备用版本其他保护盾VT等等) 【备注】 需要联网,不可以卸载驱动,可以清除注入DLL缓存",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "驱动模块(HD) - HD驱动_初始化快速读写",
    "content": "【功能描述】 初始化HD驱动快速读写(一般在HD安装驱动接口后的下一句就开始初始化) 【备注】 如果最开始安装HD驱动调用的是HCHD_LoadDrv同时又需要快速读写遍历,就需要先调用此接口,然后调用HCHD_RWExx进行快读内存读写遍历(百万级别) 如果最开始安装HD驱动调用的是HCHD_LoadDrv2并传递驱动序号为0,表示可以直接调用HCHD_RWExx进行快读内存读写遍历(百万级别),不需要再调用此接口了",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "驱动模块(HD) - HD驱动_无痕注入DLL",
    "content": "【功能描述】 把DLL注入到指定进程中(指定DLL二进制文件数据) 【备注】 不能卸载驱动,可以清除注入DLL缓存,支持32/64进程",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "驱动模块(HD) - HCHD_InjectX86X64ByFile",
    "content": "【功能描述】 把DLL注入到指定进程中(指定DLL文件路径) 【备注】 不能卸载驱动,可以清除注入DLL缓存,支持32/64进程",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "驱动模块(HD) - HCHD_InstallPlug(86/64)",
    "content": "【功能描述】 安装HD插件到指定进程中 【备注】 需要联网,可以清除注入DLL缓存,支持32/64进程",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "驱动模块(HD) - HD驱动_卸载插件",
    "content": "【功能描述】 卸载插件(并不是从进程中卸载,而是清除了下一次进程打开的时候安装插件的缓存) 【备注】 无",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "驱动模块(HD) - HD驱动_前台鼠标移动点击",
    "content": "【功能描述】 前台驱动鼠标移动并点击 【备注】 可以通过调用HCHD_SetMMTrackType来设置鼠标全局移动轨迹类型 按键在轨迹坐标集中那些坐标有效:第一个点操作按键-中间点不操作按键-最后一个点不操作按键",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "驱动模块(HD) - HD驱动_前台鼠标移动点击Ex",
    "content": "【功能描述】 前台驱动鼠标移动并点击(可指定句柄) 【备注】 可以通过调用HCHD_SetMMTrackType来设置鼠标全局移动轨迹类型 按键在轨迹坐标集中那些坐标有效:第一个点操作按键-中间点不操作按键-最后一个点不操作按键",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "驱动模块(HD) - HD驱动_前台鼠标移动按下",
    "content": "【功能描述】 前台驱动鼠标移动并按下指定键(可指定句柄) 【备注】 可以通过调用HCHD_SetMMTrackType来设置鼠标全局移动轨迹类型 按键在轨迹坐标集中那些坐标有效:第一个点操作按键-中间点不操作按键-最后一个点不操作按键",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "驱动模块(HD) - HD驱动_前台鼠标移动弹起",
    "content": "【功能描述】 前台驱动鼠标移动并弹起指定键(可指定句柄) 【备注】 可以通过调用HCHD_SetMMTrackType来设置鼠标全局移动轨迹类型 按键在轨迹坐标集中那些坐标有效:第一个点操作按键-中间点不操作按键-最后一个点不操作按键",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "驱动模块(HD) - HD驱动_前台按键",
    "content": "【功能描述】 前台驱动键盘(按下并弹起) 【备注】 无",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "驱动模块(HD) - HD驱动_前台按键按下",
    "content": "【功能描述】 前台驱动键盘(按下某键) 【备注】 无",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "驱动模块(HD) - HD驱动_前台按键弹起",
    "content": "【功能描述】 前台驱动键盘(弹起某键) 【备注】 无",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "驱动模块(HD) - HD驱动_驱动读写",
    "content": "【功能描述】 驱动读写 【备注】 无",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "驱动模块(HD) - HD驱动_开始读写",
    "content": "【功能描述】 驱动读写Ex(开始批读写)与HCHD_EndRWEx成对出现适合快速遍历(百万级别读写单线程) 【备注】 适合快速遍历",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "驱动模块(HD) - HD驱动_驱动读写Ex",
    "content": "【功能描述】 驱动读写Ex(批量读写)(百万级别读写单线程) 【备注】 先调用HCHD_BeginRWEx然后中间调用该接口HCHD_RWEx最后调用HCHD_EndRWEx用于释放环境",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "驱动模块(HD) - HD驱动_结束读写",
    "content": "【功能描述】 驱动读写Ex(结束批读写)与HCHD_BeginRWEx成对出现适合快速遍历(百万级别读写单线程) 【备注】 适合快速遍历",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "驱动模块(HD) - HD驱动_地址是否可读",
    "content": "【功能描述】 检查地址是否可读 【备注】 无",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "驱动模块(HD) - HD驱动_进程保护",
    "content": "【功能描述】 进程保护 【备注】 无",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "驱动模块(HD) - HD驱动_进程隐藏",
    "content": "【功能描述】 开启进程隐藏 【备注】 一次性只能隐藏一个,如果需要隐藏第二个,先把之前的给显示了",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "驱动模块(HD) - HCHD_PHideEx",
    "content": "【功能描述】 开启进程隐藏(加强版本)无法恢复 【备注】 1.隐藏后关闭进程不会蓝屏 2.隐藏后该接口无法恢复显示,其实也没必要恢复显示",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "驱动模块(HD) - HD驱动_进程显示",
    "content": "【功能描述】 进程显示 【备注】 无",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "驱动模块(HD) - HD_进程杀死",
    "content": "【功能描述】 进程杀死 【备注】 无",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "驱动模块(HD) - HD驱动_申请内存",
    "content": "【功能描述】 驱动申请内存 【备注】 无",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "驱动模块(HD) - HD驱动_申请内存Ex",
    "content": "【功能描述】 驱动申请内存(扩展版本) 【备注】 无",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "驱动模块(HD) - HD驱动_内存释放",
    "content": "【功能描述】 驱动内存释放 【备注】 无",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "驱动模块(HD) - HD驱动_修改内存保护",
    "content": "【功能描述】 驱动修改内存保护属性 【备注】 无",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_29",
    "title": "驱动模块(HD) - HD驱动_内存隐藏",
    "content": "【功能描述】 驱动内存隐藏 【备注】 无",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_30",
    "title": "驱动模块(HD) - HD驱动_内存查询",
    "content": "【功能描述】 驱动内存查询 【备注】 无",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_31",
    "title": "驱动模块(HD) - HD驱动_特征码查找地址",
    "content": "【功能描述】 驱动通过特征码查找地址 【备注】 无",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_32",
    "title": "驱动模块(HD) - HD驱动_获取主模块地址",
    "content": "【功能描述】 驱动获取主模块EXE的地址 【备注】 无",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_33",
    "title": "驱动模块(HD) - HD驱动_获取模块地址",
    "content": "【功能描述】 驱动获取指定模块的地址 【备注】 无",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_34",
    "title": "驱动模块(HD) - HD驱动_获取模块函数地址",
    "content": "【功能描述】 驱动获取指定模块的指定的函数地址 【备注】 无",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_35",
    "title": "驱动模块(HD) - HD驱动_修改机器码",
    "content": "【功能描述】 驱动修改机器码 【备注】 无",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_36",
    "title": "驱动模块(HD) - HD驱动_反截图",
    "content": "【功能描述】 驱动内核反截图 【备注】 无",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_37",
    "title": "驱动模块(HD) - HD驱动_远线程执行CALL",
    "content": "【功能描述】 驱动内存远线程执行函数 【备注】 无",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_38",
    "title": "驱动模块(HD) - HD驱动_清除注入缓存",
    "content": "【功能描述】 驱动清除注入缓存(全局插件缓存,DLL缓存) 【备注】 无",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_39",
    "title": "驱动模块(HD) - HD驱动_进程提权",
    "content": "【功能描述】 进程提权 【备注】 无",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_40",
    "title": "驱动模块(HD) - HCHD_HandleRoot",
    "content": "【功能描述】 进程提权 【备注】 无",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_41",
    "title": "驱动模块(HD) - HD驱动_设置鼠标轨迹",
    "content": "【功能描述】 设置驱动鼠标移动轨迹类型 【备注】 无",
    "url": "/docs/python/category_16",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "注入模块(Inject) - HD注入_普通安装插件X86",
    "content": "【功能描述】 普通注入插件(X86),不需要安装驱动,这个不是无痕注入,只支持32位的 【备注】 这个不是无痕注入方便操作一些小程序普通注入插件DLL参数->进程PID,进程位数(32)可以在打开进程的经常下安装插件DLL初始化进程环境后调用这个安装插件然后循环等待拿到PID不是驱动级别",
    "url": "/docs/python/category_17",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "注入模块(Inject) - HD注入_普通安装插件X86Ex",
    "content": "【功能描述】 普通注入插件(X86)),不需要安装驱动,这个不是无痕注入 【备注】 这个不是无痕注入 方便操作一些小程序 用法和HCN_NormalInstallPlugX86一样这个接口只是参数是句柄防止一些进程一次性打开多个这个句柄可以用来指定某个窗口",
    "url": "/docs/python/category_17",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "注入模块(Inject) - HD注入_普通安装插件X64",
    "content": "【功能描述】 普通注入插件(X64),不需要安装驱动,这个不是无痕注入,只支持64位的 【备注】 这个不是无痕注入方便操作一些小程序普通注入插件DLL参数->进程PID,进程位数(32)可以在打开进程的经常下安装插件DLL初始化进程环境后调用这个安装插件然后循环等待拿到PID不是驱动级别",
    "url": "/docs/python/category_17",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "注入模块(Inject) - HD注入_普通安装插件X64Ex",
    "content": "【功能描述】 普通注入插件(X64),不需要安装驱动,这个不是无痕注入,只支持64位的 【备注】 这个不是无痕注入 方便操作一些小程序 用法和HCN_NormalInstallPlugX86一样这个接口只是参数是句柄防止一些进程一次性打开多个这个句柄可以用来指定某个窗口",
    "url": "/docs/python/category_17",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "注入模块(Inject) - HD注入_驱动安装插件",
    "content": "【功能描述】 安装HD插件(需要预先安装HD驱动),【注入方式1】 【备注】 不是无模块注入可以在打开进程的情况下注入驱动级别的,自动判断目标进程位数",
    "url": "/docs/python/category_17",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "注入模块(Inject) - HD注入_驱动注入DLL",
    "content": "【功能描述】 安装指定DLL(需要预先安装HD驱动),【注入方式1】 【备注】 不是无模块注入可以在打开进程的情况下注入驱动级别的,自动判断目标进程位数",
    "url": "/docs/python/category_17",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "注入模块(Inject) - HD注入_驱动安装插件Ex",
    "content": "【功能描述】 安装HD插件(需要预先安装HD驱动),【注入方式2】 【备注】 不是无模块注入可以在打开进程的情况下注入驱动级别的,自动判断目标进程位数",
    "url": "/docs/python/category_17",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "注入模块(Inject) - HD注入_驱动注入DLLEx",
    "content": "【功能描述】 安装指定DLL(需要预先安装HD驱动),【注入方式2】 【备注】 不是无模块注入可以在打开进程的情况下注入驱动级别的,自动判断目标进程位数",
    "url": "/docs/python/category_17",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "盾 - HD盾_保护",
    "content": "【功能描述】 一键保护进程(隐藏等) 【备注】 需要调用HCHD_LoadDrv2传递参数3来安装保护盾HDPP驱动",
    "url": "/docs/python/category_18",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "盾 - HD盾_开启窗口保护",
    "content": "【功能描述】 打开窗口保护以及子窗口 【备注】 需要调用HCHD_LoadDrv2传递参数5来安装保护盾HDPW驱动 可以多次指定内部会把指定的保护窗口句柄以及所属子窗口一起保护",
    "url": "/docs/python/category_18",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "盾 - HD盾_关闭窗口保护",
    "content": "【功能描述】 取消所有窗口保护(指定保护过的) 【备注】 需要调用HCHD_LoadDrv2传递参数5来安装保护盾HDPW驱动 可以取消调用过HCHDPW_OnProtect所有保护的窗口句柄",
    "url": "/docs/python/category_18",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "HDVT - HDVT_申请内存",
    "content": "【功能描述】 VT驱动申请内存 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/python/category_19",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "HDVT - HDVT_释放内存",
    "content": "【功能描述】 VT驱动释放内存 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/python/category_19",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "HDVT - HDVT_读内存",
    "content": "【功能描述】 VT驱动读内存 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/python/category_19",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "HDVT - HDVT_写内存",
    "content": "【功能描述】 VT驱动写内存 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/python/category_19",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "HDVT - HDVT_获取模块地址",
    "content": "【功能描述】 VT驱动获取模块地址 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/python/category_19",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "HDVT - HDVT_获取模块函数地址",
    "content": "【功能描述】 VT驱动获取模块函数地址 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/python/category_19",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "HDVT - HDVT_无痕HOOK",
    "content": "【功能描述】 VT驱动无痕HOOK,过CRC 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/python/category_19",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "HDVT - HDVT_远程执行",
    "content": "【功能描述】 VT驱动远程插入执行 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/python/category_19",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "HDVT - HCHDVT_InjectX64",
    "content": "【功能描述】 VT驱动无痕无模块注入X64DLL 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/python/category_19",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "HDVT - HCHDVT_InjectX86",
    "content": "【功能描述】 VT驱动无痕无模块注入X86DLL 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/python/category_19",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "HDVT - HDVT_安装插件X64",
    "content": "【功能描述】 VT驱动无痕无模块安装X64插件到目标进程中 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/python/category_19",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "HDVT - HDVT_安装插件X86",
    "content": "【功能描述】 VT驱动无痕无模块安装X86插件到目标进程中 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/python/category_19",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "YOLOV(HDYOLOV) - HCYOLO_AddModel",
    "content": "【功能描述】 添加YOLOV(ncnn.bin和ncnn.param)模型文件(从内存中加载模型) 【备注】 ncnn模型bin“＝XXX.ncnn.bin”param“＝XXX.ncnn.param”从内存中加载模型备注:一个进程仅同时支持一个版本的模型 需要调用HCHD_LoadDrv2传递参数4来安装YOLOV组件模块",
    "url": "/docs/python/category_20",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "YOLOV(HDYOLOV) - HCYOLO_AddModelFile",
    "content": "【功能描述】 添加YOLOV(ncnn.bin和ncnn.param)模型文件(从文件中加载模型) 【备注】 ncnn模型bin“＝XXX.ncnn.bin”param“＝XXX.ncnn.param”从文件中加载模型备注:一个进程仅同时支持一个版本的模型 需要调用HCHD_LoadDrv2传递参数4来安装YOLOV组件模块",
    "url": "/docs/python/category_20",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "YOLOV(HDYOLOV) - HCYOLO_Identify",
    "content": "【功能描述】 添加YOLOV(ncnn.bin和ncnn.param)模型文件(从文件中加载模型),从后台截图缓存识别 【备注】 识别信息调用HCEnv_GetRetJson“获取字符串信息以|”分割,自行切割 %d,%f,%f,%f,%f,%f,%d|%d,%f,%f,%f,%f,%f,%d| 字段含义:类别,X1,Y1,X2,Y2,置信度,耗时|类别,X1,Y1,X2,Y2,置信度,耗时| 需要调用HCHD_LoadDrv2传递参数4来安装YOLOV组件模块",
    "url": "/docs/python/category_20",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "YOLOV(HDYOLOV) - HCYOLO_IdentifyByFile",
    "content": "【功能描述】 添加YOLOV(ncnn.bin和ncnn.param)模型文件(从文件中加载模型),从指定图片文件识别 【备注】 识别信息调用HCEnv_GetRetJson“获取字符串信息以|”分割,自行切割 %d,%f,%f,%f,%f,%f,%d|%d,%f,%f,%f,%f,%f,%d| 字段含义:类别,X1,Y1,X2,Y2,置信度,耗时|类别,X1,Y1,X2,Y2,置信度,耗时| 需要调用HCHD_LoadDrv2传递参数4来安装YOLOV组件模块",
    "url": "/docs/python/category_20",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "VNC(HDVNC) - HDVNC_连接虚拟机",
    "content": "【功能描述】 连接虚拟机 【备注】 对应的虚拟机请开启VNC并设置好端口 两种使用VNC模式特别注意: 1.安装插件(HDEX_InstallPluginVM)的形式连接VNC:支持重连port==0属于重连会检查安装插件时候的PID同时自动获取之前连接过的端口前提是已经连接过卸载的时候内部调用(HCEnv_UnLoadEx) 2.未安装插件(HCVnc_Connect)的形式连接VNC:重连一直都可以不能port==0因为会检查PID未安装插件的PID为0卸载的时候内部调用(HCEnv_UnLoad)",
    "url": "/docs/python/category_21",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "VNC(HDVNC) - HDVNC_关闭连接",
    "content": "【功能描述】 关闭连接虚拟机 【备注】 对应的虚拟机请开启VNC并设置好端口 两种使用VNC模式特别注意: 1.安装插件(HDEX_InstallPluginVM)的形式连接VNC:支持重连port==0属于重连会检查安装插件时候的PID同时自动获取之前连接过的端口前提是已经连接过卸载的时候内部调用(HCEnv_UnLoadEx) 2.未安装插件(HCVnc_Connect)的形式连接VNC:重连一直都可以不能port==0因为会检查PID未安装插件的PID为0卸载的时候内部调用(HCEnv_UnLoad)",
    "url": "/docs/python/category_21",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "VNC(HDVNC) - HDVNC_鼠标绝对移动",
    "content": "【功能描述】 VNC鼠标绝对移动(自带移动轨迹直线波动防检测) 【备注】 无",
    "url": "/docs/python/category_21",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "VNC(HDVNC) - HDVNC_鼠标相对移动",
    "content": "【功能描述】 VNC鼠标相对移动(自带移动轨迹直线波动防检测) 【备注】 无",
    "url": "/docs/python/category_21",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "VNC(HDVNC) - HDVNC_鼠标左键点击",
    "content": "【功能描述】 VNC鼠标左键点击 【备注】 无",
    "url": "/docs/python/category_21",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "VNC(HDVNC) - HDVNC_鼠标左键按下",
    "content": "【功能描述】 VNC鼠标左键按下 【备注】 无",
    "url": "/docs/python/category_21",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "VNC(HDVNC) - HDVNC_鼠标左键弹起",
    "content": "【功能描述】 VNC鼠标左键弹起 【备注】 无",
    "url": "/docs/python/category_21",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "VNC(HDVNC) - HDVNC_鼠标左键双击",
    "content": "【功能描述】 VNC鼠标左键双击 【备注】 无",
    "url": "/docs/python/category_21",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "VNC(HDVNC) - HDVNC_鼠标右键点击",
    "content": "【功能描述】 VNC鼠标右键点击 【备注】 无",
    "url": "/docs/python/category_21",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "VNC(HDVNC) - HDVNC_鼠标右键按下",
    "content": "【功能描述】 VNC鼠标右键按下 【备注】 无",
    "url": "/docs/python/category_21",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "VNC(HDVNC) - HDVNC_鼠标右键弹起",
    "content": "【功能描述】 VNC鼠标右键弹起 【备注】 无",
    "url": "/docs/python/category_21",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "VNC(HDVNC) - HDVNC_鼠标滚轮滚下",
    "content": "【功能描述】 VNC鼠标滚轮滚下 【备注】 无",
    "url": "/docs/python/category_21",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "VNC(HDVNC) - HDVNC_鼠标滚轮滚上",
    "content": "【功能描述】 VNC鼠标滚轮滚上 【备注】 无",
    "url": "/docs/python/category_21",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "VNC(HDVNC) - HCVnc_KeyPress",
    "content": "【功能描述】 VNC键盘按键敲击 【备注】 无",
    "url": "/docs/python/category_21",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "VNC(HDVNC) - HDVNC_键盘按键按下",
    "content": "【功能描述】 VNC键盘按键按下 【备注】 无",
    "url": "/docs/python/category_21",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "VNC(HDVNC) - HDVNC_键盘按键弹起",
    "content": "【功能描述】 VNC键盘按键弹起 【备注】 无",
    "url": "/docs/python/category_21",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "VNC(HDVNC) - HCVnc_KeyPressStr",
    "content": "【功能描述】 VNC键盘连续按键字符串(数字+字母) 【备注】 无",
    "url": "/docs/python/category_21",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "VNC(HDVNC) - HCVnc_SendString",
    "content": "【功能描述】 VNC键盘输入字符串(中文+数字+符号+字母) 【备注】 无",
    "url": "/docs/python/category_21",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "VNC(HDVNC) - HDVNC_开启截图",
    "content": "【功能描述】 开启截图(内部会开启一根线程循环获取虚拟机画面) 【备注】 可以调用HCVnc_CloseCapture来结束截图线程",
    "url": "/docs/python/category_21",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "VNC(HDVNC) - HDVNC_关闭截图",
    "content": "【功能描述】 关闭截图(结束开启截图内部产生的线程) 【备注】 需要多次调用关闭,直到关闭成功,通常情况一次就能关闭成功",
    "url": "/docs/python/category_21",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "窗口模块(WIN) - HD窗口_排序通讯窗口",
    "content": "【功能描述】 排序安装过插件的进程 【备注】 安装过插件的经常意思表示: 1.通讯过的窗口序号的对应的进程PID(未被第二次初始化序号HCInject_Init) 2.卸载进程环境不会影响绑定过的进程排序(不能调用始化序号HCInject_Init的前提下,也就是可以重连的情况下) 3.HCInject_Init这个接口一旦调用,就会取消所有关联(意味着不能重连了),从而影响当前绑定的窗口PID,意味着新窗口即将打开",
    "url": "/docs/python/category_22",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "窗口模块(WIN) - HD窗口_伪装进程",
    "content": "【功能描述】 伪装进程(防止检查到实际的进程存在) 【备注】 无 案例: 把注入器伪装成了hd.exe",
    "url": "/docs/python/category_22",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "窗口模块(WIN) - HD窗口_设置窗口状态",
    "content": "【功能描述】 设置或者操作窗口状态 【备注】 无",
    "url": "/docs/python/category_22",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "窗口模块(WIN) - HD窗口_设置窗口大小",
    "content": "【功能描述】 设置窗口大小 【备注】 窗口居中会改变窗口位置",
    "url": "/docs/python/category_22",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "窗口模块(WIN) - HD窗口_窗口移动",
    "content": "【功能描述】 移动窗口 【备注】 无",
    "url": "/docs/python/category_22",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "窗口模块(WIN) - HD窗口_是否64位进程",
    "content": "【功能描述】 目标窗口句柄/目标进程是否64位 【备注】 窗口句柄或者PID任意指定一个就行 如果2个都指定则PID用于检测",
    "url": "/docs/python/category_22",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "窗口模块(WIN) - HD窗口_获取窗口标题",
    "content": "【功能描述】 获取目标窗口标题 【备注】 无",
    "url": "/docs/python/category_22",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "窗口模块(WIN) - HD窗口_获取窗口线程ID",
    "content": "【功能描述】 获取目标窗口句柄的线程ID 【备注】 无",
    "url": "/docs/python/category_22",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "窗口模块(WIN) - HD窗口_获取窗口进程ID",
    "content": "【功能描述】 获取目标窗口句柄的进程ID 【备注】 无",
    "url": "/docs/python/category_22",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "窗口模块(WIN) - HD窗口_获取窗口进程路径",
    "content": "【功能描述】 获取目标窗口句柄的路径 【备注】 无",
    "url": "/docs/python/category_22",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "窗口模块(WIN) - HD窗口_获取窗口位置",
    "content": "【功能描述】 获取窗口在屏幕上的位置 【备注】 返回字符串: left|top|rifght|bottom| RECT结构体: typedefstructtagRECT{LONGleft;LONGtop;LONGright;LONGbottom;}RECT,* PRECT;",
    "url": "/docs/python/category_22",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "窗口模块(WIN) - HD窗口_获取窗口类名",
    "content": "【功能描述】 获取目标窗口句柄的窗口类名 【备注】 无",
    "url": "/docs/python/category_22",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "窗口模块(WIN) - HD窗口_获取窗口状态",
    "content": "【功能描述】 获取目标窗口句柄的窗口状态 【备注】 无",
    "url": "/docs/python/category_22",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "窗口模块(WIN) - HD窗口_获取特殊窗口",
    "content": "【功能描述】 获取特殊窗口桌面Shell_TrayWnd 【备注】 无",
    "url": "/docs/python/category_22",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "窗口模块(WIN) - HD窗口_获取窗口关联句柄",
    "content": "【功能描述】 获取目标窗口句柄的关联窗口句柄 【备注】 无",
    "url": "/docs/python/category_22",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "窗口模块(WIN) - HD窗口_获取顶层活动窗口句柄",
    "content": "【功能描述】 获取顶层活动窗口,可以获取到按键自带插件无法获取到的句柄 【备注】 无",
    "url": "/docs/python/category_22",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "窗口模块(WIN) - HD窗口_获取顶层焦点窗口句柄",
    "content": "【功能描述】 获取顶层活动窗口中具有输入焦点的窗口句柄 【备注】 无",
    "url": "/docs/python/category_22",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "窗口模块(WIN) - HD窗口_设置焦点到窗口",
    "content": "【功能描述】 设置输入焦点到窗口 【备注】 无",
    "url": "/docs/python/category_22",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "窗口模块(WIN) - HD窗口_获取窗口客户区域",
    "content": "【功能描述】 获取窗口客户区域的宽度和高度 【备注】 返回字符串: w|h|",
    "url": "/docs/python/category_22",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "窗口模块(WIN) - HD窗口_获取窗口客户区域在屏幕",
    "content": "【功能描述】 获取窗口客户区域在屏幕上的位置 【备注】 返回字符串: left|top|rifght|bottom| RECT结构体: typedefstructtagRECT{LONGleft;LONGtop;LONGright;LONGbottom;}RECT,* PRECT;",
    "url": "/docs/python/category_22",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "窗口模块(WIN) - HD窗口_查找窗口",
    "content": "【功能描述】 查找符合类名或者标题名的顶层可见窗口,如果指定了parent,则在parent的第一层子窗口中查找 【备注】 无",
    "url": "/docs/python/category_22",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "窗口模块(WIN) - HD窗口_查找顶层窗口",
    "content": "【功能描述】 查找顶层窗口句柄,父窗口句柄为NULL 【备注】 无",
    "url": "/docs/python/category_22",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "窗口模块(WIN) - HD窗口_枚举查找窗口",
    "content": "【功能描述】 根据指定进程以及其它条件,枚举系统中符合条件的窗口 【备注】 单PID返回字符串: hwnd 多PID返回字符串:根据创建时间排序过的 hwnd1|hwnd2|hwnd3|",
    "url": "/docs/python/category_22",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "窗口模块(WIN) - HD窗口_枚举查找窗口Ex",
    "content": "【功能描述】 根据指定进程pid以及其它条件,枚举系统中符合条件的窗口,可以枚举到按键自带的无法枚举到的窗口 【备注】 单PID返回字符串: hwnd",
    "url": "/docs/python/category_22",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "窗口模块(WIN) - HD窗口_枚举进程",
    "content": "【功能描述】 根据指定进程名,枚举系统中符合条件的进程PID 【备注】 返回字符串: pid1|pid2|pid3|",
    "url": "/docs/python/category_22",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "窗口模块(WIN) - HD窗口_枚举窗口",
    "content": "【功能描述】 根据指定条件,枚举系统中符合条件的窗口,可以枚举到按键自带的无法枚举到的窗口 【备注】 多句柄返回字符串: hwnd1|hwnd2|hwnd3|",
    "url": "/docs/python/category_22",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "目标[TARGET] - HCTarget_UseVT",
    "content": "【功能描述】 目标进程是否使用VT驱动 【备注】 目标进程是否使用VT驱动需要中控安装和开启VT驱动type:0不使用1使用作用模块包含:后台键鼠模块后台截图模块谷歌内置浏览器模块APIHOOK模块自定义HOOK模块目的:过检测能力强",
    "url": "/docs/python/category_23",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "内核(NT) - HDNT_窗口句柄取PID",
    "content": "【功能描述】 获取目标窗口句柄的进程ID(R3层内核版本) 【备注】 可以绕过一些检测,比如NP等",
    "url": "/docs/python/category_24",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "内存操作模块(M) - HD内存_特征码",
    "content": "【功能描述】 特征码查找 【备注】 无",
    "url": "/docs/python/category_25",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "内存操作模块(M) - HD内存_特征码Ex",
    "content": "【功能描述】 特征码查找(通过指定地址) 【备注】 无",
    "url": "/docs/python/category_25",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "内存操作模块(M) - HD内存_读表达式",
    "content": "【功能描述】 读整数数据 【备注】 无",
    "url": "/docs/python/category_25",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "内存操作模块(M) - HD内存_读地址",
    "content": "【功能描述】 读整数数据 【备注】 无",
    "url": "/docs/python/category_25",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "内存操作模块(M) - HD内存_写表达式",
    "content": "【功能描述】 写整数数据 【备注】 无",
    "url": "/docs/python/category_25",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "内存操作模块(M) - HD内存_写地址",
    "content": "【功能描述】 写整数数据 【备注】 无",
    "url": "/docs/python/category_25",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "内存操作模块(M) - HD内存_读表达式字节流",
    "content": "【功能描述】 读字节流数据 【备注】 json返回字节流利用HCEnv_GetRetJson拿到返回地址,提取的字节数为读取大小数最大读取100KB字节大小,注意这个限制,否则会报错",
    "url": "/docs/python/category_25",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "内存操作模块(M) - HCM_ReadFD",
    "content": "【功能描述】 读单/双浮点数 【备注】 返回结果以float举例:json返回字符串如:{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":1,\\\\\"iError\\\\\":0,\\\\\"value\\\\\":999.000}]}",
    "url": "/docs/python/category_25",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "内存操作模块(M) - HD内存_读地址字节流",
    "content": "【功能描述】 读字节流数据 【备注】 json返回字节流利用HCEnv_GetRetJson拿到返回地址,提取的字节数为读取大小数最大读取100KB字节大小,注意这个限制,否则会报错",
    "url": "/docs/python/category_25",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "内存操作模块(M) - HCM_ReadFDAddr",
    "content": "【功能描述】 读单/双浮点数 【备注】 读取大小:4float单浮点8double双浮点以float举例:json返回字符串如:\\\"999.0000\\\"",
    "url": "/docs/python/category_25",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "内存操作模块(M) - HD内存_写表达式字节流",
    "content": "【功能描述】 写字节流数据 【备注】 最大写入100KB字节大小,注意这个限制,否则会报错json返回值{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":1,\\\\\"iError\\\\\":0}]}",
    "url": "/docs/python/category_25",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "内存操作模块(M) - HCM_WriteF",
    "content": "【功能描述】 写单浮点数4字节 【备注】 json返回值{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":1,\\\\\"iError\\\\\":0}]}",
    "url": "/docs/python/category_25",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "内存操作模块(M) - HCM_WriteD",
    "content": "【功能描述】 写双浮点数8字节 【备注】 json返回值{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":1,\\\\\"iError\\\\\":0}]}",
    "url": "/docs/python/category_25",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "内存操作模块(M) - HD内存_写地址字节流",
    "content": "【功能描述】 写字节流数据 【备注】 json返回字节流利用HCEnv_GetRetJson拿到返回地址,提取的字节数为读取大小数最大读取100KB字节大小,注意这个限制,否则会报错",
    "url": "/docs/python/category_25",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "内存操作模块(M) - HCM_WriteAddrF",
    "content": "【功能描述】 写单浮点数4字节 【备注】 无",
    "url": "/docs/python/category_25",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "内存操作模块(M) - HCM_WriteAddrD",
    "content": "【功能描述】 写双浮点数8字节 【备注】 无",
    "url": "/docs/python/category_25",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "内存操作模块(M) - HCM_GetModuleBase",
    "content": "【功能描述】 获取模块地址 【备注】 无",
    "url": "/docs/python/category_25",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "内存操作模块(M) - HCM_GetModuleFunAddr",
    "content": "【功能描述】 获取模块中的导出接口地址 【备注】 无",
    "url": "/docs/python/category_25",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "内存操作模块(M) - HCM_IsBadReadAddr",
    "content": "【功能描述】 判断指定地址是否在目标进程中有效可读 【备注】 无",
    "url": "/docs/python/category_25",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "内存操作模块(M) - HCM_AsmCallX86",
    "content": "【功能描述】 执行汇编CALLX86传递汇编代码 【备注】 无",
    "url": "/docs/python/category_25",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "内存操作模块(M) - HCM_AsmCallX64",
    "content": "【功能描述】 执行汇编CALLX64传递汇编代码 【备注】 无",
    "url": "/docs/python/category_25",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "找图模块(FP) - HD识图_截图",
    "content": "【功能描述】 截图并保存到文件(.bmp) 【备注】 无",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "找图模块(FP) - HD识图_单点找色",
    "content": "【功能描述】 单点找色 【备注】 注意返回值含义和XY值的提取",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "找图模块(FP) - HD识图_多点找色",
    "content": "【功能描述】 多点找色 【备注】 json: {error:0,ret:[{bRet:1,info:结果}]}\\\" info格式->像素序号,x1,y1|像素序号,x2,y2",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "找图模块(FP) - HD识图_多点偏移找色",
    "content": "【功能描述】 多点偏移找色 【备注】 json: \\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":%lld,\\\\\"info\\\\\":\\\\\"%s\\\\\"}]}\\\", info:x1,y1|x2,y2|",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "找图模块(FP) - HD识图_比较颜色",
    "content": "【功能描述】 比较颜色 【备注】 无",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "找图模块(FP) - HD识图_比较颜色Ex",
    "content": "【功能描述】 多点找色确定某个图像块,指定多个具体点 【备注】 这个接口是给具体的坐标直接比较颜色 而这个HCFP_FindColorsOffset是是先搜索首色然后以首色开始拿到偏移的坐标去比较颜色",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "找图模块(FP) - HD识图_获取颜色",
    "content": "【功能描述】 获取某个点的颜色值(从后台) 【备注】 注意返回值含义和值的提取 #pragmapack(1)typedefstructMYA8R8G8B8{BYTEm_a;\\n0x00BYTEm_r;\\n低8位BYTEm_g;\\n中8位BYTEm_b;\\n高8位MYA8R8G8B8(){m_a=0;m_r=0;m_g=0;m_b=0;}}MYA8R8G8B8; #pragmapack() json: “{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"info\\\":\\\"44,29,5B\\\"}]}”A(0x00)rgbr红色:低8位g绿色:中8位b蓝色:高8位RGBFFFFFF",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "找图模块(FP) - HD识图_范围找图",
    "content": "【功能描述】 在客户区范围内找图(仅支持一个图片) 【备注】 注意返回值含义和xy值的提取 {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "找图模块(FP) - HD识图_范围找图Ex",
    "content": "【功能描述】 在客户区范围内找图(返回找到其中一张信息) 【备注】 注意返回值含义和xy值的提取 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "找图模块(FP) - HCFP_FindPicExx",
    "content": "【功能描述】 在客户区范围内找图(返回全部找到的信息) 【备注】 注意返回值含义和xy值的提取 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "找图模块(FP) - HD识图_是否卡屏",
    "content": "【功能描述】 在客户区范围内检测再规定时间内是否卡图 【备注】 无",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "找图模块(FP) - HD识图_获取区域图像CRC",
    "content": "【功能描述】 在客户区范围内获取像素CRC值,用于卡屏校验 【备注】 json: {\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":%lld,\\\\\"info\\\\\":\\\"%X“,\\\\\"time\\\\\":%d}]} info字段是校验值4字节整数",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "找图模块(FP) - HD识图_单点找色从文件",
    "content": "【功能描述】 单点找色(从文件) 【备注】 注意返回值含义和XY值的提取",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "找图模块(FP) - HD识图_单点找色从内存",
    "content": "【功能描述】 单点找色(从内存) 【备注】 注意返回值含义和XY值的提取 图片内存缓冲区自己维护",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "找图模块(FP) - HD识图_多点找色从文件",
    "content": "【功能描述】 多点找色(从文件) 【备注】 json: {error:0,ret:[{bRet:1,info:结果}]}\\\" info格式->像素序号,x1,y1|像素序号,x2,y2",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "找图模块(FP) - HD识图_多点找色从内存",
    "content": "【功能描述】 多点找色(从内存) 【备注】 json: {error:0,ret:[{bRet:1,info:结果}]}\\\" info格式->像素序号,x1,y1|像素序号,x2,y2 图片内存缓冲区自己维护",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "找图模块(FP) - HD识图_多点偏移找色从文件",
    "content": "【功能描述】 多点偏移找色(从文件) 【备注】 无",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "找图模块(FP) - HD识图_多点偏移找色从内存",
    "content": "【功能描述】 多点偏移找色(从内存) 【备注】 图片内存缓冲区自己维护",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "找图模块(FP) - HD识图_范围找图从文件",
    "content": "【功能描述】 在客户区范围内找图(从文件)(仅支持一个图片) 【备注】 注意返回值含义和xy值的提取 {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "找图模块(FP) - HD识图_范围找图从内存",
    "content": "【功能描述】 在客户区范围内找图(从内存)(仅支持一个图片) 【备注】 注意返回值含义和xy值的提取 图片内存缓冲区自己维护 {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "找图模块(FP) - HD识图_范围找图从文件Ex",
    "content": "【功能描述】 在客户区范围内找图(从文件)(找到一个图片就返回) 【备注】 注意返回值含义和xy值的提取 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "找图模块(FP) - HD识图_范围找图从内存Ex",
    "content": "【功能描述】 在客户区范围内找图(从内存)(找到一个图片就返回) 【备注】 注意返回值含义和xy值的提取 图片内存缓冲区自己维护 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "找图模块(FP) - HCFP_FindPicExxByFile",
    "content": "【功能描述】 在客户区范围内找图(从文件)(找全部图片信息坐标) 【备注】 注意返回值含义和xy值的提取 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "找图模块(FP) - HCFP_FindPicExxByMem",
    "content": "【功能描述】 在客户区范围内找图(从内存)(找全部图片信息坐标) 【备注】 注意返回值含义和xy值的提取 图片内存缓冲区自己维护 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度|</SPAN> NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "找图模块(FP) - HD识图_范围找图来源内存Ex",
    "content": "【功能描述】 在客户区范围内找图(子图从内存)(找到一个图片就返回) 【备注】 注意返回值含义和xy值的提取 图片内存缓冲区自己维护 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "找图模块(FP) - HCFP_FindPicExxFromMem",
    "content": "【功能描述】 在客户区范围内找图(子图从内存)(找全部图片信息坐标) 【备注】 注意返回值含义和xy值的提取 图片内存缓冲区自己维护 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "找图模块(FP) - HD识图_比较颜色从文件",
    "content": "【功能描述】 比较颜色(从文件) 【备注】 无",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "找图模块(FP) - HD识图_比较颜色从内存",
    "content": "【功能描述】 比较颜色(从内存) 【备注】 图片内存缓冲区自己维护",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_29",
    "title": "找图模块(FP) - HD识图_比较颜色从文件Ex",
    "content": "【功能描述】 多点找色确定某个图像块,指定多个具体点,从文件 【备注】 无",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_30",
    "title": "找图模块(FP) - HD识图_比较颜色从内存Ex",
    "content": "【功能描述】 多点找色确定某个图像块,指定多个具体点,从内存 【备注】 无",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_31",
    "title": "找图模块(FP) - HD识图_获取颜色从文件",
    "content": "【功能描述】 获取颜色(从文件) 【备注】 注意返回值含义和值的提取 #pragmapack(1)typedefstructMYA8R8G8B8{BYTEm_a;\\n0x00BYTEm_r;\\n低8位BYTEm_g;\\n中8位BYTEm_b;\\n高8位MYA8R8G8B8(){m_a=0;m_r=0;m_g=0;m_b=0;}}MYA8R8G8B8; #pragmapack() json: “{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"info\\\":\\\"44,29,5B\\\"}]}”A(0x00)rgbr红色:低8位g绿色:中8位b蓝色:高8位RGBFFFFFF",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_32",
    "title": "找图模块(FP) - HD识图_获取颜色从内存",
    "content": "【功能描述】 获取颜色(从内存) 【备注】 图片内存缓冲区自己维护 注意返回值含义和值的提取 #pragmapack(1)typedefstructMYA8R8G8B8{BYTEm_a;\\n0x00BYTEm_r;\\n低8位BYTEm_g;\\n中8位BYTEm_b;\\n高8位MYA8R8G8B8(){m_a=0;m_r=0;m_g=0;m_b=0;}}MYA8R8G8B8; #pragmapack() json: “{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"info\\\":\\\"44,29,5B\\\"}]}”A(0x00)rgbr红色:低8位g绿色:中8位b蓝色:高8位RGBFFFFFF",
    "url": "/docs/python/category_26",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "找字模块(FS) - HD识字_设置字库",
    "content": "【功能描述】 设置当前像素识字的字库文件(为了提高识别效率,不支持多线程) 建议在登录回调中最开始初始化调用 其他线程需要那个序号就切换那个序号HCFS_SwitchCurDictFile 调用一次会给所有窗口序号添加当前设置的字库文件 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 这个不支持多线程,请在开启前首先设置好 类型提前添加字库,需要在当前线程使用字库必须调用HCFS_SwitchCurDictFile切换字库 字库文件绑定窗口序号字库序号绑定线程窗口序号支持多线程多进程来操作目标进程可以在多线程中通过窗口序号拿到所有绑定的字库文件信息至于在多线程中要使用的是哪一个字库文件？取决于当前线程所绑定的字库序号 总结:1.所有字库文件只需要和窗口序号关联一次就行\\n2.在多线程中需要使用到那个字库序号就切换就行多线程有自己的字库序号副本互不影响各自切换",
    "url": "/docs/python/category_27",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "找字模块(FS) - HD识字_设置字库Ex",
    "content": "【功能描述】 设置当前像素识字的字库文件(为了提高识别效率,不支持多线程) 请在主线程中最开始初始化调用 其他线程需要那个序号就切换那个序号HCFS_SwitchCurDictFile 调用一次会给所有窗口序号添加当前设置的字库文件 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 这个不支持多线程,请在开启前首先设置好 类型提前添加字库,需要在当前线程使用字库必须调用HCFS_SwitchCurDictFile切换字库",
    "url": "/docs/python/category_27",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "找字模块(FS) - HD识字_设置字库Exx",
    "content": "【功能描述】 设置当前像素识字的字库文件(为了提高识别效率,不支持多线程) 建议在登录回调中最开始初始化调用 其他线程需要那个序号就切换那个序号HCFS_SwitchCurDictFile 调用一次会给所有窗口序号添加当前设置的字库文件 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 这个不支持多线程,请在开启前首先设置好 类型提前添加字库,需要在当前线程使用字库必须调用HCFS_SwitchCurDictFile切换字库 字库文件绑定窗口序号字库序号绑定线程窗口序号支持多线程多进程来操作目标进程可以在多线程中通过窗口序号拿到所有绑定的字库文件信息至于在多线程中要使用的是哪一个字库文件？取决于当前线程所绑定的字库序号 总结:1.所有字库文件只需要和窗口序号关联一次就行\\n2.在多线程中需要使用到那个字库序号就切换就行多线程有自己的字库序号副本互不影响各自切换",
    "url": "/docs/python/category_27",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "找字模块(FS) - HD识字_切换字库序号",
    "content": "【功能描述】 切换当前像素识字的字库文件(支持多线程) 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好 运行起来了就不能设置否则冲突 切换字库文件可以在运行的时候切换,而HCFS_SetDictFile设置字库文件必须在初始化阶段中进行！ 对于多线程操作同一个窗口序号的时候,切换字库支持多线程操作,操作前请先在主执行线程中设置字库就行其他副线程(包含主线程)就只需要切换就行",
    "url": "/docs/python/category_27",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "找字模块(FS) - HD识字_获取当前字库",
    "content": "【功能描述】 获取当前线程的加载后的字库文件信息(支持多线程) 【备注】 json: \\\"{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":ret,\\\"info\\\":info}]}\\\" info:窗口索引,当前字库索引,加载了字库文件数量,(加载的字库序号,对应的字条数目)|...如:info:0,1,3,(1,55)|(2,55)|(3,55)| 注意返回的是当前线程的字库信息",
    "url": "/docs/python/category_27",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "找字模块(FS) - HD识字_获取当前字库序号",
    "content": "【功能描述】 获取当前线程绑定的字库索引(支持多线程) 【备注】 返回大于等于0的值是当前线程绑定的字库索引",
    "url": "/docs/python/category_27",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "找字模块(FS) - HD识字_单字符找字",
    "content": "【功能描述】 在客户区范围内找字(只支持单字符串并且是单字符字库) 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->0,x1,y1,w1,h1,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/python/category_27",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "找字模块(FS) - HD识字_单字符找字Ex",
    "content": "【功能描述】 在客户区范围内找字(支持多字符串并且是单字符字库) 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/python/category_27",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "找字模块(FS) - HD识字_单字符找字Exx",
    "content": "【功能描述】 在客户区范围内找字(支持多字符串并且是单字符字库)找到一个就返回 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/python/category_27",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "找字模块(FS) - HD识字_列表单列找字从文件",
    "content": "【功能描述】 单字符串找(原图从文件) 字库是字符串 例如:洛阳多行返回多个坐标一行只找一列(一次) 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->0,x1,y1,w,h,sim|0,x2,y2,w,h,sim|0,x3,y2,w,h,sim|... 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/python/category_27",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "找字模块(FS) - HD识字_列表单列找字从内存",
    "content": "【功能描述】 单字符串找(原图从内存) 字库是字符串 例如:洛阳多行返回多个坐标一行只找一列(一次) 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->0,x1,y1,w,h,sim|0,x2,y2,w,h,sim|0,x3,y2,w,h,sim|... 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/python/category_27",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "找字模块(FS) - HD识字_列表多列找字从文件",
    "content": "【功能描述】 单字符串找(原图从文件) 字库是字符串 例如:洛阳多行多列返回多个坐标 一行找多列(多次)找多行 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->0,x1,y1,w,h,sim|0,x2,y2,w,h,sim|0,x3,y2,w,h,sim|... 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/python/category_27",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "找字模块(FS) - HD识字_列表多列找字从内存",
    "content": "【功能描述】 单字符串找(原图从内存) 字库是字符串 例如:洛阳多行多列返回多个坐标 一行找多列(多次)找多行 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->0,x1,y1,w,h,sim|0,x2,y2,w,h,sim|0,x3,y2,w,h,sim|... 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/python/category_27",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "找字模块(FS) - HD识字_自动识字",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到一个就返回 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号(0开始),x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/python/category_27",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "找字模块(FS) - HD识字_自动识字从文件",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到一个就返回 可以通过指定图片来获取截图数据其他功能和HCFS_FindStrMutilsAuto一致 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/python/category_27",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "找字模块(FS) - HD识字_自动识字从内存",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到一个就返回 可以通过指定图片来获取截图数据其他功能和HCFS_FindStrMutilsAuto一致 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/python/category_27",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "找字模块(FS) - HD识字_自动识字Ex",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到全部或仅仅找一个 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号(0开始),x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/python/category_27",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "找字模块(FS) - HD识字_自动识字从文件Ex",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到全部或仅仅找一个 可以通过指定图片来获取截图数据其他功能和HCFS_FindStrMutilsAuto一致 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/python/category_27",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "找字模块(FS) - HD识字_自动识字从内存Ex",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到全部或仅仅找一个 可以通过指定图片来获取截图数据其他功能和HCFS_FindStrMutilsAuto一致 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/python/category_27",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "找字模块(FS) - HD识字_多字符识字",
    "content": "【功能描述】 单字符串找字库是字符串例如:洛阳 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 在客户区范围内找字符串(只支持单字符串),同时字库是字符串 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/python/category_27",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "找字模块(FS) - HD识字_多字符识字Ex",
    "content": "【功能描述】 多字符串找字库是字符串例如:洛阳|北京|广州 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 在客户区范围内找字符串(只支持单字符串),同时字库是字符串 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/python/category_27",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "找字模块(FS) - HCFS_FindStrMutilsExx",
    "content": "【功能描述】 多字符串找字库是字符串例如:洛阳|北京|广州找到一个就返回 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 在客户区范围内找字符串(只支持单字符串),同时字库是字符串 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/python/category_27",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "找字模块(FS) - HD识字_Ocr",
    "content": "【功能描述】 在客户区范围内识别字 字库是字符串或单字 拼接+字符串都支持 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"info\\\":BBB} AAA:0未找到1找到 BBB:json数组如:[{\\\"x\\\":0,\\\"y\\\":0,\\\"text\\\":“NULL”}]表示未找到类似这样[{\\\"x\\\":123,\\\"y\\\":456,\\\"text\\\":\\\"洛阳\\\"},{\\\"x\\\":654,\\\"y\\\":987,\\\"text\\\":\\\"洱海\\\"}]表示找到了 格式化字符串: 未找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":[{\\\\\"x\\\\\":0,\\\\\"y\\\\\":0,\\\\\"text\\\\\":\\\\\"NULL\\\\\"}]}\\\" 找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":%s}\\\" 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/python/category_27",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "找字模块(FS) - HD识字_Ocr从文件",
    "content": "【功能描述】 在客户区范围内识别字 字库是字符串或单字 拼接+字符串都支持 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"info\\\":BBB} AAA:0未找到1找到 BBB:json数组如:[{\\\"x\\\":0,\\\"y\\\":0,\\\"text\\\":“NULL”}]表示未找到类似这样[{\\\"x\\\":123,\\\"y\\\":456,\\\"text\\\":\\\"洛阳\\\"},{\\\"x\\\":654,\\\"y\\\":987,\\\"text\\\":\\\"洱海\\\"}]表示找到了 格式化字符串: 未找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":[{\\\\\"x\\\\\":0,\\\\\"y\\\\\":0,\\\\\"text\\\\\":\\\\\"NULL\\\\\"}]}\\\" 找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":%s}\\\" 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/python/category_27",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "找字模块(FS) - HD识字_Ocr从内存",
    "content": "【功能描述】 在客户区范围内识别字 字库是字符串或单字 拼接+字符串都支持 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"info\\\":BBB} AAA:0未找到1找到 BBB:json数组如:[{\\\"x\\\":0,\\\"y\\\":0,\\\"text\\\":“NULL”}]表示未找到类似这样[{\\\"x\\\":123,\\\"y\\\":456,\\\"text\\\":\\\"洛阳\\\"},{\\\"x\\\":654,\\\"y\\\":987,\\\"text\\\":\\\"洱海\\\"}]表示找到了 格式化字符串: 未找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":[{\\\\\"x\\\\\":0,\\\\\"y\\\\\":0,\\\\\"text\\\\\":\\\\\"NULL\\\\\"}]}\\\" 找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":%s}\\\" 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/python/category_27",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "找字模块(FS) - HD识字_设置水平垂直间距",
    "content": "【功能描述】 设置间距(在识别拼接字和OCR中尤其重要)-丢弃改为每个接口单独设置 【备注】 1.当相邻的字/数字/字母/符号,在间距范围内,才被认为是一个整体(字符串) 2.不明白什么是水平垂直间距请前往查看水平垂直间距解析和案例分析 3.这种对于数字和符号,尤其重要",
    "url": "/docs/python/category_27",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "找字模块(FS) - HD识字_设置11",
    "content": "【功能描述】 设置11行中(同宽)矩形内,是否只有一个字-丢弃改为每个接口单独设置 【备注】 1.如果打开识别速度快,关闭速度慢一点(不影响多少) 2.如果这个i这个字,由2个字符组成'.'和'|' 3.如果打开表示i是一个整体识别,不能拆开识别 4.如果关闭表示i可以拆分成2个字符分别识别",
    "url": "/docs/python/category_27",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "找字模块(FS) - HD识字_设置周围占比",
    "content": "【功能描述】 设置字周围一个像素上下左右的像素占比-丢弃改为每个接口单独设置 【备注】 1.对于那种连体字的情况下占比越高,可能识别的不准确2.这个相当于一个容错率占比3.返回当前设置后的占比4.默认0.1 5.这种对于数字和符号,尤其重要,可以准确的提高识别率,越小的字效果越好",
    "url": "/docs/python/category_27",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "智能识图模块(FI) - HCFI_FindImage",
    "content": "【功能描述】 识图(返回的是圆型的圆点) 【备注】 图片越多耗时多长 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x\\\":XX,\\\"y\\\":YY},{\\\"x\\\":XX,\\\"y\\\":YY},{\\\"x\\\":XX,\\\"y\\\":YY}],\\\"time\\\":ZZZ} 每张图会有1个坐标点(圆点) AAA:表示找到几个XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置",
    "url": "/docs/python/category_28",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "智能识图模块(FI) - HCFI_FindImageEx",
    "content": "【功能描述】 识图(返回的是矩形左上角和右下角) 【备注】 图片越多耗时多长 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY},{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY}],\\\"time\\\":ZZZ} 每张图会有2个坐标点(左上角+右下角) AAA:表示找到几个XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置",
    "url": "/docs/python/category_28",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "智能识图模块(FI) - HCFI_FindRangeImage",
    "content": "【功能描述】 范围内识图 【备注】 图片越多耗时多长 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x\\\":XX,\\\"y\\\":YY},{\\\"x\\\":XX,\\\"y\\\":YY},{\\\"x\\\":XX,\\\"y\\\":YY}]}type==0</STRONG> 每张图会有1个坐标点(圆点) {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY},{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY}]}type==1</STRONG> 每张图会有2个坐标点(左上角+右下角) AAA:表示找到几个XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置",
    "url": "/docs/python/category_28",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "智能识图模块(FI) - HD智能识图_Tem找图从文件",
    "content": "【功能描述】 从文件中加载截图数据并识图(返回的是矩形左上角和右下角) 【备注】 图片越多耗时多长 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY},{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY}],\\\"time\\\":ZZZ} 每张图会有2个坐标点(左上角+右下角) AAA:表示找到几个XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0max:置信度time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置",
    "url": "/docs/python/category_28",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "智能识图模块(FI) - HD智能识图_Tem找图从内存",
    "content": "【功能描述】 从内存中加载截图数据并识图(返回的是矩形左上角和右下角) 【备注】 图片越多耗时多长 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"i\\\":index,\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY\\\"max\\\":0.0f},{\\\"i\\\":index,\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY\\\"max\\\":0.0f}]}每张图对应会有图片索引+2个坐标点(左上角+右下角)+置信度(max)index:图片集合指定的索引(0开始)如:\\\"洛阳.bmp|洱海.bmp|\\\"(洛阳.bmp)索引就是0AAA:表示找到几个(真正的找到数量)XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0max:置信度time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置",
    "url": "/docs/python/category_28",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "智能识字模块(RC) - HCRC_InitRCServer",
    "content": "【功能描述】 初始化识别服务器 【备注】 无",
    "url": "/docs/python/category_29",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "智能识字模块(RC) - HCRC_OpenRCServer",
    "content": "【功能描述】 打开识别服务器 【备注】 无",
    "url": "/docs/python/category_29",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "智能识字模块(RC) - HCRC_StopRCServer",
    "content": "【功能描述】 停止识别服务器 【备注】 无",
    "url": "/docs/python/category_29",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "智能识字模块(RC) - HCRC_SwitchRCServer",
    "content": "【功能描述】 切换识字服务:主要针对语言字体文件的切换 【备注】 内部实现原理:先停止之前的服务(HCRC_StopRCServer)重新初始化(HCRC_InitRCServer)然后重新开启(HCRC_OpenRCServer)",
    "url": "/docs/python/category_29",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "智能识字模块(RC) - HCRC_RecognitionChar",
    "content": "【功能描述】 智能识字 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"image\\\":XXX},{\\\"image\\\":YYY}],\\\"time\\\":ZZZ}XXX->图片识别后的结果(字符串)每一个{\\\"image\\\":XXX}是一个识别的字符串,对应<参数:图片名字集合>索引 XXX:格式 \\\"%s,%0.2f,%d,%d,%d,%d|\\\" 字符串1,置信度1,x1,y1,x2,y2|字符串2,置信度2,x1,y1,x2,y2|...|",
    "url": "/docs/python/category_29",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "智能识字模块(RC) - HCRC_RecognitionCharEx",
    "content": "【功能描述】 指定范围内智能识字 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"image\\\":XXX},{\\\"image\\\":YYY}],\\\"time\\\":ZZZ}XXX->图片识别后的结果(字符串)每一个{\\\"image\\\":XXX}是一个识别的字符串,对应<参数:图片名字集合>索引 XXX:格式 \\\"%s,%0.2f,%d,%d,%d,%d|\\\" 字符串1,置信度1,x1,y1,x2,y2|字符串2,置信度2,x1,y1,x2,y2|...|",
    "url": "/docs/python/category_29",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "智能识字模块(RC) - HCRC_RecognitionCharByMemory",
    "content": "【功能描述】 从内存图片数据中范围内智能识字 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"image\\\":XXX},{\\\"image\\\":YYY}],\\\"time\\\":ZZZ}XXX->图片识别后的结果(字符串)每一个{\\\"image\\\":XXX}是一个识别的字符串,对应<参数:图片名字集合>索引. XXX:格式 \\\"%s,%0.2f,%d,%d,%d,%d|\\\" 字符串1,置信度1,x1,y1,x2,y2|字符串2,置信度2,x1,y1,x2,y2|...|",
    "url": "/docs/python/category_29",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "后台键鼠(MKB) - HD键鼠_绑定",
    "content": "【功能描述】 绑定窗口 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/python/category_30",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "后台键鼠(MKB) - HD键鼠_绑定Ex",
    "content": "【功能描述】 绑定窗口 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/python/category_30",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "后台键鼠(MKB) - HD键鼠_模式绑定Ex",
    "content": "【功能描述】 绑定窗口(扩展接口) 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/python/category_30",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "后台键鼠(MKB) - HD键鼠_切换绑定",
    "content": "【功能描述】 切换绑定到所属子窗口的句柄上 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/python/category_30",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "后台键鼠(MKB) - HD键鼠_切换绑定Ex",
    "content": "【功能描述】 切换绑定到所属子窗口的句柄上 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/python/category_30",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "后台键鼠(MKB) - HD键鼠_切换模式绑定Ex",
    "content": "【功能描述】 切换绑定窗口(扩展接口) 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/python/category_30",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "后台键鼠(MKB) - HD键鼠_暂停绑定",
    "content": "【功能描述】 暂停/恢复后台绑定 【备注】 无",
    "url": "/docs/python/category_30",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "后台键鼠(MKB) - HD键鼠_解绑",
    "content": "【功能描述】 解绑窗口 【备注】 无",
    "url": "/docs/python/category_30",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "后台键鼠(MKB) - HD键鼠_右键双击",
    "content": "【功能描述】 鼠标右键双击 【备注】 无",
    "url": "/docs/python/category_30",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "后台键鼠(MKB) - HCMKB_KeyPress(A/W)",
    "content": "【功能描述】 连续按键输入字符串(连续单个按键) 【备注】 无",
    "url": "/docs/python/category_30",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "后台键鼠(MKB) - HCMKB_SendString(2)",
    "content": "【功能描述】 发送Ascii字符串 【备注】 无",
    "url": "/docs/python/category_30",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "后台键鼠(MKB) - HD键鼠_剪切板发送随机文本",
    "content": "【功能描述】 发送剪切板字符串内容到窗口 【备注】 无",
    "url": "/docs/python/category_30",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "后台键鼠(MKB) - HD键鼠_设置剪切板文本",
    "content": "【功能描述】 发送随机名字,从2个文本(hf.txt和he.txt)中各获取一个字 【备注】 hf.txt和he.txt放在程序(.exe)同目录下,文件编码为utf-8随机获取一个姓和一个名组成一个词",
    "url": "/docs/python/category_30",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "后台键鼠(MKB) - HD键鼠_获取剪切板字符串",
    "content": "【功能描述】 设置剪切板字符串 【备注】 该接口无序窗口序号",
    "url": "/docs/python/category_30",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "后台键鼠(MKB) - HD键鼠_句柄发送文本",
    "content": "【功能描述】 获取剪切板字符串 【备注】 无",
    "url": "/docs/python/category_30",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "后台键鼠(MKB) - HD键鼠_句柄发送按键按下",
    "content": "【功能描述】 发送Ascii字符串,部分游戏需要激活窗口！（可以不用通讯调用） 【备注】 注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！",
    "url": "/docs/python/category_30",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "后台键鼠(MKB) - HD键鼠_句柄发送按键弹起",
    "content": "【功能描述】 按下发送键码到指定窗口（可以不用通讯调用） 【备注】 注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！",
    "url": "/docs/python/category_30",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "后台键鼠(MKB) - HD键鼠_句柄发送按键",
    "content": "【功能描述】 弹起发送键码到指定窗口（可以不用通讯调用） 【备注】 注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！",
    "url": "/docs/python/category_30",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "后台键鼠(MKB) - HD键鼠_句柄发送清空文本",
    "content": "【功能描述】 按下并弹起发送键码到指定窗口（可以不用通讯调用） 【备注】 注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！",
    "url": "/docs/python/category_30",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "后台键鼠(MKB) - HD键鼠_设置鼠标轨迹参数",
    "content": "【功能描述】 可以清空子窗口的内容（可以不用通讯调用） 【备注】 注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！",
    "url": "/docs/python/category_30",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "后台键鼠(MKB) - HD键鼠_获取鼠标位置",
    "content": "【功能描述】 设置鼠标轨迹参数(当移动鼠标开启轨迹生效) 【备注】 无",
    "url": "/docs/python/category_30",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "后台键鼠(MKB) - HCMKB_GetMousePos",
    "content": "【功能描述】 获取后台/前台鼠标位置 【备注】 无",
    "url": "/docs/python/category_30",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "后台截图模块(CS) - HD截图_设置识别模式",
    "content": "【功能描述】 打开截图 【备注】 无",
    "url": "/docs/python/category_31",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "后台截图模块(CS) - HD截图_打开",
    "content": "【功能描述】 打开截图 【备注】 无",
    "url": "/docs/python/category_31",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "后台截图模块(CS) - HD截图_打开Ex",
    "content": "【功能描述】 打开截图(和HCCS_CloseCSEx是一组接口) 【备注】 1.前台和后台模式,可以随意切换不用调用关闭HCCS_CloseCSEx再开启！！！！！内置处理了 截图模式: typedefenumCAPTURETYPE{\\n无CAPTURETYPE_NONE=0,\\n这个不操作\\nGDICAPTURETYPE_GDI=1,\\n这个直接客户端操作对于浏览器(谷歌等)记得把图像加速关掉\\n32CAPTURETYPE_D3D9_1_x86=2,\\nUECAPTURETYPE_D3D9_2_x86=3,\\nU3DCAPTURETYPE_D3D9_3_x86=4,\\nRGBX\\nD3D11CAPTURETYPE_D3D11_1_x86=5,\\nUECAPTURETYPE_D3D11_2_x86=6,\\nU3DCAPTURETYPE_D3D11_3_x86=7,\\nRGBXD3D11游戏通用\\nD3D12CAPTURETYPE_D3D12_1_x86=70,\\nUECAPTURETYPE_D3D12_2_x86=71,\\nU3DCAPTURETYPE_D3D12_3_x86=72,\\nRGBXD3D12游戏通用\\n64\\nD3D9CAPTURETYPE_D3D9_1_x64=8,\\nUECAPTURETYPE_D3D9_2_x64=9,\\nU3DCAPTURETYPE_D3D9_3_x64=10,\\nRGBXD3D9游戏通用\\nD3D11CAPTURETYPE_D3D11_1_x64=11,\\nUECAPTURETYPE_D3D11_2_x64=12,\\nU3DCAPTURETYPE_D3D11_3_x64=13,\\nRGBXD3D11游戏通用\\nD3D12CAPTURETYPE_D3D12_1_x64=14,\\nUED3D12CAPTURETYPE_D3D12_2_x64=15,\\nU3DD3D12CAPTURETYPE_D3D12_3_x64=16,\\nRGBXD3D12D3D12游戏通用\\n32CAPTURETYPE_OPENGL_1_x86=20,\\n占位CAPTURETYPE_OPENGL_2_x86=21,\\nGL_BGRA模拟器CAPTURETYPE_OPENGL_3_x86=22,\\nGL_BGRA模拟器\\n64CAPTURETYPE_OPENGL_1_x64=30,\\n占位CAPTURETYPE_OPENGL_2_x64=31,\\nGL_BGRA模拟器CAPTURETYPE_OPENGL_3_x64=32,\\nGL_BGRA模拟器\\n定制CAPTURETYPE_D3D9_Steam_x86=40,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用CAPTURETYPE_D3D11_Steam_x86=41,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用CAPTURETYPE_D3D9_Steam_x64=42,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用CAPTURETYPE_D3D11_Steam_x64=43,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用\\nNC模式CAPTURETYPE_D3D9_NC_x86=44,\\nNC游戏CAPTURETYPE_D3D11_NC_x86=45,\\nNC游戏CAPTURETYPE_D3D9_NC_x64=46,\\nNC游戏CAPTURETYPE_D3D11_NC_x64=47,\\nNC游戏\\nCAPTURETYPE_NORMAL=50,\\n这个前台模式\\nCAPTURETYPE_D3D12_Steam_x86=60,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用CAPTURETYPE_D3D12_Steam_x64=61,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用\\nCAPTURETYPE_D3D12_NC_x86=62,\\nNC游戏D3D12CAPTURETYPE_D3D12_NC_x64=63,\\nNC游戏D3D12 }CAPTURETYPE;额外说明:",
    "url": "/docs/python/category_31",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "后台截图模块(CS) - HD截图_关闭",
    "content": "【功能描述】 关闭截图 【备注】 无",
    "url": "/docs/python/category_31",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "后台截图模块(CS) - HD截图_获取截图数据",
    "content": "【功能描述】 关闭截图(和HCCS_OpenCSEx是一组接口) 【备注】 无",
    "url": "/docs/python/category_31",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "后台截图模块(CS) - HD截图_打开查看器",
    "content": "【功能描述】 获取截图数据 【备注】 json:{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":AAA,\\\"addr\\\":XXX,\\\"eleSize\\\":YYY,\\\"len\\\":ZZZ,\\\"w\\\":1222,\\\"h\\\":699}]}AAA:调用接口返回值 XXX:图片二进制数据首地址(不是bmp数据是MYA8R8G8B8结构体缓冲区首地址)可以拿到这个缓冲区自行转换各种图片格式数据 YYY:MYA8R8G8B8结构体数量 ZZZ:字节大小(图片数据=MYA8R8G8B8* YYY) w:宽度 h:高度注意:拿到图片地址数据XXX使用后记得释放(HCCS_FreeArray) 图片数据地址不使用了记得释放掉HCCS_FreeMemPool调用此接口",
    "url": "/docs/python/category_31",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "后台截图模块(CS) - HD截图_关闭查看器",
    "content": "【功能描述】 打开查看器 【备注】 无",
    "url": "/docs/python/category_31",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "后台截图模块(CS) - HD截图_截图",
    "content": "【功能描述】 关闭查看器 【备注】 无",
    "url": "/docs/python/category_31",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "后台截图模块(CS) - HD截图_获取BMP截图数据",
    "content": "【功能描述】 截图数据并保存为BMP图片文件 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":AAA,\\\"w\\\":1222,\\\"h\\\":699}]}",
    "url": "/docs/python/category_31",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "后台截图模块(CS) - HD截图_释放数据",
    "content": "【功能描述】 获取当前截图后的BMP数据 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"addr\\\":XXX,\\\"eleSize\\\":YYY,\\\"allLen\\\":ZZZ,\\\"w\\\":1222,\\\"h\\\":699}]} XXX是BMP图片二进制数据首地址 YYY是MYA8R8G8B8结构体数量 ZZZ:BMP图片数据大小(真实的BMP图片数据:54+像素数据) 图片数据地址不使用了记得释放掉HCCS_FreeMemPool调用此接口",
    "url": "/docs/python/category_31",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "后台截图模块(CS) - HCCS_GetCaptureBmpRangeData",
    "content": "【功能描述】 获取当前截图后的BMP数据(指定范围) 【备注】 如果想获取全图数据:xywh可以分别为-1也可以直接调用HCCS_GetCaptureBmpData json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"addr\\\":XXX,\\\"eleSize\\\":YYY,\\\"allLen\\\":ZZZ,\\\"w\\\":1222,\\\"h\\\":699}]} XXX是BMP图片二进制数据首地址 YYY是MYA8R8G8B8结构体数量 ZZZ:BMP图片数据大小(真实的BMP图片数据:54+像素数据) 图片数据地址不使用了记得释放掉HCCS_FreeMemPool调用此接口",
    "url": "/docs/python/category_31",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "后台截图模块(CS) - HD截图_释放内存池数据",
    "content": "【功能描述】 释放内存 【备注】 释放内存该内存是使用new[]申请的内存",
    "url": "/docs/python/category_31",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "后台截图模块(CS) - HD截图_是否后台缓存失败",
    "content": "【功能描述】 释放内存,内存池操作释放内存 【备注】 我们获取了截图数据不需要了都需要调用这个接口来释放掉,防止内存泄露 注意:该接口是释放【使用内存池申请的内存地址】的地址,与HCCS_FreeArray不一样 那个窗口序号返回申请的地址就用那个窗口序号释放",
    "url": "/docs/python/category_31",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "后台截图模块(CS) - HCCS_IsCaptureValid",
    "content": "【功能描述】 后台截图缓存获取失败判断接口 【备注】 无",
    "url": "/docs/python/category_31",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "黑屏优化模块 - HD黑屏_打开",
    "content": "【功能描述】 打开黑屏 【备注】 无",
    "url": "/docs/python/category_32",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "黑屏优化模块 - HD黑屏_设置模型范围",
    "content": "【功能描述】 设置模型序号的过滤范围 【备注】 可以适当调整最小或者最大的序号来过滤模型,来实现黑屏,同时还支持图色识别",
    "url": "/docs/python/category_32",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "黑屏优化模块 - HD黑屏_关闭",
    "content": "【功能描述】 关闭黑屏 【备注】 无",
    "url": "/docs/python/category_32",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "CPU优化模块() - HD优化_开启CPU",
    "content": "【功能描述】 打开CPU优化 【备注】 无",
    "url": "/docs/python/category_33",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "CPU优化模块() - HD优化_设置FPS",
    "content": "【功能描述】 设置帧数(绑定dx.public.down.cpu后台属性有效) 【备注】 并非实际的帧数,这里只是一个参考值,内置默认为30 动态优化调试帧数的(自动计算帧率)",
    "url": "/docs/python/category_33",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "CPU优化模块() - HD优化_设置延迟",
    "content": "【功能描述】 设置帧数(绑定dx.public.down.cpu后台属性有效) 【备注】 如果调用了HC_HookMainThread挂接主线程,同时又调用了本接口,那么会动态(根据实际动态计算正数来)修改主线程调用CALL的检查频率",
    "url": "/docs/python/category_33",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "CPU优化模块() - HD优化_关闭CPU",
    "content": "【功能描述】 关闭CPU优化 【备注】 无",
    "url": "/docs/python/category_33",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "系统模块(SYS) - HD系统_是否开启字体平滑",
    "content": "【功能描述】 检查字体是否开启字体平滑 【备注】 无",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "系统模块(SYS) - HD系统_关闭字体平滑",
    "content": "【功能描述】 关闭字体平滑 【备注】 无",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "系统模块(SYS) - HD系统_打开字体平滑",
    "content": "【功能描述】 打开字体平滑 【备注】 无",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "系统模块(SYS) - HD系统_是否开启UAC",
    "content": "【功能描述】 检查当前系统是否开启了UAC(用户控制) 【备注】 无",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "系统模块(SYS) - HD系统_设置UAC",
    "content": "【功能描述】 设置当前系统的UAC(用户控制)开关 【备注】 无",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "系统模块(SYS) - HD系统_延迟",
    "content": "【功能描述】 延迟 【备注】 不会堵塞主线程",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "系统模块(SYS) - HD系统_随机延迟",
    "content": "【功能描述】 在随机范围内延迟 【备注】 不会堵塞主线程",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "系统模块(SYS) - HD系统_关闭系统",
    "content": "【功能描述】 关闭系统 【备注】 无",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "系统模块(SYS) - HD系统_关闭屏保",
    "content": "【功能描述】 关闭屏保 【备注】 无",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "系统模块(SYS) - HD系统_关闭电源管理",
    "content": "【功能描述】 关闭电源管理,不进入睡眠 【备注】 无",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "系统模块(SYS) - HD系统_恢复最近系统修改",
    "content": "【功能描述】 恢复系统上次的修改 【备注】 如果中控软件运行的时候修改了系统设置 那么这个最好在中控程序退出的时候调用",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "系统模块(SYS) - HD系统_禁止休眠",
    "content": "【功能描述】 设置当前的电源设置(禁止关闭显示器,禁止关闭硬盘,禁止睡眠和待机) 【备注】 无",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "系统模块(SYS) - HD系统_获取路径",
    "content": "【功能描述】 获取路径 【备注】 无",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "系统模块(SYS) - HD系统_获取CPU类型",
    "content": "【功能描述】 获取CPU类型 【备注】 无",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "系统模块(SYS) - HD系统_获取当前CPU使用率",
    "content": "【功能描述】 获取CPU使用率 【备注】 无",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "系统模块(SYS) - HD系统_获取CPU使用率",
    "content": "【功能描述】 获取指定进程的CPU使用率 【备注】 返回值是整数百分比 返回字符串字符串是(含小数百分比)",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "系统模块(SYS) - HD系统_获取内存使用率",
    "content": "【功能描述】 获取指定进程的内存使用率 【备注】 无",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "系统模块(SYS) - HD系统_获取磁盘序列号",
    "content": "【功能描述】 获取磁盘序列号 【备注】 进程要有管理员权限才能获取成功",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "系统模块(SYS) - HD系统_获取显卡信息",
    "content": "【功能描述】 获取显卡信息 【备注】 无",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "系统模块(SYS) - HD系统_获取DPI",
    "content": "【功能描述】 获取DPI 【备注】 无",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "系统模块(SYS) - HD系统_启动EXE",
    "content": "【功能描述】 运行指定路径下的exe 【备注】 这个不支持启动参数",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "系统模块(SYS) - HD系统_执行DOS指令取返回",
    "content": "【功能描述】 获取CMD命令形式的打开进程并获取返回输出",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "系统模块(SYS) - HD系统_管理员打开进程",
    "content": "【功能描述】 获取CMD命令形式的打开进程(支持管理员打开)(扩展版本) 【备注】 内部是调用ShellExecuteExA",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "系统模块(SYS) - HD系统_启动EXE带参数",
    "content": "【功能描述】 运行指定路径下的exe这个支持启动参数 【备注】 这个支持启动参数",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "系统模块(SYS) - HD系统_启动EXE带参数Ex",
    "content": "【功能描述】 运行指定路径下的exe(HCSYS_RunAppEx的扩展版本)这个支持启动参数同时指定了当前进程的路径 【备注】 这个支持启动参数",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "系统模块(SYS) - HD系统_获取磁盘特征码",
    "content": "【功能描述】 获取磁盘特征码 【备注】 无",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "系统模块(SYS) - HD系统_获取CPU特征码",
    "content": "【功能描述】 获取CPU特征码 【备注】 无",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "系统模块(SYS) - HD系统_获取BOIS制造日期",
    "content": "【功能描述】 获取BOIS制造日期 【备注】 无",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_29",
    "title": "系统模块(SYS) - HD系统_获取机器码",
    "content": "【功能描述】 获取机器码(包含网卡) 【备注】 无",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_30",
    "title": "系统模块(SYS) - HD系统_获取机器码无网卡",
    "content": "【功能描述】 获取机器码(不包含网卡) 【备注】 无",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_31",
    "title": "系统模块(SYS) - HD系统_获取网络时间",
    "content": "【功能描述】 获取网络时间 【备注】 北京时间 固定内置服务器IP",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_32",
    "title": "系统模块(SYS) - HD系统_获取网络时间Ex",
    "content": "【功能描述】 获取网络时间(指定服务器IP获取) 【备注】 北京时间",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_33",
    "title": "系统模块(SYS) - HD系统_获取系统版本",
    "content": "【功能描述】 获取系统版本 【备注】 无",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_34",
    "title": "系统模块(SYS) - HD系统_获取系统类型",
    "content": "【功能描述】 获取系统类型 【备注】 无",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_35",
    "title": "系统模块(SYS) - HD系统_开机经过时间",
    "content": "【功能描述】 获取开机到现在过经过的时间(毫秒) 【备注】 无",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_36",
    "title": "系统模块(SYS) - HD系统_当前进程是否X64",
    "content": "【功能描述】 当前进程是否是64位 【备注】 无",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_37",
    "title": "系统模块(SYS) - HD系统_是否支持vt",
    "content": "【功能描述】 是否支持vt 【备注】 可以在Bios中开启vt,如果不支持就没办法了",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_38",
    "title": "系统模块(SYS) - HD系统_获取屏幕的色深",
    "content": "【功能描述】 获取屏幕的色深(24/32之类的) 【备注】 无",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_39",
    "title": "系统模块(SYS) - HD系统_设置屏幕的色深",
    "content": "【功能描述】 设置屏幕的色深 【备注】 无",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_40",
    "title": "系统模块(SYS) - HD系统_获取屏幕高度",
    "content": "【功能描述】 获取屏幕高度 【备注】 无",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_41",
    "title": "系统模块(SYS) - HD系统_获取屏幕宽度",
    "content": "【功能描述】 获取屏幕宽度 【备注】 无",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_42",
    "title": "系统模块(SYS) - HD系统_设置屏幕分辨率",
    "content": "【功能描述】 设置屏幕分辨率 【备注】 无",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_43",
    "title": "系统模块(SYS) - HD系统_获取CMD命令返回值",
    "content": "【功能描述】 获取CMD命令返回值(字符串) 【备注】 无",
    "url": "/docs/python/category_34",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "自定义插件模块(Com) - HD插件_加载插件",
    "content": "【功能描述】 添加自定义组件 【备注】 自定义模块需要导入包并来实现接口绑定",
    "url": "/docs/python/category_35",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "自定义插件模块(Com) - HD插件_卸载插件",
    "content": "【功能描述】 卸载指定插件 【备注】 自定义模块需要导入包并来实现接口绑定",
    "url": "/docs/python/category_35",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "自定义插件模块(Com) - HD插件_CALL",
    "content": "【功能描述】 调用自定义组件中的接口 【备注】 自定义模块需要导入包并来实现接口绑定 参考:X86X64自定义插件接口说明",
    "url": "/docs/python/category_35",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "自定义插件模块(Com) - HD插件_CALLEx",
    "content": "【功能描述】 调用自定义组件中的接口(可传递任意参数类型) 【备注】 自定义模块需要导入包并来实现接口绑定 注意:传递的buffer字符串在自定义插件接口 typedefHDComRet(__stdcall* HDComFunType)(__int64 retStrAddr,__int64 rcx,__int64 rdx,__int64 r8,__int64 r9,__int64 l5,__int64 l6); 第一个参数retStrAddr作为字符串首地址(char* )能拿到 如: C++代码演示: char* info=(char* )retStrAddr; 参考:X86X64自定义插件接口说明",
    "url": "/docs/python/category_35",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "插件包装器 - HCCOM_Load",
    "content": "【功能描述】 加载组件 【备注】 组件名为当前组件文件的名字(不包含后缀!,如果组件文件无后缀可忽视) 如:hdmad.dll所对应的组件名必须是hdmad 头文件: HDLoader.h 静态库: HDPacker.librelease版本 HDPackerd.libdebug版本",
    "url": "/docs/python/category_36",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "插件包装器 - HCCOM_Register",
    "content": "【功能描述】 注册自定义组件中的接口 【备注】 内置数据初始化函数接口名字:HDDataInit(接口类型是HDComFunType)HDDataInit初始化函数会在加载组件的时候首次调用以便于完成对相关组件数据的初始化(比如:基地址相关表达式的获取)如果需要初始化就自己写一个名字叫做HDDataInit的函数,类型为HDComFunType,并调用HCCOM_Register 头文件: HDLoader.h 静态库: HDPacker.librelease版本 HDPackerd.libdebug版本 参考:X86X64自定义插件接口说明",
    "url": "/docs/python/category_36",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "插件包装器 - HCCOM_NotifyToTarget",
    "content": "【功能描述】 自定义模块通知目标进程接口 【备注】 内置数据初始化函数接口名字:HDDataInit(接口类型是HDComFunType)HDDataInit初始化函数会在加载组件的时候首次调用以便于完成对相关组件数据的初始化(比如:基地址相关表达式的获取)如果需要初始化就自己写一个名字叫做HDDataInit的函数,类型为HDComFunType,并调用HCCOM_Register 头文件: HDLoader.h 静态库: HDPacker.librelease版本 HDPackerd.libdebug版本",
    "url": "/docs/python/category_36",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "插件包装器 - HCCOM_NotifyToController",
    "content": "【功能描述】 自定义模块通知中控进程接口 【备注】 内置数据初始化函数接口名字:HDDataInit(接口类型是HDComFunType)HDDataInit初始化函数会在加载组件的时候首次调用以便于完成对相关组件数据的初始化(比如:基地址相关表达式的获取)如果需要初始化就自己写一个名字叫做HDDataInit的函数,类型为HDComFunType,并调用HCCOM_Register 头文件: HDLoader.h 静态库: HDPacker.librelease版本 HDPackerd.libdebug版本",
    "url": "/docs/python/category_36",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "插件包装器 - HCCOM_GetRetJson",
    "content": "【功能描述】 获取自定义模块通知中控进程返回的字符串结果 【备注】 返回的字符串是自定义的 在中控中自己设置的事件处理回调函数中设置返回 头文件: HDLoader.h 静态库: HDPacker.librelease版本 HDPackerd.libdebug版本",
    "url": "/docs/python/category_36",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "插件包装器 - HCCOM_FindCode",
    "content": "【功能描述】 特征码查找 【备注】 无",
    "url": "/docs/python/category_36",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "插件包装器 - HCCOM_PrintLog",
    "content": "【功能描述】 是否打开debugview调试日志信息 【备注】 返回当前是否开启",
    "url": "/docs/python/category_36",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "插件包装器 - HCCOM_GetVersion",
    "content": "【功能描述】 获取自定义内存插件版本号 【备注】 返回当前是否开启",
    "url": "/docs/python/category_36",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "状态机模块 - HCHD_GetHDStatusControler",
    "content": "【功能描述】 获取控制器有且只有一个 【备注】 拿到控制器对象可以获取或者操作其他组件对象",
    "url": "/docs/python/category_37",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "控制器模块 - HCHD_GetHDController",
    "content": "【功能描述】 获取控制器有且只有一个 【备注】 拿到控制器对象可以获取或者操作其他组件对象",
    "url": "/docs/python/category_38",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "主板机模块[SC] - HD主板机_设置路径",
    "content": "【功能描述】 设置HDScrcpy投屏软件根目录,并重启adb相当于重置一下adb环境 【备注】 设置HDScrcpy投屏软件根目录如:J:\\\\hdscrcpy2.7\\\\默认C:\\\\hdscrcpy2.7\\\\ 软件在群文件或者找管理索取",
    "url": "/docs/python/category_39",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "主板机模块[SC] - HD主板机_重置ADB服务",
    "content": "【功能描述】 重置adb服务 【备注】 无",
    "url": "/docs/python/category_39",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "主板机模块[SC] - HD主板机_查询设备",
    "content": "【功能描述】 查询当前所有可用的设备 【备注】 无 设备号类型:1.emulator-5554/127.0.0.1:5009模拟器Device(-s) 2.01aa8320032fe731手机Device(-d) 3.127.0.0.1:5009tcpipDevice(-e)",
    "url": "/docs/python/category_39",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "主板机模块[SC] - HD主板机_连接设备",
    "content": "【功能描述】 连接设备并通讯窗口序号（需要先初始化中控和登录！！HCHD_LoginHCEnv_Init/HCEnv_InitEx） 【备注】 1.该接口会自动连接指定的设备号 2.同时会进行通讯和重连判断(需要加载HD驱动) 3.无需再通讯 设备号类型:1.emulator-5554/127.0.0.1:5009模拟器Device(-s) 2.01aa8320032fe731手机Device(-d) 3.127.0.0.1:5009tcpipDevice(-e)",
    "url": "/docs/python/category_39",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "虚拟机[VM] - HCVM_Run",
    "content": "【功能描述】 运行虚拟机(管理员运行) 【备注】 指令: D:\\vmwin10>D:\\vm16\\vmrun-Twsstart\\\"D:/vmwin10/Windows10x64.vmx\\\"guilparam D:\\vmwin10>D:\\vm16\\vmrun-Twsstart\\\"D:/vmwin10/Windows10x64.vmx\\\"noguilparam C++案例: autoret=HCVM_Run(0,\\\"D:\\\\vm16\\\\\\\",\\\"D:\\\\vmwin10\\\\Windows10x64.vmx\\\",TRUE,0,0,0);",
    "url": "/docs/python/category_40",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "虚拟机[VM] - HCVM_Rerun",
    "content": "【功能描述】 重启运行虚拟机(管理员运行) 【备注】 指令: D:\\vmwin10>D:\\vm16\\vmrun-Twsrestart\\\"D:/vmwin10/Windows10x64.vmx\\\"guilparam D:\\vmwin10>D:\\vm16\\vmrun-Twsrestart\\\"D:/vmwin10/Windows10x64.vmx\\\"noguilparam C++案例: autoret=HCVM_Rerun(0,\\\"D:\\\\vm16\\\\\\\",\\\"D:\\\\vmwin10\\\\Windows10x64.vmx\\\",m_强制关闭CheckBox.GetCheck(),TRUE,0,0,0);</FONT>",
    "url": "/docs/python/category_40",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "虚拟机[VM] - HCVM_Close",
    "content": "【功能描述】 关闭运行虚拟机(管理员运行) 【备注】 指令: D:\\vmwin10>D:\\vm16\\vmrun-Twsstop\\\"D:/vmwin10/Windows10x64.vmx\\\" D:\\vmwin10>D:\\vm16\\vmrun-Twsstop\\\"D:/vmwin10/Windows10x64.vmx\\\" C++案例: autoret=HCVM_Close(0,\\\"D:\\\\vm16\\\\\\\",\\\"D:\\\\vmwin10\\\\Windows10x64.vmx\\\",m_强制关闭CheckBox.GetCheck(),0,0);",
    "url": "/docs/python/category_40",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "虚拟机[VM] - HCVM_List",
    "content": "【功能描述】 获取当前正在运行的虚拟机路径和总数(管理员运行) 【备注】 无 C++案例: autoret=HCVM_List(\\\"D:\\\\vm16\\\\\\\");",
    "url": "/docs/python/category_40",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "虚拟机[VM] - HCVM_IsStart",
    "content": "【功能描述】 指定虚拟机是否已经开启(管理员运行) 【备注】 无 C++案例: autoret=HCVM_List(\\\"D:\\\\vm16\\\\\\\",\\\"D:/vmwin10/Windows10x64_1.vmx\\\");",
    "url": "/docs/python/category_40",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取版本号",
    "content": "【功能描述】 获取DMA服务器版本号 【备注】 返回长整数:如:240401格式:24年-04版本号-01小版本号",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_版本是否一致",
    "content": "【功能描述】 判断HD插件的DMA接口和DMA服务器接口版本是否一致",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_开启服务器",
    "content": "【功能描述】 开启DMA服务器 【备注】 服务器在群下载或者官网下载 兼容指定自定义进程名(全路径\\\\XXXX.exe)XXXX.exe为自定义进程名不指定进程名表示使用内置进程名(全路径\\\\HDVMDma.exe)不指定路径(当前中控exe根目录\\\\HDVMDma.exe)",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_关闭服务器",
    "content": "【功能描述】 关闭服务器,同时结束进程 【备注】 无",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_服务器是否开启",
    "content": "【功能描述】 服务器是否已经开启 【备注】 循环检查直到服务器开启成功 如果使用HCVMDMA_StartServer开启服务器,不指定IP和端口,则使用的是HCVMDMA_ServerIsStart指定的IP和端口",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_关联虚拟机",
    "content": "【功能描述】 初始化并关联虚拟机 【备注】 需要先开启服务器HCVMDMA_StartServer 内部会自动调用HCEnv_Load接口,使窗口序号和虚拟机进程关联绑定然后初始化虚拟机相关资源 后续就可以使用该窗口虚拟机去操作对应的虚拟机中的进程",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取PID",
    "content": "【功能描述】 通过进程名获取PID 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_读地址",
    "content": "【功能描述】 读地址,仅支持1248地址大小 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_读单浮点",
    "content": "【功能描述】 读单浮点数 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_读双浮点",
    "content": "【功能描述】 读双浮点数 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_读字节集",
    "content": "【功能描述】 读字节集 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_写地址",
    "content": "【功能描述】 写地址,仅支持1248地址大小 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_写单浮点",
    "content": "【功能描述】 写单浮点数 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_写双浮点",
    "content": "【功能描述】 写双浮点数 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_写字节集",
    "content": "【功能描述】 写字节集 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取函数",
    "content": "【功能描述】 获取函数地址 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取主模块",
    "content": "【功能描述】 获取主模块地址 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取模块",
    "content": "【功能描述】 获取模块地址 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取执行环境X64",
    "content": "【功能描述】 初始化获取一个某个进程(x64)的执行环境句柄 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 支持内置保存执行环境最多可以保存20个进程执行环境,保存策略为->同线程-同虚拟机-指定虚拟机中的进程PID-执行环境-绑定 执行环境句柄解析: 1.可以理解成一个空间可以与物理机进行交互,实现参数传递和调用CALL 2.每次调用都会获取一个全新的执行环境句柄(实现物理机中控多线程调用) 3.物理机中控在一个执行环境句柄只能同时一个线程执行,如果要多线程执行请获取多个执行环境句柄 4.此接口不适合多线程获取,请在初始化最开始把所需要的执行环境句柄的数量初始化好,方便物理机中控多线程中单独分别使用",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_CALLX64",
    "content": "【功能描述】 通过指定一个初进程(x64)的执行环境句柄来执行CALL 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 执行环境句柄解析: 1.可以理解成一个空间可以与物理机进行交互,实现参数传递和调用CALL 2.如果需要参数传递,请自行往excuteEnvAddr+0x8写参数(参数最大缓冲区为0x200字节),同时自己的汇编机器码要引入自己参数的地址",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_ShellCodeInitX86",
    "content": "【功能描述】 初始化获取一个某个进程(x86)的执行环境句柄 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 支持内置保存执行环境最多可以保存20个进程执行环境,保存策略为->同线程-同虚拟机-指定虚拟机中的进程PID-执行环境-绑定 执行环境句柄解析: 1.可以理解成一个空间可以与物理机进行交互,实现参数传递和调用CALL 2.每次调用都会获取一个全新的执行环境句柄(实现物理机中控多线程调用) 3.物理机中控在一个执行环境句柄只能同时一个线程执行,如果要多线程执行请获取多个执行环境句柄 4.此接口不适合多线程获取,请在初始化最开始把所需要的执行环境句柄的数量初始化好,方便物理机中控多线程中单独分别使用",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_RunShellCodeX86",
    "content": "【功能描述】 通过指定一个初进程(x86)的执行环境句柄来执行CALL 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 执行环境句柄解析: 1.可以理解成一个空间可以与物理机进行交互,实现参数传递和调用CALL 2.如果需要参数传递,请自行往excuteEnvAddr+0x8写参数(参数最大缓冲区为0x200字节),同时自己的汇编机器码要引入自己参数的地址",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_搜索特征码x86",
    "content": "【功能描述】 特征码搜索(X86)(指定模块名) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_搜索特征码x86Ex",
    "content": "【功能描述】 特征码搜索(X86)(指定开始地址和搜索大小) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_搜索特征码x64",
    "content": "【功能描述】 特征码搜索(X64)(指定模块名) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_搜索特征码x64Ex",
    "content": "【功能描述】 特征码搜索(X64)(指定开始地址和搜索大小) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_断开虚拟机",
    "content": "【功能描述】 卸载并关闭连接虚拟机 【备注】 与HCVMDMA_Init是一对接口 内部会自动调用HCEnv_UnLoadEx接口,使窗口序号和虚拟机进程断开绑定然后释放虚拟机相关资源 一旦调用,则虚拟机需要被关闭后开启而不是重启PID不能一样",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取截图环境",
    "content": "【功能描述】 初始化截图环境 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 小技巧: 1.初始化接口有根据不同虚拟机,失败概率不同,为了提高初始化成功率,可以尝试自启动任务管理器,让系统激活起来,初始化完成就可以把任务管理器关掉了 2.步骤:打开虚拟机-关联虚拟机-检查是否有管理器PID-开始初始化键鼠/截图环境-如果失败3次直接重启虚拟机 3.如图操作自启任务管理器就行 4.支持内置保存截图环境一个虚拟机固定一个,自动判断是否之前初始化过 如果有的虚拟机初始化句柄超时建议:",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_29",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_截图一次",
    "content": "【功能描述】 截图一次(获取一次虚拟机全屏数据到物理机) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_30",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_开启截图",
    "content": "【功能描述】 开启截图(内部会开启一条线程循环调用HCVMDMA_Capture) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_31",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_关闭截图",
    "content": "【功能描述】 关闭截图(内部会关闭之前开启的线程)和HCVMDMA_OpenCapture是一对接口 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_32",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取键鼠环境",
    "content": "【功能描述】 初始化键鼠环境 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 小技巧: 1.初始化接口有根据不同虚拟机,失败概率不同,为了提高初始化成功率,可以尝试自启动任务管理器,让系统激活起来,初始化完成就可以把任务管理器关掉了 2.步骤:打开虚拟机-关联虚拟机-检查是否有管理器PID-开始初始化键鼠/截图环境-如果失败3次直接重启虚拟机 3.如图操作自启任务管理器就行 4.支持内置保存键鼠环境一个虚拟机固定一个,自动判断是否之前初始化过 如果有的虚拟机初始化句柄超时建议:",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_33",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_鼠标移动",
    "content": "【功能描述】 鼠标移动(不包含轨迹) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_34",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_左键按下",
    "content": "【功能描述】 鼠标左键按下 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_35",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_左键弹起",
    "content": "【功能描述】 鼠标左键弹起 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_36",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_左键点击",
    "content": "【功能描述】 鼠标左键点击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_37",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_左键双击",
    "content": "【功能描述】 鼠标左键双击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_38",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_中键按下",
    "content": "【功能描述】 鼠标中键按下 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_39",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_中键弹起",
    "content": "【功能描述】 鼠标中键弹起 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_40",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_中键点击",
    "content": "【功能描述】 鼠标中键点击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_41",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_中键双击",
    "content": "【功能描述】 鼠标中键双击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_42",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_右键按下",
    "content": "【功能描述】 鼠标右键按下 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_43",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_右键弹起",
    "content": "【功能描述】 鼠标右键弹起 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_44",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_右键点击",
    "content": "【功能描述】 鼠标右键点击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_45",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_右键双击",
    "content": "【功能描述】 鼠标右键双击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_46",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_滚轮滚上",
    "content": "【功能描述】 鼠标滚轮滚上 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_47",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_滚轮滚下",
    "content": "【功能描述】 鼠标滚轮滚下 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_48",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_键盘按下",
    "content": "【功能描述】 键盘按下 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_49",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_键盘按上",
    "content": "【功能描述】 键盘弹起 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_50",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_键盘敲击",
    "content": "【功能描述】 键盘敲击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_51",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_发送文本Unicode",
    "content": "【功能描述】 发送unicode字符串 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_52",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_发送文本Ascii",
    "content": "【功能描述】 发送ascii字符串 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_53",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_GetPidList",
    "content": "【功能描述】 获取PID列表 【备注】 需要先初始化关联虚拟机HCVMDMA_Init C++解析获取案例: \\n最大51个数量存储量autojsonStr=HCEnv_GetRetJson(windowsIndex);if(jsonStr==NULL)returnERROR_获取数据失败;\\npid1,name1|pid2,name2|pid3,name3|vector<string>pidNameArray;Tool::HSplitStringA(jsonStr,pidNameArray,\\\"|\\\");if(pidNameArray.size()<=0)returnRET_失败;for(int index=0;index<pidSize;index++){\\npid1,name1，vector<string>proArray;Tool::HSplitStringA(pidNameArray[index]+\\\",\\\",proArray,\\\",\\\");if(proArray.size()<2)continue;if(atoi(proArray[0].c_str())==pid)returnRET_成功;\\n元素1就是PID元素2是进程名}returnRET_失败;\\n没找到",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_54",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_IsExistPid",
    "content": "【功能描述】 对应虚拟机中的进程PID是否存在 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/python/category_41",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "(B2)剑灵2台服 - HB2_GetPlayerInfo",
    "content": "【功能描述】 调用获取人物信息CALL 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"name\\\":\\\"Jack\\\",\\\"level\\\":26,\\\"curHp\\\":588,\\\"maxHp\\\":999,\\\"curMp\\\":255,\\\"maxMp\\\":666,\\\"gold\\\":99999,\\\"diamond\\\":999999}]}",
    "url": "/docs/python/category_42",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "(B2)剑灵2台服 - HB2_GetBagInfo",
    "content": "【功能描述】 调用获取背包信息CALL 【备注】 json: {\\\"error\\\":0,\\\"flag\\\":99,\\\"ret\\\":[{\\\"id\\\":1111,\\\"tId\\\":22222,\\\"dId\\\":33333,\\\"num\\\":588},{\\\"id\\\":1111,\\\"tId\\\":22222,\\\"dId\\\":33333,\\\"num\\\":588},{\\\"id\\\":1111,\\\"tId\\\":22222,\\\"dId\\\":33333,\\\"num\\\":588}]}",
    "url": "/docs/python/category_42",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "(B2)剑灵2台服 - HB2_GetShortCutInfo1",
    "content": "【功能描述】 调用获取快捷栏遍历信息CALL（前10个） 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"index\\\":0,\\\"id\\\":1111,\\\"bAct\\\":0},{\\\"index\\\":1,\\\"id\\\":2222,\\\"bAct\\\":1}]}",
    "url": "/docs/python/category_42",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "(B2)剑灵2台服 - HB2_GetShortCutInfo2",
    "content": "【功能描述】 调用获取快捷栏遍历信息CALL（后10个） 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"index\\\":0,\\\"id\\\":1111,\\\"bAct\\\":0},{\\\"index\\\":1,\\\"id\\\":2222,\\\"bAct\\\":1}]}",
    "url": "/docs/python/category_42",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "(B2)剑灵2台服 - HB2_GetPlayerXYZ",
    "content": "【功能描述】 调用获取人物坐标CALL 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"x\\\":125,\\\"y\\\":125,\\\"z\\\":125}]}",
    "url": "/docs/python/category_42",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "(B2)剑灵2台服 - HB2_GetPlayerCurMapId",
    "content": "【功能描述】 调用获取人物当前地图IDCALL 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"mapId\\\":1993}]}",
    "url": "/docs/python/category_42",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "(B2)剑灵2台服 - HB2_GetCurChapterTaskId",
    "content": "【功能描述】 调用遍历已结任务章节ID信息(主线+支线) 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"CTaskId\\\":1993,\\\"index\\\":1}]}",
    "url": "/docs/python/category_42",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "(B2)剑灵2台服 - HB2_GetAChapterTask",
    "content": "【功能描述】 调用遍历已结任务章节ID信息(主线+支线) 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"CTaskId\\\":1993,\\\"index\\\":1,\\\"curNum\\\":2},{\\\"CTaskId\\\":1998,\\\"index\\\":2,\\\"curNum\\\":2}]}",
    "url": "/docs/python/category_42",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "(B2)剑灵2台服 - HB2_PlayerIsMove",
    "content": "【功能描述】 调用人物是否移动CALL 【备注】 无",
    "url": "/docs/python/category_42",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "(B2)剑灵2台服 - HB2_IsAutoUseMed",
    "content": "【功能描述】 调用人物是否自动使用药品状态 【备注】 无",
    "url": "/docs/python/category_42",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "(B2)剑灵2台服 - HB2_Move",
    "content": "【功能描述】 调用移动CALL 【备注】 无",
    "url": "/docs/python/category_42",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "(B2)剑灵2台服 - HB2_GetHuaShen",
    "content": "【功能描述】 调用化身遍历CALL 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"id\\\":0,\\\"xLevel\\\":1111,\\\"type\\\":0},{\\\"id\\\":0,\\\"xLevel\\\":1111,\\\"type\\\":0}]} id:化身IDxLevel:化身星级type:化身品质0123依次递增+1白绿蓝...",
    "url": "/docs/python/category_42",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "(B2)剑灵2台服 - HB2_GetChongWu",
    "content": "【功能描述】 调用宠物遍历CALL 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"id\\\":0,\\\"xLevel\\\":1111,\\\"type\\\":0},{\\\"id\\\":0,\\\"xLevel\\\":1111,\\\"type\\\":0}]} id:宠物IDxLevel:宠物星级type:宠物品质0123依次递增+1白绿蓝...",
    "url": "/docs/python/category_42",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "(B2)剑灵2台服 - HB2_UseGoods",
    "content": "【功能描述】 调用使用物品CALL 【备注】 无",
    "url": "/docs/python/category_42",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "谷歌内置浏览器模块[GB] - HD内置浏览器_附加谷歌1",
    "content": "【功能描述】 附加内置浏览器，附加监听模式1 【备注】 必须游戏进程自带内置谷歌浏览器,才会附加模块成功 由于每个游戏不同,需要定制浏览器接口 当前默认的内置谷歌浏览器接口仅适合夜鸦",
    "url": "/docs/python/category_43",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "谷歌内置浏览器模块[GB] - HD内置浏览器_附加谷歌2",
    "content": "【功能描述】 附加内置浏览器，附加监听模式2 【备注】 必须游戏进程自带内置谷歌浏览器,才会附加模块成功 由于每个游戏不同,需要定制浏览器接口 当前默认的内置谷歌浏览器接口仅适合夜鸦",
    "url": "/docs/python/category_43",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "谷歌内置浏览器模块[GB] - HD内置浏览器_脱离谷歌",
    "content": "【功能描述】 脱离之前的内置浏览器 【备注】 必须游戏进程自带内置谷歌浏览器,才会附加模块成功",
    "url": "/docs/python/category_43",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "谷歌内置浏览器模块[GB] - HD内置浏览器_注入谷歌JS代码",
    "content": "【功能描述】 给内置浏览器注入JS代码 【备注】 必须游戏进程自带内置谷歌浏览器,才会附加模块成功",
    "url": "/docs/python/category_43",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "谷歌内置浏览器模块[GB] - HD内置浏览器_注入谷歌JS文件",
    "content": "【功能描述】 给内置浏览器注入指定文件中的JS代码 【备注】 必须游戏进程自带内置谷歌浏览器,才会附加模块成功",
    "url": "/docs/python/category_43",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "调试绘制模块(DS) - HD调试_设置颜色",
    "content": "【功能描述】 (用于调试)设置全局可视化标注颜色值 【备注】 颜色值是4字节分别对应XRGB如:0x00FF0000红色如:0x0000FF00绿色如:0x000000FF蓝色",
    "url": "/docs/python/category_44",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "调试绘制模块(DS) - HD调试_设置调试窗口跟随",
    "content": "【功能描述】 (用于调试)设置当前调试窗口跟随的进程信息",
    "url": "/docs/python/category_44",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "调试绘制模块(DS) - HD调试_标记窗口",
    "content": "【功能描述】 给指定窗口画边框或者填充矩形 【备注】 无",
    "url": "/docs/python/category_44",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "调试绘制模块(DS) - HD调试_捕捉异常调用堆栈",
    "content": "【功能描述】 开启/关闭捕捉异常 【备注】 无",
    "url": "/docs/python/category_44",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "调试绘制模块(DS) - HD调试_附加控制台",
    "content": "【功能描述】 附加控制台 【备注】 print fcout输入输出到控制台上显示注意:自行定时清空屏幕防止满屏卡主进程运行",
    "url": "/docs/python/category_44",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "全局资源设置模块(RES) - HCRES_SetResPath",
    "content": "【功能描述】 设置资源路径 【备注】 图片字库文件都在这个里面找",
    "url": "/docs/python/category_45",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "全局资源设置模块(RES) - HD资源_设置路径Ex",
    "content": "【功能描述】 设置资源路径 【备注】 图片字库文件都在这个里面找",
    "url": "/docs/python/category_45",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "全局资源设置模块(RES) - HCRES_SetLanguageResPath",
    "content": "【功能描述】 设置语言或者字体文件资源路径 【备注】 语言文件都在这个里面找",
    "url": "/docs/python/category_45",
    "source": "api_data_python.json",
    "type": "函数"
  },
  {
    "id": "explanation_1",
    "title": "基础说明 - HD简介",
    "content": "【功能描述】 教程以官网为准 后面会出帖子教程 供大家学习使用 官网: https://www.hdgdk.com HD【RPG引擎库】交流群(3群):882724064 1030698387 (有事请主动找群主和管理，群主和管理不会主动私聊任何人,请勿上当受骗！！！！) (有事请主动找群主和管理，群主和管理不会主动私聊任何人,请勿上当受骗！！！！) (有事请主动找群主和管理，群主和管理不会主动私聊任何人,请勿上当受骗！！！！) 功能: 1.自研驱动注入，模拟键鼠 ，读写内存相关操作，进程以及线程相关操作等. 2.自研接口注入模式框架. 3.目前支持 32 位/64位/ASCII/UNICODE(8个版本中控)<->32/64位 (目标程序) 4.还支持LUA编写,自定义模块,谷歌内置浏览器,主板机投屏,多线程框架模块,yolov5,等操作 5.支持易语言 C/C++ 火山 Python C# 炫语言 golong等语言（支持调用C++DLL的语言） 6.具体看对应的模块功能接口 7.支持win7/8/10/11系统 ============================================================= 一.【HD易语言基础课程】 https://www.bilibili.com/video/BV1UgJFz5EKN/?spm_id_from=333.1387.homepage.video_card.click .【HD易语言多线程框架实战课程】 https://www.bilibili.com/video/BV1UgJFz5EKN/?spm_id_from=333.1387.homepage.video_card.click 二.【HD火山基础课程】 https://www.bilibili.com/video/BV1iBftYoE5b/?spm_id_from=333.1387.homepage.video_card.click 三.【HD C++基础课程】 https://www.bilibili.com/video/BV1G9fnYeEEp/?spm_id_from=333.1387.homepage.video_card.click .【HD C++多线程框架实战课程】 https://www.bilibili.com/video/BV1G9fnYeEEp/?spm_id_from=333.1387.homepage.video_card.click .【HD C++ 夜鸦国际服实战课程】 https://www.bilibili.com/video/BV1Ei1sYsELz/?spm_id_from=333.1387.homepage.video_card.click 四.【HD Python基础课程】 https://www.bilibili.com/video/BV1rtRAYXEwQ/?spm_id_from=333.1387.homepage.video_card.click 五.【HD 炫语言基础课程】 https://www.bilibili.com/video/BV1LJXGYPEXy/?spm_id_from=333.1387.homepage.video_card.click https://www.bilibili.com/video/BV1UNqdYqEBQ/?spm_id_from=333.1387.homepage.video_card.click 六.【HD 综合工具使用教程】 https://www.bilibili.com/video/BV1nscbeVEfY/?spm_id_from=333.1387.homepage.video_card.click 七.【HD Yolov8综合工具使用教程】 https://www.bilibili.com/video/BV13c3vzfE2D/?spm_id_from=333.1387.homepage.video_card.click ============================================================= 【备注】 免责声明 一. 本软件完全出于个人兴趣爱好，由本人在业余时间开发，是一款安全，绿色，可靠的软件产品. 二. 利用本软件所做出的任何软件作品，和本人无关. 三. 本软件绝对不针对任何一款游戏或者游戏开发商，如果有人利用本软件开发非法游戏辅助，本人将保留追究其民事以及刑事责任的权利. 四. 因使用本软件而引致的任何意外、疏忽、合约毁坏、诽谤、版权或知识产权侵犯及其所造成的任何损失，本人概不负责，亦概不承担任何民事或刑事法律责任。 五. 当你第一次开始使用本人所提供的任何软件及资源的那一刻起就将被视为对本声明全部内容的认可。同时您必须认可上述免责条款，方可使用本软件及资源。如有任何异议，建议立刻删除本软件及资源并且停止使用. 六. 以上内容，本人保留最终解释权。",
    "url": "/docs/xuanlanguage/category_1",
    "source": "api_data_xuanlanguage.json",
    "type": "说明"
  },
  {
    "id": "explanation_2",
    "title": "基础说明 - HD返回值表",
    "content": "【功能描述】 接口返回值： 小于等于0 为错误代码 大于 0为成功 (驱动接口返回值在下面↓) #define RET_检查PID存在 8 #define RET_环境已卸载 7 #define RET_重连窗口序号不一致 6 #define RET_重连窗口 5 #define RET_状态变动 4 #define RET_暂停过 3 #define RET_结束 2 #define RET_成功 1 #define RET_失败 0 #define RET_真 1 #define RET_非 0 #define ERROR_未初始化全局环境 -1000 #define ERROR_未找到进程环境 -1001 #define ERROR_进程环境内存为NULL -1002 #define ERROR_获取CALL环境失败 -1003 #define ERROR_超时返回 -1004 #define ERROR_主线程调用超时返回 -1005 #define ERROR_数据异常 -1006 #define ERROR_参数错误 -1007 #define ERROR_未挂接主线程 -1008 #define ERROR_后台绑定句柄无效 -1009 #define ERROR_未绑定后台 -1010 #define ERROR_多开超出限制 -1011 #define ERROR_字符串为空 -1012 #define ERROR_地址为空 -1013 #define ERROR_未知错误 -1014 #define ERROR_远进程申请内存失败 -1015 #define ERROR_文件夹创建失败 -1016 #define ERROR_异步无法获取返回值 -1017 #define ERROR_语法错误 -1018 #define ERROR_申请内存失败 -1019 #define ERROR_创建线程失败 -1020 #define ERROR_缓冲区大小不足 -1021 #define ERROR_未初始化LUA -1022 #define ERROR_LUA状态机为NULL -1023 #define ERROR_未找到LUA函数 -1024 #define ERROR_返回值未知类型 -1025 #define ERROR_LUA线程标识符不符合 -1026 #define ERROR_模块获取失败 -1027 #define ERROR_地址不可读 -1028 #define ERROR_返回值为JSON -1029 #define ERROR_获取数据失败 -1030 #define ERROR_未初始化 -1031 #define ERROR_已经开启 -1032 #define ERROR_已经结束 -1033 #define ERROR_未开启 -1034 #define ERROR_未结束 -1035 #define ERROR_高宽为0 -1036 #define ERROR_数据为NULL -1037 #define ERROR_数据不符合要求 -1038 #define ERROR_文件打开失败 -1039 #define ERROR_打开失败 -1040 #define ERROR_解析失败 -1041 #define ERROR_无游戏类型 -1042 #define ERROR_HOOK失败 -1043 #define ERROR_UNHOOK失败 -1044 #define ERROR_功能失效 -1045 #define ERROR_无效PE文件格式 -1046 #define ERROR_未找到PE头 -1047 #define ERROR_重定位表失败 -1048 #define ERROR_未找到函数入口 -1049 #define ERROR_无法附加DLL -1050 #define ERROR_接口数量上限 -1051 #define ERROR_已经存在 -1052 #define ERROR_打开句柄失败 -1053 #define ERROR_未找到全局环境 -1054 #define ERROR_组件数量上限 -1055 #define ERROR_未找到组件接口 -1056 #define ERROR_接口类型不匹配 -1057 #define ERROR_组件无效 -1058 #define ERROR_接口地址无效 -1059 #define ERROR_生成密钥失败 -1060 #define ERROR_加密失败 -1061 #define ERROR_解密失败 -1062 #define ERROR_DLL中无此接口 -1063 #define ERROR_下载失败 -1064 #define ERROR_注册表操作失败 -1065 #define ERROR_路径获取失败 -1066 #define ERROR_提权失败 -1067 #define ERROR_驱动已安装 -1068 #define ERROR_HD驱动已安装无法安装HN驱动 -1069 #define ERROR_资源未找到 -1070 #define ERROR_资源加载失败 -1071 #define ERROR_提取资源失败 -1072 #define ERROR_未加载插件 -1073 #define ERROR_文件无法保存 -1074 #define ERROR_打开目录失败 -1075 #define ERROR_写入文件的字节大小不符合要求 -1076 #define ERROR_删除文件失败 -1077 #define ERROR_获取字符串失败 -1078 #define ERROR_获取注册表值失败 -1079 #define ERROR_类型错误 -1080 #define ERROR_参数不符合要求 -1081 #define ERROR_区域超出 -1082 #define ERROR_文件不存在 -1083 #define ERROR_创建文件失败 -1084 #define ERROR_文件读取失败 -1085 #define ERROR_与系统驱动通讯失败 -1086 #define ERROR_创建管道失败 -1087 #define ERROR_创建进程失败 -1088 #define ERROR_未找到相关字符串信息 -1089 #define ERROR_缓冲区大小不充足 -1090 #define ERROR_数据类型转换失败 -1091 #define ERROR_格式化字符串失败 -1092 #define ERROR_网络超时 -1093 #define ERROR_网络连接失败 -1094 #define ERROR_加载指定DLL失败 -1095 #define ERROR_解析字符串失败 -1096 #define ERROR_窗口大小变动导致数据不一致 -1097 #define ERROR_打开剪切板失败 -1098 #define ERROR_加锁失败 -1099 #define ERROR_获取剪切板数据失败 -1100 #define ERROR_版本号获取失败 -1101 #define ERROR_已经绑定其他设备 -1102 #define ERROR_已经达到最大在线数 -1103 #define ERROR_账号或密码为空 -1104 #define ERROR_验证失败 -1105 #define ERROR_打开进程失败 -1106 #define ERROR_进程位数不匹配 -1107 #define ERROR_添加进程环境失败 -1108 #define ERROR_定位特征地址失败 -1109 #define ERROR_寻找空白地址失败 -1110 #define ERROR_无操作类型 -1111 #define ERROR_无相关句柄 -1112 #define ERROR_无HDC句柄 -1113 #define ERROR_获取矩形大小失败 -1114 #define ERROR_拷贝数据失败 -1115 #define ERROR_无效句柄 -1116 #define ERROR_创建对象失败 -1117 #define ERROR_截图方式需要重开才能切换 -1118 #define ERROR_格式有误 -1119 #define ERROR_字库数据为空 -1120 #define ERROR_字库中未找到相应字 -1121 #define ERROR_大小计算为0 -1122 #define ERROR_容器大小不一致 -1123 #define ERROR_句柄无效 -1124 #define ERROR_获取PID无效 -1125 #define ERROR_获取大小失败 -1126 #define ERROR_获取失败 -1127 #define ERROR_未找到 -1128 #define ERROR_立即返回无效值 -1129 #define ERROR_未设置路径 -1130 #define ERROR_文件操作失败 -1131 #define ERROR_写入内存失败 -1132 #define ERROR_模块查找失败 -1133 #define ERROR_接口查找失败 -1134 #define ERROR_组件信息保存失败 -1135 #define ERROR_组件加载失败 -1136 #define ERROR_组件卸载失败 -1137 #define ERROR_组件不符合卸载要求 -1138 #define ERROR_进程环境句柄为NULL -1139 #define ERROR_未绑定PID -1140 #define ERROR_读取图片失败 -1141 #define ERROR_打开注册表失败 -1142 #define ERROR_获取注册表失败 -1143 #define ERROR_写内存失败 -1144 #define ERROR_清除缓存失败 -1145 #define ERROR_字体无宽度 -1146 #define ERROR_裁剪矩形数据失败 -1147 #define ERROR_图片无宽或高 -1148 #define ERROR_功能未开放 -1149 #define ERROR_模块信息获取失败 -1150 #define ERROR_未找到合适的JMP地址 -1151 #define ERROR_HOOK初始化失败 -1152 #define ERROR_无HOOK接口类型 -1153 #define ERROR_CALL类型不匹配 -1154 #define ERROR_创建通讯失败 -1155 #define ERROR_加载通讯失败 -1156 #define ERROR_数据格式错误 -1157 #define ERROR_地址失效 -1158 #define ERROR_坐标转换失败 -1159 #define ERROR_容器为空 -1160 #define ERROR_数据为空 -1161 #define ERROR_特征不符合 -1162 #define ERROR_范围未确定 -1163 #define ERROR_缓冲区不足 -1164 #define ERROR_此接口调试版本无效 -1165 #define ERROR_子图不在范围内 -1166 #define ERROR_插件数量上限 -1167 #define ERROR_API枚举失败 -1168 #define ERROR_无法定位模块 -1169 #define ERROR_无效HOOK地址 -1170 #define ERROR_无对应的HOOK函数 -1171 #define ERROR_破坏字节超过容量 -1172 #define ERROR_指定地址不适合HOOK -1173 #define ERROR_没有充足的HOOK大小 -1174 #define ERROR_设置回调地址失败 -1175 #define ERROR_API获取时间失败 -1176 #define ERROR_无效插件序号 -1177 #define ERROR_进程不存在 -1178 #define ERROR_未安装插件 -1179 #define ERROR_初始化通讯失败 -1180 #define ERROR_未初始化通讯序号 -1181 #define ERROR_当前线程字库为空 -1182 #define ERROR_线程数量超出限制 -1183 #define ERROR_字库序号不存在 -1184 #define ERROR_释放资源失败 -1185 #define ERROR_超出容量 -1186 #define ERROR_空模型 -1187 #define ERROR_环境序号不存在 -1188 #define ERROR_回调处理中 -1189 #define ERROR_无法操作绑定窗口 -1190 #define ERROR_接口已被移除 -1191 #define ERROR_不支持类型 -1192 #define ERROR_初始化失败 -1193 #define ERROR_环境被卸载 -1194 #define ERROR_进程已经关闭 -1195 #define ERROR_中控环境未初始化 -1196 #define ERROR_未加载HD驱动 -1197 #define ERROR_未绑定设备 -1198 #define ERROR_未找到进程 -1199 #define ERROR_进程PID不匹配 -1200 #define ERROR_前台模式无法后台 -1201 #define ERROR_JMP地址无效 -1202 #define ERROR_HOOK地址无效 -1203 #define ERROR_类型和HOOK地址不匹配 -1204 #define ERROR_不在HD多线程环境下 -1205 #define ERROR_未连接 -1206 #define ERROR_进程环境已被卸载 -1207 #define ERROR_安装插件失败 -1208 //检查是否安装了驱动 #define ERROR_安装驱动失败 -1209 //检查是否管理员或者杀毒或者关闭内核隔离 #define ERROR_加载环境失败 -1210 //检查账号是否欠费或者网络问题或者参数不符合要求 #define ERROR_初始化序号失败 -1211 //一般不会失败 #define ERROR_获取PID超时返回 -1212 //确定是否打开进程成功或者增大等待时间 #define ERROR_获取状态值20超时返回 -1213 //未安装插件或被拦截或增大等待时间 #define ERROR_获取状态值120超时返回 -1214 //未安装插件或被拦截或增大等待时间 #define ERROR_继续失败 -1215 //可能未初始化相关环境 一般不会失败 #define ERROR_当前进程插件序号不一致 -1216 //说明指定的PID进程绑定的窗口序号已经存在 与指定的序号不一致 调用HCInject_GetPreWinIndex 获取指定PID的绑定的窗口序号 #define ERROR_PID无效 -1217 #define ERROR_扩展序号不能用 -1218//扩展序号不能自己指定 #define ERROR_接口丢弃 -1219//老版本的接口丢弃 #define ERROR_序号超出限制 -1220 #define ERROR_已经重启 -1221 #define ERROR_登录中无法重启 -1222 #define ERROR_暂停中无法重启 -1223 #define ERROR_操作中无法重启 -1224 #define ERROR_强制关闭线程中无法发送 -1225 #define ERROR_卸载失败 -1226 #define ERROR_未完全开启 -1227 #define ERROR_逻辑异常 -1228 #define ERROR_无法连接VNC -1229 #define ERROR_未连接过VNC -1230 #define ERROR_未关联过VM -1231 #define ERROR_未获取截图环境 -1232 #define ERROR_未获取截图环境 -1232 #define ERROR_环境为NULL -1233 #define ERROR_区域无效 -1234 #define ERROR_继续当前操作 -1235 #define ERROR_加解密失败 -1236 #define ERROR_未安装驱动 -1237 #define ERROR_调试版本无法加解密 -1238 #define ERROR_截图缓存不存在 -1239//检查截图模式不对 或者 未开启截图 请用截图查看器查看是否截图缓存存在 【备注】 也可以可通过工具后台查看",
    "url": "/docs/xuanlanguage/category_1",
    "source": "api_data_xuanlanguage.json",
    "type": "说明"
  },
  {
    "id": "function_1",
    "title": "基础功能接口 - HD登录_获取版本号",
    "content": "【功能描述】 获取当前插件版本号 【备注】 无",
    "url": "/docs/xuanlanguage/category_2",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "基础功能接口 - HCEnv_GetRetJson",
    "content": "【功能描述】 获取最近一次调用接口返回的json字符串 【备注】 并不是所有接口都返回json字符串 有一些接口返回单一的值就没必要调用这个接口 一些接口需要拿到字符串信息返回,那么这些字符串会存在json字符串中,需要自己调用此接口获取",
    "url": "/docs/xuanlanguage/category_2",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "基础功能接口 - HD通用_获取最近返回值",
    "content": "【功能描述】 获取最近一次调用接口返回的值(用于检测是否有错) 【备注】 无",
    "url": "/docs/xuanlanguage/category_2",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "基础功能接口 - HCEnv_GetErrorStr",
    "content": "【功能描述】 通过传递HD返回值获取字符串信息",
    "url": "/docs/xuanlanguage/category_2",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "基础功能接口 - HD通用_获取最近API返回值",
    "content": "【功能描述】 获取最近一次调用WIN32API错误值 【备注】 无",
    "url": "/docs/xuanlanguage/category_2",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "基础功能接口 - HD环境_获取最大多开数",
    "content": "【功能描述】 获取最大窗口数 【备注】 窗口序号不能大于等于这个返回值同时也不能小于0",
    "url": "/docs/xuanlanguage/category_2",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "基础功能接口 - HD通用_获取当前插件状态值",
    "content": "【功能描述】 获取当前环境搭建流程中的操作信息 【备注】 这个CALL返回HD状态信息可以确定当前处于那个步骤 typedefenumHD状态信息{HD状态信息_无=0,\\n0HD状态信息_DLL环境_加载全局成功=1,\\n1HD状态信息_DLL环境_加载全局失败=2,\\n2HD状态信息_DLL环境_窗口序号不符合=3,\\n3HD状态信息_DLL环境_进程不符合=4,\\n4HD状态信息_DLL环境_打开句柄失败=5,\\n5HD状态信息_DLL环境_获取内存失败=6,\\n6HD状态信息_DLL环境_等待继续=20,\\n20需要调用HCInject_Continue()HD状态信息_通讯环境_开始=21,\\n21HD状态信息_通讯环境_成功=22,\\n22HD状态信息_通讯环境_失败=23,\\n23HD状态信息_通讯环境_打开句柄失败=24,\\n24HD状态信息_通讯环境_获取内存失败=25,\\n25HD状态信息_接口映射_成功=40,\\n40自制通讯协议创建HD状态信息_接口映射_失败=41,\\n41HD状态信息_LUA_成功=60,\\n60可以执行LUAHD状态信息_LUA_失败=61,\\n61不可以执行LUAHD状态信息_数据库_开启=80,\\n80需要调用HHIT2_Load()的时候参数bOpenData设置为1HD状态信息_数据库_未开启=81,\\n81HD状态信息_数据库_开启失败=82,\\n82内置特征码有误联系管理员HD状态信息_验证_有误=100,\\n100联系管理员HD状态信息_监听_成功=120,\\n120【【【【大于等于120说明可以调用接口了】】】】HD状态信息_监听_失败=121,\\n121基本是不会出现这个错误HD状态信息_挂接主线_开启=140,\\n140调用HD状态信息_挂接主线_进入=141,\\n141准备挂接HD状态信息_挂接主线_尝试中=142,\\n142处于这个阶段需要用SetHwnd()暂时没用HD状态信息_挂接主线_成功=143,\\n143成功挂接所有关于可以主线程调用的接口的参数\\\"是否主线程调用\\\"生效HD状态信息_挂接主线_失败=144,\\n144HD状态信息_挂接主线_已经开启=145,\\n145已经开启了HD状态信息_加载_延迟=146,\\n2秒延迟HD状态信息_通讯加载失败=147\\n2秒延迟}HD状态信息;",
    "url": "/docs/xuanlanguage/category_2",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "基础功能接口 - HD环境_获取插件执行环境信息",
    "content": "【功能描述】 获取通讯插件所绑定的目标进程的执行线程环境信息 【备注】 无",
    "url": "/docs/xuanlanguage/category_2",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "基础功能接口 - HD注入_设置插件信息",
    "content": "【功能描述】 设置插件信息 【备注】 易语言/火山/Python/炫语言/C#等语言:还需要拿到模块源码更改导入DLL名字需要与自定义DLL同名 内置版本名规则: \\n======64位#ifdef_WIN64#ifdef_UNICODE\\n64位W版本std::stringHCInject::g_发布版本DLL名字=\\\"hd64.dll\\\";std::stringHCInject::g_调试版本DLL名字=\\\"hddebug64.dll\\\";#else\\n64位A版本std::stringHCInject::g_发布版本DLL名字=\\\"hd64a.dll\\\";std::stringHCInject::g_调试版本DLL名字=\\\"hddebug64a.dll\\\";#endif\\n======32位#else#ifdef_UNICODE\\n32位W版本std::stringHCInject::g_发布版本DLL名字=\\\"hd.dll\\\";std::stringHCInject::g_调试版本DLL名字=\\\"hddebug.dll\\\";#else\\n32位A版本std::stringHCInject::g_发布版本DLL名字=\\\"hda.dll\\\";std::stringHCInject::g_调试版本DLL名字=\\\"hddebuga.dll\\\";#endif#endif\\n》》》》》》",
    "url": "/docs/xuanlanguage/category_2",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "IP模块[IP] - HDIP_有米设置路径",
    "content": "【功能描述】 设置有米软件路径(EXE路径) 【备注】 软件找HD作者拿(魔改版)",
    "url": "/docs/xuanlanguage/category_3",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "IP模块[IP] - HDIP_有米添加IP",
    "content": "【功能描述】 添加IP 【备注】 软件找HD作者拿(魔改版)",
    "url": "/docs/xuanlanguage/category_3",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "IP模块[IP] - HDIP_有米添加进程",
    "content": "【功能描述】 添加代理的进程名 【备注】 软件找HD作者拿(魔改版)",
    "url": "/docs/xuanlanguage/category_3",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "IP模块[IP] - HDIP_有米打开",
    "content": "【功能描述】 打开有米软件 【备注】 软件找HD作者拿(魔改版) 流程: 1.先设置路径 2.添加代理进程和IP 3.打开有米",
    "url": "/docs/xuanlanguage/category_3",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "IP模块[IP] - HDIP_有米是否打开",
    "content": "【功能描述】 有米软件是否已经打开 【备注】 软件找HD作者拿(魔改版) 流程: 1.先设置路径 2.添加代理进程和IP 3.打开有米",
    "url": "/docs/xuanlanguage/category_3",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "IP模块[IP] - HDIP_有米关闭",
    "content": "【功能描述】 关闭有米软件 【备注】 软件找HD作者拿(魔改版) 流程: 1.先设置路径 2.添加代理进程和IP 3.打开有米",
    "url": "/docs/xuanlanguage/category_3",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "登录验证(Login) - HD登录_登录",
    "content": "【功能描述】 HD登录验证接口（强烈建议主线程中调用） 【备注】 1.验证接口,所有接口需要通过验证才能调用 2.如果自己写中控可以不用打开自动更新",
    "url": "/docs/xuanlanguage/category_4",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "登录验证(Login) - HD登录_获取最近登录点数",
    "content": "【功能描述】 最近登录时候的点数 【备注】 无",
    "url": "/docs/xuanlanguage/category_4",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "登录验证(Login) - HD登录_获取最近登录时间",
    "content": "【功能描述】 获取最近登录时间戳 【备注】 无",
    "url": "/docs/xuanlanguage/category_4",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "登录验证(Login) - HD登录_获取点数",
    "content": "【功能描述】 获取点数 【备注】 无",
    "url": "/docs/xuanlanguage/category_4",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "登录验证(Login) - HD登录_获取最大多开数",
    "content": "【功能描述】 获取最大多少开 【备注】 无",
    "url": "/docs/xuanlanguage/category_4",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "安装插件扩展模块[ex] - HD扩展_安装插件1",
    "content": "【功能描述】 第一种通讯安装插件方式(安装插件再打开进程)如果使用HD多线程模块强烈建议在登录回调中使用 【备注】 可以参考表安装插件接口类型表 1.支持重连,重连的前提是不能被HCEnv_UnLoad卸载 回调解析: 打开回调openFun:可以参考表安装插件接口类型表 typedef__int64 (__stdcall* INSTALLPLUGint YPE)(int windowsIndex); 参数:windowsIndex:当前指定序号 说明:1.对于第一种方式打开回调不能为NULL,内部先安装插件再触发回调打开进程(在打开回调中可以手动或者自动打开进程1.如果是手动直接返回1就行或错误值表示中断操作2.如果是自动返回对应的PID或错误值表示中断操作)2.其他二种方式打开回调可以为NULL,表示进程已经打开了,不需要在回调中打开,此时使用指定的PID或者窗口句柄来安装插件,具体是PID还是句柄请查看安装插件接口类型表3.返回值根据当前的安装插件方式不同有不同的含义:（具体请看安装插件接口类型表和覆盖策略） 3.1方式二是通过PID安装插件那么返回值应该为打开进程的PID,并把传递的PID参数给覆盖了(请看PID覆盖策略),可以返回小于等于0的错误值或者不存在的PID,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.1.1PID覆盖策略 \\n1.如果指定的参数PID有效大于0并存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID\\n2.如果指定的参数PID有效大于0并存在同时打开回调返回的PID无效小于等于0不存在就用指定参数的PID\\n3.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID无效小于等于0不存在就直接返回错误\\n4.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID 3.2方式三是通过窗口句柄安装插件那么返回值应该为打开进程的句柄,并把传递的句柄参数给覆盖了(请看窗口句柄覆盖策略),可以返回小于等于0的错误值或者窗口句柄无效,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.2.1窗口句柄覆盖策略 \\n1.如果指定参数的窗口句柄有效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄\\n2.如果指定参数的窗口句柄有效同时打开回调返回的的句柄无效就用指定参数的句柄\\n3.如果指定参数的窗口句柄无效同时打开回调返回的的句柄无效就直接返回错误\\n4.如果指定参数的窗口句柄无效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄 检查回调checkFun: typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int prePid,int error); 参数:windowsIndex:当前指定序号preWindowsIndex:之前绑定的序号或者错误值(小于0)--来源HCInject_GetPreWinIndex返回prePid:之前绑定的序号对应的PID--来源HCInject_GetPid返回error:提示值 error==RET_重连窗口(5)----->返回值含义:(1重连直接进行加载环境0新窗口) error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的) 我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 error==RET_重连窗口序号不一致(6)----->返回值含义:(1重连并使用之前绑定的序号进行加载环境 0新窗口(需要用户在回调中把之前PID给关闭)) error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的) 我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 其他情况可以返回小于0的自定义值:表示直接中断安装插件流程,并返回对应的值(这个值只要小于0即可,可以作为自定义值) 说明: 1.如果指定的检查回调为NULL,当内部检查到是重连窗口的时候 2.如果发现序号不一致就会直接返回(ERROR_当前进程插件序号不一致-1216) 3.如果序号一致就直接加载环境并实现重连 几个核心的点归纳总结出来其实就能规避掉很多坑了比如1.没安装过插件的都不算重连窗口全部当新窗口处理会触发打开回调2.安装过插件的不管是卸载了环境还是崩溃或重启中控都算重连窗口不会触发打开回调会触发检查回调",
    "url": "/docs/xuanlanguage/category_5",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "安装插件扩展模块[ex] - HD扩展_安装插件2",
    "content": "【功能描述】 第二种通讯安装插件方式(打开进程然后安装插件),通过pid如果使用HD多线程模块强烈建议在登录回调中使用 【备注】 可以参考表安装插件接口类型表 1.支持重连,重连的前提是不能被HCEnv_UnLoad卸载 回调解析: 打开回调openFun typedef__int64 (__stdcall* INSTALLPLUGint YPE)(int windowsIndex); 参数:windowsIndex:当前指定序号 说明:1.对于第一种方式打开回调不能为NULL,内部先安装插件再触发回调打开进程(在打开回调中可以手动或者自动打开进程1.如果是手动直接返回1就行或错误值表示中断操作2.如果是自动返回对应的PID或错误值表示中断操作)2.其他二种方式打开回调可以为NULL,表示进程已经打开了,不需要在回调中打开,此时使用指定的PID或者窗口句柄来安装插件,具体是PID还是句柄请查看安装插件接口类型表3.返回值根据当前的安装插件方式不同有不同的含义:（具体请看安装插件接口类型表和覆盖策略） 3.1方式二是通过PID安装插件那么返回值应该为打开进程的PID,并把传递的PID参数给覆盖了(请看PID覆盖策略),可以返回小于等于0的错误值或者不存在的PID,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.1.1PID覆盖策略 \\n1.如果指定的参数PID有效大于0并存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID\\n2.如果指定的参数PID有效大于0并存在同时打开回调返回的PID无效小于等于0不存在就用指定参数的PID\\n3.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID无效小于等于0不存在就直接返回错误\\n4.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID 3.2方式三是通过窗口句柄安装插件那么返回值应该为打开进程的句柄,并把传递的句柄参数给覆盖了(请看窗口句柄覆盖策略),可以返回小于等于0的错误值或者窗口句柄无效,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.2.1窗口句柄覆盖策略 \\n1.如果指定参数的窗口句柄有效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄\\n2.如果指定参数的窗口句柄有效同时打开回调返回的的句柄无效就用指定参数的句柄\\n3.如果指定参数的窗口句柄无效同时打开回调返回的的句柄无效就直接返回错误\\n4.如果指定参数的窗口句柄无效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄 检查回调checkFun: typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int prePid,int error); 参数:windowsIndex:当前指定序号preWindowsIndex:之前绑定的序号或者错误值(小于0)--来源HCInject_GetPreWinIndex返回prePid:之前绑定的序号对应的PID--来源HCInject_GetPid返回error:提示值 error==RET_重连窗口(5)----->返回值含义:(1重连直接进行加载环境0新窗口) error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的) 我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 error==RET_重连窗口序号不一致(6)----->返回值含义:(1重连并使用之前绑定的序号进行加载环境0新窗口(需要用户在回调中把之前PID给关闭)) 说明: 1.如果指定的检查回调为NULL,当内部检查到是重连窗口的时候 2.如果发现序号不一致就会直接返回(ERROR_当前进程插件序号不一致-1216) 3.如果序号一致就直接加载环境并实现重连 几个核心的点归纳总结出来其实就能规避掉很多坑了比如1.没安装过插件的都不算重连窗口全部当新窗口处理会触发打开回调2.安装过插件的不管是卸载了环境还是崩溃了中控都算重连窗口不会触发打开回调",
    "url": "/docs/xuanlanguage/category_5",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "安装插件扩展模块[ex] - HD扩展_安装插件3",
    "content": "【功能描述】 第三种通讯安装插件方式(打开进程然后安装插件),通过窗口句柄如果使用HD多线程模块强烈建议在登录回调中使用 【备注】 可以参考表安装插件接口类型表 1.支持重连,重连的前提是不能被HCEnv_UnLoad卸载 回调解析: 打开回调openFun:可以参考表安装插件接口类型表 typedef__int64 (__stdcall* INSTALLPLUGint YPE)(int windowsIndex); 参数:windowsIndex:当前指定序号 说明:1.对于第一种方式打开回调不能为NULL,内部先安装插件再触发回调打开进程(在打开回调中可以手动或者自动打开进程1.如果是手动直接返回1就行或错误值表示中断操作2.如果是自动返回对应的PID或错误值表示中断操作)2.其他二种方式打开回调可以为NULL,表示进程已经打开了,不需要在回调中打开,此时使用指定的PID或者窗口句柄来安装插件,具体是PID还是句柄请查看安装插件接口类型表3.返回值根据当前的安装插件方式不同有不同的含义:（具体请看安装插件接口类型表和覆盖策略） 3.1方式二是通过PID安装插件那么返回值应该为打开进程的PID,并把传递的PID参数给覆盖了(请看PID覆盖策略),可以返回小于等于0的错误值或者不存在的PID,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.1.1PID覆盖策略 \\n1.如果指定的参数PID有效大于0并存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID\\n2.如果指定的参数PID有效大于0并存在同时打开回调返回的PID无效小于等于0不存在就用指定参数的PID\\n3.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID无效小于等于0不存在就直接返回错误\\n4.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID 3.2方式三是通过窗口句柄安装插件那么返回值应该为打开进程的句柄,并把传递的句柄参数给覆盖了(请看窗口句柄覆盖策略),可以返回小于等于0的错误值或者窗口句柄无效,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.2.1窗口句柄覆盖策略 \\n1.如果指定参数的窗口句柄有效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄\\n2.如果指定参数的窗口句柄有效同时打开回调返回的的句柄无效就用指定参数的句柄\\n3.如果指定参数的窗口句柄无效同时打开回调返回的的句柄无效就直接返回错误\\n4.如果指定参数的窗口句柄无效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄 检查回调checkFun: typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int prePid,int error); 参数:windowsIndex:当前指定序号preWindowsIndex:之前绑定的序号或者错误值(小于0)--来源HCInject_GetPreWinIndex返回prePid:之前绑定的序号对应的PID--来源HCInject_GetPid返回error:提示值 error==RET_重连窗口(5)----->返回值含义:(1重连直接进行加载环境0新窗口) error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的) 我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 error==RET_重连窗口序号不一致(6)----->返回值含义:(1重连并使用之前绑定的序号进行加载环境0新窗口(需要用户在回调中把之前PID给关闭)) 说明: 1.如果指定的检查回调为NULL,当内部检查到是重连窗口的时候 2.如果发现序号不一致就会直接返回(ERROR_当前进程插件序号不一致-1216) 3.如果序号一致就直接加载环境并实现重连 几个核心的点归纳总结出来其实就能规避掉很多坑了比如1.没安装过插件的都不算重连窗口全部当新窗口处理会触发打开回调2.安装过插件的不管是卸载了环境还是崩溃了中控都算重连窗口不会触发打开回调",
    "url": "/docs/xuanlanguage/category_5",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "安装插件扩展模块[ex] - HD扩展_安装插件VM",
    "content": "【功能描述】 打开后安装通过PID针对虚拟机内部自动关联虚拟机如果使用HD多线程模块强烈建议在登录回调中使用 【备注】 可以参考表安装插件接口类型表 1.调用之前记得打开服务器HCVMDMA_StartServer并确定正确打开HCVMDMA_ServerIsStart 2.其他规则和前3种安装插件方式一致 3.支持重连,重连的前提是不能被HCEnv_UnLoad卸载 回调解析: 打开回调openFun:可以参考表安装插件接口类型表 typedef__int64 (__stdcall* INSTALLPLUGint YPE)(int windowsIndex); 参数:windowsIndex:当前指定序号 说明:1.对于第一种方式打开回调不能为NULL,内部先安装插件再触发回调打开进程(在打开回调中可以手动或者自动打开进程1.如果是手动直接返回1就行或错误值表示中断操作2.如果是自动返回对应的PID或错误值表示中断操作)2.其他二种方式打开回调可以为NULL,表示进程已经打开了,不需要在回调中打开,此时使用指定的PID或者窗口句柄来安装插件,具体是PID还是句柄请查看安装插件接口类型表3.返回值根据当前的安装插件方式不同有不同的含义:（具体请看安装插件接口类型表和覆盖策略） 3.1方式二是通过PID安装插件那么返回值应该为打开进程的PID,并把传递的PID参数给覆盖了(请看PID覆盖策略),可以返回小于等于0的错误值或者不存在的PID,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.1.1PID覆盖策略 \\n1.如果指定的参数PID有效大于0并存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID\\n2.如果指定的参数PID有效大于0并存在同时打开回调返回的PID无效小于等于0不存在就用指定参数的PID\\n3.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID无效小于等于0不存在就直接返回错误\\n4.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID 3.2方式三是通过窗口句柄安装插件那么返回值应该为打开进程的句柄,并把传递的句柄参数给覆盖了(请看窗口句柄覆盖策略),可以返回小于等于0的错误值或者窗口句柄无效,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.2.1窗口句柄覆盖策略 \\n1.如果指定参数的窗口句柄有效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄\\n2.如果指定参数的窗口句柄有效同时打开回调返回的的句柄无效就用指定参数的句柄\\n3.如果指定参数的窗口句柄无效同时打开回调返回的的句柄无效就直接返回错误\\n4.如果指定参数的窗口句柄无效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄 检查回调checkFun: typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int prePid,int error); 参数:windowsIndex:当前指定序号preWindowsIndex:之前绑定的序号或者错误值(小于0)--来源HCInject_GetPreWinIndex返回prePid:之前绑定的序号对应的PID--来源HCInject_GetPid返回error:提示值 error==RET_重连窗口(5)----->返回值含义:(1重连直接进行加载环境0新窗口) error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的) 我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 error==RET_重连窗口序号不一致(6)----->返回值含义:(1重连并使用之前绑定的序号进行加载环境0新窗口(需要用户在回调中把之前PID给关闭)) 说明: 1.如果指定的检查回调为NULL,当内部检查到是重连窗口的时候 2.如果发现序号不一致就会直接返回(ERROR_当前进程插件序号不一致-1216) 3.如果序号一致就直接加载环境并实现重连 几个核心的点归纳总结出来其实就能规避掉很多坑了比如1.没安装过插件的都不算重连窗口全部当新窗口处理会触发打开回调2.安装过插件的不管是卸载了环境还是崩溃了中控都算重连窗口不会触发打开回调",
    "url": "/docs/xuanlanguage/category_5",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "环境初始化模块(Inject) - HD通讯_初始化",
    "content": "【功能描述】 初始化插件环境 【备注】 每次打开游戏都需要先初始化一次 不要多次初始化 该接口还会把当前全局进程位数HCEnv_SetProcessType与当前窗口序号进程绑定,省去了切换进程位数的操作,如果不绑定可能会返回-1107(ERROR_进程位数不匹配)",
    "url": "/docs/xuanlanguage/category_6",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "环境初始化模块(Inject) - HD通讯_初始化Ex",
    "content": "【功能描述】 初始化插件环境 【备注】 每次打开游戏都需要先初始化一次 不要多次初始化 如果不需要用LUA来初始化自己的数据,可以直接使用HCInject_Init 该接口还会把当前全局进程位数HCEnv_SetProcessType与当前窗口序号进程绑定,省去了切换进程位数的操作,如果不绑定可能会返回-1107(ERROR_进程位数不匹配)",
    "url": "/docs/xuanlanguage/category_6",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "环境初始化模块(Inject) - HD通讯_初始化Exx",
    "content": "【功能描述】 初始化插件环境 【备注】 每次打开游戏都需要先初始化一次 不要多次初始化 如果不需要用LUA来初始化自己的数据或者预加载DLL,可以直接使用HCInject_Init 该接口还会把当前全局进程位数HCEnv_SetProcessType与当前窗口序号进程绑定,省去了切换进程位数的操作,如果不绑定可能会返回-1107(ERROR_进程位数不匹配)",
    "url": "/docs/xuanlanguage/category_6",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "环境初始化模块(Inject) - HD通讯_获取PID",
    "content": "【功能描述】 获取打开的进程PID 【备注】 调用这个接口之前必须保证插件已经加载才会获取PID",
    "url": "/docs/xuanlanguage/category_6",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "环境初始化模块(Inject) - HD通讯_获取之前PID",
    "content": "【功能描述】 获取打开的进程之前的PID(可以用于重连) 【备注】 当我们在调试的时候中控如果崩了,如果此时插件还在游戏进程中执行,那么可以当打开中控的时候直接获取PID进行通讯,而不是调用初始化之类的操作",
    "url": "/docs/xuanlanguage/category_6",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "环境初始化模块(Inject) - HD通讯_获取绑定窗口序号",
    "content": "【功能描述】 通过进程PID尝试拿到绑定的窗口序号 【备注】 返回如果大于等于0的值表示之前进程绑定的窗口序号 没有进程PID返回-1178 没有绑定过返回-1179",
    "url": "/docs/xuanlanguage/category_6",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "环境初始化模块(Inject) - HCInject_GetPreWinIndexEx",
    "content": "【功能描述】 通过进程PID尝试拿到绑定的窗口序号 【备注】 返回如果大于等于0的值表示之前进程绑定的窗口序号 没有进程PID返回-1178 没有绑定过返回-1179",
    "url": "/docs/xuanlanguage/category_6",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "环境初始化模块(Inject) - HD通讯_获取窗口句柄",
    "content": "【功能描述】 获取窗口句柄,内部是通过PID获取窗口句柄需要先安装好插件到目标进程 【备注】 内部是通过HCWIN_EnumWindowByProcessId获取",
    "url": "/docs/xuanlanguage/category_6",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "环境初始化模块(Inject) - HD通讯_获取窗口句柄Ex",
    "content": "【功能描述】 获取窗口句柄(需要内置,一般不需要调用这个获取句柄),如果需要通过PID获取句柄请调用HCInject_GetHwnd 【备注】 这个接口和内置的游戏接口有关,需要搭建完通讯才能调用 并不是一定获取到 如果要获取进程句柄还需要自行获取,除非内置了游戏数据",
    "url": "/docs/xuanlanguage/category_6",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "环境初始化模块(Inject) - HD通讯_继续",
    "content": "【功能描述】 继续环境加载操作 【备注】 当我们调用了HCEnv_Load后需要调用这个接口来验证",
    "url": "/docs/xuanlanguage/category_6",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "环境初始化模块(Inject) - HD通讯_存数据",
    "content": "【功能描述】 存自定义二进制数据 【备注】 无",
    "url": "/docs/xuanlanguage/category_6",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "环境初始化模块(Inject) - HD通讯_取数据",
    "content": "【功能描述】 取自定义二进制数据 【备注】 取的数据就是用HCInject_SetData接口存的数据",
    "url": "/docs/xuanlanguage/category_6",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "通讯环境模块(Env) - HD环境_初始化",
    "content": "【功能描述】 HD插件环境加载(初始化中控环境) 【备注】 中控初始化开始就要调用,仅仅一次",
    "url": "/docs/xuanlanguage/category_7",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "通讯环境模块(Env) - HD环境_初始化Ex",
    "content": "【功能描述】 HD插件环境加载(初始化中控环境)(扩展版本)最新版本一般不用了 【备注】 中控初始化开始就要调用,仅仅一次",
    "url": "/docs/xuanlanguage/category_7",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "通讯环境模块(Env) - HD环境_加载窗口",
    "content": "【功能描述】 HD插件环境加载 【备注】 调用这个接口需要先调用环境初始化模块中的初始化接口 每次打开进程后都要调用",
    "url": "/docs/xuanlanguage/category_7",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "通讯环境模块(Env) - HD环境_加载窗口Ex",
    "content": "【功能描述】 HD插件环境加载(扩展版本),涉及到回调 【备注】 调用这个接口需要先调用环境初始化模块中的初始化接口 每次打开进程后都要调用",
    "url": "/docs/xuanlanguage/category_7",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "通讯环境模块(Env) - HD环境_卸载窗口",
    "content": "【功能描述】 HD插件环境卸载 【备注】 调用这个接口需要先调用环境初始化模块中的初始化接口 进程关闭一定要记得卸载窗口序号对应的窗口环境,以便于下次窗口序号使用 1.没安装过插件的都不算重连窗口全部当新窗口处理 2.安装过插件的不管卸载环境还是崩溃或者重启窗口都可以重连窗口一个序号只能绑定到一个窗口操作",
    "url": "/docs/xuanlanguage/category_7",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "通讯环境模块(Env) - HD环境_卸载窗口Ex",
    "content": "【功能描述】 HD插件环境卸载(扩展版本) 【备注】 调用这个接口需要先调用环境初始化模块中的初始化接口 进程关闭一定要记得卸载窗口序号对应的窗口环境,以便于下次窗口序号使用 1.没安装过插件的都不算重连窗口全部当新窗口处理 2.安装过插件的不管卸载环境还是崩溃或者重启窗口都可以重连窗口一个序号只能绑定到一个窗口操作",
    "url": "/docs/xuanlanguage/category_7",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "通讯环境模块(Env) - HDEnv_GetWinExIndex",
    "content": "【功能描述】 获取副窗口序号 【备注】 这个副窗口序号可以用于登录器的绑定和操作,相当于窗口序号的一个助手,做一些额外的事情相当于一个窗口序号可以操作2个进程如:窗口序号1那么他返回的窗口扩展序号就是1+31也就是32序号",
    "url": "/docs/xuanlanguage/category_7",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "通讯环境模块(Env) - HDEnv_GetGlobalWinExIndex",
    "content": "【功能描述】 获取全局副窗口序号,这是一个全局的序号 【备注】 一个中控仅有一个计算方式:0+31也就是这个全局序号为31序号从0开始用途:给当前中控分配一个助手,来控制一个进程来辅助中控做一些事情",
    "url": "/docs/xuanlanguage/category_7",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "通讯环境模块(Env) - HD环境_附加心跳",
    "content": "【功能描述】 给中控附加心跳 【备注】 检测主线程心跳 如果需要检测主线程心跳是否卡住,请记得先HOOK主线程接口HC_HookMaint hread 设置心跳回调函数类型 typedef__int32 (* HeartFunType)(__int32 窗口索引,__int32 type);回调函数返回值:0不重置之前的记录1重置之前的记录(一般重新开启新进程会设置为1) \\n0.正常心跳进程存在的情况下会触发\\n1.通讯崩溃/关闭等等原因导致进程不存在->重启窗口\\n2.主线程崩溃/关闭/未响应/目标进程卡死原因导致进程不存在/存在->强制关闭->重启窗口设置挂接主线程\\n2.1.附加心跳的时候可以检查主线程的状态(游戏/目标)\\n2.2.后面的内存操作可以主线程调用\\n2.3.注意:附加心跳的时候设置的检查时间一定要大于安装插件到挂接主线程的时间\\n3.卡屏崩溃/关闭/区域图像卡死了原因导致进程不存在/存在->强制关闭->重启窗口设置屏幕检查范围\\n6.1+2+3",
    "url": "/docs/xuanlanguage/category_7",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "通讯环境模块(Env) - HCEnv_SetWindowsSortInfo",
    "content": "【功能描述】 设置窗口排序信息",
    "url": "/docs/xuanlanguage/category_7",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "通讯环境模块(Env) - HD环境_设置卡屏检查信息",
    "content": "【功能描述】 当我们心跳检测指定了3或者6需要设置卡屏范围和卡屏检测次数当大于这个次数就调用回调",
    "url": "/docs/xuanlanguage/category_7",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "通讯环境模块(Env) - HD环境_脱离心跳",
    "content": "【功能描述】 脱离中控附加的心跳检测 【备注】 脱离会堵塞直到脱离成功一般中控进程结果关闭前调用",
    "url": "/docs/xuanlanguage/category_7",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "通讯环境模块(Env) - HD环境_调试模式",
    "content": "【功能描述】 设置导入接口为调试模式 【备注】 中控初始化开始就可以调用,仅仅一次 发布版本不需要调用此接口,默认为发布版本",
    "url": "/docs/xuanlanguage/category_7",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "通讯环境模块(Env) - HD环境_开启文件提示",
    "content": "【功能描述】 设置是否打开文件提示窗口 【备注】 当HD内部导致中控关闭或者插件失效会一文件形式提示信息",
    "url": "/docs/xuanlanguage/category_7",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "通讯环境模块(Env) - HD环境_添加线程",
    "content": "【功能描述】 添加线程环境 【备注】 这个接口用来测试用的,开发者一般用不到",
    "url": "/docs/xuanlanguage/category_7",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "通讯环境模块(Env) - HD环境_测试通讯值",
    "content": "【功能描述】 测试是否通讯成功,返回单一值 【备注】 这个接口用来测试是否环境搭建成功",
    "url": "/docs/xuanlanguage/category_7",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "通讯环境模块(Env) - HCEnv_TestCALL_RetArray",
    "content": "【功能描述】 测试是否通讯成功,返回json字符串 【备注】 这个接口用来测试是否环境搭建成功",
    "url": "/docs/xuanlanguage/category_7",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "通讯环境模块(Env) - HCEnv_TestCALL_RetValueEx",
    "content": "【功能描述】 测试是否通讯成功,返回单一值 【备注】 这个接口用来测试是否环境搭建成功",
    "url": "/docs/xuanlanguage/category_7",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "通讯环境模块(Env) - HD环境_测试通讯字符串Ex",
    "content": "【功能描述】 测试是否通讯成功,返回json字符串 【备注】 这个接口用来测试是否环境搭建成功",
    "url": "/docs/xuanlanguage/category_7",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "通讯环境模块(Env) - HD环境_设置目标进程位数",
    "content": "【功能描述】 设置目标进程位数 【备注】 该接口是全局设置,也就是设置了一次,接下来的所有进程都是该位数,可以多次调用切换进程位数,建议使用HCEnv_SetProcessTypeEx这个扩展版本 如果使用了HDEX_InstallPlugin1HDEX_InstallPlugin2HDEX_InstallPlugin3这些接口可以不用调用这个接口设置目标进程位数 如果是自定义通讯流程就需要自己设置后然后初始化序号进行通讯绑定",
    "url": "/docs/xuanlanguage/category_7",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "通讯环境模块(Env) - HD环境_设置目标进程位数Ex",
    "content": "【功能描述】 指定某个序号绑定的进程位数 【备注】 如果使用了HDEX_InstallPlugin1HDEX_InstallPlugin2HDEX_InstallPlugin3这些接口可以不用调用这个接口设置目标进程位数 如果是自定义通讯流程就需要自己设置后然后初始化序号进行通讯绑定",
    "url": "/docs/xuanlanguage/category_7",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "通讯环境模块(Env) - HD环境_设置中控事件处理回调函数",
    "content": "【功能描述】 设置中控事件处理回调函数 【备注】 这个回调函数作用于当自定义模块通知中控的时候 中控事件处理回调函数接口类型: typedef__int32 (__stdcall* HandleEventFunType)(__int32 窗口序号,__int32 插件序号,HDHandleEventInfoInfo); HDHandleEventInfo结构体: typedefstructHDHandleEventInfo\\n处理事件{__int32 m_callType;\\n自定义HDValuem_call;HDValuem_rcx;HDValuem_rdx;HDValuem_r8;HDValuem_r9;HDValuem_lparam5;HDValuem_lparam6;HDValuem_lparam7;HDValuem_lparam8;HDValuem_value;HDValuem_size;charm_buffer[MAX_PATH];charm_buffer2[MAX_PATH];HDValue* m_pRetValue;\\n值单独char* m_pRetJson;\\n字符串返回}HDHandleEventInfo; 代码案例: __int32 HCLogin::HandleEvent(__int32 窗口序号,__int32 插件序号,HDHandleEventInfoInfo){HDbgPrint f_Normal(\\\"处理接受事件->窗口序号:%dcallType:%dbuffer1:%sbuffer2:%scall:%llXrcx:%llXrdx:%llX\\\",窗口序号,Info.m_callType,Info.m_buffer,Info.m_buffer2,Info.m_call,Info.m_rcx,Info.m_rdx);if(Info.m_callType==1){* Info.m_pRetValue=999;autoret=HCMKB_UnBind(窗口序号);HDbgPrint f_Normal(\\\"解绑后台ret:%d\\\",ret);return8;}elseif(Info.m_callType==2){\\n处理逻辑* Info.m_pRetValue=123;sprint f_s(Info.m_pRetJson,1024* 10,\\\"%s\\\",\\\"我是中控\\\");\\n672637autoret=HCMKB_Bind(窗口序号,Info.m_call,\\\"1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|0|1|\\\");HDbgPrint f_Normal(\\\"绑定后台ret:%d\\\",ret);if(ret==1){Sleep(1000);ret=HCMKB_MoveTo(窗口序号,672,610,0);HDbgPrint f_Normal(\\\"模拟移动一次->672610ret:%d\\\",ret);ret=HCMKB_LeftClick(窗口序号);HDbgPrint f_Normal(\\\"模拟点击一次->ret:%d\\\",ret);}return1024* 10;\\n大于8认为是字符串}* Info.m_pRetValue=1;return8;}",
    "url": "/docs/xuanlanguage/category_7",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "通讯环境模块(Env) - HCEnv_SetShutDownCallBack",
    "content": "【功能描述】 设置关闭回调函数(处理HD功能失效,内部自动关闭中控前的操作) 【备注】 当HD出现异常或者失效或者网络验证出现断线,会在自动关闭自身在期间会先调用这个回调(这个回调自己做好关闭前处理工作)然后会自动调用微软API接口ExitProcess();结束自身 在这个回调用户可以自行处理自己的业务逻辑 1.资源清理逻辑 2.接口释放逻辑 3.自启逻辑 4.自定义处理逻辑 回调函数接口类型: typedef__int32 (__stdcall* ShutDownEventFunType)(__int32 code); code:错误代码",
    "url": "/docs/xuanlanguage/category_7",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "通讯环境模块(Env) - HCEnv_SetPidCheckBack",
    "content": "【功能描述】 设置PID检查回调(内部检查PID不存在会触发这个回调) 【备注】 1.这是设置全局PID检查回调 2.内部检查PID不存在会触发这个回调 3.如果没有调用此接口设置全局PID检查回调,那么对于4种安装插件方式中,当内部检查不到PID存在也会触发检查回调并传递给回调参数窗口序号:0之前窗口序号:0检查PID:pid提示值:8 回调函数接口类型: typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int checkPid,int error); windowsIndex:窗口序号 preWindowsIndex:窗口序号 checkPid:当前检查的PID error:传递8表示需要检查PID",
    "url": "/docs/xuanlanguage/category_7",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "通讯环境模块(Env) - HD环境_设置通讯检测间隔",
    "content": "【功能描述】 设置通讯检测间隔毫秒 【备注】 1.值越小响应越快,随之带来的效率更高但是会导致CPU利用率变高2.值的大小根据当前的项目指定,对于一直要实时响应的最好小点",
    "url": "/docs/xuanlanguage/category_7",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "通讯环境模块(Env) - HD环境_设置回调响应间隔",
    "content": "【功能描述】 设置回调响应毫秒 【备注】 1.值越小响应越快,随之带来的效率更高但是会导致CPU利用率变高2.值的大小根据当前的项目指定,对于一直要实时响应的最好小点",
    "url": "/docs/xuanlanguage/category_7",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "通讯环境模块(Env) - HD环境_强制结束线程",
    "content": "【功能描述】 强制结束当前线程(可以在卸载环境后调用) 【备注】 强制结束当前线程内部会对锁操作循环拿到锁才会强制关闭并返回成功此接口小心使用1.不到万不得已不要强制关闭线程(因为强制关闭线程不管在任何时候都有可能造成不可能预计的BUG)2.调用此接口的线程不要和结束的线程是同一个(虽然内部有检查)3.该接口如果参数:是否操作锁为真,那么会堵塞,直到拿到锁权限后,才会强制关闭线程,然后解锁(防止死锁).",
    "url": "/docs/xuanlanguage/category_7",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "通讯环境模块(Env) - HD环境_强制结束线程Ex",
    "content": "【功能描述】 强制结束当前线程(可以在卸载环境后调用) 【备注】 强制结束当前线程内部会对锁操作循环拿到锁才会强制关闭并返回成功此接口小心使用1.不到万不得已不要强制关闭线程(因为强制关闭线程不管在任何时候都有可能造成不可能预计的BUG)2.调用此接口的线程不要和结束的线程是同一个(虽然内部有检查)3.该接口如果参数:是否操作锁为真,那么会堵塞,直到拿到锁权限后,才会强制关闭线程,然后解锁(防止死锁).",
    "url": "/docs/xuanlanguage/category_7",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_29",
    "title": "通讯环境模块(Env) - HD环境_关闭绑定进程",
    "content": "【功能描述】 关闭绑定的目标窗口 【备注】 内部实现可能是正常关闭也可能是强制关闭 至于是哪一种会根据实际情况动态调用",
    "url": "/docs/xuanlanguage/category_7",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "多线程模块[MT] - HD多线程_初始化流程回调",
    "content": "【功能描述】 初始化多线程设置相关流程回调 【备注】 1.普通回调1参数windowsIndex:代表的是窗口序号也是主序号 2.每个回调参数的函数类型不一样,注意对应 回调触发顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->结束回调 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/xuanlanguage/category_8",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "多线程模块[MT] - HD多线程_初始化流程回调Ex",
    "content": "【功能描述】 初始化多线程设置相关流程回调可以绑定一个全局参数 【备注】 1.普通回调1参数windowsIndex:代表的是窗口序号也是主序号 2.每个回调参数的函数类型不一样,注意对应 回调触发顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->结束回调 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调EXtypedef__int64 (__stdcall* UIFUNTYPEEX)(__int32 windowsIndex,char* stepText,void* lparam,BOOL m_end1,BOOL m_pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 lparam:HCMT_InitProcessEx绑定一个全局参数,一般我们指定为一个UI对象地址,这个回调可以拿到这个地址 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/xuanlanguage/category_8",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "多线程模块[MT] - HD多线程_初始化操作回调",
    "content": "【功能描述】 初始化多线程结束/暂停/恢复状态的操作回调 【备注】 1.仅仅对于这3个回调而言普通回调2参数index:大于多开限制数量,就是副序号;小于就是主序号(也是窗口序号);计算公式:if(index>=多开限制数)主序号=index-多开限制数; \\n(index>=多开环境数量)?(index-多开环境数量):(index)2.其他接口的windowsIndex就代表的是窗口序号也是主序号3.多开限制数量最大常量为31,请自行在程序里面定义 4.多开限制数量用HCEnv_GetMaxWindowNum返回一个常数,可以自己写成一个常量 回调触发顺序: 结束窗口操作:endBindCallBack并传递对应的线程序号(线程序号可能是主序号也就是窗口序号,也有可能是副序号) 暂停窗口操作:pauseBindCallBack并传递对应的线程序号(线程序号可能是主序号也就是窗口序号,也有可能是副序号) 恢复窗口操作:recoverBindCallBack并传递对应的线程序号(线程序号可能是主序号也就是窗口序号,也有可能是副序号) 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/xuanlanguage/category_8",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "多线程模块[MT] - HD多线程_注册消息回调",
    "content": "【功能描述】 注册窗口消息 【备注】 1.通过HCMT_MsgSend/HCMT_MsgPost来触发回调 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/xuanlanguage/category_8",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "多线程模块[MT] - HD多线程_同步发送消息",
    "content": "【功能描述】 发送消息(同步) 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/xuanlanguage/category_8",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "多线程模块[MT] - HD多线程_异步发送消息",
    "content": "【功能描述】 发送消息(异步) 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/xuanlanguage/category_8",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "多线程模块[MT] - HD多线程_开启窗口Msg",
    "content": "【功能描述】 通过消息开启窗口操作 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.开启成功后会相应触发对应设置的回调函数 3.顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 停止窗口:结束绑定回调->结束回调",
    "url": "/docs/xuanlanguage/category_8",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "多线程模块[MT] - HD多线程_停止窗口Msg",
    "content": "【功能描述】 通过消息停止窗口操作 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.开启成功后会相应触发对应设置的回调函数 3.顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 停止窗口:结束绑定回调->结束回调",
    "url": "/docs/xuanlanguage/category_8",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "多线程模块[MT] - HD多线程_重启窗口Msg",
    "content": "【功能描述】 通过消息重启窗口操作 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.开启成功后会相应触发对应设置的回调函数 3.顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 停止窗口:结束绑定回调->结束回调",
    "url": "/docs/xuanlanguage/category_8",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "多线程模块[MT] - HD多线程_重启窗口MsgEx",
    "content": "【功能描述】 通过消息重启窗口操作(扩展版本) 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.开启成功后会相应触发对应设置的回调函数 3.顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 停止窗口:结束绑定回调->结束回调",
    "url": "/docs/xuanlanguage/category_8",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "多线程模块[MT] - HD多线程_更新UI",
    "content": "【功能描述】 通过消息触发UI回调,并传递线程状态信息和日志操作信息给UI回调 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
    "url": "/docs/xuanlanguage/category_8",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "多线程模块[MT] - HD多线程_发送文本",
    "content": "【功能描述】 通过消息触发UI回调,并传递线程状态信息和日志操作信息给UI回调 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
    "url": "/docs/xuanlanguage/category_8",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "多线程模块[MT] - HD多线程_所有窗口暂停",
    "content": "【功能描述】 设置所有窗口结束 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/xuanlanguage/category_8",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "多线程模块[MT] - HD多线程_获取线程状态值",
    "content": "【功能描述】 获取主副序号对应的线程的状态值 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调 typedefenumTHREADSTATE\\n线程状态{THREADSTATE_NONE=-1,\\n未启动THREADSTATE_STARTING=0,\\n开启中THREADSTATE_LOGINING=1,\\n正在登录THREADSTATE_RUNNING=2,\\n正在运行THREADSTATE_PAUSE=3,\\n暂停THREADSTATE_PAUSEING=4,\\n正在暂停THREADSTATE_RECOVERING=5,\\n正在恢复THREADSTATE_WILLSTOP=6,\\n准备停止THREADSTATE_STOPPING=7\\n正在停止}THREADSTATE;",
    "url": "/docs/xuanlanguage/category_8",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "多线程模块[MT] - HCMT_GetStateString",
    "content": "【功能描述】 获取状态整数值对应的字符串 【备注】 无",
    "url": "/docs/xuanlanguage/category_8",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "多线程模块[MT] - HD多线程_是否能开启",
    "content": "【功能描述】 判断是否能开启新的(主副线程)传递的只能是主序号 【备注】 无",
    "url": "/docs/xuanlanguage/category_8",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "多线程模块[MT] - HD多线程_开启窗口",
    "content": "【功能描述】 直接开启窗口操作 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.开启成功后会相应触发对应设置的回调函数 3.顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 停止窗口:结束绑定回调->结束回调",
    "url": "/docs/xuanlanguage/category_8",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "多线程模块[MT] - HD多线程_所有窗口恢复",
    "content": "【功能描述】 设置所有窗口恢复 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的恢复绑定回调",
    "url": "/docs/xuanlanguage/category_8",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "多线程模块[MT] - HD多线程_所有窗口停止",
    "content": "【功能描述】 设置所有窗口停止 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的停止绑定回调",
    "url": "/docs/xuanlanguage/category_8",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "多线程模块[MT] - HD多线程_暂停窗口",
    "content": "【功能描述】 设置窗口暂停 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/xuanlanguage/category_8",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "多线程模块[MT] - HD多线程_暂停线程",
    "content": "【功能描述】 设置主副序号对应的线程暂停 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/xuanlanguage/category_8",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "多线程模块[MT] - HD多线程_恢复窗口",
    "content": "【功能描述】 设置窗口恢复 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的恢复绑定回调",
    "url": "/docs/xuanlanguage/category_8",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "多线程模块[MT] - HD多线程_恢复线程",
    "content": "【功能描述】 设置主副序号对应的线程恢复 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/xuanlanguage/category_8",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "多线程模块[MT] - HD多线程_停止窗口",
    "content": "【功能描述】 设置窗口停止 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的结束绑定回调",
    "url": "/docs/xuanlanguage/category_8",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "多线程模块[MT] - HD多线程_是否运行中",
    "content": "【功能描述】 (第一第二)回调里面调用,检查当前线程是否结束 【备注】 无",
    "url": "/docs/xuanlanguage/category_8",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "多线程模块[MT] - HD多线程_是否暂停",
    "content": "【功能描述】 判断主副序号对应的线程是否是已被暂停状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/xuanlanguage/category_8",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "多线程模块[MT] - HD多线程_是否停止",
    "content": "【功能描述】 判断主副序号对应的线程是否是已被结束状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/xuanlanguage/category_8",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "多线程模块[MT] - HD多线程_延迟",
    "content": "【功能描述】 设延迟函数,自带暂停/结束/恢复检查 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.检查随后触发HCMT_InitOperate设置的3个回调;理论上不能在HCMT_InitOperate设置的3个回调中调用,因为会导致无限调用自己(但是内部做了检测所以不会无限调用,也就是如果当前第一次已经检查到标志位并触发对应的绑定回调了,在回调中又再一次调用HCMT_Sleep,那么这一次的HCMT_Sleep只会正常休眠,并不继续检查了,防止无限调用); 3.其他回调均可以(无影响) 4.如果要内部检测状态机状态需要调用HCMT_StatusSleep",
    "url": "/docs/xuanlanguage/category_8",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "多线程状态机 - HD状态机_开启状态机",
    "content": "【功能描述】 开启状态机 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用配合多线程模块一起使用 2.一般在执行回调或者检查回调调用就行不需要都开启(内部有检测是否开启) 3.支持多线程,但是不建议,执行回调中调用就行了",
    "url": "/docs/xuanlanguage/category_9",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "多线程状态机 - HD状态机_操作状态",
    "content": "【功能描述】 全局(全部窗口序号)禁用或者开启状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用配合多线程模块一起使用 2.操作的状态值,必须先调用HCMT_AddStatus添加状态,否则无效 3.支持多线程 4.如果当前状态正在执行中,此时调用该接口使其状态被禁止/无效,那么当前状态对应的状态回调中就会立即退出回调或者立即监控到状态被改变了 5.一旦被禁止,就算我们切换到该状态,也无法去执行绑定的状态回调了",
    "url": "/docs/xuanlanguage/category_9",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "多线程状态机 - HD状态机_改变当前状态",
    "content": "【功能描述】 改变状态机状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用 2.操作的状态值,必须先调用HCMT_AddStatus添加状态,否则无效 3.支持多线程,一般在检测回调中调用 4.只能改变比之前优先级低的优先级 《《《特别注意:状态值的大小也表示优先级,优先级越高的回调,享有最先执行权限！！！！》》》 如:登录回调>死亡回调>买药回调>限时副本回调>主线回调 优先级大小策略: 1.优先级用户自行定义大小(-1表示没有,不要重复)建议从0开始123...依次递增值越大优先级越高 2.优先级高回调的可以打断或者中断优先级低的回调,当优先级高的回调执行完毕,会继续执行优先级低的回调 2.如果是优先级一样的回调,只有执行完第一个,才能执行第二个. 3.优先级低的回调是不能打断优先级高的回调,此时如果想执行优先级低的回调,那么必须等待优先级高的回调执行完毕后,方可执行优先级低的回调 4.回调内部如果有循环流程,应加入退出循环条件(一般使用HCMT_IsStatus作为退出循环的条件判断或者其他),不要死循环,否则无法实现状态切换",
    "url": "/docs/xuanlanguage/category_9",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "多线程状态机 - HD状态机_回溯上个状态",
    "content": "【功能描述】 回溯状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用 2.操作的状态值,必须先调用HCMT_AddStatus添加状态,否则无效 3.支持多线程,一般在检测回调中调用 4.只能改变比之前优先级低的优先级 《《《特别注意:状态值的大小也表示优先级,优先级越高的回调,享有最先执行权限！！！！》》》 如:登录回调>死亡回调>买药回调>限时副本回调>主线回调 优先级大小策略: 1.优先级用户自行定义大小(-1表示没有,不要重复)建议从0开始123...依次递增值越大优先级越高 2.优先级高回调的可以打断或者中断优先级低的回调,当优先级高的回调执行完毕,会继续执行优先级低的回调 2.如果是优先级一样的回调,只有执行完第一个,才能执行第二个. 3.优先级低的回调是不能打断优先级高的回调,此时如果想执行优先级低的回调,那么必须等待优先级高的回调执行完毕后,方可执行优先级低的回调 4.回调内部如果有循环流程,应加入退出循环条件(一般使用HCMT_IsStatus作为退出循环的条件判断或者其他),不要死循环,否则无法实现状态切换",
    "url": "/docs/xuanlanguage/category_9",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "多线程状态机 - HD状态机_是否状态中",
    "content": "【功能描述】 当前状态机的状态在回调中是否有效 【备注】 1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用 2.用在状态回调中,检索是否是当前状态3.在设置的状态回调函数中循环调用检查当前窗口序号的状态类型是否是当前的映射的回调状态类型4.支持多线程 C++例子: ========== __int64 __stdcall HMT::登录状态回调(__int32 windowsIndex,__int64 lparam){while(HCMT_IsStatus()){autoret=HCMT_StatusSleep(1000);HDbgPrint f_Command(\\\"HCMT_StatusSleep:%lld\\\",ret);HCMT_MsgStepText(windowsIndex,\\\"正在登录中...\\\");}return1;} ==========",
    "url": "/docs/xuanlanguage/category_9",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "多线程状态机 - HD状态机_状态延迟",
    "content": "【功能描述】 状态机延迟函数(自带暂停/结束/恢复/状态机) 【备注】 1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用2.支持多线程自带暂停/结束/恢复/状态机 3.注意区别于HCMT_Sleep这个接口是没法检索状态机状态的 C++例子: ========== __int64 __stdcall HMT::登录状态回调(__int32 windowsIndex,__int64 lparam){while(HCMT_IsStatus()){autoret=HCMT_StatusSleep(1000);\\n<<<<<<<<-----------------------------这里能及时返回(当我们状态变动的时候)返回值:4表示状态变动HDbgPrint f_Command(\\\"HCMT_StatusSleep:%lld\\\",ret);HCMT_MsgStepText(windowsIndex,\\\"正在登录中...\\\");}return1;} ==========",
    "url": "/docs/xuanlanguage/category_9",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "多线程状态机 - HD状态机_获取当前状态",
    "content": "【功能描述】 获取状态机状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用 2.支持多线程,一般在UI回调中调用,获取状态值并显示到控件上",
    "url": "/docs/xuanlanguage/category_9",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "多线程状态机 - HCMT_SleepEx",
    "content": "【功能描述】 设延迟函数,自带暂停/结束/恢复检查/状态机状态(可选)(扩展版本) 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.检查随后触发HCMT_InitOperate设置的3个回调;理论上不能在HCMT_InitOperate设置的3个回调中调用,因为会导致无限调用自己(但是内部做了检测所以不会无限调用,也就是如果当前第一次已经检查到标志位并触发对应的绑定回调了,在回调中又再一次调用HCMT_Sleep,那么这一次的HCMT_Sleep只会正常休眠,并不继续检查了,防止无限调用); 3.其他回调均可以(无影响) 4.如果要内部检测状态机状态需要调用HCMT_StatusSleep",
    "url": "/docs/xuanlanguage/category_9",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "APIHOOK - HDHOOK_Send发包",
    "content": "【功能描述】 调用SendAPI(目标进程中调用)X86X64 【备注】 无",
    "url": "/docs/xuanlanguage/category_10",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "APIHOOK - HDHOOK_SendTo发包",
    "content": "【功能描述】 调用SendtoAPI(目标进程中调用)X86X64 【备注】 无",
    "url": "/docs/xuanlanguage/category_10",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "AddressHOOK - HDHOOK_挂钩",
    "content": "【功能描述】 任意HOOK(内置插件)X86X64 【备注】 无 回调写法: ============= X86X64:typedef__int64 (__stdcall* HandleCallBackFunType)(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam); 参数解析: 窗口序号:对应的窗口序号 插件序号:内部自动传递 raxOreaxrbxOrebxrcxOrecxrdxOredxrbpOrebprspOresprsiOresirdiOredi:分别对应X86X64的8个寄存器 r8r9r10r11r12r13r14r15:分别对应X64的8个寄存器 lparam:是HDHK_Hook的第五个参数附加参数 备注: 返回值: 0【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 1【走原有流程】 2【需要修改值】+【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 3【需要修改值】+【走原有流程】 备注:调用约定是__stdcall X86X64通用调用案例: __int32 __stdcall HandleHookCallBackFun(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam){ HDbgPrint f_HOOK(\\\"触发HOOK回调->窗口序号:%d插件序号:%draxOreax:%llXrbxOrebx:%llXrcxOrecx:%llXrdxOredx:%llXrbpOrebp::%llXrspOresp:%llXrsiOresi:%llXrdiOredi:%llXr8:%llXr9:%llXr10:%llXr11:%llXr12:%llXr13:%llXr14:%llXr15:%llXlparam:%d\\\",窗口序号,插件序号,raxOreax,rbxOrebx,rcxOrecx,rdxOredx,rbpOrebp,rspOresp,rsiOresi,rdiOredi,r8,r9,r10,r11,r12,r13,r14,r15,lparam); \\n....中间执行自己的逻辑 \\n....可以用驱动读写 \\n如果需要修改寄存器值就调用HDHK_SetProcessHookCallBackLparam设置__int32 mark=1;autoret=HDHK_SetProcessHookCallBackLparam(窗口序号,插件序号,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,mark);HDbgPrint f_HOOK(\\\"ret:%lld\\\",ret); \\n返回值:0忽视HOOK语句直接跳到原来1走原有流程2需要修改值+直接跳到原来3需要修改值+走原有流程return3;} 回调内修改写法请转至》》》》》修改回调返回方法(X86X64)《《《《《《",
    "url": "/docs/xuanlanguage/category_11",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "AddressHOOK - HDHOOK_挂钩Ex",
    "content": "【功能描述】 任意HOOK(内置插件)X64(该接口针对X64有效) 【备注】 无 回调写法: ============= X86X64:typedef__int64 (__stdcall* HandleCallBackFunType)(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam); 参数解析: 窗口序号:对应的窗口序号 插件序号:内部自动传递 raxOreaxrbxOrebxrcxOrecxrdxOredxrbpOrebprspOresprsiOresirdiOredi:分别对应X86X64的8个寄存器 r8r9r10r11r12r13r14r15:分别对应X64的8个寄存器 lparam:是HDHK_Hook的第五个参数附加参数 备注: 返回值: 0【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 1【走原有流程】 2【需要修改值】+【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 3【需要修改值】+【走原有流程】 备注:调用约定是__stdcall X86X64通用调用案例: __int32 __stdcall HandleHookCallBackFun(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam){ HDbgPrint f_HOOK(\\\"触发HOOK回调->窗口序号:%d插件序号:%draxOreax:%llXrbxOrebx:%llXrcxOrecx:%llXrdxOredx:%llXrbpOrebp::%llXrspOresp:%llXrsiOresi:%llXrdiOredi:%llXr8:%llXr9:%llXr10:%llXr11:%llXr12:%llXr13:%llXr14:%llXr15:%llXlparam:%d\\\",窗口序号,插件序号,raxOreax,rbxOrebx,rcxOrecx,rdxOredx,rbpOrebp,rspOresp,rsiOresi,rdiOredi,r8,r9,r10,r11,r12,r13,r14,r15,lparam); \\n....中间执行自己的逻辑 \\n....可以用驱动读写 \\n如果需要修改寄存器值就调用HDHK_SetProcessHookCallBackLparam设置__int32 mark=1;autoret=HDHK_SetProcessHookCallBackLparam(窗口序号,插件序号,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,mark);HDbgPrint f_HOOK(\\\"ret:%lld\\\",ret); \\n返回值:0忽视HOOK语句直接跳到原来1走原有流程2需要修改值+直接跳到原来3需要修改值+走原有流程return3;} 回调内修改写法请转至》》》》》修改回调返回方法(X86X64)《《《《《《",
    "url": "/docs/xuanlanguage/category_11",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "AddressHOOK - HDHOOK_挂钩Exx",
    "content": "【功能描述】 任意HOOK(内置插件)X64(该接口针对X64有效) 【备注】 无 回调写法: ============= X86X64:typedef__int64 (__stdcall* HandleCallBackFunType)(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam); 参数解析: 窗口序号:对应的窗口序号 插件序号:内部自动传递 raxOreaxrbxOrebxrcxOrecxrdxOredxrbpOrebprspOresprsiOresirdiOredi:分别对应X86X64的8个寄存器 r8r9r10r11r12r13r14r15:分别对应X64的8个寄存器 lparam:是HDHK_Hook的第五个参数附加参数 备注: 返回值: 0【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 1【走原有流程】 2【需要修改值】+【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 3【需要修改值】+【走原有流程】 备注:调用约定是__stdcall X86X64通用调用案例: __int32 __stdcall HandleHookCallBackFun(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam){ HDbgPrint f_HOOK(\\\"触发HOOK回调->窗口序号:%d插件序号:%draxOreax:%llXrbxOrebx:%llXrcxOrecx:%llXrdxOredx:%llXrbpOrebp::%llXrspOresp:%llXrsiOresi:%llXrdiOredi:%llXr8:%llXr9:%llXr10:%llXr11:%llXr12:%llXr13:%llXr14:%llXr15:%llXlparam:%d\\\",窗口序号,插件序号,raxOreax,rbxOrebx,rcxOrecx,rdxOredx,rbpOrebp,rspOresp,rsiOresi,rdiOredi,r8,r9,r10,r11,r12,r13,r14,r15,lparam); \\n....中间执行自己的逻辑 \\n....可以用驱动读写 \\n如果需要修改寄存器值就调用HDHK_SetProcessHookCallBackLparam设置__int32 mark=1;autoret=HDHK_SetProcessHookCallBackLparam(窗口序号,插件序号,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,mark);HDbgPrint f_HOOK(\\\"ret:%lld\\\",ret); \\n返回值:0忽视HOOK语句直接跳到原来1走原有流程2需要修改值+直接跳到原来3需要修改值+走原有流程return3;} 回调内修改写法请转至》》》》》修改回调返回方法(X86X64)《《《《《《 HDHK_HookExxx 函数简介: 任意HOOK(内置插件)X64(该接口针对X64有效) 函数原型:__int64 HDHK_HookExxx(__int32 窗口序号,__int64 hook地址,char* 所属模块名字,__int64 jmp13空白地址,__int64 保留汇编地址,__int32 破坏字节,__int64 回调地址,__int64 附加参数,BOOL 是否主线程调用=FALSE); 参数定义: 窗口序号:窗口序号(从1开始) 所属模块名字:当前HOOK地址所属那个模块可以不指定为0就行 jmp13空白地址:在当前模块的代码地址找一个空白空间大小为13字节用于存储jmp一些指令 保留汇编地址:用来存储破坏字节数量+5字节大小的空白空间的首地址一般这个地址位于当前所属模块代码空白空间 hook地址:当前HOOK的目标地址(参考适合的HOOK地址X86HOOK地址规则X64HOOK地址规则) 破坏字节数:涉及到的汇编字节数 回调地址:遵循下面回调函数类型 附加参数:自定义参数,此参数会传递给回调函数 是否主线程调用:需要开启才开启,一般默认就行 返回值: 查看返回值表 备注: 无 回调写法: ============= X86X64:typedef__int64 (__stdcall* HandleCallBackFunType)(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam); 参数解析: 窗口序号:对应的窗口序号 插件序号:内部自动传递 raxOreaxrbxOrebxrcxOrecxrdxOredxrbpOrebprspOresprsiOresirdiOredi:分别对应X86X64的8个寄存器 r8r9r10r11r12r13r14r15:分别对应X64的8个寄存器 lparam:是HDHK_Hook的第五个参数附加参数 备注: 返回值: 0【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 1【走原有流程】 2【需要修改值】+【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 3【需要修改值】+【走原有流程】 备注:调用约定是__stdcall X86X64通用调用案例: __int32 __stdcall HandleHookCallBackFun(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam){ HDbgPrint f_HOOK(\\\"触发HOOK回调->窗口序号:%d插件序号:%draxOreax:%llXrbxOrebx:%llXrcxOrecx:%llXrdxOredx:%llXrbpOrebp::%llXrspOresp:%llXrsiOresi:%llXrdiOredi:%llXr8:%llXr9:%llXr10:%llXr11:%llXr12:%llXr13:%llXr14:%llXr15:%llXlparam:%d\\\",窗口序号,插件序号,raxOreax,rbxOrebx,rcxOrecx,rdxOredx,rbpOrebp,rspOresp,rsiOresi,rdiOredi,r8,r9,r10,r11,r12,r13,r14,r15,lparam); \\n....中间执行自己的逻辑 \\n....可以用驱动读写 \\n如果需要修改寄存器值就调用HDHK_SetProcessHookCallBackLparam设置__int32 mark=1;autoret=HDHK_SetProcessHookCallBackLparam(窗口序号,插件序号,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,mark);HDbgPrint f_HOOK(\\\"ret:%lld\\\",ret); \\n返回值:0忽视HOOK语句直接跳到原来1走原有流程2需要修改值+直接跳到原来3需要修改值+走原有流程return3;} 回调内修改写法请转至》》》》》修改回调返回方法(X86X64)《《《《《《",
    "url": "/docs/xuanlanguage/category_11",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "AddressHOOK - HDHOOK_暂停挂钩",
    "content": "【功能描述】 暂停任意HOOK(内置插件)X86X64 【备注】 无",
    "url": "/docs/xuanlanguage/category_11",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "AddressHOOK - HDHOOK_恢复挂钩",
    "content": "【功能描述】 恢复任意HOOK(内置插件)X86X64 【备注】 无",
    "url": "/docs/xuanlanguage/category_11",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "AddressHOOK - HDHOOK_卸载挂钩",
    "content": "【功能描述】 卸载任意HOOK(内置插件)X86X64 【备注】 无",
    "url": "/docs/xuanlanguage/category_11",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "通用模块 - HD通用_CALLX64",
    "content": "【功能描述】 通用CALL(适合X64),支持0-8个参数 【备注】 如果需要更多参数传递请联系作者",
    "url": "/docs/xuanlanguage/category_12",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "通用模块 - HD通用_CALLX86",
    "content": "【功能描述】 通用CALL(适合X86),支持0到8个参数 【备注】 如果需要更多参数传递请联系作者 HC_HookMaint hread 函数简介: 挂接主线程 函数原型:__int64 __stdcall HC_HookMaint hread(__int32 窗口序号,__int64 窗口句柄); 参数定义: 窗口序号:窗口序号(从1开始) 窗口句柄:窗口句柄 返回值: 查看返回值表 备注: 无",
    "url": "/docs/xuanlanguage/category_12",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "ShellCode模块(SH) - HD汇编_转机器码",
    "content": "【功能描述】 汇编文本转换机器码 【备注】 无",
    "url": "/docs/xuanlanguage/category_13",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "ShellCode模块(SH) - HD汇编_写入机器码",
    "content": "【功能描述】 机器码写入到进程 【备注】 这里执行用的是HD驱动来申请和写入这个机器码,注意要把HD驱动安装好 拿到了写入地址可以使用HD驱动创建远线程来执行",
    "url": "/docs/xuanlanguage/category_13",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "LUA模块(LUA) - HDLUA_读文件",
    "content": "【功能描述】 执行或加载LUA文件 【备注】 LUA标识符:当【是否需要拿到返回值】参数为真的时候,用作线程的标识符,方便主动退出线程，标识符规则:不要太大了{0到100}以内就行是否执行:真表示执行并加载LUA(比如:注入一些自定义LUA接口同时还能执行LUA),反之只是加载LUA文件(比如:注入一些自定义LUA接口)是否需要拿到返回值:真表示堵塞直到LUA文件执行完毕并获取返回值，反之表示开启一根线程执行(无法拿到返回值,可以在LUA文件中做一些耗时的操作)",
    "url": "/docs/xuanlanguage/category_14",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "LUA模块(LUA) - HDLUA_结束LUA",
    "content": "【功能描述】 关闭LUA线程 【备注】 LUA标识符:调用【HCLUA_ReadFile】接口指定的【LUA标识符】参数,一一对应,-1表示全部LUA线程退出！！！",
    "url": "/docs/xuanlanguage/category_14",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "LUA模块(LUA) - HDLUA_执行CALL",
    "content": "【功能描述】 执行被注册过的LUA函数 【备注】 json:{\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":XXX}",
    "url": "/docs/xuanlanguage/category_14",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "驱动模块(N) - HCN_LoadDrv",
    "content": "【功能描述】 加载N驱动 【备注】 需要联网,可以卸载,驱动内置了进程,如需要自定义进程名联系管理员添加或者用HD驱动",
    "url": "/docs/xuanlanguage/category_15",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "驱动模块(N) - HCN_InjectDll(W/A)X86",
    "content": "【功能描述】 注入32/64位DLL(需要先加载N驱动) 【备注】 无",
    "url": "/docs/xuanlanguage/category_15",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "驱动模块(N) - HCN_InjectDll(W/A)X64",
    "content": "【功能描述】 注入32/64位DLL(需要先加载N驱动) 【备注】 无",
    "url": "/docs/xuanlanguage/category_15",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "驱动模块(N) - HCN_InstallPlug(86/64)",
    "content": "【功能描述】 安装32/64位HD插件(需要先加载N驱动) 【备注】 无",
    "url": "/docs/xuanlanguage/category_15",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "驱动模块(N) - HCN_UnLoadDrv",
    "content": "【功能描述】 卸载驱动同时清除了注入的DLL缓存 【备注】 取消窗口关联,一定要卸载相关信息,随后所有循环会快速内退,从而线程安全退出！！！！",
    "url": "/docs/xuanlanguage/category_15",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "驱动模块(HD) - HD驱动_安装",
    "content": "【功能描述】 加载HD驱动(正式版本) 【备注】 需要联网,不可以卸载驱动,可以清除注入DLL缓存 此接口相当于调用HCHD_LoadDrv2传递-1:HDEx正式版本(云下发正常驱动,无特殊处理)",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "驱动模块(HD) - HD驱动_安装2",
    "content": "【功能描述】 云下发加载驱动或组件(可以通过指定驱动序号,加载不同版本的驱动如:正式版本定制版本备用版本其他保护盾VT等等) 【备注】 需要联网,不可以卸载驱动,可以清除注入DLL缓存",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "驱动模块(HD) - HD驱动_初始化快速读写",
    "content": "【功能描述】 初始化HD驱动快速读写(一般在HD安装驱动接口后的下一句就开始初始化) 【备注】 如果最开始安装HD驱动调用的是HCHD_LoadDrv同时又需要快速读写遍历,就需要先调用此接口,然后调用HCHD_RWExx进行快读内存读写遍历(百万级别) 如果最开始安装HD驱动调用的是HCHD_LoadDrv2并传递驱动序号为0,表示可以直接调用HCHD_RWExx进行快读内存读写遍历(百万级别),不需要再调用此接口了",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "驱动模块(HD) - HD驱动_无痕注入DLL",
    "content": "【功能描述】 把DLL注入到指定进程中(指定DLL二进制文件数据) 【备注】 不能卸载驱动,可以清除注入DLL缓存,支持32/64进程",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "驱动模块(HD) - HCHD_InjectX86X64ByFile",
    "content": "【功能描述】 把DLL注入到指定进程中(指定DLL文件路径) 【备注】 不能卸载驱动,可以清除注入DLL缓存,支持32/64进程",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "驱动模块(HD) - HCHD_InstallPlug(86/64)",
    "content": "【功能描述】 安装HD插件到指定进程中 【备注】 需要联网,可以清除注入DLL缓存,支持32/64进程",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "驱动模块(HD) - HD驱动_卸载插件",
    "content": "【功能描述】 卸载插件(并不是从进程中卸载,而是清除了下一次进程打开的时候安装插件的缓存) 【备注】 无",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "驱动模块(HD) - HD驱动_前台鼠标移动点击",
    "content": "【功能描述】 前台驱动鼠标移动并点击 【备注】 可以通过调用HCHD_SetMMTrackType来设置鼠标全局移动轨迹类型 按键在轨迹坐标集中那些坐标有效:第一个点操作按键-中间点不操作按键-最后一个点不操作按键",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "驱动模块(HD) - HD驱动_前台鼠标移动点击Ex",
    "content": "【功能描述】 前台驱动鼠标移动并点击(可指定句柄) 【备注】 可以通过调用HCHD_SetMMTrackType来设置鼠标全局移动轨迹类型 按键在轨迹坐标集中那些坐标有效:第一个点操作按键-中间点不操作按键-最后一个点不操作按键",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "驱动模块(HD) - HD驱动_前台鼠标移动按下",
    "content": "【功能描述】 前台驱动鼠标移动并按下指定键(可指定句柄) 【备注】 可以通过调用HCHD_SetMMTrackType来设置鼠标全局移动轨迹类型 按键在轨迹坐标集中那些坐标有效:第一个点操作按键-中间点不操作按键-最后一个点不操作按键",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "驱动模块(HD) - HD驱动_前台鼠标移动弹起",
    "content": "【功能描述】 前台驱动鼠标移动并弹起指定键(可指定句柄) 【备注】 可以通过调用HCHD_SetMMTrackType来设置鼠标全局移动轨迹类型 按键在轨迹坐标集中那些坐标有效:第一个点操作按键-中间点不操作按键-最后一个点不操作按键",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "驱动模块(HD) - HD驱动_前台按键",
    "content": "【功能描述】 前台驱动键盘(按下并弹起) 【备注】 无",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "驱动模块(HD) - HD驱动_前台按键按下",
    "content": "【功能描述】 前台驱动键盘(按下某键) 【备注】 无",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "驱动模块(HD) - HD驱动_前台按键弹起",
    "content": "【功能描述】 前台驱动键盘(弹起某键) 【备注】 无",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "驱动模块(HD) - HD驱动_驱动读写",
    "content": "【功能描述】 驱动读写 【备注】 无",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "驱动模块(HD) - HD驱动_开始读写",
    "content": "【功能描述】 驱动读写Ex(开始批读写)与HCHD_EndRWEx成对出现适合快速遍历(百万级别读写单线程) 【备注】 适合快速遍历",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "驱动模块(HD) - HD驱动_驱动读写Ex",
    "content": "【功能描述】 驱动读写Ex(批量读写)(百万级别读写单线程) 【备注】 先调用HCHD_BeginRWEx然后中间调用该接口HCHD_RWEx最后调用HCHD_EndRWEx用于释放环境",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "驱动模块(HD) - HD驱动_结束读写",
    "content": "【功能描述】 驱动读写Ex(结束批读写)与HCHD_BeginRWEx成对出现适合快速遍历(百万级别读写单线程) 【备注】 适合快速遍历",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "驱动模块(HD) - HD驱动_地址是否可读",
    "content": "【功能描述】 检查地址是否可读 【备注】 无",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "驱动模块(HD) - HD驱动_进程保护",
    "content": "【功能描述】 进程保护 【备注】 无",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "驱动模块(HD) - HD驱动_进程隐藏",
    "content": "【功能描述】 开启进程隐藏 【备注】 一次性只能隐藏一个,如果需要隐藏第二个,先把之前的给显示了",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "驱动模块(HD) - HCHD_PHideEx",
    "content": "【功能描述】 开启进程隐藏(加强版本)无法恢复 【备注】 1.隐藏后关闭进程不会蓝屏 2.隐藏后该接口无法恢复显示,其实也没必要恢复显示",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "驱动模块(HD) - HD驱动_进程显示",
    "content": "【功能描述】 进程显示 【备注】 无",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "驱动模块(HD) - HD_进程杀死",
    "content": "【功能描述】 进程杀死 【备注】 无",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "驱动模块(HD) - HD驱动_申请内存",
    "content": "【功能描述】 驱动申请内存 【备注】 无",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "驱动模块(HD) - HD驱动_申请内存Ex",
    "content": "【功能描述】 驱动申请内存(扩展版本) 【备注】 无",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "驱动模块(HD) - HD驱动_内存释放",
    "content": "【功能描述】 驱动内存释放 【备注】 无",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "驱动模块(HD) - HD驱动_修改内存保护",
    "content": "【功能描述】 驱动修改内存保护属性 【备注】 无",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_29",
    "title": "驱动模块(HD) - HD驱动_内存隐藏",
    "content": "【功能描述】 驱动内存隐藏 【备注】 无",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_30",
    "title": "驱动模块(HD) - HD驱动_内存查询",
    "content": "【功能描述】 驱动内存查询 【备注】 无",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_31",
    "title": "驱动模块(HD) - HD驱动_特征码查找地址",
    "content": "【功能描述】 驱动通过特征码查找地址 【备注】 无",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_32",
    "title": "驱动模块(HD) - HD驱动_获取主模块地址",
    "content": "【功能描述】 驱动获取主模块EXE的地址 【备注】 无",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_33",
    "title": "驱动模块(HD) - HD驱动_获取模块地址",
    "content": "【功能描述】 驱动获取指定模块的地址 【备注】 无",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_34",
    "title": "驱动模块(HD) - HD驱动_获取模块函数地址",
    "content": "【功能描述】 驱动获取指定模块的指定的函数地址 【备注】 无",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_35",
    "title": "驱动模块(HD) - HD驱动_修改机器码",
    "content": "【功能描述】 驱动修改机器码 【备注】 无",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_36",
    "title": "驱动模块(HD) - HD驱动_反截图",
    "content": "【功能描述】 驱动内核反截图 【备注】 无",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_37",
    "title": "驱动模块(HD) - HD驱动_远线程执行CALL",
    "content": "【功能描述】 驱动内存远线程执行函数 【备注】 无",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_38",
    "title": "驱动模块(HD) - HD驱动_清除注入缓存",
    "content": "【功能描述】 驱动清除注入缓存(全局插件缓存,DLL缓存) 【备注】 无",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_39",
    "title": "驱动模块(HD) - HD驱动_进程提权",
    "content": "【功能描述】 进程提权 【备注】 无",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_40",
    "title": "驱动模块(HD) - HCHD_HandleRoot",
    "content": "【功能描述】 进程提权 【备注】 无",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_41",
    "title": "驱动模块(HD) - HD驱动_设置鼠标轨迹",
    "content": "【功能描述】 设置驱动鼠标移动轨迹类型 【备注】 无",
    "url": "/docs/xuanlanguage/category_16",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "注入模块(Inject) - HD注入_普通安装插件X86",
    "content": "【功能描述】 普通注入插件(X86),不需要安装驱动,这个不是无痕注入,只支持32位的 【备注】 这个不是无痕注入方便操作一些小程序普通注入插件DLL参数->进程PID,进程位数(32)可以在打开进程的经常下安装插件DLL初始化进程环境后调用这个安装插件然后循环等待拿到PID不是驱动级别",
    "url": "/docs/xuanlanguage/category_17",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "注入模块(Inject) - HD注入_普通安装插件X86Ex",
    "content": "【功能描述】 普通注入插件(X86)),不需要安装驱动,这个不是无痕注入 【备注】 这个不是无痕注入 方便操作一些小程序 用法和HCN_NormalInstallPlugX86一样这个接口只是参数是句柄防止一些进程一次性打开多个这个句柄可以用来指定某个窗口",
    "url": "/docs/xuanlanguage/category_17",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "注入模块(Inject) - HD注入_普通安装插件X64",
    "content": "【功能描述】 普通注入插件(X64),不需要安装驱动,这个不是无痕注入,只支持64位的 【备注】 这个不是无痕注入方便操作一些小程序普通注入插件DLL参数->进程PID,进程位数(32)可以在打开进程的经常下安装插件DLL初始化进程环境后调用这个安装插件然后循环等待拿到PID不是驱动级别",
    "url": "/docs/xuanlanguage/category_17",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "注入模块(Inject) - HD注入_普通安装插件X64Ex",
    "content": "【功能描述】 普通注入插件(X64),不需要安装驱动,这个不是无痕注入,只支持64位的 【备注】 这个不是无痕注入 方便操作一些小程序 用法和HCN_NormalInstallPlugX86一样这个接口只是参数是句柄防止一些进程一次性打开多个这个句柄可以用来指定某个窗口",
    "url": "/docs/xuanlanguage/category_17",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "注入模块(Inject) - HD注入_驱动安装插件",
    "content": "【功能描述】 安装HD插件(需要预先安装HD驱动),【注入方式1】 【备注】 不是无模块注入可以在打开进程的情况下注入驱动级别的,自动判断目标进程位数",
    "url": "/docs/xuanlanguage/category_17",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "注入模块(Inject) - HD注入_驱动注入DLL",
    "content": "【功能描述】 安装指定DLL(需要预先安装HD驱动),【注入方式1】 【备注】 不是无模块注入可以在打开进程的情况下注入驱动级别的,自动判断目标进程位数",
    "url": "/docs/xuanlanguage/category_17",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "注入模块(Inject) - HD注入_驱动安装插件Ex",
    "content": "【功能描述】 安装HD插件(需要预先安装HD驱动),【注入方式2】 【备注】 不是无模块注入可以在打开进程的情况下注入驱动级别的,自动判断目标进程位数",
    "url": "/docs/xuanlanguage/category_17",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "注入模块(Inject) - HD注入_驱动注入DLLEx",
    "content": "【功能描述】 安装指定DLL(需要预先安装HD驱动),【注入方式2】 【备注】 不是无模块注入可以在打开进程的情况下注入驱动级别的,自动判断目标进程位数",
    "url": "/docs/xuanlanguage/category_17",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "盾 - HD盾_保护",
    "content": "【功能描述】 一键保护进程(隐藏等) 【备注】 需要调用HCHD_LoadDrv2传递参数3来安装保护盾HDPP驱动",
    "url": "/docs/xuanlanguage/category_18",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "盾 - HD盾_开启窗口保护",
    "content": "【功能描述】 打开窗口保护以及子窗口 【备注】 需要调用HCHD_LoadDrv2传递参数5来安装保护盾HDPW驱动 可以多次指定内部会把指定的保护窗口句柄以及所属子窗口一起保护",
    "url": "/docs/xuanlanguage/category_18",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "盾 - HD盾_关闭窗口保护",
    "content": "【功能描述】 取消所有窗口保护(指定保护过的) 【备注】 需要调用HCHD_LoadDrv2传递参数5来安装保护盾HDPW驱动 可以取消调用过HCHDPW_OnProtect所有保护的窗口句柄",
    "url": "/docs/xuanlanguage/category_18",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "HDVT - HDVT_申请内存",
    "content": "【功能描述】 VT驱动申请内存 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/xuanlanguage/category_19",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "HDVT - HDVT_释放内存",
    "content": "【功能描述】 VT驱动释放内存 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/xuanlanguage/category_19",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "HDVT - HDVT_读内存",
    "content": "【功能描述】 VT驱动读内存 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/xuanlanguage/category_19",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "HDVT - HDVT_写内存",
    "content": "【功能描述】 VT驱动写内存 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/xuanlanguage/category_19",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "HDVT - HDVT_获取模块地址",
    "content": "【功能描述】 VT驱动获取模块地址 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/xuanlanguage/category_19",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "HDVT - HDVT_获取模块函数地址",
    "content": "【功能描述】 VT驱动获取模块函数地址 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/xuanlanguage/category_19",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "HDVT - HDVT_无痕HOOK",
    "content": "【功能描述】 VT驱动无痕HOOK,过CRC 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/xuanlanguage/category_19",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "HDVT - HDVT_远程执行",
    "content": "【功能描述】 VT驱动远程插入执行 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/xuanlanguage/category_19",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "HDVT - HCHDVT_InjectX64",
    "content": "【功能描述】 VT驱动无痕无模块注入X64DLL 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/xuanlanguage/category_19",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "HDVT - HCHDVT_InjectX86",
    "content": "【功能描述】 VT驱动无痕无模块注入X86DLL 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/xuanlanguage/category_19",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "HDVT - HDVT_安装插件X64",
    "content": "【功能描述】 VT驱动无痕无模块安装X64插件到目标进程中 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/xuanlanguage/category_19",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "HDVT - HDVT_安装插件X86",
    "content": "【功能描述】 VT驱动无痕无模块安装X86插件到目标进程中 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/xuanlanguage/category_19",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "YOLOV(HDYOLOV) - HCYOLO_AddModel",
    "content": "【功能描述】 添加YOLOV(ncnn.bin和ncnn.param)模型文件(从内存中加载模型) 【备注】 ncnn模型bin“＝XXX.ncnn.bin”param“＝XXX.ncnn.param”从内存中加载模型备注:一个进程仅同时支持一个版本的模型 需要调用HCHD_LoadDrv2传递参数4来安装YOLOV组件模块",
    "url": "/docs/xuanlanguage/category_20",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "YOLOV(HDYOLOV) - HCYOLO_AddModelFile",
    "content": "【功能描述】 添加YOLOV(ncnn.bin和ncnn.param)模型文件(从文件中加载模型) 【备注】 ncnn模型bin“＝XXX.ncnn.bin”param“＝XXX.ncnn.param”从文件中加载模型备注:一个进程仅同时支持一个版本的模型 需要调用HCHD_LoadDrv2传递参数4来安装YOLOV组件模块",
    "url": "/docs/xuanlanguage/category_20",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "YOLOV(HDYOLOV) - HCYOLO_Identify",
    "content": "【功能描述】 添加YOLOV(ncnn.bin和ncnn.param)模型文件(从文件中加载模型),从后台截图缓存识别 【备注】 识别信息调用HCEnv_GetRetJson“获取字符串信息以|”分割,自行切割 %d,%f,%f,%f,%f,%f,%d|%d,%f,%f,%f,%f,%f,%d| 字段含义:类别,X1,Y1,X2,Y2,置信度,耗时|类别,X1,Y1,X2,Y2,置信度,耗时| 需要调用HCHD_LoadDrv2传递参数4来安装YOLOV组件模块",
    "url": "/docs/xuanlanguage/category_20",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "YOLOV(HDYOLOV) - HCYOLO_IdentifyByFile",
    "content": "【功能描述】 添加YOLOV(ncnn.bin和ncnn.param)模型文件(从文件中加载模型),从指定图片文件识别 【备注】 识别信息调用HCEnv_GetRetJson“获取字符串信息以|”分割,自行切割 %d,%f,%f,%f,%f,%f,%d|%d,%f,%f,%f,%f,%f,%d| 字段含义:类别,X1,Y1,X2,Y2,置信度,耗时|类别,X1,Y1,X2,Y2,置信度,耗时| 需要调用HCHD_LoadDrv2传递参数4来安装YOLOV组件模块",
    "url": "/docs/xuanlanguage/category_20",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "VNC(HDVNC) - HDVNC_连接虚拟机",
    "content": "【功能描述】 连接虚拟机 【备注】 对应的虚拟机请开启VNC并设置好端口 两种使用VNC模式特别注意: 1.安装插件(HDEX_InstallPluginVM)的形式连接VNC:支持重连port==0属于重连会检查安装插件时候的PID同时自动获取之前连接过的端口前提是已经连接过卸载的时候内部调用(HCEnv_UnLoadEx) 2.未安装插件(HCVnc_Connect)的形式连接VNC:重连一直都可以不能port==0因为会检查PID未安装插件的PID为0卸载的时候内部调用(HCEnv_UnLoad)",
    "url": "/docs/xuanlanguage/category_21",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "VNC(HDVNC) - HDVNC_关闭连接",
    "content": "【功能描述】 关闭连接虚拟机 【备注】 对应的虚拟机请开启VNC并设置好端口 两种使用VNC模式特别注意: 1.安装插件(HDEX_InstallPluginVM)的形式连接VNC:支持重连port==0属于重连会检查安装插件时候的PID同时自动获取之前连接过的端口前提是已经连接过卸载的时候内部调用(HCEnv_UnLoadEx) 2.未安装插件(HCVnc_Connect)的形式连接VNC:重连一直都可以不能port==0因为会检查PID未安装插件的PID为0卸载的时候内部调用(HCEnv_UnLoad)",
    "url": "/docs/xuanlanguage/category_21",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "VNC(HDVNC) - HDVNC_鼠标绝对移动",
    "content": "【功能描述】 VNC鼠标绝对移动(自带移动轨迹直线波动防检测) 【备注】 无",
    "url": "/docs/xuanlanguage/category_21",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "VNC(HDVNC) - HDVNC_鼠标相对移动",
    "content": "【功能描述】 VNC鼠标相对移动(自带移动轨迹直线波动防检测) 【备注】 无",
    "url": "/docs/xuanlanguage/category_21",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "VNC(HDVNC) - HDVNC_鼠标左键点击",
    "content": "【功能描述】 VNC鼠标左键点击 【备注】 无",
    "url": "/docs/xuanlanguage/category_21",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "VNC(HDVNC) - HDVNC_鼠标左键按下",
    "content": "【功能描述】 VNC鼠标左键按下 【备注】 无",
    "url": "/docs/xuanlanguage/category_21",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "VNC(HDVNC) - HDVNC_鼠标左键弹起",
    "content": "【功能描述】 VNC鼠标左键弹起 【备注】 无",
    "url": "/docs/xuanlanguage/category_21",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "VNC(HDVNC) - HDVNC_鼠标左键双击",
    "content": "【功能描述】 VNC鼠标左键双击 【备注】 无",
    "url": "/docs/xuanlanguage/category_21",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "VNC(HDVNC) - HDVNC_鼠标右键点击",
    "content": "【功能描述】 VNC鼠标右键点击 【备注】 无",
    "url": "/docs/xuanlanguage/category_21",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "VNC(HDVNC) - HDVNC_鼠标右键按下",
    "content": "【功能描述】 VNC鼠标右键按下 【备注】 无",
    "url": "/docs/xuanlanguage/category_21",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "VNC(HDVNC) - HDVNC_鼠标右键弹起",
    "content": "【功能描述】 VNC鼠标右键弹起 【备注】 无",
    "url": "/docs/xuanlanguage/category_21",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "VNC(HDVNC) - HDVNC_鼠标滚轮滚下",
    "content": "【功能描述】 VNC鼠标滚轮滚下 【备注】 无",
    "url": "/docs/xuanlanguage/category_21",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "VNC(HDVNC) - HDVNC_鼠标滚轮滚上",
    "content": "【功能描述】 VNC鼠标滚轮滚上 【备注】 无",
    "url": "/docs/xuanlanguage/category_21",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "VNC(HDVNC) - HCVnc_KeyPress",
    "content": "【功能描述】 VNC键盘按键敲击 【备注】 无",
    "url": "/docs/xuanlanguage/category_21",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "VNC(HDVNC) - HDVNC_键盘按键按下",
    "content": "【功能描述】 VNC键盘按键按下 【备注】 无",
    "url": "/docs/xuanlanguage/category_21",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "VNC(HDVNC) - HDVNC_键盘按键弹起",
    "content": "【功能描述】 VNC键盘按键弹起 【备注】 无",
    "url": "/docs/xuanlanguage/category_21",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "VNC(HDVNC) - HCVnc_KeyPressStr",
    "content": "【功能描述】 VNC键盘连续按键字符串(数字+字母) 【备注】 无",
    "url": "/docs/xuanlanguage/category_21",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "VNC(HDVNC) - HCVnc_SendString",
    "content": "【功能描述】 VNC键盘输入字符串(中文+数字+符号+字母) 【备注】 无",
    "url": "/docs/xuanlanguage/category_21",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "VNC(HDVNC) - HDVNC_开启截图",
    "content": "【功能描述】 开启截图(内部会开启一根线程循环获取虚拟机画面) 【备注】 可以调用HCVnc_CloseCapture来结束截图线程",
    "url": "/docs/xuanlanguage/category_21",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "VNC(HDVNC) - HDVNC_关闭截图",
    "content": "【功能描述】 关闭截图(结束开启截图内部产生的线程) 【备注】 需要多次调用关闭,直到关闭成功,通常情况一次就能关闭成功",
    "url": "/docs/xuanlanguage/category_21",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "窗口模块(WIN) - HD窗口_排序通讯窗口",
    "content": "【功能描述】 排序安装过插件的进程 【备注】 安装过插件的经常意思表示: 1.通讯过的窗口序号的对应的进程PID(未被第二次初始化序号HCInject_Init) 2.卸载进程环境不会影响绑定过的进程排序(不能调用始化序号HCInject_Init的前提下,也就是可以重连的情况下) 3.HCInject_Init这个接口一旦调用,就会取消所有关联(意味着不能重连了),从而影响当前绑定的窗口PID,意味着新窗口即将打开",
    "url": "/docs/xuanlanguage/category_22",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "窗口模块(WIN) - HD窗口_伪装进程",
    "content": "【功能描述】 伪装进程(防止检查到实际的进程存在) 【备注】 无 案例: 把注入器伪装成了hd.exe",
    "url": "/docs/xuanlanguage/category_22",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "窗口模块(WIN) - HD窗口_设置窗口状态",
    "content": "【功能描述】 设置或者操作窗口状态 【备注】 无",
    "url": "/docs/xuanlanguage/category_22",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "窗口模块(WIN) - HD窗口_设置窗口大小",
    "content": "【功能描述】 设置窗口大小 【备注】 窗口居中会改变窗口位置",
    "url": "/docs/xuanlanguage/category_22",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "窗口模块(WIN) - HD窗口_窗口移动",
    "content": "【功能描述】 移动窗口 【备注】 无",
    "url": "/docs/xuanlanguage/category_22",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "窗口模块(WIN) - HD窗口_是否64位进程",
    "content": "【功能描述】 目标窗口句柄/目标进程是否64位 【备注】 窗口句柄或者PID任意指定一个就行 如果2个都指定则PID用于检测",
    "url": "/docs/xuanlanguage/category_22",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "窗口模块(WIN) - HD窗口_获取窗口标题",
    "content": "【功能描述】 获取目标窗口标题 【备注】 无",
    "url": "/docs/xuanlanguage/category_22",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "窗口模块(WIN) - HD窗口_获取窗口线程ID",
    "content": "【功能描述】 获取目标窗口句柄的线程ID 【备注】 无",
    "url": "/docs/xuanlanguage/category_22",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "窗口模块(WIN) - HD窗口_获取窗口进程ID",
    "content": "【功能描述】 获取目标窗口句柄的进程ID 【备注】 无",
    "url": "/docs/xuanlanguage/category_22",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "窗口模块(WIN) - HD窗口_获取窗口进程路径",
    "content": "【功能描述】 获取目标窗口句柄的路径 【备注】 无",
    "url": "/docs/xuanlanguage/category_22",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "窗口模块(WIN) - HD窗口_获取窗口位置",
    "content": "【功能描述】 获取窗口在屏幕上的位置 【备注】 返回字符串: left|top|rifght|bottom| RECT结构体: typedefstructtagRECT{LONGleft;LONGtop;LONGright;LONGbottom;}RECT,* PRECT;",
    "url": "/docs/xuanlanguage/category_22",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "窗口模块(WIN) - HD窗口_获取窗口类名",
    "content": "【功能描述】 获取目标窗口句柄的窗口类名 【备注】 无",
    "url": "/docs/xuanlanguage/category_22",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "窗口模块(WIN) - HD窗口_获取窗口状态",
    "content": "【功能描述】 获取目标窗口句柄的窗口状态 【备注】 无",
    "url": "/docs/xuanlanguage/category_22",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "窗口模块(WIN) - HD窗口_获取特殊窗口",
    "content": "【功能描述】 获取特殊窗口桌面Shell_TrayWnd 【备注】 无",
    "url": "/docs/xuanlanguage/category_22",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "窗口模块(WIN) - HD窗口_获取窗口关联句柄",
    "content": "【功能描述】 获取目标窗口句柄的关联窗口句柄 【备注】 无",
    "url": "/docs/xuanlanguage/category_22",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "窗口模块(WIN) - HD窗口_获取顶层活动窗口句柄",
    "content": "【功能描述】 获取顶层活动窗口,可以获取到按键自带插件无法获取到的句柄 【备注】 无",
    "url": "/docs/xuanlanguage/category_22",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "窗口模块(WIN) - HD窗口_获取顶层焦点窗口句柄",
    "content": "【功能描述】 获取顶层活动窗口中具有输入焦点的窗口句柄 【备注】 无",
    "url": "/docs/xuanlanguage/category_22",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "窗口模块(WIN) - HD窗口_设置焦点到窗口",
    "content": "【功能描述】 设置输入焦点到窗口 【备注】 无",
    "url": "/docs/xuanlanguage/category_22",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "窗口模块(WIN) - HD窗口_获取窗口客户区域",
    "content": "【功能描述】 获取窗口客户区域的宽度和高度 【备注】 返回字符串: w|h|",
    "url": "/docs/xuanlanguage/category_22",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "窗口模块(WIN) - HD窗口_获取窗口客户区域在屏幕",
    "content": "【功能描述】 获取窗口客户区域在屏幕上的位置 【备注】 返回字符串: left|top|rifght|bottom| RECT结构体: typedefstructtagRECT{LONGleft;LONGtop;LONGright;LONGbottom;}RECT,* PRECT;",
    "url": "/docs/xuanlanguage/category_22",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "窗口模块(WIN) - HD窗口_查找窗口",
    "content": "【功能描述】 查找符合类名或者标题名的顶层可见窗口,如果指定了parent,则在parent的第一层子窗口中查找 【备注】 无",
    "url": "/docs/xuanlanguage/category_22",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "窗口模块(WIN) - HD窗口_查找顶层窗口",
    "content": "【功能描述】 查找顶层窗口句柄,父窗口句柄为NULL 【备注】 无",
    "url": "/docs/xuanlanguage/category_22",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "窗口模块(WIN) - HD窗口_枚举查找窗口",
    "content": "【功能描述】 根据指定进程以及其它条件,枚举系统中符合条件的窗口 【备注】 单PID返回字符串: hwnd 多PID返回字符串:根据创建时间排序过的 hwnd1|hwnd2|hwnd3|",
    "url": "/docs/xuanlanguage/category_22",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "窗口模块(WIN) - HD窗口_枚举查找窗口Ex",
    "content": "【功能描述】 根据指定进程pid以及其它条件,枚举系统中符合条件的窗口,可以枚举到按键自带的无法枚举到的窗口 【备注】 单PID返回字符串: hwnd",
    "url": "/docs/xuanlanguage/category_22",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "窗口模块(WIN) - HD窗口_枚举进程",
    "content": "【功能描述】 根据指定进程名,枚举系统中符合条件的进程PID 【备注】 返回字符串: pid1|pid2|pid3|",
    "url": "/docs/xuanlanguage/category_22",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "窗口模块(WIN) - HD窗口_枚举窗口",
    "content": "【功能描述】 根据指定条件,枚举系统中符合条件的窗口,可以枚举到按键自带的无法枚举到的窗口 【备注】 多句柄返回字符串: hwnd1|hwnd2|hwnd3|",
    "url": "/docs/xuanlanguage/category_22",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "目标[TARGET] - HCTarget_UseVT",
    "content": "【功能描述】 目标进程是否使用VT驱动 【备注】 目标进程是否使用VT驱动需要中控安装和开启VT驱动type:0不使用1使用作用模块包含:后台键鼠模块后台截图模块谷歌内置浏览器模块APIHOOK模块自定义HOOK模块目的:过检测能力强",
    "url": "/docs/xuanlanguage/category_23",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "内核(NT) - HDNT_窗口句柄取PID",
    "content": "【功能描述】 获取目标窗口句柄的进程ID(R3层内核版本) 【备注】 可以绕过一些检测,比如NP等",
    "url": "/docs/xuanlanguage/category_24",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "内存操作模块(M) - HD内存_特征码",
    "content": "【功能描述】 特征码查找 【备注】 无",
    "url": "/docs/xuanlanguage/category_25",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "内存操作模块(M) - HD内存_特征码Ex",
    "content": "【功能描述】 特征码查找(通过指定地址) 【备注】 无",
    "url": "/docs/xuanlanguage/category_25",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "内存操作模块(M) - HD内存_读表达式",
    "content": "【功能描述】 读整数数据 【备注】 无",
    "url": "/docs/xuanlanguage/category_25",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "内存操作模块(M) - HD内存_读地址",
    "content": "【功能描述】 读整数数据 【备注】 无",
    "url": "/docs/xuanlanguage/category_25",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "内存操作模块(M) - HD内存_写表达式",
    "content": "【功能描述】 写整数数据 【备注】 无",
    "url": "/docs/xuanlanguage/category_25",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "内存操作模块(M) - HD内存_写地址",
    "content": "【功能描述】 写整数数据 【备注】 无",
    "url": "/docs/xuanlanguage/category_25",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "内存操作模块(M) - HD内存_读表达式字节流",
    "content": "【功能描述】 读字节流数据 【备注】 json返回字节流利用HCEnv_GetRetJson拿到返回地址,提取的字节数为读取大小数最大读取100KB字节大小,注意这个限制,否则会报错",
    "url": "/docs/xuanlanguage/category_25",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "内存操作模块(M) - HCM_ReadFD",
    "content": "【功能描述】 读单/双浮点数 【备注】 返回结果以float举例:json返回字符串如:{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":1,\\\\\"iError\\\\\":0,\\\\\"value\\\\\":999.000}]}",
    "url": "/docs/xuanlanguage/category_25",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "内存操作模块(M) - HD内存_读地址字节流",
    "content": "【功能描述】 读字节流数据 【备注】 json返回字节流利用HCEnv_GetRetJson拿到返回地址,提取的字节数为读取大小数最大读取100KB字节大小,注意这个限制,否则会报错",
    "url": "/docs/xuanlanguage/category_25",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "内存操作模块(M) - HCM_ReadFDAddr",
    "content": "【功能描述】 读单/双浮点数 【备注】 读取大小:4float单浮点8double双浮点以float举例:json返回字符串如:\\\"999.0000\\\"",
    "url": "/docs/xuanlanguage/category_25",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "内存操作模块(M) - HD内存_写表达式字节流",
    "content": "【功能描述】 写字节流数据 【备注】 最大写入100KB字节大小,注意这个限制,否则会报错json返回值{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":1,\\\\\"iError\\\\\":0}]}",
    "url": "/docs/xuanlanguage/category_25",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "内存操作模块(M) - HCM_WriteF",
    "content": "【功能描述】 写单浮点数4字节 【备注】 json返回值{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":1,\\\\\"iError\\\\\":0}]}",
    "url": "/docs/xuanlanguage/category_25",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "内存操作模块(M) - HCM_WriteD",
    "content": "【功能描述】 写双浮点数8字节 【备注】 json返回值{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":1,\\\\\"iError\\\\\":0}]}",
    "url": "/docs/xuanlanguage/category_25",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "内存操作模块(M) - HD内存_写地址字节流",
    "content": "【功能描述】 写字节流数据 【备注】 json返回字节流利用HCEnv_GetRetJson拿到返回地址,提取的字节数为读取大小数最大读取100KB字节大小,注意这个限制,否则会报错",
    "url": "/docs/xuanlanguage/category_25",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "内存操作模块(M) - HCM_WriteAddrF",
    "content": "【功能描述】 写单浮点数4字节 【备注】 无",
    "url": "/docs/xuanlanguage/category_25",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "内存操作模块(M) - HCM_WriteAddrD",
    "content": "【功能描述】 写双浮点数8字节 【备注】 无",
    "url": "/docs/xuanlanguage/category_25",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "内存操作模块(M) - HCM_GetModuleBase",
    "content": "【功能描述】 获取模块地址 【备注】 无",
    "url": "/docs/xuanlanguage/category_25",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "内存操作模块(M) - HCM_GetModuleFunAddr",
    "content": "【功能描述】 获取模块中的导出接口地址 【备注】 无",
    "url": "/docs/xuanlanguage/category_25",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "内存操作模块(M) - HCM_IsBadReadAddr",
    "content": "【功能描述】 判断指定地址是否在目标进程中有效可读 【备注】 无",
    "url": "/docs/xuanlanguage/category_25",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "内存操作模块(M) - HCM_AsmCallX86",
    "content": "【功能描述】 执行汇编CALLX86传递汇编代码 【备注】 无",
    "url": "/docs/xuanlanguage/category_25",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "内存操作模块(M) - HCM_AsmCallX64",
    "content": "【功能描述】 执行汇编CALLX64传递汇编代码 【备注】 无",
    "url": "/docs/xuanlanguage/category_25",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "找图模块(FP) - HD识图_截图",
    "content": "【功能描述】 截图并保存到文件(.bmp) 【备注】 无",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "找图模块(FP) - HD识图_单点找色",
    "content": "【功能描述】 单点找色 【备注】 注意返回值含义和XY值的提取",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "找图模块(FP) - HD识图_多点找色",
    "content": "【功能描述】 多点找色 【备注】 json: {error:0,ret:[{bRet:1,info:结果}]}\\\" info格式->像素序号,x1,y1|像素序号,x2,y2",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "找图模块(FP) - HD识图_多点偏移找色",
    "content": "【功能描述】 多点偏移找色 【备注】 json: \\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":%lld,\\\\\"info\\\\\":\\\\\"%s\\\\\"}]}\\\", info:x1,y1|x2,y2|",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "找图模块(FP) - HD识图_比较颜色",
    "content": "【功能描述】 比较颜色 【备注】 无",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "找图模块(FP) - HD识图_比较颜色Ex",
    "content": "【功能描述】 多点找色确定某个图像块,指定多个具体点 【备注】 这个接口是给具体的坐标直接比较颜色 而这个HCFP_FindColorsOffset是是先搜索首色然后以首色开始拿到偏移的坐标去比较颜色",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "找图模块(FP) - HD识图_获取颜色",
    "content": "【功能描述】 获取某个点的颜色值(从后台) 【备注】 注意返回值含义和值的提取 #pragmapack(1)typedefstructMYA8R8G8B8{BYTEm_a;\\n0x00BYTEm_r;\\n低8位BYTEm_g;\\n中8位BYTEm_b;\\n高8位MYA8R8G8B8(){m_a=0;m_r=0;m_g=0;m_b=0;}}MYA8R8G8B8; #pragmapack() json: “{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"info\\\":\\\"44,29,5B\\\"}]}”A(0x00)rgbr红色:低8位g绿色:中8位b蓝色:高8位RGBFFFFFF",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "找图模块(FP) - HD识图_范围找图",
    "content": "【功能描述】 在客户区范围内找图(仅支持一个图片) 【备注】 注意返回值含义和xy值的提取 {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "找图模块(FP) - HD识图_范围找图Ex",
    "content": "【功能描述】 在客户区范围内找图(返回找到其中一张信息) 【备注】 注意返回值含义和xy值的提取 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "找图模块(FP) - HCFP_FindPicExx",
    "content": "【功能描述】 在客户区范围内找图(返回全部找到的信息) 【备注】 注意返回值含义和xy值的提取 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "找图模块(FP) - HD识图_是否卡屏",
    "content": "【功能描述】 在客户区范围内检测再规定时间内是否卡图 【备注】 无",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "找图模块(FP) - HD识图_获取区域图像CRC",
    "content": "【功能描述】 在客户区范围内获取像素CRC值,用于卡屏校验 【备注】 json: {\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":%lld,\\\\\"info\\\\\":\\\"%X“,\\\\\"time\\\\\":%d}]} info字段是校验值4字节整数",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "找图模块(FP) - HD识图_单点找色从文件",
    "content": "【功能描述】 单点找色(从文件) 【备注】 注意返回值含义和XY值的提取",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "找图模块(FP) - HD识图_单点找色从内存",
    "content": "【功能描述】 单点找色(从内存) 【备注】 注意返回值含义和XY值的提取 图片内存缓冲区自己维护",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "找图模块(FP) - HD识图_多点找色从文件",
    "content": "【功能描述】 多点找色(从文件) 【备注】 json: {error:0,ret:[{bRet:1,info:结果}]}\\\" info格式->像素序号,x1,y1|像素序号,x2,y2",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "找图模块(FP) - HD识图_多点找色从内存",
    "content": "【功能描述】 多点找色(从内存) 【备注】 json: {error:0,ret:[{bRet:1,info:结果}]}\\\" info格式->像素序号,x1,y1|像素序号,x2,y2 图片内存缓冲区自己维护",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "找图模块(FP) - HD识图_多点偏移找色从文件",
    "content": "【功能描述】 多点偏移找色(从文件) 【备注】 无",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "找图模块(FP) - HD识图_多点偏移找色从内存",
    "content": "【功能描述】 多点偏移找色(从内存) 【备注】 图片内存缓冲区自己维护",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "找图模块(FP) - HD识图_范围找图从文件",
    "content": "【功能描述】 在客户区范围内找图(从文件)(仅支持一个图片) 【备注】 注意返回值含义和xy值的提取 {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "找图模块(FP) - HD识图_范围找图从内存",
    "content": "【功能描述】 在客户区范围内找图(从内存)(仅支持一个图片) 【备注】 注意返回值含义和xy值的提取 图片内存缓冲区自己维护 {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "找图模块(FP) - HD识图_范围找图从文件Ex",
    "content": "【功能描述】 在客户区范围内找图(从文件)(找到一个图片就返回) 【备注】 注意返回值含义和xy值的提取 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "找图模块(FP) - HD识图_范围找图从内存Ex",
    "content": "【功能描述】 在客户区范围内找图(从内存)(找到一个图片就返回) 【备注】 注意返回值含义和xy值的提取 图片内存缓冲区自己维护 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "找图模块(FP) - HCFP_FindPicExxByFile",
    "content": "【功能描述】 在客户区范围内找图(从文件)(找全部图片信息坐标) 【备注】 注意返回值含义和xy值的提取 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "找图模块(FP) - HCFP_FindPicExxByMem",
    "content": "【功能描述】 在客户区范围内找图(从内存)(找全部图片信息坐标) 【备注】 注意返回值含义和xy值的提取 图片内存缓冲区自己维护 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度|</SPAN> NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "找图模块(FP) - HD识图_范围找图来源内存Ex",
    "content": "【功能描述】 在客户区范围内找图(子图从内存)(找到一个图片就返回) 【备注】 注意返回值含义和xy值的提取 图片内存缓冲区自己维护 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "找图模块(FP) - HCFP_FindPicExxFromMem",
    "content": "【功能描述】 在客户区范围内找图(子图从内存)(找全部图片信息坐标) 【备注】 注意返回值含义和xy值的提取 图片内存缓冲区自己维护 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "找图模块(FP) - HD识图_比较颜色从文件",
    "content": "【功能描述】 比较颜色(从文件) 【备注】 无",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "找图模块(FP) - HD识图_比较颜色从内存",
    "content": "【功能描述】 比较颜色(从内存) 【备注】 图片内存缓冲区自己维护",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_29",
    "title": "找图模块(FP) - HD识图_比较颜色从文件Ex",
    "content": "【功能描述】 多点找色确定某个图像块,指定多个具体点,从文件 【备注】 无",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_30",
    "title": "找图模块(FP) - HD识图_比较颜色从内存Ex",
    "content": "【功能描述】 多点找色确定某个图像块,指定多个具体点,从内存 【备注】 无",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_31",
    "title": "找图模块(FP) - HD识图_获取颜色从文件",
    "content": "【功能描述】 获取颜色(从文件) 【备注】 注意返回值含义和值的提取 #pragmapack(1)typedefstructMYA8R8G8B8{BYTEm_a;\\n0x00BYTEm_r;\\n低8位BYTEm_g;\\n中8位BYTEm_b;\\n高8位MYA8R8G8B8(){m_a=0;m_r=0;m_g=0;m_b=0;}}MYA8R8G8B8; #pragmapack() json: “{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"info\\\":\\\"44,29,5B\\\"}]}”A(0x00)rgbr红色:低8位g绿色:中8位b蓝色:高8位RGBFFFFFF",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_32",
    "title": "找图模块(FP) - HD识图_获取颜色从内存",
    "content": "【功能描述】 获取颜色(从内存) 【备注】 图片内存缓冲区自己维护 注意返回值含义和值的提取 #pragmapack(1)typedefstructMYA8R8G8B8{BYTEm_a;\\n0x00BYTEm_r;\\n低8位BYTEm_g;\\n中8位BYTEm_b;\\n高8位MYA8R8G8B8(){m_a=0;m_r=0;m_g=0;m_b=0;}}MYA8R8G8B8; #pragmapack() json: “{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"info\\\":\\\"44,29,5B\\\"}]}”A(0x00)rgbr红色:低8位g绿色:中8位b蓝色:高8位RGBFFFFFF",
    "url": "/docs/xuanlanguage/category_26",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "找字模块(FS) - HD识字_设置字库",
    "content": "【功能描述】 设置当前像素识字的字库文件(为了提高识别效率,不支持多线程) 建议在登录回调中最开始初始化调用 其他线程需要那个序号就切换那个序号HCFS_SwitchCurDictFile 调用一次会给所有窗口序号添加当前设置的字库文件 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 这个不支持多线程,请在开启前首先设置好 类型提前添加字库,需要在当前线程使用字库必须调用HCFS_SwitchCurDictFile切换字库 字库文件绑定窗口序号字库序号绑定线程窗口序号支持多线程多进程来操作目标进程可以在多线程中通过窗口序号拿到所有绑定的字库文件信息至于在多线程中要使用的是哪一个字库文件？取决于当前线程所绑定的字库序号 总结:1.所有字库文件只需要和窗口序号关联一次就行\\n2.在多线程中需要使用到那个字库序号就切换就行多线程有自己的字库序号副本互不影响各自切换",
    "url": "/docs/xuanlanguage/category_27",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "找字模块(FS) - HD识字_设置字库Ex",
    "content": "【功能描述】 设置当前像素识字的字库文件(为了提高识别效率,不支持多线程) 请在主线程中最开始初始化调用 其他线程需要那个序号就切换那个序号HCFS_SwitchCurDictFile 调用一次会给所有窗口序号添加当前设置的字库文件 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 这个不支持多线程,请在开启前首先设置好 类型提前添加字库,需要在当前线程使用字库必须调用HCFS_SwitchCurDictFile切换字库",
    "url": "/docs/xuanlanguage/category_27",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "找字模块(FS) - HD识字_设置字库Exx",
    "content": "【功能描述】 设置当前像素识字的字库文件(为了提高识别效率,不支持多线程) 建议在登录回调中最开始初始化调用 其他线程需要那个序号就切换那个序号HCFS_SwitchCurDictFile 调用一次会给所有窗口序号添加当前设置的字库文件 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 这个不支持多线程,请在开启前首先设置好 类型提前添加字库,需要在当前线程使用字库必须调用HCFS_SwitchCurDictFile切换字库 字库文件绑定窗口序号字库序号绑定线程窗口序号支持多线程多进程来操作目标进程可以在多线程中通过窗口序号拿到所有绑定的字库文件信息至于在多线程中要使用的是哪一个字库文件？取决于当前线程所绑定的字库序号 总结:1.所有字库文件只需要和窗口序号关联一次就行\\n2.在多线程中需要使用到那个字库序号就切换就行多线程有自己的字库序号副本互不影响各自切换",
    "url": "/docs/xuanlanguage/category_27",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "找字模块(FS) - HD识字_切换字库序号",
    "content": "【功能描述】 切换当前像素识字的字库文件(支持多线程) 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好 运行起来了就不能设置否则冲突 切换字库文件可以在运行的时候切换,而HCFS_SetDictFile设置字库文件必须在初始化阶段中进行！ 对于多线程操作同一个窗口序号的时候,切换字库支持多线程操作,操作前请先在主执行线程中设置字库就行其他副线程(包含主线程)就只需要切换就行",
    "url": "/docs/xuanlanguage/category_27",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "找字模块(FS) - HD识字_获取当前字库",
    "content": "【功能描述】 获取当前线程的加载后的字库文件信息(支持多线程) 【备注】 json: \\\"{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":ret,\\\"info\\\":info}]}\\\" info:窗口索引,当前字库索引,加载了字库文件数量,(加载的字库序号,对应的字条数目)|...如:info:0,1,3,(1,55)|(2,55)|(3,55)| 注意返回的是当前线程的字库信息",
    "url": "/docs/xuanlanguage/category_27",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "找字模块(FS) - HD识字_获取当前字库序号",
    "content": "【功能描述】 获取当前线程绑定的字库索引(支持多线程) 【备注】 返回大于等于0的值是当前线程绑定的字库索引",
    "url": "/docs/xuanlanguage/category_27",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "找字模块(FS) - HD识字_单字符找字",
    "content": "【功能描述】 在客户区范围内找字(只支持单字符串并且是单字符字库) 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->0,x1,y1,w1,h1,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/xuanlanguage/category_27",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "找字模块(FS) - HD识字_单字符找字Ex",
    "content": "【功能描述】 在客户区范围内找字(支持多字符串并且是单字符字库) 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/xuanlanguage/category_27",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "找字模块(FS) - HD识字_单字符找字Exx",
    "content": "【功能描述】 在客户区范围内找字(支持多字符串并且是单字符字库)找到一个就返回 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/xuanlanguage/category_27",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "找字模块(FS) - HD识字_列表单列找字从文件",
    "content": "【功能描述】 单字符串找(原图从文件) 字库是字符串 例如:洛阳多行返回多个坐标一行只找一列(一次) 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->0,x1,y1,w,h,sim|0,x2,y2,w,h,sim|0,x3,y2,w,h,sim|... 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/xuanlanguage/category_27",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "找字模块(FS) - HD识字_列表单列找字从内存",
    "content": "【功能描述】 单字符串找(原图从内存) 字库是字符串 例如:洛阳多行返回多个坐标一行只找一列(一次) 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->0,x1,y1,w,h,sim|0,x2,y2,w,h,sim|0,x3,y2,w,h,sim|... 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/xuanlanguage/category_27",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "找字模块(FS) - HD识字_列表多列找字从文件",
    "content": "【功能描述】 单字符串找(原图从文件) 字库是字符串 例如:洛阳多行多列返回多个坐标 一行找多列(多次)找多行 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->0,x1,y1,w,h,sim|0,x2,y2,w,h,sim|0,x3,y2,w,h,sim|... 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/xuanlanguage/category_27",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "找字模块(FS) - HD识字_列表多列找字从内存",
    "content": "【功能描述】 单字符串找(原图从内存) 字库是字符串 例如:洛阳多行多列返回多个坐标 一行找多列(多次)找多行 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->0,x1,y1,w,h,sim|0,x2,y2,w,h,sim|0,x3,y2,w,h,sim|... 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/xuanlanguage/category_27",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "找字模块(FS) - HD识字_自动识字",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到一个就返回 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号(0开始),x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/xuanlanguage/category_27",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "找字模块(FS) - HD识字_自动识字从文件",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到一个就返回 可以通过指定图片来获取截图数据其他功能和HCFS_FindStrMutilsAuto一致 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/xuanlanguage/category_27",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "找字模块(FS) - HD识字_自动识字从内存",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到一个就返回 可以通过指定图片来获取截图数据其他功能和HCFS_FindStrMutilsAuto一致 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/xuanlanguage/category_27",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "找字模块(FS) - HD识字_自动识字Ex",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到全部或仅仅找一个 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号(0开始),x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/xuanlanguage/category_27",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "找字模块(FS) - HD识字_自动识字从文件Ex",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到全部或仅仅找一个 可以通过指定图片来获取截图数据其他功能和HCFS_FindStrMutilsAuto一致 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/xuanlanguage/category_27",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "找字模块(FS) - HD识字_自动识字从内存Ex",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到全部或仅仅找一个 可以通过指定图片来获取截图数据其他功能和HCFS_FindStrMutilsAuto一致 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/xuanlanguage/category_27",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "找字模块(FS) - HD识字_多字符识字",
    "content": "【功能描述】 单字符串找字库是字符串例如:洛阳 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 在客户区范围内找字符串(只支持单字符串),同时字库是字符串 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/xuanlanguage/category_27",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "找字模块(FS) - HD识字_多字符识字Ex",
    "content": "【功能描述】 多字符串找字库是字符串例如:洛阳|北京|广州 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 在客户区范围内找字符串(只支持单字符串),同时字库是字符串 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/xuanlanguage/category_27",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "找字模块(FS) - HCFS_FindStrMutilsExx",
    "content": "【功能描述】 多字符串找字库是字符串例如:洛阳|北京|广州找到一个就返回 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 在客户区范围内找字符串(只支持单字符串),同时字库是字符串 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/xuanlanguage/category_27",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "找字模块(FS) - HD识字_Ocr",
    "content": "【功能描述】 在客户区范围内识别字 字库是字符串或单字 拼接+字符串都支持 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"info\\\":BBB} AAA:0未找到1找到 BBB:json数组如:[{\\\"x\\\":0,\\\"y\\\":0,\\\"text\\\":“NULL”}]表示未找到类似这样[{\\\"x\\\":123,\\\"y\\\":456,\\\"text\\\":\\\"洛阳\\\"},{\\\"x\\\":654,\\\"y\\\":987,\\\"text\\\":\\\"洱海\\\"}]表示找到了 格式化字符串: 未找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":[{\\\\\"x\\\\\":0,\\\\\"y\\\\\":0,\\\\\"text\\\\\":\\\\\"NULL\\\\\"}]}\\\" 找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":%s}\\\" 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/xuanlanguage/category_27",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "找字模块(FS) - HD识字_Ocr从文件",
    "content": "【功能描述】 在客户区范围内识别字 字库是字符串或单字 拼接+字符串都支持 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"info\\\":BBB} AAA:0未找到1找到 BBB:json数组如:[{\\\"x\\\":0,\\\"y\\\":0,\\\"text\\\":“NULL”}]表示未找到类似这样[{\\\"x\\\":123,\\\"y\\\":456,\\\"text\\\":\\\"洛阳\\\"},{\\\"x\\\":654,\\\"y\\\":987,\\\"text\\\":\\\"洱海\\\"}]表示找到了 格式化字符串: 未找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":[{\\\\\"x\\\\\":0,\\\\\"y\\\\\":0,\\\\\"text\\\\\":\\\\\"NULL\\\\\"}]}\\\" 找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":%s}\\\" 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/xuanlanguage/category_27",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "找字模块(FS) - HD识字_Ocr从内存",
    "content": "【功能描述】 在客户区范围内识别字 字库是字符串或单字 拼接+字符串都支持 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"info\\\":BBB} AAA:0未找到1找到 BBB:json数组如:[{\\\"x\\\":0,\\\"y\\\":0,\\\"text\\\":“NULL”}]表示未找到类似这样[{\\\"x\\\":123,\\\"y\\\":456,\\\"text\\\":\\\"洛阳\\\"},{\\\"x\\\":654,\\\"y\\\":987,\\\"text\\\":\\\"洱海\\\"}]表示找到了 格式化字符串: 未找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":[{\\\\\"x\\\\\":0,\\\\\"y\\\\\":0,\\\\\"text\\\\\":\\\\\"NULL\\\\\"}]}\\\" 找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":%s}\\\" 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/xuanlanguage/category_27",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "找字模块(FS) - HD识字_设置水平垂直间距",
    "content": "【功能描述】 设置间距(在识别拼接字和OCR中尤其重要)-丢弃改为每个接口单独设置 【备注】 1.当相邻的字/数字/字母/符号,在间距范围内,才被认为是一个整体(字符串) 2.不明白什么是水平垂直间距请前往查看水平垂直间距解析和案例分析 3.这种对于数字和符号,尤其重要",
    "url": "/docs/xuanlanguage/category_27",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "找字模块(FS) - HD识字_设置11",
    "content": "【功能描述】 设置11行中(同宽)矩形内,是否只有一个字-丢弃改为每个接口单独设置 【备注】 1.如果打开识别速度快,关闭速度慢一点(不影响多少) 2.如果这个i这个字,由2个字符组成'.'和'|' 3.如果打开表示i是一个整体识别,不能拆开识别 4.如果关闭表示i可以拆分成2个字符分别识别",
    "url": "/docs/xuanlanguage/category_27",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "找字模块(FS) - HD识字_设置周围占比",
    "content": "【功能描述】 设置字周围一个像素上下左右的像素占比-丢弃改为每个接口单独设置 【备注】 1.对于那种连体字的情况下占比越高,可能识别的不准确2.这个相当于一个容错率占比3.返回当前设置后的占比4.默认0.1 5.这种对于数字和符号,尤其重要,可以准确的提高识别率,越小的字效果越好",
    "url": "/docs/xuanlanguage/category_27",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "智能识图模块(FI) - HCFI_FindImage",
    "content": "【功能描述】 识图(返回的是圆型的圆点) 【备注】 图片越多耗时多长 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x\\\":XX,\\\"y\\\":YY},{\\\"x\\\":XX,\\\"y\\\":YY},{\\\"x\\\":XX,\\\"y\\\":YY}],\\\"time\\\":ZZZ} 每张图会有1个坐标点(圆点) AAA:表示找到几个XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置",
    "url": "/docs/xuanlanguage/category_28",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "智能识图模块(FI) - HCFI_FindImageEx",
    "content": "【功能描述】 识图(返回的是矩形左上角和右下角) 【备注】 图片越多耗时多长 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY},{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY}],\\\"time\\\":ZZZ} 每张图会有2个坐标点(左上角+右下角) AAA:表示找到几个XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置",
    "url": "/docs/xuanlanguage/category_28",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "智能识图模块(FI) - HCFI_FindRangeImage",
    "content": "【功能描述】 范围内识图 【备注】 图片越多耗时多长 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x\\\":XX,\\\"y\\\":YY},{\\\"x\\\":XX,\\\"y\\\":YY},{\\\"x\\\":XX,\\\"y\\\":YY}]}type==0</STRONG> 每张图会有1个坐标点(圆点) {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY},{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY}]}type==1</STRONG> 每张图会有2个坐标点(左上角+右下角) AAA:表示找到几个XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置",
    "url": "/docs/xuanlanguage/category_28",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "智能识图模块(FI) - HD智能识图_Tem找图从文件",
    "content": "【功能描述】 从文件中加载截图数据并识图(返回的是矩形左上角和右下角) 【备注】 图片越多耗时多长 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY},{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY}],\\\"time\\\":ZZZ} 每张图会有2个坐标点(左上角+右下角) AAA:表示找到几个XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0max:置信度time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置",
    "url": "/docs/xuanlanguage/category_28",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "智能识图模块(FI) - HD智能识图_Tem找图从内存",
    "content": "【功能描述】 从内存中加载截图数据并识图(返回的是矩形左上角和右下角) 【备注】 图片越多耗时多长 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"i\\\":index,\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY\\\"max\\\":0.0f},{\\\"i\\\":index,\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY\\\"max\\\":0.0f}]}每张图对应会有图片索引+2个坐标点(左上角+右下角)+置信度(max)index:图片集合指定的索引(0开始)如:\\\"洛阳.bmp|洱海.bmp|\\\"(洛阳.bmp)索引就是0AAA:表示找到几个(真正的找到数量)XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0max:置信度time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置",
    "url": "/docs/xuanlanguage/category_28",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "智能识字模块(RC) - HCRC_InitRCServer",
    "content": "【功能描述】 初始化识别服务器 【备注】 无",
    "url": "/docs/xuanlanguage/category_29",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "智能识字模块(RC) - HCRC_OpenRCServer",
    "content": "【功能描述】 打开识别服务器 【备注】 无",
    "url": "/docs/xuanlanguage/category_29",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "智能识字模块(RC) - HCRC_StopRCServer",
    "content": "【功能描述】 停止识别服务器 【备注】 无",
    "url": "/docs/xuanlanguage/category_29",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "智能识字模块(RC) - HCRC_SwitchRCServer",
    "content": "【功能描述】 切换识字服务:主要针对语言字体文件的切换 【备注】 内部实现原理:先停止之前的服务(HCRC_StopRCServer)重新初始化(HCRC_InitRCServer)然后重新开启(HCRC_OpenRCServer)",
    "url": "/docs/xuanlanguage/category_29",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "智能识字模块(RC) - HCRC_RecognitionChar",
    "content": "【功能描述】 智能识字 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"image\\\":XXX},{\\\"image\\\":YYY}],\\\"time\\\":ZZZ}XXX->图片识别后的结果(字符串)每一个{\\\"image\\\":XXX}是一个识别的字符串,对应<参数:图片名字集合>索引 XXX:格式 \\\"%s,%0.2f,%d,%d,%d,%d|\\\" 字符串1,置信度1,x1,y1,x2,y2|字符串2,置信度2,x1,y1,x2,y2|...|",
    "url": "/docs/xuanlanguage/category_29",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "智能识字模块(RC) - HCRC_RecognitionCharEx",
    "content": "【功能描述】 指定范围内智能识字 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"image\\\":XXX},{\\\"image\\\":YYY}],\\\"time\\\":ZZZ}XXX->图片识别后的结果(字符串)每一个{\\\"image\\\":XXX}是一个识别的字符串,对应<参数:图片名字集合>索引 XXX:格式 \\\"%s,%0.2f,%d,%d,%d,%d|\\\" 字符串1,置信度1,x1,y1,x2,y2|字符串2,置信度2,x1,y1,x2,y2|...|",
    "url": "/docs/xuanlanguage/category_29",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "智能识字模块(RC) - HCRC_RecognitionCharByMemory",
    "content": "【功能描述】 从内存图片数据中范围内智能识字 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"image\\\":XXX},{\\\"image\\\":YYY}],\\\"time\\\":ZZZ}XXX->图片识别后的结果(字符串)每一个{\\\"image\\\":XXX}是一个识别的字符串,对应<参数:图片名字集合>索引. XXX:格式 \\\"%s,%0.2f,%d,%d,%d,%d|\\\" 字符串1,置信度1,x1,y1,x2,y2|字符串2,置信度2,x1,y1,x2,y2|...|",
    "url": "/docs/xuanlanguage/category_29",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "后台键鼠(MKB) - HD键鼠_绑定",
    "content": "【功能描述】 绑定窗口 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/xuanlanguage/category_30",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "后台键鼠(MKB) - HD键鼠_绑定Ex",
    "content": "【功能描述】 绑定窗口 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/xuanlanguage/category_30",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "后台键鼠(MKB) - HD键鼠_模式绑定Ex",
    "content": "【功能描述】 绑定窗口(扩展接口) 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/xuanlanguage/category_30",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "后台键鼠(MKB) - HD键鼠_切换绑定",
    "content": "【功能描述】 切换绑定到所属子窗口的句柄上 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/xuanlanguage/category_30",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "后台键鼠(MKB) - HD键鼠_切换绑定Ex",
    "content": "【功能描述】 切换绑定到所属子窗口的句柄上 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/xuanlanguage/category_30",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "后台键鼠(MKB) - HD键鼠_切换模式绑定Ex",
    "content": "【功能描述】 切换绑定窗口(扩展接口) 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/xuanlanguage/category_30",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "后台键鼠(MKB) - HD键鼠_暂停绑定",
    "content": "【功能描述】 暂停/恢复后台绑定 【备注】 无",
    "url": "/docs/xuanlanguage/category_30",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "后台键鼠(MKB) - HD键鼠_解绑",
    "content": "【功能描述】 解绑窗口 【备注】 无",
    "url": "/docs/xuanlanguage/category_30",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "后台键鼠(MKB) - HD键鼠_右键双击",
    "content": "【功能描述】 鼠标右键双击 【备注】 无",
    "url": "/docs/xuanlanguage/category_30",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "后台键鼠(MKB) - HCMKB_KeyPress(A/W)",
    "content": "【功能描述】 连续按键输入字符串(连续单个按键) 【备注】 无",
    "url": "/docs/xuanlanguage/category_30",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "后台键鼠(MKB) - HCMKB_SendString(2)",
    "content": "【功能描述】 发送Ascii字符串 【备注】 无",
    "url": "/docs/xuanlanguage/category_30",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "后台键鼠(MKB) - HD键鼠_剪切板发送随机文本",
    "content": "【功能描述】 发送剪切板字符串内容到窗口 【备注】 无",
    "url": "/docs/xuanlanguage/category_30",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "后台键鼠(MKB) - HD键鼠_设置剪切板文本",
    "content": "【功能描述】 发送随机名字,从2个文本(hf.txt和he.txt)中各获取一个字 【备注】 hf.txt和he.txt放在程序(.exe)同目录下,文件编码为utf-8随机获取一个姓和一个名组成一个词",
    "url": "/docs/xuanlanguage/category_30",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "后台键鼠(MKB) - HD键鼠_获取剪切板字符串",
    "content": "【功能描述】 设置剪切板字符串 【备注】 该接口无序窗口序号",
    "url": "/docs/xuanlanguage/category_30",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "后台键鼠(MKB) - HD键鼠_句柄发送文本",
    "content": "【功能描述】 获取剪切板字符串 【备注】 无",
    "url": "/docs/xuanlanguage/category_30",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "后台键鼠(MKB) - HD键鼠_句柄发送按键按下",
    "content": "【功能描述】 发送Ascii字符串,部分游戏需要激活窗口！（可以不用通讯调用） 【备注】 注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！",
    "url": "/docs/xuanlanguage/category_30",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "后台键鼠(MKB) - HD键鼠_句柄发送按键弹起",
    "content": "【功能描述】 按下发送键码到指定窗口（可以不用通讯调用） 【备注】 注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！",
    "url": "/docs/xuanlanguage/category_30",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "后台键鼠(MKB) - HD键鼠_句柄发送按键",
    "content": "【功能描述】 弹起发送键码到指定窗口（可以不用通讯调用） 【备注】 注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！",
    "url": "/docs/xuanlanguage/category_30",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "后台键鼠(MKB) - HD键鼠_句柄发送清空文本",
    "content": "【功能描述】 按下并弹起发送键码到指定窗口（可以不用通讯调用） 【备注】 注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！",
    "url": "/docs/xuanlanguage/category_30",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "后台键鼠(MKB) - HD键鼠_设置鼠标轨迹参数",
    "content": "【功能描述】 可以清空子窗口的内容（可以不用通讯调用） 【备注】 注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！",
    "url": "/docs/xuanlanguage/category_30",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "后台键鼠(MKB) - HD键鼠_获取鼠标位置",
    "content": "【功能描述】 设置鼠标轨迹参数(当移动鼠标开启轨迹生效) 【备注】 无",
    "url": "/docs/xuanlanguage/category_30",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "后台键鼠(MKB) - HCMKB_GetMousePos",
    "content": "【功能描述】 获取后台/前台鼠标位置 【备注】 无",
    "url": "/docs/xuanlanguage/category_30",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "后台截图模块(CS) - HD截图_设置识别模式",
    "content": "【功能描述】 打开截图 【备注】 无",
    "url": "/docs/xuanlanguage/category_31",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "后台截图模块(CS) - HD截图_打开",
    "content": "【功能描述】 打开截图 【备注】 无",
    "url": "/docs/xuanlanguage/category_31",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "后台截图模块(CS) - HD截图_打开Ex",
    "content": "【功能描述】 打开截图(和HCCS_CloseCSEx是一组接口) 【备注】 1.前台和后台模式,可以随意切换不用调用关闭HCCS_CloseCSEx再开启！！！！！内置处理了 截图模式: typedefenumCAPTURETYPE{\\n无CAPTURETYPE_NONE=0,\\n这个不操作\\nGDICAPTURETYPE_GDI=1,\\n这个直接客户端操作对于浏览器(谷歌等)记得把图像加速关掉\\n32CAPTURETYPE_D3D9_1_x86=2,\\nUECAPTURETYPE_D3D9_2_x86=3,\\nU3DCAPTURETYPE_D3D9_3_x86=4,\\nRGBX\\nD3D11CAPTURETYPE_D3D11_1_x86=5,\\nUECAPTURETYPE_D3D11_2_x86=6,\\nU3DCAPTURETYPE_D3D11_3_x86=7,\\nRGBXD3D11游戏通用\\nD3D12CAPTURETYPE_D3D12_1_x86=70,\\nUECAPTURETYPE_D3D12_2_x86=71,\\nU3DCAPTURETYPE_D3D12_3_x86=72,\\nRGBXD3D12游戏通用\\n64\\nD3D9CAPTURETYPE_D3D9_1_x64=8,\\nUECAPTURETYPE_D3D9_2_x64=9,\\nU3DCAPTURETYPE_D3D9_3_x64=10,\\nRGBXD3D9游戏通用\\nD3D11CAPTURETYPE_D3D11_1_x64=11,\\nUECAPTURETYPE_D3D11_2_x64=12,\\nU3DCAPTURETYPE_D3D11_3_x64=13,\\nRGBXD3D11游戏通用\\nD3D12CAPTURETYPE_D3D12_1_x64=14,\\nUED3D12CAPTURETYPE_D3D12_2_x64=15,\\nU3DD3D12CAPTURETYPE_D3D12_3_x64=16,\\nRGBXD3D12D3D12游戏通用\\n32CAPTURETYPE_OPENGL_1_x86=20,\\n占位CAPTURETYPE_OPENGL_2_x86=21,\\nGL_BGRA模拟器CAPTURETYPE_OPENGL_3_x86=22,\\nGL_BGRA模拟器\\n64CAPTURETYPE_OPENGL_1_x64=30,\\n占位CAPTURETYPE_OPENGL_2_x64=31,\\nGL_BGRA模拟器CAPTURETYPE_OPENGL_3_x64=32,\\nGL_BGRA模拟器\\n定制CAPTURETYPE_D3D9_Steam_x86=40,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用CAPTURETYPE_D3D11_Steam_x86=41,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用CAPTURETYPE_D3D9_Steam_x64=42,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用CAPTURETYPE_D3D11_Steam_x64=43,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用\\nNC模式CAPTURETYPE_D3D9_NC_x86=44,\\nNC游戏CAPTURETYPE_D3D11_NC_x86=45,\\nNC游戏CAPTURETYPE_D3D9_NC_x64=46,\\nNC游戏CAPTURETYPE_D3D11_NC_x64=47,\\nNC游戏\\nCAPTURETYPE_NORMAL=50,\\n这个前台模式\\nCAPTURETYPE_D3D12_Steam_x86=60,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用CAPTURETYPE_D3D12_Steam_x64=61,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用\\nCAPTURETYPE_D3D12_NC_x86=62,\\nNC游戏D3D12CAPTURETYPE_D3D12_NC_x64=63,\\nNC游戏D3D12 }CAPTURETYPE;额外说明:",
    "url": "/docs/xuanlanguage/category_31",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "后台截图模块(CS) - HD截图_关闭",
    "content": "【功能描述】 关闭截图 【备注】 无",
    "url": "/docs/xuanlanguage/category_31",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "后台截图模块(CS) - HD截图_获取截图数据",
    "content": "【功能描述】 关闭截图(和HCCS_OpenCSEx是一组接口) 【备注】 无",
    "url": "/docs/xuanlanguage/category_31",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "后台截图模块(CS) - HD截图_打开查看器",
    "content": "【功能描述】 获取截图数据 【备注】 json:{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":AAA,\\\"addr\\\":XXX,\\\"eleSize\\\":YYY,\\\"len\\\":ZZZ,\\\"w\\\":1222,\\\"h\\\":699}]}AAA:调用接口返回值 XXX:图片二进制数据首地址(不是bmp数据是MYA8R8G8B8结构体缓冲区首地址)可以拿到这个缓冲区自行转换各种图片格式数据 YYY:MYA8R8G8B8结构体数量 ZZZ:字节大小(图片数据=MYA8R8G8B8* YYY) w:宽度 h:高度注意:拿到图片地址数据XXX使用后记得释放(HCCS_FreeArray) 图片数据地址不使用了记得释放掉HCCS_FreeMemPool调用此接口",
    "url": "/docs/xuanlanguage/category_31",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "后台截图模块(CS) - HD截图_关闭查看器",
    "content": "【功能描述】 打开查看器 【备注】 无",
    "url": "/docs/xuanlanguage/category_31",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "后台截图模块(CS) - HD截图_截图",
    "content": "【功能描述】 关闭查看器 【备注】 无",
    "url": "/docs/xuanlanguage/category_31",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "后台截图模块(CS) - HD截图_获取BMP截图数据",
    "content": "【功能描述】 截图数据并保存为BMP图片文件 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":AAA,\\\"w\\\":1222,\\\"h\\\":699}]}",
    "url": "/docs/xuanlanguage/category_31",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "后台截图模块(CS) - HD截图_释放数据",
    "content": "【功能描述】 获取当前截图后的BMP数据 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"addr\\\":XXX,\\\"eleSize\\\":YYY,\\\"allLen\\\":ZZZ,\\\"w\\\":1222,\\\"h\\\":699}]} XXX是BMP图片二进制数据首地址 YYY是MYA8R8G8B8结构体数量 ZZZ:BMP图片数据大小(真实的BMP图片数据:54+像素数据) 图片数据地址不使用了记得释放掉HCCS_FreeMemPool调用此接口",
    "url": "/docs/xuanlanguage/category_31",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "后台截图模块(CS) - HCCS_GetCaptureBmpRangeData",
    "content": "【功能描述】 获取当前截图后的BMP数据(指定范围) 【备注】 如果想获取全图数据:xywh可以分别为-1也可以直接调用HCCS_GetCaptureBmpData json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"addr\\\":XXX,\\\"eleSize\\\":YYY,\\\"allLen\\\":ZZZ,\\\"w\\\":1222,\\\"h\\\":699}]} XXX是BMP图片二进制数据首地址 YYY是MYA8R8G8B8结构体数量 ZZZ:BMP图片数据大小(真实的BMP图片数据:54+像素数据) 图片数据地址不使用了记得释放掉HCCS_FreeMemPool调用此接口",
    "url": "/docs/xuanlanguage/category_31",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "后台截图模块(CS) - HD截图_释放内存池数据",
    "content": "【功能描述】 释放内存 【备注】 释放内存该内存是使用new[]申请的内存",
    "url": "/docs/xuanlanguage/category_31",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "后台截图模块(CS) - HD截图_是否后台缓存失败",
    "content": "【功能描述】 释放内存,内存池操作释放内存 【备注】 我们获取了截图数据不需要了都需要调用这个接口来释放掉,防止内存泄露 注意:该接口是释放【使用内存池申请的内存地址】的地址,与HCCS_FreeArray不一样 那个窗口序号返回申请的地址就用那个窗口序号释放",
    "url": "/docs/xuanlanguage/category_31",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "后台截图模块(CS) - HCCS_IsCaptureValid",
    "content": "【功能描述】 后台截图缓存获取失败判断接口 【备注】 无",
    "url": "/docs/xuanlanguage/category_31",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "黑屏优化模块 - HD黑屏_打开",
    "content": "【功能描述】 打开黑屏 【备注】 无",
    "url": "/docs/xuanlanguage/category_32",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "黑屏优化模块 - HD黑屏_设置模型范围",
    "content": "【功能描述】 设置模型序号的过滤范围 【备注】 可以适当调整最小或者最大的序号来过滤模型,来实现黑屏,同时还支持图色识别",
    "url": "/docs/xuanlanguage/category_32",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "黑屏优化模块 - HD黑屏_关闭",
    "content": "【功能描述】 关闭黑屏 【备注】 无",
    "url": "/docs/xuanlanguage/category_32",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "CPU优化模块() - HD优化_开启CPU",
    "content": "【功能描述】 打开CPU优化 【备注】 无",
    "url": "/docs/xuanlanguage/category_33",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "CPU优化模块() - HD优化_设置FPS",
    "content": "【功能描述】 设置帧数(绑定dx.public.down.cpu后台属性有效) 【备注】 并非实际的帧数,这里只是一个参考值,内置默认为30 动态优化调试帧数的(自动计算帧率)",
    "url": "/docs/xuanlanguage/category_33",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "CPU优化模块() - HD优化_设置延迟",
    "content": "【功能描述】 设置帧数(绑定dx.public.down.cpu后台属性有效) 【备注】 如果调用了HC_HookMainThread挂接主线程,同时又调用了本接口,那么会动态(根据实际动态计算正数来)修改主线程调用CALL的检查频率",
    "url": "/docs/xuanlanguage/category_33",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "CPU优化模块() - HD优化_关闭CPU",
    "content": "【功能描述】 关闭CPU优化 【备注】 无",
    "url": "/docs/xuanlanguage/category_33",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "系统模块(SYS) - HD系统_是否开启字体平滑",
    "content": "【功能描述】 检查字体是否开启字体平滑 【备注】 无",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "系统模块(SYS) - HD系统_关闭字体平滑",
    "content": "【功能描述】 关闭字体平滑 【备注】 无",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "系统模块(SYS) - HD系统_打开字体平滑",
    "content": "【功能描述】 打开字体平滑 【备注】 无",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "系统模块(SYS) - HD系统_是否开启UAC",
    "content": "【功能描述】 检查当前系统是否开启了UAC(用户控制) 【备注】 无",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "系统模块(SYS) - HD系统_设置UAC",
    "content": "【功能描述】 设置当前系统的UAC(用户控制)开关 【备注】 无",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "系统模块(SYS) - HD系统_延迟",
    "content": "【功能描述】 延迟 【备注】 不会堵塞主线程",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "系统模块(SYS) - HD系统_随机延迟",
    "content": "【功能描述】 在随机范围内延迟 【备注】 不会堵塞主线程",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "系统模块(SYS) - HD系统_关闭系统",
    "content": "【功能描述】 关闭系统 【备注】 无",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "系统模块(SYS) - HD系统_关闭屏保",
    "content": "【功能描述】 关闭屏保 【备注】 无",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "系统模块(SYS) - HD系统_关闭电源管理",
    "content": "【功能描述】 关闭电源管理,不进入睡眠 【备注】 无",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "系统模块(SYS) - HD系统_恢复最近系统修改",
    "content": "【功能描述】 恢复系统上次的修改 【备注】 如果中控软件运行的时候修改了系统设置 那么这个最好在中控程序退出的时候调用",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "系统模块(SYS) - HD系统_禁止休眠",
    "content": "【功能描述】 设置当前的电源设置(禁止关闭显示器,禁止关闭硬盘,禁止睡眠和待机) 【备注】 无",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "系统模块(SYS) - HD系统_获取路径",
    "content": "【功能描述】 获取路径 【备注】 无",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "系统模块(SYS) - HD系统_获取CPU类型",
    "content": "【功能描述】 获取CPU类型 【备注】 无",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "系统模块(SYS) - HD系统_获取当前CPU使用率",
    "content": "【功能描述】 获取CPU使用率 【备注】 无",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "系统模块(SYS) - HD系统_获取CPU使用率",
    "content": "【功能描述】 获取指定进程的CPU使用率 【备注】 返回值是整数百分比 返回字符串字符串是(含小数百分比)",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "系统模块(SYS) - HD系统_获取内存使用率",
    "content": "【功能描述】 获取指定进程的内存使用率 【备注】 无",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "系统模块(SYS) - HD系统_获取磁盘序列号",
    "content": "【功能描述】 获取磁盘序列号 【备注】 进程要有管理员权限才能获取成功",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "系统模块(SYS) - HD系统_获取显卡信息",
    "content": "【功能描述】 获取显卡信息 【备注】 无",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "系统模块(SYS) - HD系统_获取DPI",
    "content": "【功能描述】 获取DPI 【备注】 无",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "系统模块(SYS) - HD系统_启动EXE",
    "content": "【功能描述】 运行指定路径下的exe 【备注】 这个不支持启动参数",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "系统模块(SYS) - HD系统_执行DOS指令取返回",
    "content": "【功能描述】 获取CMD命令形式的打开进程并获取返回输出",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "系统模块(SYS) - HD系统_管理员打开进程",
    "content": "【功能描述】 获取CMD命令形式的打开进程(支持管理员打开)(扩展版本) 【备注】 内部是调用ShellExecuteExA",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "系统模块(SYS) - HD系统_启动EXE带参数",
    "content": "【功能描述】 运行指定路径下的exe这个支持启动参数 【备注】 这个支持启动参数",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "系统模块(SYS) - HD系统_启动EXE带参数Ex",
    "content": "【功能描述】 运行指定路径下的exe(HCSYS_RunAppEx的扩展版本)这个支持启动参数同时指定了当前进程的路径 【备注】 这个支持启动参数",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "系统模块(SYS) - HD系统_获取磁盘特征码",
    "content": "【功能描述】 获取磁盘特征码 【备注】 无",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "系统模块(SYS) - HD系统_获取CPU特征码",
    "content": "【功能描述】 获取CPU特征码 【备注】 无",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "系统模块(SYS) - HD系统_获取BOIS制造日期",
    "content": "【功能描述】 获取BOIS制造日期 【备注】 无",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_29",
    "title": "系统模块(SYS) - HD系统_获取机器码",
    "content": "【功能描述】 获取机器码(包含网卡) 【备注】 无",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_30",
    "title": "系统模块(SYS) - HD系统_获取机器码无网卡",
    "content": "【功能描述】 获取机器码(不包含网卡) 【备注】 无",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_31",
    "title": "系统模块(SYS) - HD系统_获取网络时间",
    "content": "【功能描述】 获取网络时间 【备注】 北京时间 固定内置服务器IP",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_32",
    "title": "系统模块(SYS) - HD系统_获取网络时间Ex",
    "content": "【功能描述】 获取网络时间(指定服务器IP获取) 【备注】 北京时间",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_33",
    "title": "系统模块(SYS) - HD系统_获取系统版本",
    "content": "【功能描述】 获取系统版本 【备注】 无",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_34",
    "title": "系统模块(SYS) - HD系统_获取系统类型",
    "content": "【功能描述】 获取系统类型 【备注】 无",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_35",
    "title": "系统模块(SYS) - HD系统_开机经过时间",
    "content": "【功能描述】 获取开机到现在过经过的时间(毫秒) 【备注】 无",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_36",
    "title": "系统模块(SYS) - HD系统_当前进程是否X64",
    "content": "【功能描述】 当前进程是否是64位 【备注】 无",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_37",
    "title": "系统模块(SYS) - HD系统_是否支持vt",
    "content": "【功能描述】 是否支持vt 【备注】 可以在Bios中开启vt,如果不支持就没办法了",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_38",
    "title": "系统模块(SYS) - HD系统_获取屏幕的色深",
    "content": "【功能描述】 获取屏幕的色深(24/32之类的) 【备注】 无",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_39",
    "title": "系统模块(SYS) - HD系统_设置屏幕的色深",
    "content": "【功能描述】 设置屏幕的色深 【备注】 无",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_40",
    "title": "系统模块(SYS) - HD系统_获取屏幕高度",
    "content": "【功能描述】 获取屏幕高度 【备注】 无",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_41",
    "title": "系统模块(SYS) - HD系统_获取屏幕宽度",
    "content": "【功能描述】 获取屏幕宽度 【备注】 无",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_42",
    "title": "系统模块(SYS) - HD系统_设置屏幕分辨率",
    "content": "【功能描述】 设置屏幕分辨率 【备注】 无",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_43",
    "title": "系统模块(SYS) - HD系统_获取CMD命令返回值",
    "content": "【功能描述】 获取CMD命令返回值(字符串) 【备注】 无",
    "url": "/docs/xuanlanguage/category_34",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "自定义插件模块(Com) - HD插件_加载插件",
    "content": "【功能描述】 添加自定义组件 【备注】 自定义模块需要导入包并来实现接口绑定",
    "url": "/docs/xuanlanguage/category_35",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "自定义插件模块(Com) - HD插件_卸载插件",
    "content": "【功能描述】 卸载指定插件 【备注】 自定义模块需要导入包并来实现接口绑定",
    "url": "/docs/xuanlanguage/category_35",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "自定义插件模块(Com) - HD插件_CALL",
    "content": "【功能描述】 调用自定义组件中的接口 【备注】 自定义模块需要导入包并来实现接口绑定 参考:X86X64自定义插件接口说明",
    "url": "/docs/xuanlanguage/category_35",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "自定义插件模块(Com) - HD插件_CALLEx",
    "content": "【功能描述】 调用自定义组件中的接口(可传递任意参数类型) 【备注】 自定义模块需要导入包并来实现接口绑定 注意:传递的buffer字符串在自定义插件接口 typedefHDComRet(__stdcall* HDComFunType)(__int64 retStrAddr,__int64 rcx,__int64 rdx,__int64 r8,__int64 r9,__int64 l5,__int64 l6); 第一个参数retStrAddr作为字符串首地址(char* )能拿到 如: C++代码演示: char* info=(char* )retStrAddr; 参考:X86X64自定义插件接口说明",
    "url": "/docs/xuanlanguage/category_35",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "插件包装器 - HCCOM_Load",
    "content": "【功能描述】 加载组件 【备注】 组件名为当前组件文件的名字(不包含后缀!,如果组件文件无后缀可忽视) 如:hdmad.dll所对应的组件名必须是hdmad 头文件: HDLoader.h 静态库: HDPacker.librelease版本 HDPackerd.libdebug版本",
    "url": "/docs/xuanlanguage/category_36",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "插件包装器 - HCCOM_Register",
    "content": "【功能描述】 注册自定义组件中的接口 【备注】 内置数据初始化函数接口名字:HDDataInit(接口类型是HDComFunType)HDDataInit初始化函数会在加载组件的时候首次调用以便于完成对相关组件数据的初始化(比如:基地址相关表达式的获取)如果需要初始化就自己写一个名字叫做HDDataInit的函数,类型为HDComFunType,并调用HCCOM_Register 头文件: HDLoader.h 静态库: HDPacker.librelease版本 HDPackerd.libdebug版本 参考:X86X64自定义插件接口说明",
    "url": "/docs/xuanlanguage/category_36",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "插件包装器 - HCCOM_NotifyToTarget",
    "content": "【功能描述】 自定义模块通知目标进程接口 【备注】 内置数据初始化函数接口名字:HDDataInit(接口类型是HDComFunType)HDDataInit初始化函数会在加载组件的时候首次调用以便于完成对相关组件数据的初始化(比如:基地址相关表达式的获取)如果需要初始化就自己写一个名字叫做HDDataInit的函数,类型为HDComFunType,并调用HCCOM_Register 头文件: HDLoader.h 静态库: HDPacker.librelease版本 HDPackerd.libdebug版本",
    "url": "/docs/xuanlanguage/category_36",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "插件包装器 - HCCOM_NotifyToController",
    "content": "【功能描述】 自定义模块通知中控进程接口 【备注】 内置数据初始化函数接口名字:HDDataInit(接口类型是HDComFunType)HDDataInit初始化函数会在加载组件的时候首次调用以便于完成对相关组件数据的初始化(比如:基地址相关表达式的获取)如果需要初始化就自己写一个名字叫做HDDataInit的函数,类型为HDComFunType,并调用HCCOM_Register 头文件: HDLoader.h 静态库: HDPacker.librelease版本 HDPackerd.libdebug版本",
    "url": "/docs/xuanlanguage/category_36",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "插件包装器 - HCCOM_GetRetJson",
    "content": "【功能描述】 获取自定义模块通知中控进程返回的字符串结果 【备注】 返回的字符串是自定义的 在中控中自己设置的事件处理回调函数中设置返回 头文件: HDLoader.h 静态库: HDPacker.librelease版本 HDPackerd.libdebug版本",
    "url": "/docs/xuanlanguage/category_36",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "插件包装器 - HCCOM_FindCode",
    "content": "【功能描述】 特征码查找 【备注】 无",
    "url": "/docs/xuanlanguage/category_36",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "插件包装器 - HCCOM_PrintLog",
    "content": "【功能描述】 是否打开debugview调试日志信息 【备注】 返回当前是否开启",
    "url": "/docs/xuanlanguage/category_36",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "插件包装器 - HCCOM_GetVersion",
    "content": "【功能描述】 获取自定义内存插件版本号 【备注】 返回当前是否开启",
    "url": "/docs/xuanlanguage/category_36",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "状态机模块 - HCHD_GetHDStatusControler",
    "content": "【功能描述】 获取控制器有且只有一个 【备注】 拿到控制器对象可以获取或者操作其他组件对象",
    "url": "/docs/xuanlanguage/category_37",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "控制器模块 - HCHD_GetHDController",
    "content": "【功能描述】 获取控制器有且只有一个 【备注】 拿到控制器对象可以获取或者操作其他组件对象",
    "url": "/docs/xuanlanguage/category_38",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "主板机模块[SC] - HD主板机_设置路径",
    "content": "【功能描述】 设置HDScrcpy投屏软件根目录,并重启adb相当于重置一下adb环境 【备注】 设置HDScrcpy投屏软件根目录如:J:\\\\hdscrcpy2.7\\\\默认C:\\\\hdscrcpy2.7\\\\ 软件在群文件或者找管理索取",
    "url": "/docs/xuanlanguage/category_39",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "主板机模块[SC] - HD主板机_重置ADB服务",
    "content": "【功能描述】 重置adb服务 【备注】 无",
    "url": "/docs/xuanlanguage/category_39",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "主板机模块[SC] - HD主板机_查询设备",
    "content": "【功能描述】 查询当前所有可用的设备 【备注】 无 设备号类型:1.emulator-5554/127.0.0.1:5009模拟器Device(-s) 2.01aa8320032fe731手机Device(-d) 3.127.0.0.1:5009tcpipDevice(-e)",
    "url": "/docs/xuanlanguage/category_39",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "主板机模块[SC] - HD主板机_连接设备",
    "content": "【功能描述】 连接设备并通讯窗口序号（需要先初始化中控和登录！！HCHD_LoginHCEnv_Init/HCEnv_InitEx） 【备注】 1.该接口会自动连接指定的设备号 2.同时会进行通讯和重连判断(需要加载HD驱动) 3.无需再通讯 设备号类型:1.emulator-5554/127.0.0.1:5009模拟器Device(-s) 2.01aa8320032fe731手机Device(-d) 3.127.0.0.1:5009tcpipDevice(-e)",
    "url": "/docs/xuanlanguage/category_39",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "虚拟机[VM] - HCVM_Run",
    "content": "【功能描述】 运行虚拟机(管理员运行) 【备注】 指令: D:\\vmwin10>D:\\vm16\\vmrun-Twsstart\\\"D:/vmwin10/Windows10x64.vmx\\\"guilparam D:\\vmwin10>D:\\vm16\\vmrun-Twsstart\\\"D:/vmwin10/Windows10x64.vmx\\\"noguilparam C++案例: autoret=HCVM_Run(0,\\\"D:\\\\vm16\\\\\\\",\\\"D:\\\\vmwin10\\\\Windows10x64.vmx\\\",TRUE,0,0,0);",
    "url": "/docs/xuanlanguage/category_40",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "虚拟机[VM] - HCVM_Rerun",
    "content": "【功能描述】 重启运行虚拟机(管理员运行) 【备注】 指令: D:\\vmwin10>D:\\vm16\\vmrun-Twsrestart\\\"D:/vmwin10/Windows10x64.vmx\\\"guilparam D:\\vmwin10>D:\\vm16\\vmrun-Twsrestart\\\"D:/vmwin10/Windows10x64.vmx\\\"noguilparam C++案例: autoret=HCVM_Rerun(0,\\\"D:\\\\vm16\\\\\\\",\\\"D:\\\\vmwin10\\\\Windows10x64.vmx\\\",m_强制关闭CheckBox.GetCheck(),TRUE,0,0,0);</FONT>",
    "url": "/docs/xuanlanguage/category_40",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "虚拟机[VM] - HCVM_Close",
    "content": "【功能描述】 关闭运行虚拟机(管理员运行) 【备注】 指令: D:\\vmwin10>D:\\vm16\\vmrun-Twsstop\\\"D:/vmwin10/Windows10x64.vmx\\\" D:\\vmwin10>D:\\vm16\\vmrun-Twsstop\\\"D:/vmwin10/Windows10x64.vmx\\\" C++案例: autoret=HCVM_Close(0,\\\"D:\\\\vm16\\\\\\\",\\\"D:\\\\vmwin10\\\\Windows10x64.vmx\\\",m_强制关闭CheckBox.GetCheck(),0,0);",
    "url": "/docs/xuanlanguage/category_40",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "虚拟机[VM] - HCVM_List",
    "content": "【功能描述】 获取当前正在运行的虚拟机路径和总数(管理员运行) 【备注】 无 C++案例: autoret=HCVM_List(\\\"D:\\\\vm16\\\\\\\");",
    "url": "/docs/xuanlanguage/category_40",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "虚拟机[VM] - HCVM_IsStart",
    "content": "【功能描述】 指定虚拟机是否已经开启(管理员运行) 【备注】 无 C++案例: autoret=HCVM_List(\\\"D:\\\\vm16\\\\\\\",\\\"D:/vmwin10/Windows10x64_1.vmx\\\");",
    "url": "/docs/xuanlanguage/category_40",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取版本号",
    "content": "【功能描述】 获取DMA服务器版本号 【备注】 返回长整数:如:240401格式:24年-04版本号-01小版本号",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_版本是否一致",
    "content": "【功能描述】 判断HD插件的DMA接口和DMA服务器接口版本是否一致",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_开启服务器",
    "content": "【功能描述】 开启DMA服务器 【备注】 服务器在群下载或者官网下载 兼容指定自定义进程名(全路径\\\\XXXX.exe)XXXX.exe为自定义进程名不指定进程名表示使用内置进程名(全路径\\\\HDVMDma.exe)不指定路径(当前中控exe根目录\\\\HDVMDma.exe)",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_关闭服务器",
    "content": "【功能描述】 关闭服务器,同时结束进程 【备注】 无",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_服务器是否开启",
    "content": "【功能描述】 服务器是否已经开启 【备注】 循环检查直到服务器开启成功 如果使用HCVMDMA_StartServer开启服务器,不指定IP和端口,则使用的是HCVMDMA_ServerIsStart指定的IP和端口",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_关联虚拟机",
    "content": "【功能描述】 初始化并关联虚拟机 【备注】 需要先开启服务器HCVMDMA_StartServer 内部会自动调用HCEnv_Load接口,使窗口序号和虚拟机进程关联绑定然后初始化虚拟机相关资源 后续就可以使用该窗口虚拟机去操作对应的虚拟机中的进程",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取PID",
    "content": "【功能描述】 通过进程名获取PID 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_读地址",
    "content": "【功能描述】 读地址,仅支持1248地址大小 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_读单浮点",
    "content": "【功能描述】 读单浮点数 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_读双浮点",
    "content": "【功能描述】 读双浮点数 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_读字节集",
    "content": "【功能描述】 读字节集 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_写地址",
    "content": "【功能描述】 写地址,仅支持1248地址大小 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_写单浮点",
    "content": "【功能描述】 写单浮点数 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_写双浮点",
    "content": "【功能描述】 写双浮点数 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_写字节集",
    "content": "【功能描述】 写字节集 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取函数",
    "content": "【功能描述】 获取函数地址 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取主模块",
    "content": "【功能描述】 获取主模块地址 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取模块",
    "content": "【功能描述】 获取模块地址 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取执行环境X64",
    "content": "【功能描述】 初始化获取一个某个进程(x64)的执行环境句柄 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 支持内置保存执行环境最多可以保存20个进程执行环境,保存策略为->同线程-同虚拟机-指定虚拟机中的进程PID-执行环境-绑定 执行环境句柄解析: 1.可以理解成一个空间可以与物理机进行交互,实现参数传递和调用CALL 2.每次调用都会获取一个全新的执行环境句柄(实现物理机中控多线程调用) 3.物理机中控在一个执行环境句柄只能同时一个线程执行,如果要多线程执行请获取多个执行环境句柄 4.此接口不适合多线程获取,请在初始化最开始把所需要的执行环境句柄的数量初始化好,方便物理机中控多线程中单独分别使用",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_CALLX64",
    "content": "【功能描述】 通过指定一个初进程(x64)的执行环境句柄来执行CALL 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 执行环境句柄解析: 1.可以理解成一个空间可以与物理机进行交互,实现参数传递和调用CALL 2.如果需要参数传递,请自行往excuteEnvAddr+0x8写参数(参数最大缓冲区为0x200字节),同时自己的汇编机器码要引入自己参数的地址",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_ShellCodeInitX86",
    "content": "【功能描述】 初始化获取一个某个进程(x86)的执行环境句柄 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 支持内置保存执行环境最多可以保存20个进程执行环境,保存策略为->同线程-同虚拟机-指定虚拟机中的进程PID-执行环境-绑定 执行环境句柄解析: 1.可以理解成一个空间可以与物理机进行交互,实现参数传递和调用CALL 2.每次调用都会获取一个全新的执行环境句柄(实现物理机中控多线程调用) 3.物理机中控在一个执行环境句柄只能同时一个线程执行,如果要多线程执行请获取多个执行环境句柄 4.此接口不适合多线程获取,请在初始化最开始把所需要的执行环境句柄的数量初始化好,方便物理机中控多线程中单独分别使用",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_RunShellCodeX86",
    "content": "【功能描述】 通过指定一个初进程(x86)的执行环境句柄来执行CALL 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 执行环境句柄解析: 1.可以理解成一个空间可以与物理机进行交互,实现参数传递和调用CALL 2.如果需要参数传递,请自行往excuteEnvAddr+0x8写参数(参数最大缓冲区为0x200字节),同时自己的汇编机器码要引入自己参数的地址",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_搜索特征码x86",
    "content": "【功能描述】 特征码搜索(X86)(指定模块名) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_搜索特征码x86Ex",
    "content": "【功能描述】 特征码搜索(X86)(指定开始地址和搜索大小) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_搜索特征码x64",
    "content": "【功能描述】 特征码搜索(X64)(指定模块名) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_搜索特征码x64Ex",
    "content": "【功能描述】 特征码搜索(X64)(指定开始地址和搜索大小) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_断开虚拟机",
    "content": "【功能描述】 卸载并关闭连接虚拟机 【备注】 与HCVMDMA_Init是一对接口 内部会自动调用HCEnv_UnLoadEx接口,使窗口序号和虚拟机进程断开绑定然后释放虚拟机相关资源 一旦调用,则虚拟机需要被关闭后开启而不是重启PID不能一样",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取截图环境",
    "content": "【功能描述】 初始化截图环境 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 小技巧: 1.初始化接口有根据不同虚拟机,失败概率不同,为了提高初始化成功率,可以尝试自启动任务管理器,让系统激活起来,初始化完成就可以把任务管理器关掉了 2.步骤:打开虚拟机-关联虚拟机-检查是否有管理器PID-开始初始化键鼠/截图环境-如果失败3次直接重启虚拟机 3.如图操作自启任务管理器就行 4.支持内置保存截图环境一个虚拟机固定一个,自动判断是否之前初始化过 如果有的虚拟机初始化句柄超时建议:",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_29",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_截图一次",
    "content": "【功能描述】 截图一次(获取一次虚拟机全屏数据到物理机) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_30",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_开启截图",
    "content": "【功能描述】 开启截图(内部会开启一条线程循环调用HCVMDMA_Capture) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_31",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_关闭截图",
    "content": "【功能描述】 关闭截图(内部会关闭之前开启的线程)和HCVMDMA_OpenCapture是一对接口 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_32",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取键鼠环境",
    "content": "【功能描述】 初始化键鼠环境 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 小技巧: 1.初始化接口有根据不同虚拟机,失败概率不同,为了提高初始化成功率,可以尝试自启动任务管理器,让系统激活起来,初始化完成就可以把任务管理器关掉了 2.步骤:打开虚拟机-关联虚拟机-检查是否有管理器PID-开始初始化键鼠/截图环境-如果失败3次直接重启虚拟机 3.如图操作自启任务管理器就行 4.支持内置保存键鼠环境一个虚拟机固定一个,自动判断是否之前初始化过 如果有的虚拟机初始化句柄超时建议:",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_33",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_鼠标移动",
    "content": "【功能描述】 鼠标移动(不包含轨迹) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_34",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_左键按下",
    "content": "【功能描述】 鼠标左键按下 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_35",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_左键弹起",
    "content": "【功能描述】 鼠标左键弹起 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_36",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_左键点击",
    "content": "【功能描述】 鼠标左键点击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_37",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_左键双击",
    "content": "【功能描述】 鼠标左键双击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_38",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_中键按下",
    "content": "【功能描述】 鼠标中键按下 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_39",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_中键弹起",
    "content": "【功能描述】 鼠标中键弹起 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_40",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_中键点击",
    "content": "【功能描述】 鼠标中键点击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_41",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_中键双击",
    "content": "【功能描述】 鼠标中键双击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_42",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_右键按下",
    "content": "【功能描述】 鼠标右键按下 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_43",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_右键弹起",
    "content": "【功能描述】 鼠标右键弹起 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_44",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_右键点击",
    "content": "【功能描述】 鼠标右键点击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_45",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_右键双击",
    "content": "【功能描述】 鼠标右键双击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_46",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_滚轮滚上",
    "content": "【功能描述】 鼠标滚轮滚上 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_47",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_滚轮滚下",
    "content": "【功能描述】 鼠标滚轮滚下 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_48",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_键盘按下",
    "content": "【功能描述】 键盘按下 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_49",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_键盘按上",
    "content": "【功能描述】 键盘弹起 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_50",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_键盘敲击",
    "content": "【功能描述】 键盘敲击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_51",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_发送文本Unicode",
    "content": "【功能描述】 发送unicode字符串 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_52",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_发送文本Ascii",
    "content": "【功能描述】 发送ascii字符串 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_53",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_GetPidList",
    "content": "【功能描述】 获取PID列表 【备注】 需要先初始化关联虚拟机HCVMDMA_Init C++解析获取案例: \\n最大51个数量存储量autojsonStr=HCEnv_GetRetJson(windowsIndex);if(jsonStr==NULL)returnERROR_获取数据失败;\\npid1,name1|pid2,name2|pid3,name3|vector<string>pidNameArray;Tool::HSplitStringA(jsonStr,pidNameArray,\\\"|\\\");if(pidNameArray.size()<=0)returnRET_失败;for(int index=0;index<pidSize;index++){\\npid1,name1，vector<string>proArray;Tool::HSplitStringA(pidNameArray[index]+\\\",\\\",proArray,\\\",\\\");if(proArray.size()<2)continue;if(atoi(proArray[0].c_str())==pid)returnRET_成功;\\n元素1就是PID元素2是进程名}returnRET_失败;\\n没找到",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_54",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_IsExistPid",
    "content": "【功能描述】 对应虚拟机中的进程PID是否存在 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/xuanlanguage/category_41",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "(B2)剑灵2台服 - HB2_GetPlayerInfo",
    "content": "【功能描述】 调用获取人物信息CALL 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"name\\\":\\\"Jack\\\",\\\"level\\\":26,\\\"curHp\\\":588,\\\"maxHp\\\":999,\\\"curMp\\\":255,\\\"maxMp\\\":666,\\\"gold\\\":99999,\\\"diamond\\\":999999}]}",
    "url": "/docs/xuanlanguage/category_42",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "(B2)剑灵2台服 - HB2_GetBagInfo",
    "content": "【功能描述】 调用获取背包信息CALL 【备注】 json: {\\\"error\\\":0,\\\"flag\\\":99,\\\"ret\\\":[{\\\"id\\\":1111,\\\"tId\\\":22222,\\\"dId\\\":33333,\\\"num\\\":588},{\\\"id\\\":1111,\\\"tId\\\":22222,\\\"dId\\\":33333,\\\"num\\\":588},{\\\"id\\\":1111,\\\"tId\\\":22222,\\\"dId\\\":33333,\\\"num\\\":588}]}",
    "url": "/docs/xuanlanguage/category_42",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "(B2)剑灵2台服 - HB2_GetShortCutInfo1",
    "content": "【功能描述】 调用获取快捷栏遍历信息CALL（前10个） 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"index\\\":0,\\\"id\\\":1111,\\\"bAct\\\":0},{\\\"index\\\":1,\\\"id\\\":2222,\\\"bAct\\\":1}]}",
    "url": "/docs/xuanlanguage/category_42",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "(B2)剑灵2台服 - HB2_GetShortCutInfo2",
    "content": "【功能描述】 调用获取快捷栏遍历信息CALL（后10个） 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"index\\\":0,\\\"id\\\":1111,\\\"bAct\\\":0},{\\\"index\\\":1,\\\"id\\\":2222,\\\"bAct\\\":1}]}",
    "url": "/docs/xuanlanguage/category_42",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "(B2)剑灵2台服 - HB2_GetPlayerXYZ",
    "content": "【功能描述】 调用获取人物坐标CALL 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"x\\\":125,\\\"y\\\":125,\\\"z\\\":125}]}",
    "url": "/docs/xuanlanguage/category_42",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "(B2)剑灵2台服 - HB2_GetPlayerCurMapId",
    "content": "【功能描述】 调用获取人物当前地图IDCALL 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"mapId\\\":1993}]}",
    "url": "/docs/xuanlanguage/category_42",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "(B2)剑灵2台服 - HB2_GetCurChapterTaskId",
    "content": "【功能描述】 调用遍历已结任务章节ID信息(主线+支线) 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"CTaskId\\\":1993,\\\"index\\\":1}]}",
    "url": "/docs/xuanlanguage/category_42",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "(B2)剑灵2台服 - HB2_GetAChapterTask",
    "content": "【功能描述】 调用遍历已结任务章节ID信息(主线+支线) 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"CTaskId\\\":1993,\\\"index\\\":1,\\\"curNum\\\":2},{\\\"CTaskId\\\":1998,\\\"index\\\":2,\\\"curNum\\\":2}]}",
    "url": "/docs/xuanlanguage/category_42",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "(B2)剑灵2台服 - HB2_PlayerIsMove",
    "content": "【功能描述】 调用人物是否移动CALL 【备注】 无",
    "url": "/docs/xuanlanguage/category_42",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "(B2)剑灵2台服 - HB2_IsAutoUseMed",
    "content": "【功能描述】 调用人物是否自动使用药品状态 【备注】 无",
    "url": "/docs/xuanlanguage/category_42",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "(B2)剑灵2台服 - HB2_Move",
    "content": "【功能描述】 调用移动CALL 【备注】 无",
    "url": "/docs/xuanlanguage/category_42",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "(B2)剑灵2台服 - HB2_GetHuaShen",
    "content": "【功能描述】 调用化身遍历CALL 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"id\\\":0,\\\"xLevel\\\":1111,\\\"type\\\":0},{\\\"id\\\":0,\\\"xLevel\\\":1111,\\\"type\\\":0}]} id:化身IDxLevel:化身星级type:化身品质0123依次递增+1白绿蓝...",
    "url": "/docs/xuanlanguage/category_42",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "(B2)剑灵2台服 - HB2_GetChongWu",
    "content": "【功能描述】 调用宠物遍历CALL 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"id\\\":0,\\\"xLevel\\\":1111,\\\"type\\\":0},{\\\"id\\\":0,\\\"xLevel\\\":1111,\\\"type\\\":0}]} id:宠物IDxLevel:宠物星级type:宠物品质0123依次递增+1白绿蓝...",
    "url": "/docs/xuanlanguage/category_42",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "(B2)剑灵2台服 - HB2_UseGoods",
    "content": "【功能描述】 调用使用物品CALL 【备注】 无",
    "url": "/docs/xuanlanguage/category_42",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "谷歌内置浏览器模块[GB] - HD内置浏览器_附加谷歌1",
    "content": "【功能描述】 附加内置浏览器，附加监听模式1 【备注】 必须游戏进程自带内置谷歌浏览器,才会附加模块成功 由于每个游戏不同,需要定制浏览器接口 当前默认的内置谷歌浏览器接口仅适合夜鸦",
    "url": "/docs/xuanlanguage/category_43",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "谷歌内置浏览器模块[GB] - HD内置浏览器_附加谷歌2",
    "content": "【功能描述】 附加内置浏览器，附加监听模式2 【备注】 必须游戏进程自带内置谷歌浏览器,才会附加模块成功 由于每个游戏不同,需要定制浏览器接口 当前默认的内置谷歌浏览器接口仅适合夜鸦",
    "url": "/docs/xuanlanguage/category_43",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "谷歌内置浏览器模块[GB] - HD内置浏览器_脱离谷歌",
    "content": "【功能描述】 脱离之前的内置浏览器 【备注】 必须游戏进程自带内置谷歌浏览器,才会附加模块成功",
    "url": "/docs/xuanlanguage/category_43",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "谷歌内置浏览器模块[GB] - HD内置浏览器_注入谷歌JS代码",
    "content": "【功能描述】 给内置浏览器注入JS代码 【备注】 必须游戏进程自带内置谷歌浏览器,才会附加模块成功",
    "url": "/docs/xuanlanguage/category_43",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "谷歌内置浏览器模块[GB] - HD内置浏览器_注入谷歌JS文件",
    "content": "【功能描述】 给内置浏览器注入指定文件中的JS代码 【备注】 必须游戏进程自带内置谷歌浏览器,才会附加模块成功",
    "url": "/docs/xuanlanguage/category_43",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "调试绘制模块(DS) - HD调试_设置颜色",
    "content": "【功能描述】 (用于调试)设置全局可视化标注颜色值 【备注】 颜色值是4字节分别对应XRGB如:0x00FF0000红色如:0x0000FF00绿色如:0x000000FF蓝色",
    "url": "/docs/xuanlanguage/category_44",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "调试绘制模块(DS) - HD调试_设置调试窗口跟随",
    "content": "【功能描述】 (用于调试)设置当前调试窗口跟随的进程信息",
    "url": "/docs/xuanlanguage/category_44",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "调试绘制模块(DS) - HD调试_标记窗口",
    "content": "【功能描述】 给指定窗口画边框或者填充矩形 【备注】 无",
    "url": "/docs/xuanlanguage/category_44",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "调试绘制模块(DS) - HD调试_捕捉异常调用堆栈",
    "content": "【功能描述】 开启/关闭捕捉异常 【备注】 无",
    "url": "/docs/xuanlanguage/category_44",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "调试绘制模块(DS) - HD调试_附加控制台",
    "content": "【功能描述】 附加控制台 【备注】 print fcout输入输出到控制台上显示注意:自行定时清空屏幕防止满屏卡主进程运行",
    "url": "/docs/xuanlanguage/category_44",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "全局资源设置模块(RES) - HCRES_SetResPath",
    "content": "【功能描述】 设置资源路径 【备注】 图片字库文件都在这个里面找",
    "url": "/docs/xuanlanguage/category_45",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "全局资源设置模块(RES) - HD资源_设置路径Ex",
    "content": "【功能描述】 设置资源路径 【备注】 图片字库文件都在这个里面找",
    "url": "/docs/xuanlanguage/category_45",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "全局资源设置模块(RES) - HCRES_SetLanguageResPath",
    "content": "【功能描述】 设置语言或者字体文件资源路径 【备注】 语言文件都在这个里面找",
    "url": "/docs/xuanlanguage/category_45",
    "source": "api_data_xuanlanguage.json",
    "type": "函数"
  },
  {
    "id": "explanation_1",
    "title": "基础说明 - HD简介",
    "content": "【功能描述】 教程以官网为准 后面会出帖子教程 供大家学习使用 官网: https://www.hdgdk.com HD【RPG引擎库】交流群(3群):882724064 1030698387 (有事请主动找群主和管理，群主和管理不会主动私聊任何人,请勿上当受骗！！！！) (有事请主动找群主和管理，群主和管理不会主动私聊任何人,请勿上当受骗！！！！) (有事请主动找群主和管理，群主和管理不会主动私聊任何人,请勿上当受骗！！！！) 功能: 1.自研驱动注入，模拟键鼠 ，读写内存相关操作，进程以及线程相关操作等. 2.自研接口注入模式框架. 3.目前支持 32 位/64位/ASCII/UNICODE(8个版本中控)<->32/64位 (目标程序) 4.还支持LUA编写,自定义模块,谷歌内置浏览器,主板机投屏,多线程框架模块,yolov5,等操作 5.支持易语言 C/C++ 火山 Python C# 炫语言 golong等语言（支持调用C++DLL的语言） 6.具体看对应的模块功能接口 7.支持win7/8/10/11系统 ============================================================= 一.【HD易语言基础课程】 https://www.bilibili.com/video/BV1UgJFz5EKN/?spm_id_from=333.1387.homepage.video_card.click .【HD易语言多线程框架实战课程】 https://www.bilibili.com/video/BV1UgJFz5EKN/?spm_id_from=333.1387.homepage.video_card.click 二.【HD火山基础课程】 https://www.bilibili.com/video/BV1iBftYoE5b/?spm_id_from=333.1387.homepage.video_card.click 三.【HD C++基础课程】 https://www.bilibili.com/video/BV1G9fnYeEEp/?spm_id_from=333.1387.homepage.video_card.click .【HD C++多线程框架实战课程】 https://www.bilibili.com/video/BV1G9fnYeEEp/?spm_id_from=333.1387.homepage.video_card.click .【HD C++ 夜鸦国际服实战课程】 https://www.bilibili.com/video/BV1Ei1sYsELz/?spm_id_from=333.1387.homepage.video_card.click 四.【HD Python基础课程】 https://www.bilibili.com/video/BV1rtRAYXEwQ/?spm_id_from=333.1387.homepage.video_card.click 五.【HD 炫语言基础课程】 https://www.bilibili.com/video/BV1LJXGYPEXy/?spm_id_from=333.1387.homepage.video_card.click https://www.bilibili.com/video/BV1UNqdYqEBQ/?spm_id_from=333.1387.homepage.video_card.click 六.【HD 综合工具使用教程】 https://www.bilibili.com/video/BV1nscbeVEfY/?spm_id_from=333.1387.homepage.video_card.click 七.【HD Yolov8综合工具使用教程】 https://www.bilibili.com/video/BV13c3vzfE2D/?spm_id_from=333.1387.homepage.video_card.click ============================================================= 【备注】 免责声明 一. 本软件完全出于个人兴趣爱好，由本人在业余时间开发，是一款安全，绿色，可靠的软件产品. 二. 利用本软件所做出的任何软件作品，和本人无关. 三. 本软件绝对不针对任何一款游戏或者游戏开发商，如果有人利用本软件开发非法游戏辅助，本人将保留追究其民事以及刑事责任的权利. 四. 因使用本软件而引致的任何意外、疏忽、合约毁坏、诽谤、版权或知识产权侵犯及其所造成的任何损失，本人概不负责，亦概不承担任何民事或刑事法律责任。 五. 当你第一次开始使用本人所提供的任何软件及资源的那一刻起就将被视为对本声明全部内容的认可。同时您必须认可上述免责条款，方可使用本软件及资源。如有任何异议，建议立刻删除本软件及资源并且停止使用. 六. 以上内容，本人保留最终解释权。",
    "url": "/docs/yiyuyan/category_1",
    "source": "api_data_yiyuyan.json",
    "type": "说明"
  },
  {
    "id": "explanation_2",
    "title": "基础说明 - HD返回值表",
    "content": "【功能描述】 接口返回值： 小于等于0 为错误代码 大于 0为成功 (驱动接口返回值在下面↓) #define RET_检查PID存在 8 #define RET_环境已卸载 7 #define RET_重连窗口序号不一致 6 #define RET_重连窗口 5 #define RET_状态变动 4 #define RET_暂停过 3 #define RET_结束 2 #define RET_成功 1 #define RET_失败 0 #define RET_真 1 #define RET_非 0 #define ERROR_未初始化全局环境 -1000 #define ERROR_未找到进程环境 -1001 #define ERROR_进程环境内存为NULL -1002 #define ERROR_获取CALL环境失败 -1003 #define ERROR_超时返回 -1004 #define ERROR_主线程调用超时返回 -1005 #define ERROR_数据异常 -1006 #define ERROR_参数错误 -1007 #define ERROR_未挂接主线程 -1008 #define ERROR_后台绑定句柄无效 -1009 #define ERROR_未绑定后台 -1010 #define ERROR_多开超出限制 -1011 #define ERROR_字符串为空 -1012 #define ERROR_地址为空 -1013 #define ERROR_未知错误 -1014 #define ERROR_远进程申请内存失败 -1015 #define ERROR_文件夹创建失败 -1016 #define ERROR_异步无法获取返回值 -1017 #define ERROR_语法错误 -1018 #define ERROR_申请内存失败 -1019 #define ERROR_创建线程失败 -1020 #define ERROR_缓冲区大小不足 -1021 #define ERROR_未初始化LUA -1022 #define ERROR_LUA状态机为NULL -1023 #define ERROR_未找到LUA函数 -1024 #define ERROR_返回值未知类型 -1025 #define ERROR_LUA线程标识符不符合 -1026 #define ERROR_模块获取失败 -1027 #define ERROR_地址不可读 -1028 #define ERROR_返回值为JSON -1029 #define ERROR_获取数据失败 -1030 #define ERROR_未初始化 -1031 #define ERROR_已经开启 -1032 #define ERROR_已经结束 -1033 #define ERROR_未开启 -1034 #define ERROR_未结束 -1035 #define ERROR_高宽为0 -1036 #define ERROR_数据为NULL -1037 #define ERROR_数据不符合要求 -1038 #define ERROR_文件打开失败 -1039 #define ERROR_打开失败 -1040 #define ERROR_解析失败 -1041 #define ERROR_无游戏类型 -1042 #define ERROR_HOOK失败 -1043 #define ERROR_UNHOOK失败 -1044 #define ERROR_功能失效 -1045 #define ERROR_无效PE文件格式 -1046 #define ERROR_未找到PE头 -1047 #define ERROR_重定位表失败 -1048 #define ERROR_未找到函数入口 -1049 #define ERROR_无法附加DLL -1050 #define ERROR_接口数量上限 -1051 #define ERROR_已经存在 -1052 #define ERROR_打开句柄失败 -1053 #define ERROR_未找到全局环境 -1054 #define ERROR_组件数量上限 -1055 #define ERROR_未找到组件接口 -1056 #define ERROR_接口类型不匹配 -1057 #define ERROR_组件无效 -1058 #define ERROR_接口地址无效 -1059 #define ERROR_生成密钥失败 -1060 #define ERROR_加密失败 -1061 #define ERROR_解密失败 -1062 #define ERROR_DLL中无此接口 -1063 #define ERROR_下载失败 -1064 #define ERROR_注册表操作失败 -1065 #define ERROR_路径获取失败 -1066 #define ERROR_提权失败 -1067 #define ERROR_驱动已安装 -1068 #define ERROR_HD驱动已安装无法安装HN驱动 -1069 #define ERROR_资源未找到 -1070 #define ERROR_资源加载失败 -1071 #define ERROR_提取资源失败 -1072 #define ERROR_未加载插件 -1073 #define ERROR_文件无法保存 -1074 #define ERROR_打开目录失败 -1075 #define ERROR_写入文件的字节大小不符合要求 -1076 #define ERROR_删除文件失败 -1077 #define ERROR_获取字符串失败 -1078 #define ERROR_获取注册表值失败 -1079 #define ERROR_类型错误 -1080 #define ERROR_参数不符合要求 -1081 #define ERROR_区域超出 -1082 #define ERROR_文件不存在 -1083 #define ERROR_创建文件失败 -1084 #define ERROR_文件读取失败 -1085 #define ERROR_与系统驱动通讯失败 -1086 #define ERROR_创建管道失败 -1087 #define ERROR_创建进程失败 -1088 #define ERROR_未找到相关字符串信息 -1089 #define ERROR_缓冲区大小不充足 -1090 #define ERROR_数据类型转换失败 -1091 #define ERROR_格式化字符串失败 -1092 #define ERROR_网络超时 -1093 #define ERROR_网络连接失败 -1094 #define ERROR_加载指定DLL失败 -1095 #define ERROR_解析字符串失败 -1096 #define ERROR_窗口大小变动导致数据不一致 -1097 #define ERROR_打开剪切板失败 -1098 #define ERROR_加锁失败 -1099 #define ERROR_获取剪切板数据失败 -1100 #define ERROR_版本号获取失败 -1101 #define ERROR_已经绑定其他设备 -1102 #define ERROR_已经达到最大在线数 -1103 #define ERROR_账号或密码为空 -1104 #define ERROR_验证失败 -1105 #define ERROR_打开进程失败 -1106 #define ERROR_进程位数不匹配 -1107 #define ERROR_添加进程环境失败 -1108 #define ERROR_定位特征地址失败 -1109 #define ERROR_寻找空白地址失败 -1110 #define ERROR_无操作类型 -1111 #define ERROR_无相关句柄 -1112 #define ERROR_无HDC句柄 -1113 #define ERROR_获取矩形大小失败 -1114 #define ERROR_拷贝数据失败 -1115 #define ERROR_无效句柄 -1116 #define ERROR_创建对象失败 -1117 #define ERROR_截图方式需要重开才能切换 -1118 #define ERROR_格式有误 -1119 #define ERROR_字库数据为空 -1120 #define ERROR_字库中未找到相应字 -1121 #define ERROR_大小计算为0 -1122 #define ERROR_容器大小不一致 -1123 #define ERROR_句柄无效 -1124 #define ERROR_获取PID无效 -1125 #define ERROR_获取大小失败 -1126 #define ERROR_获取失败 -1127 #define ERROR_未找到 -1128 #define ERROR_立即返回无效值 -1129 #define ERROR_未设置路径 -1130 #define ERROR_文件操作失败 -1131 #define ERROR_写入内存失败 -1132 #define ERROR_模块查找失败 -1133 #define ERROR_接口查找失败 -1134 #define ERROR_组件信息保存失败 -1135 #define ERROR_组件加载失败 -1136 #define ERROR_组件卸载失败 -1137 #define ERROR_组件不符合卸载要求 -1138 #define ERROR_进程环境句柄为NULL -1139 #define ERROR_未绑定PID -1140 #define ERROR_读取图片失败 -1141 #define ERROR_打开注册表失败 -1142 #define ERROR_获取注册表失败 -1143 #define ERROR_写内存失败 -1144 #define ERROR_清除缓存失败 -1145 #define ERROR_字体无宽度 -1146 #define ERROR_裁剪矩形数据失败 -1147 #define ERROR_图片无宽或高 -1148 #define ERROR_功能未开放 -1149 #define ERROR_模块信息获取失败 -1150 #define ERROR_未找到合适的JMP地址 -1151 #define ERROR_HOOK初始化失败 -1152 #define ERROR_无HOOK接口类型 -1153 #define ERROR_CALL类型不匹配 -1154 #define ERROR_创建通讯失败 -1155 #define ERROR_加载通讯失败 -1156 #define ERROR_数据格式错误 -1157 #define ERROR_地址失效 -1158 #define ERROR_坐标转换失败 -1159 #define ERROR_容器为空 -1160 #define ERROR_数据为空 -1161 #define ERROR_特征不符合 -1162 #define ERROR_范围未确定 -1163 #define ERROR_缓冲区不足 -1164 #define ERROR_此接口调试版本无效 -1165 #define ERROR_子图不在范围内 -1166 #define ERROR_插件数量上限 -1167 #define ERROR_API枚举失败 -1168 #define ERROR_无法定位模块 -1169 #define ERROR_无效HOOK地址 -1170 #define ERROR_无对应的HOOK函数 -1171 #define ERROR_破坏字节超过容量 -1172 #define ERROR_指定地址不适合HOOK -1173 #define ERROR_没有充足的HOOK大小 -1174 #define ERROR_设置回调地址失败 -1175 #define ERROR_API获取时间失败 -1176 #define ERROR_无效插件序号 -1177 #define ERROR_进程不存在 -1178 #define ERROR_未安装插件 -1179 #define ERROR_初始化通讯失败 -1180 #define ERROR_未初始化通讯序号 -1181 #define ERROR_当前线程字库为空 -1182 #define ERROR_线程数量超出限制 -1183 #define ERROR_字库序号不存在 -1184 #define ERROR_释放资源失败 -1185 #define ERROR_超出容量 -1186 #define ERROR_空模型 -1187 #define ERROR_环境序号不存在 -1188 #define ERROR_回调处理中 -1189 #define ERROR_无法操作绑定窗口 -1190 #define ERROR_接口已被移除 -1191 #define ERROR_不支持类型 -1192 #define ERROR_初始化失败 -1193 #define ERROR_环境被卸载 -1194 #define ERROR_进程已经关闭 -1195 #define ERROR_中控环境未初始化 -1196 #define ERROR_未加载HD驱动 -1197 #define ERROR_未绑定设备 -1198 #define ERROR_未找到进程 -1199 #define ERROR_进程PID不匹配 -1200 #define ERROR_前台模式无法后台 -1201 #define ERROR_JMP地址无效 -1202 #define ERROR_HOOK地址无效 -1203 #define ERROR_类型和HOOK地址不匹配 -1204 #define ERROR_不在HD多线程环境下 -1205 #define ERROR_未连接 -1206 #define ERROR_进程环境已被卸载 -1207 #define ERROR_安装插件失败 -1208 //检查是否安装了驱动 #define ERROR_安装驱动失败 -1209 //检查是否管理员或者杀毒或者关闭内核隔离 #define ERROR_加载环境失败 -1210 //检查账号是否欠费或者网络问题或者参数不符合要求 #define ERROR_初始化序号失败 -1211 //一般不会失败 #define ERROR_获取PID超时返回 -1212 //确定是否打开进程成功或者增大等待时间 #define ERROR_获取状态值20超时返回 -1213 //未安装插件或被拦截或增大等待时间 #define ERROR_获取状态值120超时返回 -1214 //未安装插件或被拦截或增大等待时间 #define ERROR_继续失败 -1215 //可能未初始化相关环境 一般不会失败 #define ERROR_当前进程插件序号不一致 -1216 //说明指定的PID进程绑定的窗口序号已经存在 与指定的序号不一致 调用HCInject_GetPreWinIndex 获取指定PID的绑定的窗口序号 #define ERROR_PID无效 -1217 #define ERROR_扩展序号不能用 -1218//扩展序号不能自己指定 #define ERROR_接口丢弃 -1219//老版本的接口丢弃 #define ERROR_序号超出限制 -1220 #define ERROR_已经重启 -1221 #define ERROR_登录中无法重启 -1222 #define ERROR_暂停中无法重启 -1223 #define ERROR_操作中无法重启 -1224 #define ERROR_强制关闭线程中无法发送 -1225 #define ERROR_卸载失败 -1226 #define ERROR_未完全开启 -1227 #define ERROR_逻辑异常 -1228 #define ERROR_无法连接VNC -1229 #define ERROR_未连接过VNC -1230 #define ERROR_未关联过VM -1231 #define ERROR_未获取截图环境 -1232 #define ERROR_未获取截图环境 -1232 #define ERROR_环境为NULL -1233 #define ERROR_区域无效 -1234 #define ERROR_继续当前操作 -1235 #define ERROR_加解密失败 -1236 #define ERROR_未安装驱动 -1237 #define ERROR_调试版本无法加解密 -1238 #define ERROR_截图缓存不存在 -1239//检查截图模式不对 或者 未开启截图 请用截图查看器查看是否截图缓存存在 【备注】 也可以可通过工具后台查看",
    "url": "/docs/yiyuyan/category_1",
    "source": "api_data_yiyuyan.json",
    "type": "说明"
  },
  {
    "id": "function_1",
    "title": "基础功能接口 - HD登录_获取版本号",
    "content": "【功能描述】 获取当前插件版本号 【备注】 无",
    "url": "/docs/yiyuyan/category_2",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "基础功能接口 - HCEnv_GetRetJson",
    "content": "【功能描述】 获取最近一次调用接口返回的json字符串 【备注】 并不是所有接口都返回json字符串 有一些接口返回单一的值就没必要调用这个接口 一些接口需要拿到字符串信息返回,那么这些字符串会存在json字符串中,需要自己调用此接口获取",
    "url": "/docs/yiyuyan/category_2",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "基础功能接口 - HD通用_获取最近返回值",
    "content": "【功能描述】 获取最近一次调用接口返回的值(用于检测是否有错) 【备注】 无",
    "url": "/docs/yiyuyan/category_2",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "基础功能接口 - HCEnv_GetErrorStr",
    "content": "【功能描述】 通过传递HD返回值获取字符串信息",
    "url": "/docs/yiyuyan/category_2",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "基础功能接口 - HD通用_获取最近API返回值",
    "content": "【功能描述】 获取最近一次调用WIN32API错误值 【备注】 无",
    "url": "/docs/yiyuyan/category_2",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "基础功能接口 - HD环境_获取最大多开数",
    "content": "【功能描述】 获取最大窗口数 【备注】 窗口序号不能大于等于这个返回值同时也不能小于0",
    "url": "/docs/yiyuyan/category_2",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "基础功能接口 - HD环境_获取插件执行环境信息",
    "content": "【功能描述】 获取通讯插件所绑定的目标进程的执行线程环境信息 【备注】 无",
    "url": "/docs/yiyuyan/category_2",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "基础功能接口 - HD通用_获取当前插件状态值",
    "content": "【功能描述】 获取当前环境搭建流程中的操作信息 【备注】 这个CALL返回HD状态信息可以确定当前处于那个步骤 typedefenumHD状态信息{HD状态信息_无=0,\\n0HD状态信息_DLL环境_加载全局成功=1,\\n1HD状态信息_DLL环境_加载全局失败=2,\\n2HD状态信息_DLL环境_窗口序号不符合=3,\\n3HD状态信息_DLL环境_进程不符合=4,\\n4HD状态信息_DLL环境_打开句柄失败=5,\\n5HD状态信息_DLL环境_获取内存失败=6,\\n6HD状态信息_DLL环境_等待继续=20,\\n20需要调用HCInject_Continue()HD状态信息_通讯环境_开始=21,\\n21HD状态信息_通讯环境_成功=22,\\n22HD状态信息_通讯环境_失败=23,\\n23HD状态信息_通讯环境_打开句柄失败=24,\\n24HD状态信息_通讯环境_获取内存失败=25,\\n25HD状态信息_接口映射_成功=40,\\n40自制通讯协议创建HD状态信息_接口映射_失败=41,\\n41HD状态信息_LUA_成功=60,\\n60可以执行LUAHD状态信息_LUA_失败=61,\\n61不可以执行LUAHD状态信息_数据库_开启=80,\\n80需要调用HHIT2_Load()的时候参数bOpenData设置为1HD状态信息_数据库_未开启=81,\\n81HD状态信息_数据库_开启失败=82,\\n82内置特征码有误联系管理员HD状态信息_验证_有误=100,\\n100联系管理员HD状态信息_监听_成功=120,\\n120【【【【大于等于120说明可以调用接口了】】】】HD状态信息_监听_失败=121,\\n121基本是不会出现这个错误HD状态信息_挂接主线_开启=140,\\n140调用HD状态信息_挂接主线_进入=141,\\n141准备挂接HD状态信息_挂接主线_尝试中=142,\\n142处于这个阶段需要用SetHwnd()暂时没用HD状态信息_挂接主线_成功=143,\\n143成功挂接所有关于可以主线程调用的接口的参数\\\"是否主线程调用\\\"生效HD状态信息_挂接主线_失败=144,\\n144HD状态信息_挂接主线_已经开启=145,\\n145已经开启了HD状态信息_加载_延迟=146,\\n2秒延迟HD状态信息_通讯加载失败=147\\n2秒延迟}HD状态信息;",
    "url": "/docs/yiyuyan/category_2",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "基础功能接口 - HD注入_设置插件信息",
    "content": "【功能描述】 设置插件信息 【备注】 易语言/火山/Python/炫语言/C#等语言:还需要拿到模块源码更改导入DLL名字需要与自定义DLL同名 内置版本名规则: \\n======64位#ifdef_WIN64#ifdef_UNICODE\\n64位W版本std::stringHCInject::g_发布版本DLL名字=\\\"hd64.dll\\\";std::stringHCInject::g_调试版本DLL名字=\\\"hddebug64.dll\\\";#else\\n64位A版本std::stringHCInject::g_发布版本DLL名字=\\\"hd64a.dll\\\";std::stringHCInject::g_调试版本DLL名字=\\\"hddebug64a.dll\\\";#endif\\n======32位#else#ifdef_UNICODE\\n32位W版本std::stringHCInject::g_发布版本DLL名字=\\\"hd.dll\\\";std::stringHCInject::g_调试版本DLL名字=\\\"hddebug.dll\\\";#else\\n32位A版本std::stringHCInject::g_发布版本DLL名字=\\\"hda.dll\\\";std::stringHCInject::g_调试版本DLL名字=\\\"hddebuga.dll\\\";#endif#endif\\n》》》》》》",
    "url": "/docs/yiyuyan/category_2",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "IP模块[IP] - HDIP_有米设置路径",
    "content": "【功能描述】 设置有米软件路径(EXE路径) 【备注】 软件找HD作者拿(魔改版)",
    "url": "/docs/yiyuyan/category_3",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "IP模块[IP] - HDIP_有米添加IP",
    "content": "【功能描述】 添加IP 【备注】 软件找HD作者拿(魔改版)",
    "url": "/docs/yiyuyan/category_3",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "IP模块[IP] - HDIP_有米添加进程",
    "content": "【功能描述】 添加代理的进程名 【备注】 软件找HD作者拿(魔改版)",
    "url": "/docs/yiyuyan/category_3",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "IP模块[IP] - HDIP_有米打开",
    "content": "【功能描述】 打开有米软件 【备注】 软件找HD作者拿(魔改版) 流程: 1.先设置路径 2.添加代理进程和IP 3.打开有米",
    "url": "/docs/yiyuyan/category_3",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "IP模块[IP] - HDIP_有米是否打开",
    "content": "【功能描述】 有米软件是否已经打开 【备注】 软件找HD作者拿(魔改版) 流程: 1.先设置路径 2.添加代理进程和IP 3.打开有米",
    "url": "/docs/yiyuyan/category_3",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "IP模块[IP] - HDIP_有米关闭",
    "content": "【功能描述】 关闭有米软件 【备注】 软件找HD作者拿(魔改版) 流程: 1.先设置路径 2.添加代理进程和IP 3.打开有米",
    "url": "/docs/yiyuyan/category_3",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "登录验证(Login) - HD登录_登录",
    "content": "【功能描述】 HD登录验证接口（强烈建议主线程中调用） 【备注】 1.验证接口,所有接口需要通过验证才能调用 2.如果自己写中控可以不用打开自动更新",
    "url": "/docs/yiyuyan/category_4",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "登录验证(Login) - HD登录_获取最近登录点数",
    "content": "【功能描述】 最近登录时候的点数 【备注】 无",
    "url": "/docs/yiyuyan/category_4",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "登录验证(Login) - HD登录_获取最近登录时间",
    "content": "【功能描述】 获取最近登录时间戳 【备注】 无",
    "url": "/docs/yiyuyan/category_4",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "登录验证(Login) - HD登录_获取点数",
    "content": "【功能描述】 获取点数 【备注】 无",
    "url": "/docs/yiyuyan/category_4",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "登录验证(Login) - HD登录_获取最大多开数",
    "content": "【功能描述】 获取最大多少开 【备注】 无",
    "url": "/docs/yiyuyan/category_4",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "安装插件扩展模块[ex] - HD扩展_安装插件1",
    "content": "【功能描述】 第一种通讯安装插件方式(安装插件再打开进程)如果使用HD多线程模块强烈建议在登录回调中使用 【备注】 可以参考表安装插件接口类型表 1.支持重连,重连的前提是不能被HCEnv_UnLoad卸载 回调解析: 打开回调openFun:可以参考表安装插件接口类型表 typedef__int64 (__stdcall* INSTALLPLUGint YPE)(int windowsIndex); 参数:windowsIndex:当前指定序号 说明:1.对于第一种方式打开回调不能为NULL,内部先安装插件再触发回调打开进程(在打开回调中可以手动或者自动打开进程1.如果是手动直接返回1就行或错误值表示中断操作2.如果是自动返回对应的PID或错误值表示中断操作)2.其他二种方式打开回调可以为NULL,表示进程已经打开了,不需要在回调中打开,此时使用指定的PID或者窗口句柄来安装插件,具体是PID还是句柄请查看安装插件接口类型表3.返回值根据当前的安装插件方式不同有不同的含义:（具体请看安装插件接口类型表和覆盖策略） 3.1方式二是通过PID安装插件那么返回值应该为打开进程的PID,并把传递的PID参数给覆盖了(请看PID覆盖策略),可以返回小于等于0的错误值或者不存在的PID,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.1.1PID覆盖策略 \\n1.如果指定的参数PID有效大于0并存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID\\n2.如果指定的参数PID有效大于0并存在同时打开回调返回的PID无效小于等于0不存在就用指定参数的PID\\n3.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID无效小于等于0不存在就直接返回错误\\n4.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID 3.2方式三是通过窗口句柄安装插件那么返回值应该为打开进程的句柄,并把传递的句柄参数给覆盖了(请看窗口句柄覆盖策略),可以返回小于等于0的错误值或者窗口句柄无效,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.2.1窗口句柄覆盖策略 \\n1.如果指定参数的窗口句柄有效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄\\n2.如果指定参数的窗口句柄有效同时打开回调返回的的句柄无效就用指定参数的句柄\\n3.如果指定参数的窗口句柄无效同时打开回调返回的的句柄无效就直接返回错误\\n4.如果指定参数的窗口句柄无效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄 检查回调checkFun: typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int prePid,int error); 参数:windowsIndex:当前指定序号preWindowsIndex:之前绑定的序号或者错误值(小于0)--来源HCInject_GetPreWinIndex返回prePid:之前绑定的序号对应的PID--来源HCInject_GetPid返回error:提示值 error==RET_重连窗口(5)----->返回值含义:(1重连直接进行加载环境0新窗口) error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的) 我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 error==RET_重连窗口序号不一致(6)----->返回值含义:(1重连并使用之前绑定的序号进行加载环境 0新窗口(需要用户在回调中把之前PID给关闭)) error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的) 我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 其他情况可以返回小于0的自定义值:表示直接中断安装插件流程,并返回对应的值(这个值只要小于0即可,可以作为自定义值) 说明: 1.如果指定的检查回调为NULL,当内部检查到是重连窗口的时候 2.如果发现序号不一致就会直接返回(ERROR_当前进程插件序号不一致-1216) 3.如果序号一致就直接加载环境并实现重连 几个核心的点归纳总结出来其实就能规避掉很多坑了比如1.没安装过插件的都不算重连窗口全部当新窗口处理会触发打开回调2.安装过插件的不管是卸载了环境还是崩溃或重启中控都算重连窗口不会触发打开回调会触发检查回调",
    "url": "/docs/yiyuyan/category_5",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "安装插件扩展模块[ex] - HD扩展_安装插件2",
    "content": "【功能描述】 第二种通讯安装插件方式(打开进程然后安装插件),通过pid如果使用HD多线程模块强烈建议在登录回调中使用 【备注】 可以参考表安装插件接口类型表 1.支持重连,重连的前提是不能被HCEnv_UnLoad卸载 回调解析: 打开回调openFun typedef__int64 (__stdcall* INSTALLPLUGint YPE)(int windowsIndex); 参数:windowsIndex:当前指定序号 说明:1.对于第一种方式打开回调不能为NULL,内部先安装插件再触发回调打开进程(在打开回调中可以手动或者自动打开进程1.如果是手动直接返回1就行或错误值表示中断操作2.如果是自动返回对应的PID或错误值表示中断操作)2.其他二种方式打开回调可以为NULL,表示进程已经打开了,不需要在回调中打开,此时使用指定的PID或者窗口句柄来安装插件,具体是PID还是句柄请查看安装插件接口类型表3.返回值根据当前的安装插件方式不同有不同的含义:（具体请看安装插件接口类型表和覆盖策略） 3.1方式二是通过PID安装插件那么返回值应该为打开进程的PID,并把传递的PID参数给覆盖了(请看PID覆盖策略),可以返回小于等于0的错误值或者不存在的PID,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.1.1PID覆盖策略 \\n1.如果指定的参数PID有效大于0并存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID\\n2.如果指定的参数PID有效大于0并存在同时打开回调返回的PID无效小于等于0不存在就用指定参数的PID\\n3.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID无效小于等于0不存在就直接返回错误\\n4.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID 3.2方式三是通过窗口句柄安装插件那么返回值应该为打开进程的句柄,并把传递的句柄参数给覆盖了(请看窗口句柄覆盖策略),可以返回小于等于0的错误值或者窗口句柄无效,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.2.1窗口句柄覆盖策略 \\n1.如果指定参数的窗口句柄有效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄\\n2.如果指定参数的窗口句柄有效同时打开回调返回的的句柄无效就用指定参数的句柄\\n3.如果指定参数的窗口句柄无效同时打开回调返回的的句柄无效就直接返回错误\\n4.如果指定参数的窗口句柄无效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄 检查回调checkFun: typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int prePid,int error); 参数:windowsIndex:当前指定序号preWindowsIndex:之前绑定的序号或者错误值(小于0)--来源HCInject_GetPreWinIndex返回prePid:之前绑定的序号对应的PID--来源HCInject_GetPid返回error:提示值 error==RET_重连窗口(5)----->返回值含义:(1重连直接进行加载环境0新窗口) error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的) 我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 error==RET_重连窗口序号不一致(6)----->返回值含义:(1重连并使用之前绑定的序号进行加载环境0新窗口(需要用户在回调中把之前PID给关闭)) 说明: 1.如果指定的检查回调为NULL,当内部检查到是重连窗口的时候 2.如果发现序号不一致就会直接返回(ERROR_当前进程插件序号不一致-1216) 3.如果序号一致就直接加载环境并实现重连 几个核心的点归纳总结出来其实就能规避掉很多坑了比如1.没安装过插件的都不算重连窗口全部当新窗口处理会触发打开回调2.安装过插件的不管是卸载了环境还是崩溃了中控都算重连窗口不会触发打开回调",
    "url": "/docs/yiyuyan/category_5",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "安装插件扩展模块[ex] - HD扩展_安装插件3",
    "content": "【功能描述】 第三种通讯安装插件方式(打开进程然后安装插件),通过窗口句柄如果使用HD多线程模块强烈建议在登录回调中使用 【备注】 可以参考表安装插件接口类型表 1.支持重连,重连的前提是不能被HCEnv_UnLoad卸载 回调解析: 打开回调openFun:可以参考表安装插件接口类型表 typedef__int64 (__stdcall* INSTALLPLUGint YPE)(int windowsIndex); 参数:windowsIndex:当前指定序号 说明:1.对于第一种方式打开回调不能为NULL,内部先安装插件再触发回调打开进程(在打开回调中可以手动或者自动打开进程1.如果是手动直接返回1就行或错误值表示中断操作2.如果是自动返回对应的PID或错误值表示中断操作)2.其他二种方式打开回调可以为NULL,表示进程已经打开了,不需要在回调中打开,此时使用指定的PID或者窗口句柄来安装插件,具体是PID还是句柄请查看安装插件接口类型表3.返回值根据当前的安装插件方式不同有不同的含义:（具体请看安装插件接口类型表和覆盖策略） 3.1方式二是通过PID安装插件那么返回值应该为打开进程的PID,并把传递的PID参数给覆盖了(请看PID覆盖策略),可以返回小于等于0的错误值或者不存在的PID,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.1.1PID覆盖策略 \\n1.如果指定的参数PID有效大于0并存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID\\n2.如果指定的参数PID有效大于0并存在同时打开回调返回的PID无效小于等于0不存在就用指定参数的PID\\n3.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID无效小于等于0不存在就直接返回错误\\n4.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID 3.2方式三是通过窗口句柄安装插件那么返回值应该为打开进程的句柄,并把传递的句柄参数给覆盖了(请看窗口句柄覆盖策略),可以返回小于等于0的错误值或者窗口句柄无效,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.2.1窗口句柄覆盖策略 \\n1.如果指定参数的窗口句柄有效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄\\n2.如果指定参数的窗口句柄有效同时打开回调返回的的句柄无效就用指定参数的句柄\\n3.如果指定参数的窗口句柄无效同时打开回调返回的的句柄无效就直接返回错误\\n4.如果指定参数的窗口句柄无效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄 检查回调checkFun: typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int prePid,int error); 参数:windowsIndex:当前指定序号preWindowsIndex:之前绑定的序号或者错误值(小于0)--来源HCInject_GetPreWinIndex返回prePid:之前绑定的序号对应的PID--来源HCInject_GetPid返回error:提示值 error==RET_重连窗口(5)----->返回值含义:(1重连直接进行加载环境0新窗口) error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的) 我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 error==RET_重连窗口序号不一致(6)----->返回值含义:(1重连并使用之前绑定的序号进行加载环境0新窗口(需要用户在回调中把之前PID给关闭)) 说明: 1.如果指定的检查回调为NULL,当内部检查到是重连窗口的时候 2.如果发现序号不一致就会直接返回(ERROR_当前进程插件序号不一致-1216) 3.如果序号一致就直接加载环境并实现重连 几个核心的点归纳总结出来其实就能规避掉很多坑了比如1.没安装过插件的都不算重连窗口全部当新窗口处理会触发打开回调2.安装过插件的不管是卸载了环境还是崩溃了中控都算重连窗口不会触发打开回调",
    "url": "/docs/yiyuyan/category_5",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "安装插件扩展模块[ex] - HD扩展_安装插件VM",
    "content": "【功能描述】 打开后安装通过PID针对虚拟机内部自动关联虚拟机如果使用HD多线程模块强烈建议在登录回调中使用 【备注】 可以参考表安装插件接口类型表 1.调用之前记得打开服务器HCVMDMA_StartServer并确定正确打开HCVMDMA_ServerIsStart 2.其他规则和前3种安装插件方式一致 3.支持重连,重连的前提是不能被HCEnv_UnLoad卸载 回调解析: 打开回调openFun:可以参考表安装插件接口类型表 typedef__int64 (__stdcall* INSTALLPLUGint YPE)(int windowsIndex); 参数:windowsIndex:当前指定序号 说明:1.对于第一种方式打开回调不能为NULL,内部先安装插件再触发回调打开进程(在打开回调中可以手动或者自动打开进程1.如果是手动直接返回1就行或错误值表示中断操作2.如果是自动返回对应的PID或错误值表示中断操作)2.其他二种方式打开回调可以为NULL,表示进程已经打开了,不需要在回调中打开,此时使用指定的PID或者窗口句柄来安装插件,具体是PID还是句柄请查看安装插件接口类型表3.返回值根据当前的安装插件方式不同有不同的含义:（具体请看安装插件接口类型表和覆盖策略） 3.1方式二是通过PID安装插件那么返回值应该为打开进程的PID,并把传递的PID参数给覆盖了(请看PID覆盖策略),可以返回小于等于0的错误值或者不存在的PID,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.1.1PID覆盖策略 \\n1.如果指定的参数PID有效大于0并存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID\\n2.如果指定的参数PID有效大于0并存在同时打开回调返回的PID无效小于等于0不存在就用指定参数的PID\\n3.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID无效小于等于0不存在就直接返回错误\\n4.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID 3.2方式三是通过窗口句柄安装插件那么返回值应该为打开进程的句柄,并把传递的句柄参数给覆盖了(请看窗口句柄覆盖策略),可以返回小于等于0的错误值或者窗口句柄无效,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。 3.2.1窗口句柄覆盖策略 \\n1.如果指定参数的窗口句柄有效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄\\n2.如果指定参数的窗口句柄有效同时打开回调返回的的句柄无效就用指定参数的句柄\\n3.如果指定参数的窗口句柄无效同时打开回调返回的的句柄无效就直接返回错误\\n4.如果指定参数的窗口句柄无效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄 检查回调checkFun: typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int prePid,int error); 参数:windowsIndex:当前指定序号preWindowsIndex:之前绑定的序号或者错误值(小于0)--来源HCInject_GetPreWinIndex返回prePid:之前绑定的序号对应的PID--来源HCInject_GetPid返回error:提示值 error==RET_重连窗口(5)----->返回值含义:(1重连直接进行加载环境0新窗口) error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的) 我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 error==RET_重连窗口序号不一致(6)----->返回值含义:(1重连并使用之前绑定的序号进行加载环境0新窗口(需要用户在回调中把之前PID给关闭)) 说明: 1.如果指定的检查回调为NULL,当内部检查到是重连窗口的时候 2.如果发现序号不一致就会直接返回(ERROR_当前进程插件序号不一致-1216) 3.如果序号一致就直接加载环境并实现重连 几个核心的点归纳总结出来其实就能规避掉很多坑了比如1.没安装过插件的都不算重连窗口全部当新窗口处理会触发打开回调2.安装过插件的不管是卸载了环境还是崩溃了中控都算重连窗口不会触发打开回调",
    "url": "/docs/yiyuyan/category_5",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "环境初始化模块(Inject) - HD通讯_初始化",
    "content": "【功能描述】 初始化插件环境 【备注】 每次打开游戏都需要先初始化一次 不要多次初始化 该接口还会把当前全局进程位数HCEnv_SetProcessType与当前窗口序号进程绑定,省去了切换进程位数的操作,如果不绑定可能会返回-1107(ERROR_进程位数不匹配)",
    "url": "/docs/yiyuyan/category_6",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "环境初始化模块(Inject) - HD通讯_初始化Ex",
    "content": "【功能描述】 初始化插件环境 【备注】 每次打开游戏都需要先初始化一次 不要多次初始化 如果不需要用LUA来初始化自己的数据,可以直接使用HCInject_Init 该接口还会把当前全局进程位数HCEnv_SetProcessType与当前窗口序号进程绑定,省去了切换进程位数的操作,如果不绑定可能会返回-1107(ERROR_进程位数不匹配)",
    "url": "/docs/yiyuyan/category_6",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "环境初始化模块(Inject) - HD通讯_初始化Exx",
    "content": "【功能描述】 初始化插件环境 【备注】 每次打开游戏都需要先初始化一次 不要多次初始化 如果不需要用LUA来初始化自己的数据或者预加载DLL,可以直接使用HCInject_Init 该接口还会把当前全局进程位数HCEnv_SetProcessType与当前窗口序号进程绑定,省去了切换进程位数的操作,如果不绑定可能会返回-1107(ERROR_进程位数不匹配)",
    "url": "/docs/yiyuyan/category_6",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "环境初始化模块(Inject) - HD通讯_获取PID",
    "content": "【功能描述】 获取打开的进程PID 【备注】 调用这个接口之前必须保证插件已经加载才会获取PID",
    "url": "/docs/yiyuyan/category_6",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "环境初始化模块(Inject) - HD通讯_获取之前PID",
    "content": "【功能描述】 获取打开的进程之前的PID(可以用于重连) 【备注】 当我们在调试的时候中控如果崩了,如果此时插件还在游戏进程中执行,那么可以当打开中控的时候直接获取PID进行通讯,而不是调用初始化之类的操作",
    "url": "/docs/yiyuyan/category_6",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "环境初始化模块(Inject) - HD通讯_获取绑定窗口序号",
    "content": "【功能描述】 通过进程PID尝试拿到绑定的窗口序号 【备注】 返回如果大于等于0的值表示之前进程绑定的窗口序号 没有进程PID返回-1178 没有绑定过返回-1179",
    "url": "/docs/yiyuyan/category_6",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "环境初始化模块(Inject) - HCInject_GetPreWinIndexEx",
    "content": "【功能描述】 通过进程PID尝试拿到绑定的窗口序号 【备注】 返回如果大于等于0的值表示之前进程绑定的窗口序号 没有进程PID返回-1178 没有绑定过返回-1179",
    "url": "/docs/yiyuyan/category_6",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "环境初始化模块(Inject) - HD通讯_获取窗口句柄",
    "content": "【功能描述】 获取窗口句柄,内部是通过PID获取窗口句柄需要先安装好插件到目标进程 【备注】 内部是通过HCWIN_EnumWindowByProcessId获取",
    "url": "/docs/yiyuyan/category_6",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "环境初始化模块(Inject) - HD通讯_获取窗口句柄Ex",
    "content": "【功能描述】 获取窗口句柄(需要内置,一般不需要调用这个获取句柄),如果需要通过PID获取句柄请调用HCInject_GetHwnd 【备注】 这个接口和内置的游戏接口有关,需要搭建完通讯才能调用 并不是一定获取到 如果要获取进程句柄还需要自行获取,除非内置了游戏数据",
    "url": "/docs/yiyuyan/category_6",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "环境初始化模块(Inject) - HD通讯_继续",
    "content": "【功能描述】 继续环境加载操作 【备注】 当我们调用了HCEnv_Load后需要调用这个接口来验证",
    "url": "/docs/yiyuyan/category_6",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "环境初始化模块(Inject) - HD通讯_存数据",
    "content": "【功能描述】 存自定义二进制数据 【备注】 无",
    "url": "/docs/yiyuyan/category_6",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "环境初始化模块(Inject) - HD通讯_取数据",
    "content": "【功能描述】 取自定义二进制数据 【备注】 取的数据就是用HCInject_SetData接口存的数据",
    "url": "/docs/yiyuyan/category_6",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "通讯环境模块(Env) - HD环境_初始化",
    "content": "【功能描述】 HD插件环境加载(初始化中控环境) 【备注】 中控初始化开始就要调用,仅仅一次",
    "url": "/docs/yiyuyan/category_7",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "通讯环境模块(Env) - HD环境_初始化Ex",
    "content": "【功能描述】 HD插件环境加载(初始化中控环境)(扩展版本)最新版本一般不用了 【备注】 中控初始化开始就要调用,仅仅一次",
    "url": "/docs/yiyuyan/category_7",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "通讯环境模块(Env) - HD环境_加载窗口",
    "content": "【功能描述】 HD插件环境加载 【备注】 调用这个接口需要先调用环境初始化模块中的初始化接口 每次打开进程后都要调用",
    "url": "/docs/yiyuyan/category_7",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "通讯环境模块(Env) - HD环境_加载窗口Ex",
    "content": "【功能描述】 HD插件环境加载(扩展版本),涉及到回调 【备注】 调用这个接口需要先调用环境初始化模块中的初始化接口 每次打开进程后都要调用",
    "url": "/docs/yiyuyan/category_7",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "通讯环境模块(Env) - HD环境_卸载窗口",
    "content": "【功能描述】 HD插件环境卸载 【备注】 调用这个接口需要先调用环境初始化模块中的初始化接口 进程关闭一定要记得卸载窗口序号对应的窗口环境,以便于下次窗口序号使用 1.没安装过插件的都不算重连窗口全部当新窗口处理 2.安装过插件的不管卸载环境还是崩溃或者重启窗口都可以重连窗口一个序号只能绑定到一个窗口操作",
    "url": "/docs/yiyuyan/category_7",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "通讯环境模块(Env) - HD环境_卸载窗口Ex",
    "content": "【功能描述】 HD插件环境卸载(扩展版本) 【备注】 调用这个接口需要先调用环境初始化模块中的初始化接口 进程关闭一定要记得卸载窗口序号对应的窗口环境,以便于下次窗口序号使用 1.没安装过插件的都不算重连窗口全部当新窗口处理 2.安装过插件的不管卸载环境还是崩溃或者重启窗口都可以重连窗口一个序号只能绑定到一个窗口操作",
    "url": "/docs/yiyuyan/category_7",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "通讯环境模块(Env) - HDEnv_GetWinExIndex",
    "content": "【功能描述】 获取副窗口序号 【备注】 这个副窗口序号可以用于登录器的绑定和操作,相当于窗口序号的一个助手,做一些额外的事情相当于一个窗口序号可以操作2个进程如:窗口序号1那么他返回的窗口扩展序号就是1+31也就是32序号",
    "url": "/docs/yiyuyan/category_7",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "通讯环境模块(Env) - HDEnv_GetGlobalWinExIndex",
    "content": "【功能描述】 获取全局副窗口序号,这是一个全局的序号 【备注】 一个中控仅有一个计算方式:0+31也就是这个全局序号为31序号从0开始用途:给当前中控分配一个助手,来控制一个进程来辅助中控做一些事情",
    "url": "/docs/yiyuyan/category_7",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "通讯环境模块(Env) - HD环境_附加心跳",
    "content": "【功能描述】 给中控附加心跳 【备注】 检测主线程心跳 如果需要检测主线程心跳是否卡住,请记得先HOOK主线程接口HC_HookMaint hread 设置心跳回调函数类型 typedef__int32 (* HeartFunType)(__int32 窗口索引,__int32 type);回调函数返回值:0不重置之前的记录1重置之前的记录(一般重新开启新进程会设置为1) \\n0.正常心跳进程存在的情况下会触发\\n1.通讯崩溃/关闭等等原因导致进程不存在->重启窗口\\n2.主线程崩溃/关闭/未响应/目标进程卡死原因导致进程不存在/存在->强制关闭->重启窗口设置挂接主线程\\n2.1.附加心跳的时候可以检查主线程的状态(游戏/目标)\\n2.2.后面的内存操作可以主线程调用\\n2.3.注意:附加心跳的时候设置的检查时间一定要大于安装插件到挂接主线程的时间\\n3.卡屏崩溃/关闭/区域图像卡死了原因导致进程不存在/存在->强制关闭->重启窗口设置屏幕检查范围\\n6.1+2+3",
    "url": "/docs/yiyuyan/category_7",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "通讯环境模块(Env) - HCEnv_SetWindowsSortInfo",
    "content": "【功能描述】 设置窗口排序信息",
    "url": "/docs/yiyuyan/category_7",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "通讯环境模块(Env) - HD环境_设置卡屏检查信息",
    "content": "【功能描述】 当我们心跳检测指定了3或者6需要设置卡屏范围和卡屏检测次数当大于这个次数就调用回调",
    "url": "/docs/yiyuyan/category_7",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "通讯环境模块(Env) - HD环境_脱离心跳",
    "content": "【功能描述】 脱离中控附加的心跳检测 【备注】 脱离会堵塞直到脱离成功一般中控进程结果关闭前调用",
    "url": "/docs/yiyuyan/category_7",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "通讯环境模块(Env) - HD环境_调试模式",
    "content": "【功能描述】 设置导入接口为调试模式 【备注】 中控初始化开始就可以调用,仅仅一次 发布版本不需要调用此接口,默认为发布版本",
    "url": "/docs/yiyuyan/category_7",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "通讯环境模块(Env) - HD环境_开启文件提示",
    "content": "【功能描述】 设置是否打开文件提示窗口 【备注】 当HD内部导致中控关闭或者插件失效会一文件形式提示信息",
    "url": "/docs/yiyuyan/category_7",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "通讯环境模块(Env) - HD环境_添加线程",
    "content": "【功能描述】 添加线程环境 【备注】 这个接口用来测试用的,开发者一般用不到",
    "url": "/docs/yiyuyan/category_7",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "通讯环境模块(Env) - HD环境_测试通讯值",
    "content": "【功能描述】 测试是否通讯成功,返回单一值 【备注】 这个接口用来测试是否环境搭建成功",
    "url": "/docs/yiyuyan/category_7",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "通讯环境模块(Env) - HCEnv_TestCALL_RetArray",
    "content": "【功能描述】 测试是否通讯成功,返回json字符串 【备注】 这个接口用来测试是否环境搭建成功",
    "url": "/docs/yiyuyan/category_7",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "通讯环境模块(Env) - HCEnv_TestCALL_RetValueEx",
    "content": "【功能描述】 测试是否通讯成功,返回单一值 【备注】 这个接口用来测试是否环境搭建成功",
    "url": "/docs/yiyuyan/category_7",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "通讯环境模块(Env) - HD环境_测试通讯字符串Ex",
    "content": "【功能描述】 测试是否通讯成功,返回json字符串 【备注】 这个接口用来测试是否环境搭建成功",
    "url": "/docs/yiyuyan/category_7",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "通讯环境模块(Env) - HD环境_设置目标进程位数",
    "content": "【功能描述】 设置目标进程位数 【备注】 该接口是全局设置,也就是设置了一次,接下来的所有进程都是该位数,可以多次调用切换进程位数,建议使用HCEnv_SetProcessTypeEx这个扩展版本 如果使用了HDEX_InstallPlugin1HDEX_InstallPlugin2HDEX_InstallPlugin3这些接口可以不用调用这个接口设置目标进程位数 如果是自定义通讯流程就需要自己设置后然后初始化序号进行通讯绑定",
    "url": "/docs/yiyuyan/category_7",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "通讯环境模块(Env) - HD环境_设置目标进程位数Ex",
    "content": "【功能描述】 指定某个序号绑定的进程位数 【备注】 如果使用了HDEX_InstallPlugin1HDEX_InstallPlugin2HDEX_InstallPlugin3这些接口可以不用调用这个接口设置目标进程位数 如果是自定义通讯流程就需要自己设置后然后初始化序号进行通讯绑定",
    "url": "/docs/yiyuyan/category_7",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "通讯环境模块(Env) - HD环境_设置中控事件处理回调函数",
    "content": "【功能描述】 设置中控事件处理回调函数 【备注】 这个回调函数作用于当自定义模块通知中控的时候 中控事件处理回调函数接口类型: typedef__int32 (__stdcall* HandleEventFunType)(__int32 窗口序号,__int32 插件序号,HDHandleEventInfoInfo); HDHandleEventInfo结构体: typedefstructHDHandleEventInfo\\n处理事件{__int32 m_callType;\\n自定义HDValuem_call;HDValuem_rcx;HDValuem_rdx;HDValuem_r8;HDValuem_r9;HDValuem_lparam5;HDValuem_lparam6;HDValuem_lparam7;HDValuem_lparam8;HDValuem_value;HDValuem_size;charm_buffer[MAX_PATH];charm_buffer2[MAX_PATH];HDValue* m_pRetValue;\\n值单独char* m_pRetJson;\\n字符串返回}HDHandleEventInfo; 代码案例: __int32 HCLogin::HandleEvent(__int32 窗口序号,__int32 插件序号,HDHandleEventInfoInfo){HDbgPrint f_Normal(\\\"处理接受事件->窗口序号:%dcallType:%dbuffer1:%sbuffer2:%scall:%llXrcx:%llXrdx:%llX\\\",窗口序号,Info.m_callType,Info.m_buffer,Info.m_buffer2,Info.m_call,Info.m_rcx,Info.m_rdx);if(Info.m_callType==1){* Info.m_pRetValue=999;autoret=HCMKB_UnBind(窗口序号);HDbgPrint f_Normal(\\\"解绑后台ret:%d\\\",ret);return8;}elseif(Info.m_callType==2){\\n处理逻辑* Info.m_pRetValue=123;sprint f_s(Info.m_pRetJson,1024* 10,\\\"%s\\\",\\\"我是中控\\\");\\n672637autoret=HCMKB_Bind(窗口序号,Info.m_call,\\\"1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|0|1|\\\");HDbgPrint f_Normal(\\\"绑定后台ret:%d\\\",ret);if(ret==1){Sleep(1000);ret=HCMKB_MoveTo(窗口序号,672,610,0);HDbgPrint f_Normal(\\\"模拟移动一次->672610ret:%d\\\",ret);ret=HCMKB_LeftClick(窗口序号);HDbgPrint f_Normal(\\\"模拟点击一次->ret:%d\\\",ret);}return1024* 10;\\n大于8认为是字符串}* Info.m_pRetValue=1;return8;}",
    "url": "/docs/yiyuyan/category_7",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "通讯环境模块(Env) - HCEnv_SetShutDownCallBack",
    "content": "【功能描述】 设置关闭回调函数(处理HD功能失效,内部自动关闭中控前的操作) 【备注】 当HD出现异常或者失效或者网络验证出现断线,会在自动关闭自身在期间会先调用这个回调(这个回调自己做好关闭前处理工作)然后会自动调用微软API接口ExitProcess();结束自身 在这个回调用户可以自行处理自己的业务逻辑 1.资源清理逻辑 2.接口释放逻辑 3.自启逻辑 4.自定义处理逻辑 回调函数接口类型: typedef__int32 (__stdcall* ShutDownEventFunType)(__int32 code); code:错误代码",
    "url": "/docs/yiyuyan/category_7",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "通讯环境模块(Env) - HCEnv_SetPidCheckBack",
    "content": "【功能描述】 设置PID检查回调(内部检查PID不存在会触发这个回调) 【备注】 1.这是设置全局PID检查回调 2.内部检查PID不存在会触发这个回调 3.如果没有调用此接口设置全局PID检查回调,那么对于4种安装插件方式中,当内部检查不到PID存在也会触发检查回调并传递给回调参数窗口序号:0之前窗口序号:0检查PID:pid提示值:8 回调函数接口类型: typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int checkPid,int error); windowsIndex:窗口序号 preWindowsIndex:窗口序号 checkPid:当前检查的PID error:传递8表示需要检查PID",
    "url": "/docs/yiyuyan/category_7",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "通讯环境模块(Env) - HD环境_设置通讯检测间隔",
    "content": "【功能描述】 设置通讯检测间隔毫秒 【备注】 1.值越小响应越快,随之带来的效率更高但是会导致CPU利用率变高2.值的大小根据当前的项目指定,对于一直要实时响应的最好小点",
    "url": "/docs/yiyuyan/category_7",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "通讯环境模块(Env) - HD环境_设置回调响应间隔",
    "content": "【功能描述】 设置回调响应毫秒 【备注】 1.值越小响应越快,随之带来的效率更高但是会导致CPU利用率变高2.值的大小根据当前的项目指定,对于一直要实时响应的最好小点",
    "url": "/docs/yiyuyan/category_7",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "通讯环境模块(Env) - HD环境_强制结束线程",
    "content": "【功能描述】 强制结束当前线程(可以在卸载环境后调用) 【备注】 强制结束当前线程内部会对锁操作循环拿到锁才会强制关闭并返回成功此接口小心使用1.不到万不得已不要强制关闭线程(因为强制关闭线程不管在任何时候都有可能造成不可能预计的BUG)2.调用此接口的线程不要和结束的线程是同一个(虽然内部有检查)3.该接口如果参数:是否操作锁为真,那么会堵塞,直到拿到锁权限后,才会强制关闭线程,然后解锁(防止死锁).",
    "url": "/docs/yiyuyan/category_7",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "通讯环境模块(Env) - HD环境_强制结束线程Ex",
    "content": "【功能描述】 强制结束当前线程(可以在卸载环境后调用) 【备注】 强制结束当前线程内部会对锁操作循环拿到锁才会强制关闭并返回成功此接口小心使用1.不到万不得已不要强制关闭线程(因为强制关闭线程不管在任何时候都有可能造成不可能预计的BUG)2.调用此接口的线程不要和结束的线程是同一个(虽然内部有检查)3.该接口如果参数:是否操作锁为真,那么会堵塞,直到拿到锁权限后,才会强制关闭线程,然后解锁(防止死锁).",
    "url": "/docs/yiyuyan/category_7",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_29",
    "title": "通讯环境模块(Env) - HD环境_关闭绑定进程",
    "content": "【功能描述】 关闭绑定的目标窗口 【备注】 内部实现可能是正常关闭也可能是强制关闭 至于是哪一种会根据实际情况动态调用",
    "url": "/docs/yiyuyan/category_7",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "多线程模块[MT] - HD多线程_初始化流程回调",
    "content": "【功能描述】 初始化多线程设置相关流程回调 【备注】 1.普通回调1参数windowsIndex:代表的是窗口序号也是主序号 2.每个回调参数的函数类型不一样,注意对应 回调触发顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->结束回调 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/yiyuyan/category_8",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "多线程模块[MT] - HD多线程_初始化流程回调Ex",
    "content": "【功能描述】 初始化多线程设置相关流程回调可以绑定一个全局参数 【备注】 1.普通回调1参数windowsIndex:代表的是窗口序号也是主序号 2.每个回调参数的函数类型不一样,注意对应 回调触发顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->结束回调 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调EXtypedef__int64 (__stdcall* UIFUNTYPEEX)(__int32 windowsIndex,char* stepText,void* lparam,BOOL m_end1,BOOL m_pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 lparam:HCMT_InitProcessEx绑定一个全局参数,一般我们指定为一个UI对象地址,这个回调可以拿到这个地址 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/yiyuyan/category_8",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "多线程模块[MT] - HD多线程_初始化操作回调",
    "content": "【功能描述】 初始化多线程结束/暂停/恢复状态的操作回调 【备注】 1.仅仅对于这3个回调而言普通回调2参数index:大于多开限制数量,就是副序号;小于就是主序号(也是窗口序号);计算公式:if(index>=多开限制数)主序号=index-多开限制数; \\n(index>=多开环境数量)?(index-多开环境数量):(index)2.其他接口的windowsIndex就代表的是窗口序号也是主序号3.多开限制数量最大常量为31,请自行在程序里面定义 4.多开限制数量用HCEnv_GetMaxWindowNum返回一个常数,可以自己写成一个常量 回调触发顺序: 结束窗口操作:endBindCallBack并传递对应的线程序号(线程序号可能是主序号也就是窗口序号,也有可能是副序号) 暂停窗口操作:pauseBindCallBack并传递对应的线程序号(线程序号可能是主序号也就是窗口序号,也有可能是副序号) 恢复窗口操作:recoverBindCallBack并传递对应的线程序号(线程序号可能是主序号也就是窗口序号,也有可能是副序号) 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/yiyuyan/category_8",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "多线程模块[MT] - HD多线程_注册消息回调",
    "content": "【功能描述】 注册窗口消息 【备注】 1.通过HCMT_MsgSend/HCMT_MsgPost来触发回调 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/yiyuyan/category_8",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "多线程模块[MT] - HD多线程_同步发送消息",
    "content": "【功能描述】 发送消息(同步) 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/yiyuyan/category_8",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "多线程模块[MT] - HD多线程_异步发送消息",
    "content": "【功能描述】 发送消息(异步) 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 参数回调函数类型: ------------------------------------------------------------------------------------普通回调1 typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex); windowsIndex:窗口序号 ------------------------------------------------------------------------------------普通回调2 typedef__int64 (__stdcall* FUNTYPE)(__int32 index); index:窗口序号/主序号/副序号 ------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2); windowsIndex:窗口序号 stepText:日志信息/操作信息 end1:主执行线程的结束标志状态 pause1:主执行线程的暂停标志状态 threadState1:主执行线程的线程操作状态 end2:副线程的结束标志状态 pause2:副线程的暂停标志状态 threadState2:副线程的线程操作状态 ------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam); wparam:自定义参数1 lparam:自定义参数2",
    "url": "/docs/yiyuyan/category_8",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "多线程模块[MT] - HD多线程_开启窗口Msg",
    "content": "【功能描述】 通过消息开启窗口操作 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.开启成功后会相应触发对应设置的回调函数 3.顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 停止窗口:结束绑定回调->结束回调",
    "url": "/docs/yiyuyan/category_8",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "多线程模块[MT] - HD多线程_停止窗口Msg",
    "content": "【功能描述】 通过消息停止窗口操作 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.开启成功后会相应触发对应设置的回调函数 3.顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 停止窗口:结束绑定回调->结束回调",
    "url": "/docs/yiyuyan/category_8",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "多线程模块[MT] - HD多线程_重启窗口Msg",
    "content": "【功能描述】 通过消息重启窗口操作 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.开启成功后会相应触发对应设置的回调函数 3.顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 停止窗口:结束绑定回调->结束回调",
    "url": "/docs/yiyuyan/category_8",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "多线程模块[MT] - HD多线程_重启窗口MsgEx",
    "content": "【功能描述】 通过消息重启窗口操作(扩展版本) 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.开启成功后会相应触发对应设置的回调函数 3.顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 停止窗口:结束绑定回调->结束回调",
    "url": "/docs/yiyuyan/category_8",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "多线程模块[MT] - HD多线程_更新UI",
    "content": "【功能描述】 通过消息触发UI回调,并传递线程状态信息和日志操作信息给UI回调 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
    "url": "/docs/yiyuyan/category_8",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "多线程模块[MT] - HD多线程_发送文本",
    "content": "【功能描述】 通过消息触发UI回调,并传递线程状态信息和日志操作信息给UI回调 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
    "url": "/docs/yiyuyan/category_8",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "多线程模块[MT] - HD多线程_所有窗口暂停",
    "content": "【功能描述】 设置所有窗口结束 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/yiyuyan/category_8",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "多线程模块[MT] - HD多线程_获取线程状态值",
    "content": "【功能描述】 获取主副序号对应的线程的状态值 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调 typedefenumTHREADSTATE\\n线程状态{THREADSTATE_NONE=-1,\\n未启动THREADSTATE_STARTING=0,\\n开启中THREADSTATE_LOGINING=1,\\n正在登录THREADSTATE_RUNNING=2,\\n正在运行THREADSTATE_PAUSE=3,\\n暂停THREADSTATE_PAUSEING=4,\\n正在暂停THREADSTATE_RECOVERING=5,\\n正在恢复THREADSTATE_WILLSTOP=6,\\n准备停止THREADSTATE_STOPPING=7\\n正在停止}THREADSTATE;",
    "url": "/docs/yiyuyan/category_8",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "多线程模块[MT] - HCMT_GetStateString",
    "content": "【功能描述】 获取状态整数值对应的字符串 【备注】 无",
    "url": "/docs/yiyuyan/category_8",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "多线程模块[MT] - HD多线程_是否能开启",
    "content": "【功能描述】 判断是否能开启新的(主副线程)传递的只能是主序号 【备注】 无",
    "url": "/docs/yiyuyan/category_8",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "多线程模块[MT] - HD多线程_开启窗口",
    "content": "【功能描述】 直接开启窗口操作 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.开启成功后会相应触发对应设置的回调函数 3.顺序: 开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调 停止窗口:结束绑定回调->结束回调",
    "url": "/docs/yiyuyan/category_8",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "多线程模块[MT] - HD多线程_所有窗口恢复",
    "content": "【功能描述】 设置所有窗口恢复 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的恢复绑定回调",
    "url": "/docs/yiyuyan/category_8",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "多线程模块[MT] - HD多线程_所有窗口停止",
    "content": "【功能描述】 设置所有窗口停止 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的停止绑定回调",
    "url": "/docs/yiyuyan/category_8",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "多线程模块[MT] - HD多线程_暂停窗口",
    "content": "【功能描述】 设置窗口暂停 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/yiyuyan/category_8",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "多线程模块[MT] - HD多线程_暂停线程",
    "content": "【功能描述】 设置主副序号对应的线程暂停 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/yiyuyan/category_8",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "多线程模块[MT] - HD多线程_恢复窗口",
    "content": "【功能描述】 设置窗口恢复 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的恢复绑定回调",
    "url": "/docs/yiyuyan/category_8",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "多线程模块[MT] - HD多线程_恢复线程",
    "content": "【功能描述】 设置主副序号对应的线程恢复 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/yiyuyan/category_8",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "多线程模块[MT] - HD多线程_停止窗口",
    "content": "【功能描述】 设置窗口停止 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的结束绑定回调",
    "url": "/docs/yiyuyan/category_8",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "多线程模块[MT] - HD多线程_是否运行中",
    "content": "【功能描述】 (第一第二)回调里面调用,检查当前线程是否结束 【备注】 无",
    "url": "/docs/yiyuyan/category_8",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "多线程模块[MT] - HD多线程_是否暂停",
    "content": "【功能描述】 判断主副序号对应的线程是否是已被暂停状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/yiyuyan/category_8",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "多线程模块[MT] - HD多线程_是否停止",
    "content": "【功能描述】 判断主副序号对应的线程是否是已被结束状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
    "url": "/docs/yiyuyan/category_8",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "多线程模块[MT] - HD多线程_延迟",
    "content": "【功能描述】 设延迟函数,自带暂停/结束/恢复检查 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.检查随后触发HCMT_InitOperate设置的3个回调;理论上不能在HCMT_InitOperate设置的3个回调中调用,因为会导致无限调用自己(但是内部做了检测所以不会无限调用,也就是如果当前第一次已经检查到标志位并触发对应的绑定回调了,在回调中又再一次调用HCMT_Sleep,那么这一次的HCMT_Sleep只会正常休眠,并不继续检查了,防止无限调用); 3.其他回调均可以(无影响) 4.如果要内部检测状态机状态需要调用HCMT_StatusSleep",
    "url": "/docs/yiyuyan/category_8",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "多线程状态机 - HD状态机_开启状态机",
    "content": "【功能描述】 开启状态机 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用配合多线程模块一起使用 2.一般在执行回调或者检查回调调用就行不需要都开启(内部有检测是否开启) 3.支持多线程,但是不建议,执行回调中调用就行了",
    "url": "/docs/yiyuyan/category_9",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "多线程状态机 - HD状态机_操作状态",
    "content": "【功能描述】 全局(全部窗口序号)禁用或者开启状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用配合多线程模块一起使用 2.操作的状态值,必须先调用HCMT_AddStatus添加状态,否则无效 3.支持多线程 4.如果当前状态正在执行中,此时调用该接口使其状态被禁止/无效,那么当前状态对应的状态回调中就会立即退出回调或者立即监控到状态被改变了 5.一旦被禁止,就算我们切换到该状态,也无法去执行绑定的状态回调了",
    "url": "/docs/yiyuyan/category_9",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "多线程状态机 - HD状态机_改变当前状态",
    "content": "【功能描述】 改变状态机状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用 2.操作的状态值,必须先调用HCMT_AddStatus添加状态,否则无效 3.支持多线程,一般在检测回调中调用 4.只能改变比之前优先级低的优先级 《《《特别注意:状态值的大小也表示优先级,优先级越高的回调,享有最先执行权限！！！！》》》 如:登录回调>死亡回调>买药回调>限时副本回调>主线回调 优先级大小策略: 1.优先级用户自行定义大小(-1表示没有,不要重复)建议从0开始123...依次递增值越大优先级越高 2.优先级高回调的可以打断或者中断优先级低的回调,当优先级高的回调执行完毕,会继续执行优先级低的回调 2.如果是优先级一样的回调,只有执行完第一个,才能执行第二个. 3.优先级低的回调是不能打断优先级高的回调,此时如果想执行优先级低的回调,那么必须等待优先级高的回调执行完毕后,方可执行优先级低的回调 4.回调内部如果有循环流程,应加入退出循环条件(一般使用HCMT_IsStatus作为退出循环的条件判断或者其他),不要死循环,否则无法实现状态切换",
    "url": "/docs/yiyuyan/category_9",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "多线程状态机 - HD状态机_回溯上个状态",
    "content": "【功能描述】 回溯状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用 2.操作的状态值,必须先调用HCMT_AddStatus添加状态,否则无效 3.支持多线程,一般在检测回调中调用 4.只能改变比之前优先级低的优先级 《《《特别注意:状态值的大小也表示优先级,优先级越高的回调,享有最先执行权限！！！！》》》 如:登录回调>死亡回调>买药回调>限时副本回调>主线回调 优先级大小策略: 1.优先级用户自行定义大小(-1表示没有,不要重复)建议从0开始123...依次递增值越大优先级越高 2.优先级高回调的可以打断或者中断优先级低的回调,当优先级高的回调执行完毕,会继续执行优先级低的回调 2.如果是优先级一样的回调,只有执行完第一个,才能执行第二个. 3.优先级低的回调是不能打断优先级高的回调,此时如果想执行优先级低的回调,那么必须等待优先级高的回调执行完毕后,方可执行优先级低的回调 4.回调内部如果有循环流程,应加入退出循环条件(一般使用HCMT_IsStatus作为退出循环的条件判断或者其他),不要死循环,否则无法实现状态切换",
    "url": "/docs/yiyuyan/category_9",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "多线程状态机 - HD状态机_是否状态中",
    "content": "【功能描述】 当前状态机的状态在回调中是否有效 【备注】 1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用 2.用在状态回调中,检索是否是当前状态3.在设置的状态回调函数中循环调用检查当前窗口序号的状态类型是否是当前的映射的回调状态类型4.支持多线程 C++例子: ========== __int64 __stdcall HMT::登录状态回调(__int32 windowsIndex,__int64 lparam){while(HCMT_IsStatus()){autoret=HCMT_StatusSleep(1000);HDbgPrint f_Command(\\\"HCMT_StatusSleep:%lld\\\",ret);HCMT_MsgStepText(windowsIndex,\\\"正在登录中...\\\");}return1;} ==========",
    "url": "/docs/yiyuyan/category_9",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "多线程状态机 - HD状态机_状态延迟",
    "content": "【功能描述】 状态机延迟函数(自带暂停/结束/恢复/状态机) 【备注】 1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用2.支持多线程自带暂停/结束/恢复/状态机 3.注意区别于HCMT_Sleep这个接口是没法检索状态机状态的 C++例子: ========== __int64 __stdcall HMT::登录状态回调(__int32 windowsIndex,__int64 lparam){while(HCMT_IsStatus()){autoret=HCMT_StatusSleep(1000);\\n<<<<<<<<-----------------------------这里能及时返回(当我们状态变动的时候)返回值:4表示状态变动HDbgPrint f_Command(\\\"HCMT_StatusSleep:%lld\\\",ret);HCMT_MsgStepText(windowsIndex,\\\"正在登录中...\\\");}return1;} ==========",
    "url": "/docs/yiyuyan/category_9",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "多线程状态机 - HD状态机_获取当前状态",
    "content": "【功能描述】 获取状态机状态 【备注】 1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用 2.支持多线程,一般在UI回调中调用,获取状态值并显示到控件上",
    "url": "/docs/yiyuyan/category_9",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "多线程状态机 - HCMT_SleepEx",
    "content": "【功能描述】 设延迟函数,自带暂停/结束/恢复检查/状态机状态(可选)(扩展版本) 【备注】 1.HDMT_InitProcess/HCMT_InitOperate后才能调用 2.仅仅设置的是标志位,不会堵塞线程 3.检查随后触发HCMT_InitOperate设置的3个回调;理论上不能在HCMT_InitOperate设置的3个回调中调用,因为会导致无限调用自己(但是内部做了检测所以不会无限调用,也就是如果当前第一次已经检查到标志位并触发对应的绑定回调了,在回调中又再一次调用HCMT_Sleep,那么这一次的HCMT_Sleep只会正常休眠,并不继续检查了,防止无限调用); 3.其他回调均可以(无影响) 4.如果要内部检测状态机状态需要调用HCMT_StatusSleep",
    "url": "/docs/yiyuyan/category_9",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "APIHOOK - HDHOOK_Send发包",
    "content": "【功能描述】 调用SendAPI(目标进程中调用)X86X64 【备注】 无",
    "url": "/docs/yiyuyan/category_10",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "APIHOOK - HDHOOK_SendTo发包",
    "content": "【功能描述】 调用SendtoAPI(目标进程中调用)X86X64 【备注】 无",
    "url": "/docs/yiyuyan/category_10",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "AddressHOOK - HDHOOK_挂钩",
    "content": "【功能描述】 任意HOOK(内置插件)X86X64 【备注】 无 回调写法: ============= X86X64:typedef__int64 (__stdcall* HandleCallBackFunType)(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam); 参数解析: 窗口序号:对应的窗口序号 插件序号:内部自动传递 raxOreaxrbxOrebxrcxOrecxrdxOredxrbpOrebprspOresprsiOresirdiOredi:分别对应X86X64的8个寄存器 r8r9r10r11r12r13r14r15:分别对应X64的8个寄存器 lparam:是HDHK_Hook的第五个参数附加参数 备注: 返回值: 0【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 1【走原有流程】 2【需要修改值】+【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 3【需要修改值】+【走原有流程】 备注:调用约定是__stdcall X86X64通用调用案例: __int32 __stdcall HandleHookCallBackFun(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam){ HDbgPrint f_HOOK(\\\"触发HOOK回调->窗口序号:%d插件序号:%draxOreax:%llXrbxOrebx:%llXrcxOrecx:%llXrdxOredx:%llXrbpOrebp::%llXrspOresp:%llXrsiOresi:%llXrdiOredi:%llXr8:%llXr9:%llXr10:%llXr11:%llXr12:%llXr13:%llXr14:%llXr15:%llXlparam:%d\\\",窗口序号,插件序号,raxOreax,rbxOrebx,rcxOrecx,rdxOredx,rbpOrebp,rspOresp,rsiOresi,rdiOredi,r8,r9,r10,r11,r12,r13,r14,r15,lparam); \\n....中间执行自己的逻辑 \\n....可以用驱动读写 \\n如果需要修改寄存器值就调用HDHK_SetProcessHookCallBackLparam设置__int32 mark=1;autoret=HDHK_SetProcessHookCallBackLparam(窗口序号,插件序号,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,mark);HDbgPrint f_HOOK(\\\"ret:%lld\\\",ret); \\n返回值:0忽视HOOK语句直接跳到原来1走原有流程2需要修改值+直接跳到原来3需要修改值+走原有流程return3;} 回调内修改写法请转至》》》》》修改回调返回方法(X86X64)《《《《《《",
    "url": "/docs/yiyuyan/category_11",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "AddressHOOK - HDHOOK_挂钩Ex",
    "content": "【功能描述】 任意HOOK(内置插件)X64(该接口针对X64有效) 【备注】 无 回调写法: ============= X86X64:typedef__int64 (__stdcall* HandleCallBackFunType)(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam); 参数解析: 窗口序号:对应的窗口序号 插件序号:内部自动传递 raxOreaxrbxOrebxrcxOrecxrdxOredxrbpOrebprspOresprsiOresirdiOredi:分别对应X86X64的8个寄存器 r8r9r10r11r12r13r14r15:分别对应X64的8个寄存器 lparam:是HDHK_Hook的第五个参数附加参数 备注: 返回值: 0【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 1【走原有流程】 2【需要修改值】+【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 3【需要修改值】+【走原有流程】 备注:调用约定是__stdcall X86X64通用调用案例: __int32 __stdcall HandleHookCallBackFun(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam){ HDbgPrint f_HOOK(\\\"触发HOOK回调->窗口序号:%d插件序号:%draxOreax:%llXrbxOrebx:%llXrcxOrecx:%llXrdxOredx:%llXrbpOrebp::%llXrspOresp:%llXrsiOresi:%llXrdiOredi:%llXr8:%llXr9:%llXr10:%llXr11:%llXr12:%llXr13:%llXr14:%llXr15:%llXlparam:%d\\\",窗口序号,插件序号,raxOreax,rbxOrebx,rcxOrecx,rdxOredx,rbpOrebp,rspOresp,rsiOresi,rdiOredi,r8,r9,r10,r11,r12,r13,r14,r15,lparam); \\n....中间执行自己的逻辑 \\n....可以用驱动读写 \\n如果需要修改寄存器值就调用HDHK_SetProcessHookCallBackLparam设置__int32 mark=1;autoret=HDHK_SetProcessHookCallBackLparam(窗口序号,插件序号,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,mark);HDbgPrint f_HOOK(\\\"ret:%lld\\\",ret); \\n返回值:0忽视HOOK语句直接跳到原来1走原有流程2需要修改值+直接跳到原来3需要修改值+走原有流程return3;} 回调内修改写法请转至》》》》》修改回调返回方法(X86X64)《《《《《《",
    "url": "/docs/yiyuyan/category_11",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "AddressHOOK - HDHOOK_挂钩Exx",
    "content": "【功能描述】 任意HOOK(内置插件)X64(该接口针对X64有效) 【备注】 无 回调写法: ============= X86X64:typedef__int64 (__stdcall* HandleCallBackFunType)(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam); 参数解析: 窗口序号:对应的窗口序号 插件序号:内部自动传递 raxOreaxrbxOrebxrcxOrecxrdxOredxrbpOrebprspOresprsiOresirdiOredi:分别对应X86X64的8个寄存器 r8r9r10r11r12r13r14r15:分别对应X64的8个寄存器 lparam:是HDHK_Hook的第五个参数附加参数 备注: 返回值: 0【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 1【走原有流程】 2【需要修改值】+【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 3【需要修改值】+【走原有流程】 备注:调用约定是__stdcall X86X64通用调用案例: __int32 __stdcall HandleHookCallBackFun(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam){ HDbgPrint f_HOOK(\\\"触发HOOK回调->窗口序号:%d插件序号:%draxOreax:%llXrbxOrebx:%llXrcxOrecx:%llXrdxOredx:%llXrbpOrebp::%llXrspOresp:%llXrsiOresi:%llXrdiOredi:%llXr8:%llXr9:%llXr10:%llXr11:%llXr12:%llXr13:%llXr14:%llXr15:%llXlparam:%d\\\",窗口序号,插件序号,raxOreax,rbxOrebx,rcxOrecx,rdxOredx,rbpOrebp,rspOresp,rsiOresi,rdiOredi,r8,r9,r10,r11,r12,r13,r14,r15,lparam); \\n....中间执行自己的逻辑 \\n....可以用驱动读写 \\n如果需要修改寄存器值就调用HDHK_SetProcessHookCallBackLparam设置__int32 mark=1;autoret=HDHK_SetProcessHookCallBackLparam(窗口序号,插件序号,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,mark);HDbgPrint f_HOOK(\\\"ret:%lld\\\",ret); \\n返回值:0忽视HOOK语句直接跳到原来1走原有流程2需要修改值+直接跳到原来3需要修改值+走原有流程return3;} 回调内修改写法请转至》》》》》修改回调返回方法(X86X64)《《《《《《 HDHK_HookExxx 函数简介: 任意HOOK(内置插件)X64(该接口针对X64有效) 函数原型:__int64 HDHK_HookExxx(__int32 窗口序号,__int64 hook地址,char* 所属模块名字,__int64 jmp13空白地址,__int64 保留汇编地址,__int32 破坏字节,__int64 回调地址,__int64 附加参数,BOOL 是否主线程调用=FALSE); 参数定义: 窗口序号:窗口序号(从1开始) 所属模块名字:当前HOOK地址所属那个模块可以不指定为0就行 jmp13空白地址:在当前模块的代码地址找一个空白空间大小为13字节用于存储jmp一些指令 保留汇编地址:用来存储破坏字节数量+5字节大小的空白空间的首地址一般这个地址位于当前所属模块代码空白空间 hook地址:当前HOOK的目标地址(参考适合的HOOK地址X86HOOK地址规则X64HOOK地址规则) 破坏字节数:涉及到的汇编字节数 回调地址:遵循下面回调函数类型 附加参数:自定义参数,此参数会传递给回调函数 是否主线程调用:需要开启才开启,一般默认就行 返回值: 查看返回值表 备注: 无 回调写法: ============= X86X64:typedef__int64 (__stdcall* HandleCallBackFunType)(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam); 参数解析: 窗口序号:对应的窗口序号 插件序号:内部自动传递 raxOreaxrbxOrebxrcxOrecxrdxOredxrbpOrebprspOresprsiOresirdiOredi:分别对应X86X64的8个寄存器 r8r9r10r11r12r13r14r15:分别对应X64的8个寄存器 lparam:是HDHK_Hook的第五个参数附加参数 备注: 返回值: 0【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 1【走原有流程】 2【需要修改值】+【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】 3【需要修改值】+【走原有流程】 备注:调用约定是__stdcall X86X64通用调用案例: __int32 __stdcall HandleHookCallBackFun(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam){ HDbgPrint f_HOOK(\\\"触发HOOK回调->窗口序号:%d插件序号:%draxOreax:%llXrbxOrebx:%llXrcxOrecx:%llXrdxOredx:%llXrbpOrebp::%llXrspOresp:%llXrsiOresi:%llXrdiOredi:%llXr8:%llXr9:%llXr10:%llXr11:%llXr12:%llXr13:%llXr14:%llXr15:%llXlparam:%d\\\",窗口序号,插件序号,raxOreax,rbxOrebx,rcxOrecx,rdxOredx,rbpOrebp,rspOresp,rsiOresi,rdiOredi,r8,r9,r10,r11,r12,r13,r14,r15,lparam); \\n....中间执行自己的逻辑 \\n....可以用驱动读写 \\n如果需要修改寄存器值就调用HDHK_SetProcessHookCallBackLparam设置__int32 mark=1;autoret=HDHK_SetProcessHookCallBackLparam(窗口序号,插件序号,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,mark);HDbgPrint f_HOOK(\\\"ret:%lld\\\",ret); \\n返回值:0忽视HOOK语句直接跳到原来1走原有流程2需要修改值+直接跳到原来3需要修改值+走原有流程return3;} 回调内修改写法请转至》》》》》修改回调返回方法(X86X64)《《《《《《",
    "url": "/docs/yiyuyan/category_11",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "AddressHOOK - HDHOOK_暂停挂钩",
    "content": "【功能描述】 暂停任意HOOK(内置插件)X86X64 【备注】 无",
    "url": "/docs/yiyuyan/category_11",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "AddressHOOK - HDHOOK_恢复挂钩",
    "content": "【功能描述】 恢复任意HOOK(内置插件)X86X64 【备注】 无",
    "url": "/docs/yiyuyan/category_11",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "AddressHOOK - HDHOOK_卸载挂钩",
    "content": "【功能描述】 卸载任意HOOK(内置插件)X86X64 【备注】 无",
    "url": "/docs/yiyuyan/category_11",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "通用模块 - HD通用_CALLX64",
    "content": "【功能描述】 通用CALL(适合X64),支持0-8个参数 【备注】 如果需要更多参数传递请联系作者",
    "url": "/docs/yiyuyan/category_12",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "通用模块 - HD通用_CALLX86",
    "content": "【功能描述】 通用CALL(适合X86),支持0到8个参数 【备注】 如果需要更多参数传递请联系作者 HC_HookMaint hread 函数简介: 挂接主线程 函数原型:__int64 __stdcall HC_HookMaint hread(__int32 窗口序号,__int64 窗口句柄); 参数定义: 窗口序号:窗口序号(从1开始) 窗口句柄:窗口句柄 返回值: 查看返回值表 备注: 无",
    "url": "/docs/yiyuyan/category_12",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "ShellCode模块(SH) - HD汇编_转机器码",
    "content": "【功能描述】 汇编文本转换机器码 【备注】 无",
    "url": "/docs/yiyuyan/category_13",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "ShellCode模块(SH) - HD汇编_写入机器码",
    "content": "【功能描述】 机器码写入到进程 【备注】 这里执行用的是HD驱动来申请和写入这个机器码,注意要把HD驱动安装好 拿到了写入地址可以使用HD驱动创建远线程来执行",
    "url": "/docs/yiyuyan/category_13",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "LUA模块(LUA) - HDLUA_读文件",
    "content": "【功能描述】 执行或加载LUA文件 【备注】 LUA标识符:当【是否需要拿到返回值】参数为真的时候,用作线程的标识符,方便主动退出线程，标识符规则:不要太大了{0到100}以内就行是否执行:真表示执行并加载LUA(比如:注入一些自定义LUA接口同时还能执行LUA),反之只是加载LUA文件(比如:注入一些自定义LUA接口)是否需要拿到返回值:真表示堵塞直到LUA文件执行完毕并获取返回值，反之表示开启一根线程执行(无法拿到返回值,可以在LUA文件中做一些耗时的操作)",
    "url": "/docs/yiyuyan/category_14",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "LUA模块(LUA) - HDLUA_结束LUA",
    "content": "【功能描述】 关闭LUA线程 【备注】 LUA标识符:调用【HCLUA_ReadFile】接口指定的【LUA标识符】参数,一一对应,-1表示全部LUA线程退出！！！",
    "url": "/docs/yiyuyan/category_14",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "LUA模块(LUA) - HDLUA_执行CALL",
    "content": "【功能描述】 执行被注册过的LUA函数 【备注】 json:{\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":XXX}",
    "url": "/docs/yiyuyan/category_14",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "驱动模块(N) - HCN_LoadDrv",
    "content": "【功能描述】 加载N驱动 【备注】 需要联网,可以卸载,驱动内置了进程,如需要自定义进程名联系管理员添加或者用HD驱动",
    "url": "/docs/yiyuyan/category_15",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "驱动模块(N) - HCN_InjectDll(W/A)X86",
    "content": "【功能描述】 注入32/64位DLL(需要先加载N驱动) 【备注】 无",
    "url": "/docs/yiyuyan/category_15",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "驱动模块(N) - HCN_InjectDll(W/A)X64",
    "content": "【功能描述】 注入32/64位DLL(需要先加载N驱动) 【备注】 无",
    "url": "/docs/yiyuyan/category_15",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "驱动模块(N) - HCN_InstallPlug(86/64)",
    "content": "【功能描述】 安装32/64位HD插件(需要先加载N驱动) 【备注】 无",
    "url": "/docs/yiyuyan/category_15",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "驱动模块(N) - HCN_UnLoadDrv",
    "content": "【功能描述】 卸载驱动同时清除了注入的DLL缓存 【备注】 取消窗口关联,一定要卸载相关信息,随后所有循环会快速内退,从而线程安全退出！！！！",
    "url": "/docs/yiyuyan/category_15",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "驱动模块(HD) - HD驱动_安装",
    "content": "【功能描述】 加载HD驱动(正式版本) 【备注】 需要联网,不可以卸载驱动,可以清除注入DLL缓存 此接口相当于调用HCHD_LoadDrv2传递-1:HDEx正式版本(云下发正常驱动,无特殊处理)",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "驱动模块(HD) - HD驱动_安装2",
    "content": "【功能描述】 云下发加载驱动或组件(可以通过指定驱动序号,加载不同版本的驱动如:正式版本定制版本备用版本其他保护盾VT等等) 【备注】 需要联网,不可以卸载驱动,可以清除注入DLL缓存",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "驱动模块(HD) - HD驱动_初始化快速读写",
    "content": "【功能描述】 初始化HD驱动快速读写(一般在HD安装驱动接口后的下一句就开始初始化) 【备注】 如果最开始安装HD驱动调用的是HCHD_LoadDrv同时又需要快速读写遍历,就需要先调用此接口,然后调用HCHD_RWExx进行快读内存读写遍历(百万级别) 如果最开始安装HD驱动调用的是HCHD_LoadDrv2并传递驱动序号为0,表示可以直接调用HCHD_RWExx进行快读内存读写遍历(百万级别),不需要再调用此接口了",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "驱动模块(HD) - HD驱动_无痕注入DLL",
    "content": "【功能描述】 把DLL注入到指定进程中(指定DLL二进制文件数据) 【备注】 不能卸载驱动,可以清除注入DLL缓存,支持32/64进程",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "驱动模块(HD) - HCHD_InjectX86X64ByFile",
    "content": "【功能描述】 把DLL注入到指定进程中(指定DLL文件路径) 【备注】 不能卸载驱动,可以清除注入DLL缓存,支持32/64进程",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "驱动模块(HD) - HCHD_InstallPlug(86/64)",
    "content": "【功能描述】 安装HD插件到指定进程中 【备注】 需要联网,可以清除注入DLL缓存,支持32/64进程",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "驱动模块(HD) - HD驱动_卸载插件",
    "content": "【功能描述】 卸载插件(并不是从进程中卸载,而是清除了下一次进程打开的时候安装插件的缓存) 【备注】 无",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "驱动模块(HD) - HD驱动_前台鼠标移动点击",
    "content": "【功能描述】 前台驱动鼠标移动并点击 【备注】 可以通过调用HCHD_SetMMTrackType来设置鼠标全局移动轨迹类型 按键在轨迹坐标集中那些坐标有效:第一个点操作按键-中间点不操作按键-最后一个点不操作按键",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "驱动模块(HD) - HD驱动_前台鼠标移动点击Ex",
    "content": "【功能描述】 前台驱动鼠标移动并点击(可指定句柄) 【备注】 可以通过调用HCHD_SetMMTrackType来设置鼠标全局移动轨迹类型 按键在轨迹坐标集中那些坐标有效:第一个点操作按键-中间点不操作按键-最后一个点不操作按键",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "驱动模块(HD) - HD驱动_前台鼠标移动按下",
    "content": "【功能描述】 前台驱动鼠标移动并按下指定键(可指定句柄) 【备注】 可以通过调用HCHD_SetMMTrackType来设置鼠标全局移动轨迹类型 按键在轨迹坐标集中那些坐标有效:第一个点操作按键-中间点不操作按键-最后一个点不操作按键",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "驱动模块(HD) - HD驱动_前台鼠标移动弹起",
    "content": "【功能描述】 前台驱动鼠标移动并弹起指定键(可指定句柄) 【备注】 可以通过调用HCHD_SetMMTrackType来设置鼠标全局移动轨迹类型 按键在轨迹坐标集中那些坐标有效:第一个点操作按键-中间点不操作按键-最后一个点不操作按键",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "驱动模块(HD) - HD驱动_前台按键",
    "content": "【功能描述】 前台驱动键盘(按下并弹起) 【备注】 无",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "驱动模块(HD) - HD驱动_前台按键按下",
    "content": "【功能描述】 前台驱动键盘(按下某键) 【备注】 无",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "驱动模块(HD) - HD驱动_前台按键弹起",
    "content": "【功能描述】 前台驱动键盘(弹起某键) 【备注】 无",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "驱动模块(HD) - HD驱动_驱动读写",
    "content": "【功能描述】 驱动读写 【备注】 无",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "驱动模块(HD) - HD驱动_开始读写",
    "content": "【功能描述】 驱动读写Ex(开始批读写)与HCHD_EndRWEx成对出现适合快速遍历(百万级别读写单线程) 【备注】 适合快速遍历",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "驱动模块(HD) - HD驱动_驱动读写Ex",
    "content": "【功能描述】 驱动读写Ex(批量读写)(百万级别读写单线程) 【备注】 先调用HCHD_BeginRWEx然后中间调用该接口HCHD_RWEx最后调用HCHD_EndRWEx用于释放环境",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "驱动模块(HD) - HD驱动_结束读写",
    "content": "【功能描述】 驱动读写Ex(结束批读写)与HCHD_BeginRWEx成对出现适合快速遍历(百万级别读写单线程) 【备注】 适合快速遍历",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "驱动模块(HD) - HD驱动_地址是否可读",
    "content": "【功能描述】 检查地址是否可读 【备注】 无",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "驱动模块(HD) - HD驱动_进程保护",
    "content": "【功能描述】 进程保护 【备注】 无",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "驱动模块(HD) - HD驱动_进程隐藏",
    "content": "【功能描述】 开启进程隐藏 【备注】 一次性只能隐藏一个,如果需要隐藏第二个,先把之前的给显示了",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "驱动模块(HD) - HCHD_PHideEx",
    "content": "【功能描述】 开启进程隐藏(加强版本)无法恢复 【备注】 1.隐藏后关闭进程不会蓝屏 2.隐藏后该接口无法恢复显示,其实也没必要恢复显示",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "驱动模块(HD) - HD驱动_进程显示",
    "content": "【功能描述】 进程显示 【备注】 无",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "驱动模块(HD) - HD_进程杀死",
    "content": "【功能描述】 进程杀死 【备注】 无",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "驱动模块(HD) - HD驱动_申请内存",
    "content": "【功能描述】 驱动申请内存 【备注】 无",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "驱动模块(HD) - HD驱动_申请内存Ex",
    "content": "【功能描述】 驱动申请内存(扩展版本) 【备注】 无",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "驱动模块(HD) - HD驱动_内存释放",
    "content": "【功能描述】 驱动内存释放 【备注】 无",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "驱动模块(HD) - HD驱动_修改内存保护",
    "content": "【功能描述】 驱动修改内存保护属性 【备注】 无",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_29",
    "title": "驱动模块(HD) - HD驱动_内存隐藏",
    "content": "【功能描述】 驱动内存隐藏 【备注】 无",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_30",
    "title": "驱动模块(HD) - HD驱动_内存查询",
    "content": "【功能描述】 驱动内存查询 【备注】 无",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_31",
    "title": "驱动模块(HD) - HD驱动_特征码查找地址",
    "content": "【功能描述】 驱动通过特征码查找地址 【备注】 无",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_32",
    "title": "驱动模块(HD) - HD驱动_获取主模块地址",
    "content": "【功能描述】 驱动获取主模块EXE的地址 【备注】 无",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_33",
    "title": "驱动模块(HD) - HD驱动_获取模块地址",
    "content": "【功能描述】 驱动获取指定模块的地址 【备注】 无",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_34",
    "title": "驱动模块(HD) - HD驱动_获取模块函数地址",
    "content": "【功能描述】 驱动获取指定模块的指定的函数地址 【备注】 无",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_35",
    "title": "驱动模块(HD) - HD驱动_修改机器码",
    "content": "【功能描述】 驱动修改机器码 【备注】 无",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_36",
    "title": "驱动模块(HD) - HD驱动_反截图",
    "content": "【功能描述】 驱动内核反截图 【备注】 无",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_37",
    "title": "驱动模块(HD) - HD驱动_远线程执行CALL",
    "content": "【功能描述】 驱动内存远线程执行函数 【备注】 无",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_38",
    "title": "驱动模块(HD) - HD驱动_清除注入缓存",
    "content": "【功能描述】 驱动清除注入缓存(全局插件缓存,DLL缓存) 【备注】 无",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_39",
    "title": "驱动模块(HD) - HD驱动_进程提权",
    "content": "【功能描述】 进程提权 【备注】 无",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_40",
    "title": "驱动模块(HD) - HCHD_HandleRoot",
    "content": "【功能描述】 进程提权 【备注】 无",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_41",
    "title": "驱动模块(HD) - HD驱动_设置鼠标轨迹",
    "content": "【功能描述】 设置驱动鼠标移动轨迹类型 【备注】 无",
    "url": "/docs/yiyuyan/category_16",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "注入模块(Inject) - HD注入_普通安装插件X86",
    "content": "【功能描述】 普通注入插件(X86),不需要安装驱动,这个不是无痕注入,只支持32位的 【备注】 这个不是无痕注入方便操作一些小程序普通注入插件DLL参数->进程PID,进程位数(32)可以在打开进程的经常下安装插件DLL初始化进程环境后调用这个安装插件然后循环等待拿到PID不是驱动级别",
    "url": "/docs/yiyuyan/category_17",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "注入模块(Inject) - HD注入_普通安装插件X86Ex",
    "content": "【功能描述】 普通注入插件(X86)),不需要安装驱动,这个不是无痕注入 【备注】 这个不是无痕注入 方便操作一些小程序 用法和HCN_NormalInstallPlugX86一样这个接口只是参数是句柄防止一些进程一次性打开多个这个句柄可以用来指定某个窗口",
    "url": "/docs/yiyuyan/category_17",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "注入模块(Inject) - HD注入_普通安装插件X64",
    "content": "【功能描述】 普通注入插件(X64),不需要安装驱动,这个不是无痕注入,只支持64位的 【备注】 这个不是无痕注入方便操作一些小程序普通注入插件DLL参数->进程PID,进程位数(32)可以在打开进程的经常下安装插件DLL初始化进程环境后调用这个安装插件然后循环等待拿到PID不是驱动级别",
    "url": "/docs/yiyuyan/category_17",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "注入模块(Inject) - HD注入_普通安装插件X64Ex",
    "content": "【功能描述】 普通注入插件(X64),不需要安装驱动,这个不是无痕注入,只支持64位的 【备注】 这个不是无痕注入 方便操作一些小程序 用法和HCN_NormalInstallPlugX86一样这个接口只是参数是句柄防止一些进程一次性打开多个这个句柄可以用来指定某个窗口",
    "url": "/docs/yiyuyan/category_17",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "注入模块(Inject) - HD注入_驱动安装插件",
    "content": "【功能描述】 安装HD插件(需要预先安装HD驱动),【注入方式1】 【备注】 不是无模块注入可以在打开进程的情况下注入驱动级别的,自动判断目标进程位数",
    "url": "/docs/yiyuyan/category_17",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "注入模块(Inject) - HD注入_驱动注入DLL",
    "content": "【功能描述】 安装指定DLL(需要预先安装HD驱动),【注入方式1】 【备注】 不是无模块注入可以在打开进程的情况下注入驱动级别的,自动判断目标进程位数",
    "url": "/docs/yiyuyan/category_17",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "注入模块(Inject) - HD注入_驱动安装插件Ex",
    "content": "【功能描述】 安装HD插件(需要预先安装HD驱动),【注入方式2】 【备注】 不是无模块注入可以在打开进程的情况下注入驱动级别的,自动判断目标进程位数",
    "url": "/docs/yiyuyan/category_17",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "注入模块(Inject) - HD注入_驱动注入DLLEx",
    "content": "【功能描述】 安装指定DLL(需要预先安装HD驱动),【注入方式2】 【备注】 不是无模块注入可以在打开进程的情况下注入驱动级别的,自动判断目标进程位数",
    "url": "/docs/yiyuyan/category_17",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "盾 - HD盾_保护",
    "content": "【功能描述】 一键保护进程(隐藏等) 【备注】 需要调用HCHD_LoadDrv2传递参数3来安装保护盾HDPP驱动",
    "url": "/docs/yiyuyan/category_18",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "盾 - HD盾_开启窗口保护",
    "content": "【功能描述】 打开窗口保护以及子窗口 【备注】 需要调用HCHD_LoadDrv2传递参数5来安装保护盾HDPW驱动 可以多次指定内部会把指定的保护窗口句柄以及所属子窗口一起保护",
    "url": "/docs/yiyuyan/category_18",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "盾 - HD盾_关闭窗口保护",
    "content": "【功能描述】 取消所有窗口保护(指定保护过的) 【备注】 需要调用HCHD_LoadDrv2传递参数5来安装保护盾HDPW驱动 可以取消调用过HCHDPW_OnProtect所有保护的窗口句柄",
    "url": "/docs/yiyuyan/category_18",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "HDVT - HDVT_申请内存",
    "content": "【功能描述】 VT驱动申请内存 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/yiyuyan/category_19",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "HDVT - HDVT_释放内存",
    "content": "【功能描述】 VT驱动释放内存 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/yiyuyan/category_19",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "HDVT - HDVT_读内存",
    "content": "【功能描述】 VT驱动读内存 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/yiyuyan/category_19",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "HDVT - HDVT_写内存",
    "content": "【功能描述】 VT驱动写内存 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/yiyuyan/category_19",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "HDVT - HDVT_获取模块地址",
    "content": "【功能描述】 VT驱动获取模块地址 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/yiyuyan/category_19",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "HDVT - HDVT_获取模块函数地址",
    "content": "【功能描述】 VT驱动获取模块函数地址 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/yiyuyan/category_19",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "HDVT - HDVT_无痕HOOK",
    "content": "【功能描述】 VT驱动无痕HOOK,过CRC 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/yiyuyan/category_19",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "HDVT - HDVT_远程执行",
    "content": "【功能描述】 VT驱动远程插入执行 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/yiyuyan/category_19",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "HDVT - HCHDVT_InjectX64",
    "content": "【功能描述】 VT驱动无痕无模块注入X64DLL 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/yiyuyan/category_19",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "HDVT - HCHDVT_InjectX86",
    "content": "【功能描述】 VT驱动无痕无模块注入X86DLL 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/yiyuyan/category_19",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "HDVT - HDVT_安装插件X64",
    "content": "【功能描述】 VT驱动无痕无模块安装X64插件到目标进程中 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/yiyuyan/category_19",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "HDVT - HDVT_安装插件X86",
    "content": "【功能描述】 VT驱动无痕无模块安装X86插件到目标进程中 【备注】 需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动",
    "url": "/docs/yiyuyan/category_19",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "YOLOV(HDYOLOV) - HCYOLO_AddModel",
    "content": "【功能描述】 添加YOLOV(ncnn.bin和ncnn.param)模型文件(从内存中加载模型) 【备注】 ncnn模型bin“＝XXX.ncnn.bin”param“＝XXX.ncnn.param”从内存中加载模型备注:一个进程仅同时支持一个版本的模型 需要调用HCHD_LoadDrv2传递参数4来安装YOLOV组件模块",
    "url": "/docs/yiyuyan/category_20",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "YOLOV(HDYOLOV) - HCYOLO_AddModelFile",
    "content": "【功能描述】 添加YOLOV(ncnn.bin和ncnn.param)模型文件(从文件中加载模型) 【备注】 ncnn模型bin“＝XXX.ncnn.bin”param“＝XXX.ncnn.param”从文件中加载模型备注:一个进程仅同时支持一个版本的模型 需要调用HCHD_LoadDrv2传递参数4来安装YOLOV组件模块",
    "url": "/docs/yiyuyan/category_20",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "YOLOV(HDYOLOV) - HCYOLO_Identify",
    "content": "【功能描述】 添加YOLOV(ncnn.bin和ncnn.param)模型文件(从文件中加载模型),从后台截图缓存识别 【备注】 识别信息调用HCEnv_GetRetJson“获取字符串信息以|”分割,自行切割 %d,%f,%f,%f,%f,%f,%d|%d,%f,%f,%f,%f,%f,%d| 字段含义:类别,X1,Y1,X2,Y2,置信度,耗时|类别,X1,Y1,X2,Y2,置信度,耗时| 需要调用HCHD_LoadDrv2传递参数4来安装YOLOV组件模块",
    "url": "/docs/yiyuyan/category_20",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "YOLOV(HDYOLOV) - HCYOLO_IdentifyByFile",
    "content": "【功能描述】 添加YOLOV(ncnn.bin和ncnn.param)模型文件(从文件中加载模型),从指定图片文件识别 【备注】 识别信息调用HCEnv_GetRetJson“获取字符串信息以|”分割,自行切割 %d,%f,%f,%f,%f,%f,%d|%d,%f,%f,%f,%f,%f,%d| 字段含义:类别,X1,Y1,X2,Y2,置信度,耗时|类别,X1,Y1,X2,Y2,置信度,耗时| 需要调用HCHD_LoadDrv2传递参数4来安装YOLOV组件模块",
    "url": "/docs/yiyuyan/category_20",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "VNC(HDVNC) - HDVNC_连接虚拟机",
    "content": "【功能描述】 连接虚拟机 【备注】 对应的虚拟机请开启VNC并设置好端口 两种使用VNC模式特别注意: 1.安装插件(HDEX_InstallPluginVM)的形式连接VNC:支持重连port==0属于重连会检查安装插件时候的PID同时自动获取之前连接过的端口前提是已经连接过卸载的时候内部调用(HCEnv_UnLoadEx) 2.未安装插件(HCVnc_Connect)的形式连接VNC:重连一直都可以不能port==0因为会检查PID未安装插件的PID为0卸载的时候内部调用(HCEnv_UnLoad)",
    "url": "/docs/yiyuyan/category_21",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "VNC(HDVNC) - HDVNC_关闭连接",
    "content": "【功能描述】 关闭连接虚拟机 【备注】 对应的虚拟机请开启VNC并设置好端口 两种使用VNC模式特别注意: 1.安装插件(HDEX_InstallPluginVM)的形式连接VNC:支持重连port==0属于重连会检查安装插件时候的PID同时自动获取之前连接过的端口前提是已经连接过卸载的时候内部调用(HCEnv_UnLoadEx) 2.未安装插件(HCVnc_Connect)的形式连接VNC:重连一直都可以不能port==0因为会检查PID未安装插件的PID为0卸载的时候内部调用(HCEnv_UnLoad)",
    "url": "/docs/yiyuyan/category_21",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "VNC(HDVNC) - HDVNC_鼠标绝对移动",
    "content": "【功能描述】 VNC鼠标绝对移动(自带移动轨迹直线波动防检测) 【备注】 无",
    "url": "/docs/yiyuyan/category_21",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "VNC(HDVNC) - HDVNC_鼠标相对移动",
    "content": "【功能描述】 VNC鼠标相对移动(自带移动轨迹直线波动防检测) 【备注】 无",
    "url": "/docs/yiyuyan/category_21",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "VNC(HDVNC) - HDVNC_鼠标左键点击",
    "content": "【功能描述】 VNC鼠标左键点击 【备注】 无",
    "url": "/docs/yiyuyan/category_21",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "VNC(HDVNC) - HDVNC_鼠标左键按下",
    "content": "【功能描述】 VNC鼠标左键按下 【备注】 无",
    "url": "/docs/yiyuyan/category_21",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "VNC(HDVNC) - HDVNC_鼠标左键弹起",
    "content": "【功能描述】 VNC鼠标左键弹起 【备注】 无",
    "url": "/docs/yiyuyan/category_21",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "VNC(HDVNC) - HDVNC_鼠标左键双击",
    "content": "【功能描述】 VNC鼠标左键双击 【备注】 无",
    "url": "/docs/yiyuyan/category_21",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "VNC(HDVNC) - HDVNC_鼠标右键点击",
    "content": "【功能描述】 VNC鼠标右键点击 【备注】 无",
    "url": "/docs/yiyuyan/category_21",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "VNC(HDVNC) - HDVNC_鼠标右键按下",
    "content": "【功能描述】 VNC鼠标右键按下 【备注】 无",
    "url": "/docs/yiyuyan/category_21",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "VNC(HDVNC) - HDVNC_鼠标右键弹起",
    "content": "【功能描述】 VNC鼠标右键弹起 【备注】 无",
    "url": "/docs/yiyuyan/category_21",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "VNC(HDVNC) - HDVNC_鼠标滚轮滚下",
    "content": "【功能描述】 VNC鼠标滚轮滚下 【备注】 无",
    "url": "/docs/yiyuyan/category_21",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "VNC(HDVNC) - HDVNC_鼠标滚轮滚上",
    "content": "【功能描述】 VNC鼠标滚轮滚上 【备注】 无",
    "url": "/docs/yiyuyan/category_21",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "VNC(HDVNC) - HCVnc_KeyPress",
    "content": "【功能描述】 VNC键盘按键敲击 【备注】 无",
    "url": "/docs/yiyuyan/category_21",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "VNC(HDVNC) - HDVNC_键盘按键按下",
    "content": "【功能描述】 VNC键盘按键按下 【备注】 无",
    "url": "/docs/yiyuyan/category_21",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "VNC(HDVNC) - HDVNC_键盘按键弹起",
    "content": "【功能描述】 VNC键盘按键弹起 【备注】 无",
    "url": "/docs/yiyuyan/category_21",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "VNC(HDVNC) - HCVnc_KeyPressStr",
    "content": "【功能描述】 VNC键盘连续按键字符串(数字+字母) 【备注】 无",
    "url": "/docs/yiyuyan/category_21",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "VNC(HDVNC) - HCVnc_SendString",
    "content": "【功能描述】 VNC键盘输入字符串(中文+数字+符号+字母) 【备注】 无",
    "url": "/docs/yiyuyan/category_21",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "VNC(HDVNC) - HDVNC_开启截图",
    "content": "【功能描述】 开启截图(内部会开启一根线程循环获取虚拟机画面) 【备注】 可以调用HCVnc_CloseCapture来结束截图线程",
    "url": "/docs/yiyuyan/category_21",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "VNC(HDVNC) - HDVNC_关闭截图",
    "content": "【功能描述】 关闭截图(结束开启截图内部产生的线程) 【备注】 需要多次调用关闭,直到关闭成功,通常情况一次就能关闭成功",
    "url": "/docs/yiyuyan/category_21",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "窗口模块(WIN) - HD窗口_排序通讯窗口",
    "content": "【功能描述】 排序安装过插件的进程 【备注】 安装过插件的经常意思表示: 1.通讯过的窗口序号的对应的进程PID(未被第二次初始化序号HCInject_Init) 2.卸载进程环境不会影响绑定过的进程排序(不能调用始化序号HCInject_Init的前提下,也就是可以重连的情况下) 3.HCInject_Init这个接口一旦调用,就会取消所有关联(意味着不能重连了),从而影响当前绑定的窗口PID,意味着新窗口即将打开",
    "url": "/docs/yiyuyan/category_22",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "窗口模块(WIN) - HD窗口_伪装进程",
    "content": "【功能描述】 伪装进程(防止检查到实际的进程存在) 【备注】 无 案例: 把注入器伪装成了hd.exe",
    "url": "/docs/yiyuyan/category_22",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "窗口模块(WIN) - HD窗口_设置窗口状态",
    "content": "【功能描述】 设置或者操作窗口状态 【备注】 无",
    "url": "/docs/yiyuyan/category_22",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "窗口模块(WIN) - HD窗口_设置窗口大小",
    "content": "【功能描述】 设置窗口大小 【备注】 窗口居中会改变窗口位置",
    "url": "/docs/yiyuyan/category_22",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "窗口模块(WIN) - HD窗口_窗口移动",
    "content": "【功能描述】 移动窗口 【备注】 无",
    "url": "/docs/yiyuyan/category_22",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "窗口模块(WIN) - HD窗口_是否64位进程",
    "content": "【功能描述】 目标窗口句柄/目标进程是否64位 【备注】 窗口句柄或者PID任意指定一个就行 如果2个都指定则PID用于检测",
    "url": "/docs/yiyuyan/category_22",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "窗口模块(WIN) - HD窗口_获取窗口标题",
    "content": "【功能描述】 获取目标窗口标题 【备注】 无",
    "url": "/docs/yiyuyan/category_22",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "窗口模块(WIN) - HD窗口_获取窗口线程ID",
    "content": "【功能描述】 获取目标窗口句柄的线程ID 【备注】 无",
    "url": "/docs/yiyuyan/category_22",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "窗口模块(WIN) - HD窗口_获取窗口进程ID",
    "content": "【功能描述】 获取目标窗口句柄的进程ID 【备注】 无",
    "url": "/docs/yiyuyan/category_22",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "窗口模块(WIN) - HD窗口_获取窗口进程路径",
    "content": "【功能描述】 获取目标窗口句柄的路径 【备注】 无",
    "url": "/docs/yiyuyan/category_22",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "窗口模块(WIN) - HD窗口_获取窗口位置",
    "content": "【功能描述】 获取窗口在屏幕上的位置 【备注】 返回字符串: left|top|rifght|bottom| RECT结构体: typedefstructtagRECT{LONGleft;LONGtop;LONGright;LONGbottom;}RECT,* PRECT;",
    "url": "/docs/yiyuyan/category_22",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "窗口模块(WIN) - HD窗口_获取窗口类名",
    "content": "【功能描述】 获取目标窗口句柄的窗口类名 【备注】 无",
    "url": "/docs/yiyuyan/category_22",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "窗口模块(WIN) - HD窗口_获取窗口状态",
    "content": "【功能描述】 获取目标窗口句柄的窗口状态 【备注】 无",
    "url": "/docs/yiyuyan/category_22",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "窗口模块(WIN) - HD窗口_获取特殊窗口",
    "content": "【功能描述】 获取特殊窗口桌面Shell_TrayWnd 【备注】 无",
    "url": "/docs/yiyuyan/category_22",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "窗口模块(WIN) - HD窗口_获取窗口关联句柄",
    "content": "【功能描述】 获取目标窗口句柄的关联窗口句柄 【备注】 无",
    "url": "/docs/yiyuyan/category_22",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "窗口模块(WIN) - HD窗口_获取顶层活动窗口句柄",
    "content": "【功能描述】 获取顶层活动窗口,可以获取到按键自带插件无法获取到的句柄 【备注】 无",
    "url": "/docs/yiyuyan/category_22",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "窗口模块(WIN) - HD窗口_获取顶层焦点窗口句柄",
    "content": "【功能描述】 获取顶层活动窗口中具有输入焦点的窗口句柄 【备注】 无",
    "url": "/docs/yiyuyan/category_22",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "窗口模块(WIN) - HD窗口_设置焦点到窗口",
    "content": "【功能描述】 设置输入焦点到窗口 【备注】 无",
    "url": "/docs/yiyuyan/category_22",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "窗口模块(WIN) - HD窗口_获取窗口客户区域",
    "content": "【功能描述】 获取窗口客户区域的宽度和高度 【备注】 返回字符串: w|h|",
    "url": "/docs/yiyuyan/category_22",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "窗口模块(WIN) - HD窗口_获取窗口客户区域在屏幕",
    "content": "【功能描述】 获取窗口客户区域在屏幕上的位置 【备注】 返回字符串: left|top|rifght|bottom| RECT结构体: typedefstructtagRECT{LONGleft;LONGtop;LONGright;LONGbottom;}RECT,* PRECT;",
    "url": "/docs/yiyuyan/category_22",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "窗口模块(WIN) - HD窗口_查找窗口",
    "content": "【功能描述】 查找符合类名或者标题名的顶层可见窗口,如果指定了parent,则在parent的第一层子窗口中查找 【备注】 无",
    "url": "/docs/yiyuyan/category_22",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "窗口模块(WIN) - HD窗口_查找顶层窗口",
    "content": "【功能描述】 查找顶层窗口句柄,父窗口句柄为NULL 【备注】 无",
    "url": "/docs/yiyuyan/category_22",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "窗口模块(WIN) - HD窗口_枚举查找窗口",
    "content": "【功能描述】 根据指定进程以及其它条件,枚举系统中符合条件的窗口 【备注】 单PID返回字符串: hwnd 多PID返回字符串:根据创建时间排序过的 hwnd1|hwnd2|hwnd3|",
    "url": "/docs/yiyuyan/category_22",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "窗口模块(WIN) - HD窗口_枚举查找窗口Ex",
    "content": "【功能描述】 根据指定进程pid以及其它条件,枚举系统中符合条件的窗口,可以枚举到按键自带的无法枚举到的窗口 【备注】 单PID返回字符串: hwnd",
    "url": "/docs/yiyuyan/category_22",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "窗口模块(WIN) - HD窗口_枚举进程",
    "content": "【功能描述】 根据指定进程名,枚举系统中符合条件的进程PID 【备注】 返回字符串: pid1|pid2|pid3|",
    "url": "/docs/yiyuyan/category_22",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "窗口模块(WIN) - HD窗口_枚举窗口",
    "content": "【功能描述】 根据指定条件,枚举系统中符合条件的窗口,可以枚举到按键自带的无法枚举到的窗口 【备注】 多句柄返回字符串: hwnd1|hwnd2|hwnd3|",
    "url": "/docs/yiyuyan/category_22",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "目标[TARGET] - HCTarget_UseVT",
    "content": "【功能描述】 目标进程是否使用VT驱动 【备注】 目标进程是否使用VT驱动需要中控安装和开启VT驱动type:0不使用1使用作用模块包含:后台键鼠模块后台截图模块谷歌内置浏览器模块APIHOOK模块自定义HOOK模块目的:过检测能力强",
    "url": "/docs/yiyuyan/category_23",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "内核(NT) - HDNT_窗口句柄取PID",
    "content": "【功能描述】 获取目标窗口句柄的进程ID(R3层内核版本) 【备注】 可以绕过一些检测,比如NP等",
    "url": "/docs/yiyuyan/category_24",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "内存操作模块(M) - HD内存_特征码",
    "content": "【功能描述】 特征码查找 【备注】 无",
    "url": "/docs/yiyuyan/category_25",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "内存操作模块(M) - HD内存_特征码Ex",
    "content": "【功能描述】 特征码查找(通过指定地址) 【备注】 无",
    "url": "/docs/yiyuyan/category_25",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "内存操作模块(M) - HD内存_读表达式",
    "content": "【功能描述】 读整数数据 【备注】 无",
    "url": "/docs/yiyuyan/category_25",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "内存操作模块(M) - HD内存_读地址",
    "content": "【功能描述】 读整数数据 【备注】 无",
    "url": "/docs/yiyuyan/category_25",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "内存操作模块(M) - HD内存_写表达式",
    "content": "【功能描述】 写整数数据 【备注】 无",
    "url": "/docs/yiyuyan/category_25",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "内存操作模块(M) - HD内存_写地址",
    "content": "【功能描述】 写整数数据 【备注】 无",
    "url": "/docs/yiyuyan/category_25",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "内存操作模块(M) - HD内存_读表达式字节流",
    "content": "【功能描述】 读字节流数据 【备注】 json返回字节流利用HCEnv_GetRetJson拿到返回地址,提取的字节数为读取大小数最大读取100KB字节大小,注意这个限制,否则会报错",
    "url": "/docs/yiyuyan/category_25",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "内存操作模块(M) - HCM_ReadFD",
    "content": "【功能描述】 读单/双浮点数 【备注】 返回结果以float举例:json返回字符串如:{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":1,\\\\\"iError\\\\\":0,\\\\\"value\\\\\":999.000}]}",
    "url": "/docs/yiyuyan/category_25",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "内存操作模块(M) - HD内存_读地址字节流",
    "content": "【功能描述】 读字节流数据 【备注】 json返回字节流利用HCEnv_GetRetJson拿到返回地址,提取的字节数为读取大小数最大读取100KB字节大小,注意这个限制,否则会报错",
    "url": "/docs/yiyuyan/category_25",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "内存操作模块(M) - HCM_ReadFDAddr",
    "content": "【功能描述】 读单/双浮点数 【备注】 读取大小:4float单浮点8double双浮点以float举例:json返回字符串如:\\\"999.0000\\\"",
    "url": "/docs/yiyuyan/category_25",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "内存操作模块(M) - HD内存_写表达式字节流",
    "content": "【功能描述】 写字节流数据 【备注】 最大写入100KB字节大小,注意这个限制,否则会报错json返回值{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":1,\\\\\"iError\\\\\":0}]}",
    "url": "/docs/yiyuyan/category_25",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "内存操作模块(M) - HCM_WriteF",
    "content": "【功能描述】 写单浮点数4字节 【备注】 json返回值{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":1,\\\\\"iError\\\\\":0}]}",
    "url": "/docs/yiyuyan/category_25",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "内存操作模块(M) - HCM_WriteD",
    "content": "【功能描述】 写双浮点数8字节 【备注】 json返回值{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":1,\\\\\"iError\\\\\":0}]}",
    "url": "/docs/yiyuyan/category_25",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "内存操作模块(M) - HD内存_写地址字节流",
    "content": "【功能描述】 写字节流数据 【备注】 json返回字节流利用HCEnv_GetRetJson拿到返回地址,提取的字节数为读取大小数最大读取100KB字节大小,注意这个限制,否则会报错",
    "url": "/docs/yiyuyan/category_25",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "内存操作模块(M) - HCM_WriteAddrF",
    "content": "【功能描述】 写单浮点数4字节 【备注】 无",
    "url": "/docs/yiyuyan/category_25",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "内存操作模块(M) - HCM_WriteAddrD",
    "content": "【功能描述】 写双浮点数8字节 【备注】 无",
    "url": "/docs/yiyuyan/category_25",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "内存操作模块(M) - HCM_GetModuleBase",
    "content": "【功能描述】 获取模块地址 【备注】 无",
    "url": "/docs/yiyuyan/category_25",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "内存操作模块(M) - HCM_GetModuleFunAddr",
    "content": "【功能描述】 获取模块中的导出接口地址 【备注】 无",
    "url": "/docs/yiyuyan/category_25",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "内存操作模块(M) - HCM_IsBadReadAddr",
    "content": "【功能描述】 判断指定地址是否在目标进程中有效可读 【备注】 无",
    "url": "/docs/yiyuyan/category_25",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "内存操作模块(M) - HCM_AsmCallX86",
    "content": "【功能描述】 执行汇编CALLX86传递汇编代码 【备注】 无",
    "url": "/docs/yiyuyan/category_25",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "内存操作模块(M) - HCM_AsmCallX64",
    "content": "【功能描述】 执行汇编CALLX64传递汇编代码 【备注】 无",
    "url": "/docs/yiyuyan/category_25",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "找图模块(FP) - HD识图_截图",
    "content": "【功能描述】 截图并保存到文件(.bmp) 【备注】 无",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "找图模块(FP) - HD识图_单点找色",
    "content": "【功能描述】 单点找色 【备注】 注意返回值含义和XY值的提取",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "找图模块(FP) - HD识图_多点找色",
    "content": "【功能描述】 多点找色 【备注】 json: {error:0,ret:[{bRet:1,info:结果}]}\\\" info格式->像素序号,x1,y1|像素序号,x2,y2",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "找图模块(FP) - HD识图_多点偏移找色",
    "content": "【功能描述】 多点偏移找色 【备注】 json: \\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":%lld,\\\\\"info\\\\\":\\\\\"%s\\\\\"}]}\\\", info:x1,y1|x2,y2|",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "找图模块(FP) - HD识图_比较颜色",
    "content": "【功能描述】 比较颜色 【备注】 无",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "找图模块(FP) - HD识图_比较颜色Ex",
    "content": "【功能描述】 多点找色确定某个图像块,指定多个具体点 【备注】 这个接口是给具体的坐标直接比较颜色 而这个HCFP_FindColorsOffset是是先搜索首色然后以首色开始拿到偏移的坐标去比较颜色",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "找图模块(FP) - HD识图_获取颜色",
    "content": "【功能描述】 获取某个点的颜色值(从后台) 【备注】 注意返回值含义和值的提取 #pragmapack(1)typedefstructMYA8R8G8B8{BYTEm_a;\\n0x00BYTEm_r;\\n低8位BYTEm_g;\\n中8位BYTEm_b;\\n高8位MYA8R8G8B8(){m_a=0;m_r=0;m_g=0;m_b=0;}}MYA8R8G8B8; #pragmapack() json: “{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"info\\\":\\\"44,29,5B\\\"}]}”A(0x00)rgbr红色:低8位g绿色:中8位b蓝色:高8位RGBFFFFFF",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "找图模块(FP) - HD识图_范围找图",
    "content": "【功能描述】 在客户区范围内找图(仅支持一个图片) 【备注】 注意返回值含义和xy值的提取 {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "找图模块(FP) - HD识图_范围找图Ex",
    "content": "【功能描述】 在客户区范围内找图(返回找到其中一张信息) 【备注】 注意返回值含义和xy值的提取 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "找图模块(FP) - HCFP_FindPicExx",
    "content": "【功能描述】 在客户区范围内找图(返回全部找到的信息) 【备注】 注意返回值含义和xy值的提取 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "找图模块(FP) - HD识图_是否卡屏",
    "content": "【功能描述】 在客户区范围内检测再规定时间内是否卡图 【备注】 无",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "找图模块(FP) - HD识图_获取区域图像CRC",
    "content": "【功能描述】 在客户区范围内获取像素CRC值,用于卡屏校验 【备注】 json: {\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":%lld,\\\\\"info\\\\\":\\\"%X“,\\\\\"time\\\\\":%d}]} info字段是校验值4字节整数",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "找图模块(FP) - HD识图_单点找色从文件",
    "content": "【功能描述】 单点找色(从文件) 【备注】 注意返回值含义和XY值的提取",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "找图模块(FP) - HD识图_单点找色从内存",
    "content": "【功能描述】 单点找色(从内存) 【备注】 注意返回值含义和XY值的提取 图片内存缓冲区自己维护",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "找图模块(FP) - HD识图_多点找色从文件",
    "content": "【功能描述】 多点找色(从文件) 【备注】 json: {error:0,ret:[{bRet:1,info:结果}]}\\\" info格式->像素序号,x1,y1|像素序号,x2,y2",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "找图模块(FP) - HD识图_多点找色从内存",
    "content": "【功能描述】 多点找色(从内存) 【备注】 json: {error:0,ret:[{bRet:1,info:结果}]}\\\" info格式->像素序号,x1,y1|像素序号,x2,y2 图片内存缓冲区自己维护",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "找图模块(FP) - HD识图_多点偏移找色从文件",
    "content": "【功能描述】 多点偏移找色(从文件) 【备注】 无",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "找图模块(FP) - HD识图_多点偏移找色从内存",
    "content": "【功能描述】 多点偏移找色(从内存) 【备注】 图片内存缓冲区自己维护",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "找图模块(FP) - HD识图_范围找图从文件",
    "content": "【功能描述】 在客户区范围内找图(从文件)(仅支持一个图片) 【备注】 注意返回值含义和xy值的提取 {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "找图模块(FP) - HD识图_范围找图从内存",
    "content": "【功能描述】 在客户区范围内找图(从内存)(仅支持一个图片) 【备注】 注意返回值含义和xy值的提取 图片内存缓冲区自己维护 {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "找图模块(FP) - HD识图_范围找图从文件Ex",
    "content": "【功能描述】 在客户区范围内找图(从文件)(找到一个图片就返回) 【备注】 注意返回值含义和xy值的提取 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "找图模块(FP) - HD识图_范围找图从内存Ex",
    "content": "【功能描述】 在客户区范围内找图(从内存)(找到一个图片就返回) 【备注】 注意返回值含义和xy值的提取 图片内存缓冲区自己维护 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "找图模块(FP) - HCFP_FindPicExxByFile",
    "content": "【功能描述】 在客户区范围内找图(从文件)(找全部图片信息坐标) 【备注】 注意返回值含义和xy值的提取 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "找图模块(FP) - HCFP_FindPicExxByMem",
    "content": "【功能描述】 在客户区范围内找图(从内存)(找全部图片信息坐标) 【备注】 注意返回值含义和xy值的提取 图片内存缓冲区自己维护 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度|</SPAN> NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "找图模块(FP) - HD识图_范围找图来源内存Ex",
    "content": "【功能描述】 在客户区范围内找图(子图从内存)(找到一个图片就返回) 【备注】 注意返回值含义和xy值的提取 图片内存缓冲区自己维护 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "找图模块(FP) - HCFP_FindPicExxFromMem",
    "content": "【功能描述】 在客户区范围内找图(子图从内存)(找全部图片信息坐标) 【备注】 注意返回值含义和xy值的提取 图片内存缓冲区自己维护 返回json: {error:0,ret:[{bRet:NN,info:MM}]} 图片索引,左上角X,左上角Y,宽度,高度| NN:返回值 MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "找图模块(FP) - HD识图_比较颜色从文件",
    "content": "【功能描述】 比较颜色(从文件) 【备注】 无",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "找图模块(FP) - HD识图_比较颜色从内存",
    "content": "【功能描述】 比较颜色(从内存) 【备注】 图片内存缓冲区自己维护",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_29",
    "title": "找图模块(FP) - HD识图_比较颜色从文件Ex",
    "content": "【功能描述】 多点找色确定某个图像块,指定多个具体点,从文件 【备注】 无",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_30",
    "title": "找图模块(FP) - HD识图_比较颜色从内存Ex",
    "content": "【功能描述】 多点找色确定某个图像块,指定多个具体点,从内存 【备注】 无",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_31",
    "title": "找图模块(FP) - HD识图_获取颜色从文件",
    "content": "【功能描述】 获取颜色(从文件) 【备注】 注意返回值含义和值的提取 #pragmapack(1)typedefstructMYA8R8G8B8{BYTEm_a;\\n0x00BYTEm_r;\\n低8位BYTEm_g;\\n中8位BYTEm_b;\\n高8位MYA8R8G8B8(){m_a=0;m_r=0;m_g=0;m_b=0;}}MYA8R8G8B8; #pragmapack() json: “{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"info\\\":\\\"44,29,5B\\\"}]}”A(0x00)rgbr红色:低8位g绿色:中8位b蓝色:高8位RGBFFFFFF",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_32",
    "title": "找图模块(FP) - HD识图_获取颜色从内存",
    "content": "【功能描述】 获取颜色(从内存) 【备注】 图片内存缓冲区自己维护 注意返回值含义和值的提取 #pragmapack(1)typedefstructMYA8R8G8B8{BYTEm_a;\\n0x00BYTEm_r;\\n低8位BYTEm_g;\\n中8位BYTEm_b;\\n高8位MYA8R8G8B8(){m_a=0;m_r=0;m_g=0;m_b=0;}}MYA8R8G8B8; #pragmapack() json: “{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"info\\\":\\\"44,29,5B\\\"}]}”A(0x00)rgbr红色:低8位g绿色:中8位b蓝色:高8位RGBFFFFFF",
    "url": "/docs/yiyuyan/category_26",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "找字模块(FS) - HD识字_设置字库",
    "content": "【功能描述】 设置当前像素识字的字库文件(为了提高识别效率,不支持多线程) 建议在登录回调中最开始初始化调用 其他线程需要那个序号就切换那个序号HCFS_SwitchCurDictFile 调用一次会给所有窗口序号添加当前设置的字库文件 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 这个不支持多线程,请在开启前首先设置好 类型提前添加字库,需要在当前线程使用字库必须调用HCFS_SwitchCurDictFile切换字库 字库文件绑定窗口序号字库序号绑定线程窗口序号支持多线程多进程来操作目标进程可以在多线程中通过窗口序号拿到所有绑定的字库文件信息至于在多线程中要使用的是哪一个字库文件？取决于当前线程所绑定的字库序号 总结:1.所有字库文件只需要和窗口序号关联一次就行\\n2.在多线程中需要使用到那个字库序号就切换就行多线程有自己的字库序号副本互不影响各自切换",
    "url": "/docs/yiyuyan/category_27",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "找字模块(FS) - HD识字_设置字库Ex",
    "content": "【功能描述】 设置当前像素识字的字库文件(为了提高识别效率,不支持多线程) 请在主线程中最开始初始化调用 其他线程需要那个序号就切换那个序号HCFS_SwitchCurDictFile 调用一次会给所有窗口序号添加当前设置的字库文件 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 这个不支持多线程,请在开启前首先设置好 类型提前添加字库,需要在当前线程使用字库必须调用HCFS_SwitchCurDictFile切换字库",
    "url": "/docs/yiyuyan/category_27",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "找字模块(FS) - HD识字_设置字库Exx",
    "content": "【功能描述】 设置当前像素识字的字库文件(为了提高识别效率,不支持多线程) 建议在登录回调中最开始初始化调用 其他线程需要那个序号就切换那个序号HCFS_SwitchCurDictFile 调用一次会给所有窗口序号添加当前设置的字库文件 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 这个不支持多线程,请在开启前首先设置好 类型提前添加字库,需要在当前线程使用字库必须调用HCFS_SwitchCurDictFile切换字库 字库文件绑定窗口序号字库序号绑定线程窗口序号支持多线程多进程来操作目标进程可以在多线程中通过窗口序号拿到所有绑定的字库文件信息至于在多线程中要使用的是哪一个字库文件？取决于当前线程所绑定的字库序号 总结:1.所有字库文件只需要和窗口序号关联一次就行\\n2.在多线程中需要使用到那个字库序号就切换就行多线程有自己的字库序号副本互不影响各自切换",
    "url": "/docs/yiyuyan/category_27",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "找字模块(FS) - HD识字_切换字库序号",
    "content": "【功能描述】 切换当前像素识字的字库文件(支持多线程) 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好 运行起来了就不能设置否则冲突 切换字库文件可以在运行的时候切换,而HCFS_SetDictFile设置字库文件必须在初始化阶段中进行！ 对于多线程操作同一个窗口序号的时候,切换字库支持多线程操作,操作前请先在主执行线程中设置字库就行其他副线程(包含主线程)就只需要切换就行",
    "url": "/docs/yiyuyan/category_27",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "找字模块(FS) - HD识字_获取当前字库",
    "content": "【功能描述】 获取当前线程的加载后的字库文件信息(支持多线程) 【备注】 json: \\\"{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":ret,\\\"info\\\":info}]}\\\" info:窗口索引,当前字库索引,加载了字库文件数量,(加载的字库序号,对应的字条数目)|...如:info:0,1,3,(1,55)|(2,55)|(3,55)| 注意返回的是当前线程的字库信息",
    "url": "/docs/yiyuyan/category_27",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "找字模块(FS) - HD识字_获取当前字库序号",
    "content": "【功能描述】 获取当前线程绑定的字库索引(支持多线程) 【备注】 返回大于等于0的值是当前线程绑定的字库索引",
    "url": "/docs/yiyuyan/category_27",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "找字模块(FS) - HD识字_单字符找字",
    "content": "【功能描述】 在客户区范围内找字(只支持单字符串并且是单字符字库) 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->0,x1,y1,w1,h1,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/yiyuyan/category_27",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "找字模块(FS) - HD识字_单字符找字Ex",
    "content": "【功能描述】 在客户区范围内找字(支持多字符串并且是单字符字库) 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/yiyuyan/category_27",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "找字模块(FS) - HD识字_单字符找字Exx",
    "content": "【功能描述】 在客户区范围内找字(支持多字符串并且是单字符字库)找到一个就返回 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/yiyuyan/category_27",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "找字模块(FS) - HD识字_列表单列找字从文件",
    "content": "【功能描述】 单字符串找(原图从文件) 字库是字符串 例如:洛阳多行返回多个坐标一行只找一列(一次) 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->0,x1,y1,w,h,sim|0,x2,y2,w,h,sim|0,x3,y2,w,h,sim|... 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/yiyuyan/category_27",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "找字模块(FS) - HD识字_列表单列找字从内存",
    "content": "【功能描述】 单字符串找(原图从内存) 字库是字符串 例如:洛阳多行返回多个坐标一行只找一列(一次) 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->0,x1,y1,w,h,sim|0,x2,y2,w,h,sim|0,x3,y2,w,h,sim|... 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/yiyuyan/category_27",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "找字模块(FS) - HD识字_列表多列找字从文件",
    "content": "【功能描述】 单字符串找(原图从文件) 字库是字符串 例如:洛阳多行多列返回多个坐标 一行找多列(多次)找多行 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->0,x1,y1,w,h,sim|0,x2,y2,w,h,sim|0,x3,y2,w,h,sim|... 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/yiyuyan/category_27",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "找字模块(FS) - HD识字_列表多列找字从内存",
    "content": "【功能描述】 单字符串找(原图从内存) 字库是字符串 例如:洛阳多行多列返回多个坐标 一行找多列(多次)找多行 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->0,x1,y1,w,h,sim|0,x2,y2,w,h,sim|0,x3,y2,w,h,sim|... 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/yiyuyan/category_27",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "找字模块(FS) - HD识字_自动识字",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到一个就返回 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号(0开始),x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/yiyuyan/category_27",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "找字模块(FS) - HD识字_自动识字从文件",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到一个就返回 可以通过指定图片来获取截图数据其他功能和HCFS_FindStrMutilsAuto一致 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/yiyuyan/category_27",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "找字模块(FS) - HD识字_自动识字从内存",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到一个就返回 可以通过指定图片来获取截图数据其他功能和HCFS_FindStrMutilsAuto一致 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/yiyuyan/category_27",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "找字模块(FS) - HD识字_自动识字Ex",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到全部或仅仅找一个 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号(0开始),x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/yiyuyan/category_27",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "找字模块(FS) - HD识字_自动识字从文件Ex",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到全部或仅仅找一个 可以通过指定图片来获取截图数据其他功能和HCFS_FindStrMutilsAuto一致 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/yiyuyan/category_27",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "找字模块(FS) - HD识字_自动识字从内存Ex",
    "content": "【功能描述】 单/多字符串找都兼容|分割 字库是字符串或单字 找到全部或仅仅找一个 可以通过指定图片来获取截图数据其他功能和HCFS_FindStrMutilsAuto一致 【备注】 单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w,h,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/yiyuyan/category_27",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "找字模块(FS) - HD识字_多字符识字",
    "content": "【功能描述】 单字符串找字库是字符串例如:洛阳 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 在客户区范围内找字符串(只支持单字符串),同时字库是字符串 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/yiyuyan/category_27",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "找字模块(FS) - HD识字_多字符识字Ex",
    "content": "【功能描述】 多字符串找字库是字符串例如:洛阳|北京|广州 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 在客户区范围内找字符串(只支持单字符串),同时字库是字符串 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/yiyuyan/category_27",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "找字模块(FS) - HCFS_FindStrMutilsExx",
    "content": "【功能描述】 多字符串找字库是字符串例如:洛阳|北京|广州找到一个就返回 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 在客户区范围内找字符串(只支持单字符串),同时字库是字符串 json: {error:0,ret:[{bRet:1,info:识字结果}]}\\\" info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/yiyuyan/category_27",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "找字模块(FS) - HD识字_Ocr",
    "content": "【功能描述】 在客户区范围内识别字 字库是字符串或单字 拼接+字符串都支持 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"info\\\":BBB} AAA:0未找到1找到 BBB:json数组如:[{\\\"x\\\":0,\\\"y\\\":0,\\\"text\\\":“NULL”}]表示未找到类似这样[{\\\"x\\\":123,\\\"y\\\":456,\\\"text\\\":\\\"洛阳\\\"},{\\\"x\\\":654,\\\"y\\\":987,\\\"text\\\":\\\"洱海\\\"}]表示找到了 格式化字符串: 未找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":[{\\\\\"x\\\\\":0,\\\\\"y\\\\\":0,\\\\\"text\\\\\":\\\\\"NULL\\\\\"}]}\\\" 找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":%s}\\\" 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/yiyuyan/category_27",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "找字模块(FS) - HD识字_Ocr从文件",
    "content": "【功能描述】 在客户区范围内识别字 字库是字符串或单字 拼接+字符串都支持 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"info\\\":BBB} AAA:0未找到1找到 BBB:json数组如:[{\\\"x\\\":0,\\\"y\\\":0,\\\"text\\\":“NULL”}]表示未找到类似这样[{\\\"x\\\":123,\\\"y\\\":456,\\\"text\\\":\\\"洛阳\\\"},{\\\"x\\\":654,\\\"y\\\":987,\\\"text\\\":\\\"洱海\\\"}]表示找到了 格式化字符串: 未找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":[{\\\\\"x\\\\\":0,\\\\\"y\\\\\":0,\\\\\"text\\\\\":\\\\\"NULL\\\\\"}]}\\\" 找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":%s}\\\" 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/yiyuyan/category_27",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "找字模块(FS) - HD识字_Ocr从内存",
    "content": "【功能描述】 在客户区范围内识别字 字库是字符串或单字 拼接+字符串都支持 【备注】 字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径 设置后会自动解析文件字库数据 设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"info\\\":BBB} AAA:0未找到1找到 BBB:json数组如:[{\\\"x\\\":0,\\\"y\\\":0,\\\"text\\\":“NULL”}]表示未找到类似这样[{\\\"x\\\":123,\\\"y\\\":456,\\\"text\\\":\\\"洛阳\\\"},{\\\"x\\\":654,\\\"y\\\":987,\\\"text\\\":\\\"洱海\\\"}]表示找到了 格式化字符串: 未找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":[{\\\\\"x\\\\\":0,\\\\\"y\\\\\":0,\\\\\"text\\\\\":\\\\\"NULL\\\\\"}]}\\\" 找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":%s}\\\" 字库格式:（兼容大漠插件字库文件） 3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库 009813FE7FC008$1$0.0.23$9----》单字符字库",
    "url": "/docs/yiyuyan/category_27",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "找字模块(FS) - HD识字_设置水平垂直间距",
    "content": "【功能描述】 设置间距(在识别拼接字和OCR中尤其重要)-丢弃改为每个接口单独设置 【备注】 1.当相邻的字/数字/字母/符号,在间距范围内,才被认为是一个整体(字符串) 2.不明白什么是水平垂直间距请前往查看水平垂直间距解析和案例分析 3.这种对于数字和符号,尤其重要",
    "url": "/docs/yiyuyan/category_27",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "找字模块(FS) - HD识字_设置11",
    "content": "【功能描述】 设置11行中(同宽)矩形内,是否只有一个字-丢弃改为每个接口单独设置 【备注】 1.如果打开识别速度快,关闭速度慢一点(不影响多少) 2.如果这个i这个字,由2个字符组成'.'和'|' 3.如果打开表示i是一个整体识别,不能拆开识别 4.如果关闭表示i可以拆分成2个字符分别识别",
    "url": "/docs/yiyuyan/category_27",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "找字模块(FS) - HD识字_设置周围占比",
    "content": "【功能描述】 设置字周围一个像素上下左右的像素占比-丢弃改为每个接口单独设置 【备注】 1.对于那种连体字的情况下占比越高,可能识别的不准确2.这个相当于一个容错率占比3.返回当前设置后的占比4.默认0.1 5.这种对于数字和符号,尤其重要,可以准确的提高识别率,越小的字效果越好",
    "url": "/docs/yiyuyan/category_27",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "智能识图模块(FI) - HCFI_FindImage",
    "content": "【功能描述】 识图(返回的是圆型的圆点) 【备注】 图片越多耗时多长 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x\\\":XX,\\\"y\\\":YY},{\\\"x\\\":XX,\\\"y\\\":YY},{\\\"x\\\":XX,\\\"y\\\":YY}],\\\"time\\\":ZZZ} 每张图会有1个坐标点(圆点) AAA:表示找到几个XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置",
    "url": "/docs/yiyuyan/category_28",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "智能识图模块(FI) - HCFI_FindImageEx",
    "content": "【功能描述】 识图(返回的是矩形左上角和右下角) 【备注】 图片越多耗时多长 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY},{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY}],\\\"time\\\":ZZZ} 每张图会有2个坐标点(左上角+右下角) AAA:表示找到几个XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置",
    "url": "/docs/yiyuyan/category_28",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "智能识图模块(FI) - HCFI_FindRangeImage",
    "content": "【功能描述】 范围内识图 【备注】 图片越多耗时多长 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x\\\":XX,\\\"y\\\":YY},{\\\"x\\\":XX,\\\"y\\\":YY},{\\\"x\\\":XX,\\\"y\\\":YY}]}type==0</STRONG> 每张图会有1个坐标点(圆点) {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY},{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY}]}type==1</STRONG> 每张图会有2个坐标点(左上角+右下角) AAA:表示找到几个XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置",
    "url": "/docs/yiyuyan/category_28",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "智能识图模块(FI) - HD智能识图_Tem找图从文件",
    "content": "【功能描述】 从文件中加载截图数据并识图(返回的是矩形左上角和右下角) 【备注】 图片越多耗时多长 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY},{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY}],\\\"time\\\":ZZZ} 每张图会有2个坐标点(左上角+右下角) AAA:表示找到几个XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0max:置信度time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置",
    "url": "/docs/yiyuyan/category_28",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "智能识图模块(FI) - HD智能识图_Tem找图从内存",
    "content": "【功能描述】 从内存中加载截图数据并识图(返回的是矩形左上角和右下角) 【备注】 图片越多耗时多长 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"i\\\":index,\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY\\\"max\\\":0.0f},{\\\"i\\\":index,\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY\\\"max\\\":0.0f}]}每张图对应会有图片索引+2个坐标点(左上角+右下角)+置信度(max)index:图片集合指定的索引(0开始)如:\\\"洛阳.bmp|洱海.bmp|\\\"(洛阳.bmp)索引就是0AAA:表示找到几个(真正的找到数量)XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0max:置信度time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置",
    "url": "/docs/yiyuyan/category_28",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "智能识字模块(RC) - HCRC_InitRCServer",
    "content": "【功能描述】 初始化识别服务器 【备注】 无",
    "url": "/docs/yiyuyan/category_29",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "智能识字模块(RC) - HCRC_OpenRCServer",
    "content": "【功能描述】 打开识别服务器 【备注】 无",
    "url": "/docs/yiyuyan/category_29",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "智能识字模块(RC) - HCRC_StopRCServer",
    "content": "【功能描述】 停止识别服务器 【备注】 无",
    "url": "/docs/yiyuyan/category_29",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "智能识字模块(RC) - HCRC_SwitchRCServer",
    "content": "【功能描述】 切换识字服务:主要针对语言字体文件的切换 【备注】 内部实现原理:先停止之前的服务(HCRC_StopRCServer)重新初始化(HCRC_InitRCServer)然后重新开启(HCRC_OpenRCServer)",
    "url": "/docs/yiyuyan/category_29",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "智能识字模块(RC) - HCRC_RecognitionChar",
    "content": "【功能描述】 智能识字 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"image\\\":XXX},{\\\"image\\\":YYY}],\\\"time\\\":ZZZ}XXX->图片识别后的结果(字符串)每一个{\\\"image\\\":XXX}是一个识别的字符串,对应<参数:图片名字集合>索引 XXX:格式 \\\"%s,%0.2f,%d,%d,%d,%d|\\\" 字符串1,置信度1,x1,y1,x2,y2|字符串2,置信度2,x1,y1,x2,y2|...|",
    "url": "/docs/yiyuyan/category_29",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "智能识字模块(RC) - HCRC_RecognitionCharEx",
    "content": "【功能描述】 指定范围内智能识字 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"image\\\":XXX},{\\\"image\\\":YYY}],\\\"time\\\":ZZZ}XXX->图片识别后的结果(字符串)每一个{\\\"image\\\":XXX}是一个识别的字符串,对应<参数:图片名字集合>索引 XXX:格式 \\\"%s,%0.2f,%d,%d,%d,%d|\\\" 字符串1,置信度1,x1,y1,x2,y2|字符串2,置信度2,x1,y1,x2,y2|...|",
    "url": "/docs/yiyuyan/category_29",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "智能识字模块(RC) - HCRC_RecognitionCharByMemory",
    "content": "【功能描述】 从内存图片数据中范围内智能识字 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"image\\\":XXX},{\\\"image\\\":YYY}],\\\"time\\\":ZZZ}XXX->图片识别后的结果(字符串)每一个{\\\"image\\\":XXX}是一个识别的字符串,对应<参数:图片名字集合>索引. XXX:格式 \\\"%s,%0.2f,%d,%d,%d,%d|\\\" 字符串1,置信度1,x1,y1,x2,y2|字符串2,置信度2,x1,y1,x2,y2|...|",
    "url": "/docs/yiyuyan/category_29",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "后台键鼠(MKB) - HD键鼠_绑定",
    "content": "【功能描述】 绑定窗口 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/yiyuyan/category_30",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "后台键鼠(MKB) - HD键鼠_绑定Ex",
    "content": "【功能描述】 绑定窗口 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/yiyuyan/category_30",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "后台键鼠(MKB) - HD键鼠_模式绑定Ex",
    "content": "【功能描述】 绑定窗口(扩展接口) 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/yiyuyan/category_30",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "后台键鼠(MKB) - HD键鼠_切换绑定",
    "content": "【功能描述】 切换绑定到所属子窗口的句柄上 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/yiyuyan/category_30",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "后台键鼠(MKB) - HD键鼠_切换绑定Ex",
    "content": "【功能描述】 切换绑定到所属子窗口的句柄上 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/yiyuyan/category_30",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "后台键鼠(MKB) - HD键鼠_切换模式绑定Ex",
    "content": "【功能描述】 切换绑定窗口(扩展接口) 【备注】 如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明 如果之前后台了,当切换到窗口前台会自动解绑后台 绑定属性表:注意顺序！！ 属性值索引 \\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20 解析说明:绑定模式窗口序号拦截概率是否调用绑定接口 1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要 1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标 2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要 2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标 3.全局前台模式如:无窗口序号为-1极低不需要 3.1会影响鼠标位置坐标是屏幕坐标",
    "url": "/docs/yiyuyan/category_30",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "后台键鼠(MKB) - HD键鼠_暂停绑定",
    "content": "【功能描述】 暂停/恢复后台绑定 【备注】 无",
    "url": "/docs/yiyuyan/category_30",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "后台键鼠(MKB) - HD键鼠_解绑",
    "content": "【功能描述】 解绑窗口 【备注】 无",
    "url": "/docs/yiyuyan/category_30",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "后台键鼠(MKB) - HD键鼠_右键双击",
    "content": "【功能描述】 鼠标右键双击 【备注】 无",
    "url": "/docs/yiyuyan/category_30",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "后台键鼠(MKB) - HCMKB_KeyPress(A/W)",
    "content": "【功能描述】 连续按键输入字符串(连续单个按键) 【备注】 无",
    "url": "/docs/yiyuyan/category_30",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "后台键鼠(MKB) - HCMKB_SendString(2)",
    "content": "【功能描述】 发送Ascii字符串 【备注】 无",
    "url": "/docs/yiyuyan/category_30",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "后台键鼠(MKB) - HD键鼠_剪切板发送随机文本",
    "content": "【功能描述】 发送剪切板字符串内容到窗口 【备注】 无",
    "url": "/docs/yiyuyan/category_30",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "后台键鼠(MKB) - HD键鼠_设置剪切板文本",
    "content": "【功能描述】 发送随机名字,从2个文本(hf.txt和he.txt)中各获取一个字 【备注】 hf.txt和he.txt放在程序(.exe)同目录下,文件编码为utf-8随机获取一个姓和一个名组成一个词",
    "url": "/docs/yiyuyan/category_30",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "后台键鼠(MKB) - HD键鼠_获取剪切板字符串",
    "content": "【功能描述】 设置剪切板字符串 【备注】 该接口无序窗口序号",
    "url": "/docs/yiyuyan/category_30",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "后台键鼠(MKB) - HD键鼠_句柄发送文本",
    "content": "【功能描述】 获取剪切板字符串 【备注】 无",
    "url": "/docs/yiyuyan/category_30",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "后台键鼠(MKB) - HD键鼠_句柄发送按键按下",
    "content": "【功能描述】 发送Ascii字符串,部分游戏需要激活窗口！（可以不用通讯调用） 【备注】 注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！",
    "url": "/docs/yiyuyan/category_30",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "后台键鼠(MKB) - HD键鼠_句柄发送按键弹起",
    "content": "【功能描述】 按下发送键码到指定窗口（可以不用通讯调用） 【备注】 注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！",
    "url": "/docs/yiyuyan/category_30",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "后台键鼠(MKB) - HD键鼠_句柄发送按键",
    "content": "【功能描述】 弹起发送键码到指定窗口（可以不用通讯调用） 【备注】 注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！",
    "url": "/docs/yiyuyan/category_30",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "后台键鼠(MKB) - HD键鼠_句柄发送清空文本",
    "content": "【功能描述】 按下并弹起发送键码到指定窗口（可以不用通讯调用） 【备注】 注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！",
    "url": "/docs/yiyuyan/category_30",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "后台键鼠(MKB) - HD键鼠_设置鼠标轨迹参数",
    "content": "【功能描述】 可以清空子窗口的内容（可以不用通讯调用） 【备注】 注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！",
    "url": "/docs/yiyuyan/category_30",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "后台键鼠(MKB) - HD键鼠_获取鼠标位置",
    "content": "【功能描述】 设置鼠标轨迹参数(当移动鼠标开启轨迹生效) 【备注】 无",
    "url": "/docs/yiyuyan/category_30",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "后台键鼠(MKB) - HCMKB_GetMousePos",
    "content": "【功能描述】 获取后台/前台鼠标位置 【备注】 无",
    "url": "/docs/yiyuyan/category_30",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "后台截图模块(CS) - HD截图_设置识别模式",
    "content": "【功能描述】 打开截图 【备注】 无",
    "url": "/docs/yiyuyan/category_31",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "后台截图模块(CS) - HD截图_打开",
    "content": "【功能描述】 打开截图 【备注】 无",
    "url": "/docs/yiyuyan/category_31",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "后台截图模块(CS) - HD截图_打开Ex",
    "content": "【功能描述】 打开截图(和HCCS_CloseCSEx是一组接口) 【备注】 1.前台和后台模式,可以随意切换不用调用关闭HCCS_CloseCSEx再开启！！！！！内置处理了 截图模式: typedefenumCAPTURETYPE{\\n无CAPTURETYPE_NONE=0,\\n这个不操作\\nGDICAPTURETYPE_GDI=1,\\n这个直接客户端操作对于浏览器(谷歌等)记得把图像加速关掉\\n32CAPTURETYPE_D3D9_1_x86=2,\\nUECAPTURETYPE_D3D9_2_x86=3,\\nU3DCAPTURETYPE_D3D9_3_x86=4,\\nRGBX\\nD3D11CAPTURETYPE_D3D11_1_x86=5,\\nUECAPTURETYPE_D3D11_2_x86=6,\\nU3DCAPTURETYPE_D3D11_3_x86=7,\\nRGBXD3D11游戏通用\\nD3D12CAPTURETYPE_D3D12_1_x86=70,\\nUECAPTURETYPE_D3D12_2_x86=71,\\nU3DCAPTURETYPE_D3D12_3_x86=72,\\nRGBXD3D12游戏通用\\n64\\nD3D9CAPTURETYPE_D3D9_1_x64=8,\\nUECAPTURETYPE_D3D9_2_x64=9,\\nU3DCAPTURETYPE_D3D9_3_x64=10,\\nRGBXD3D9游戏通用\\nD3D11CAPTURETYPE_D3D11_1_x64=11,\\nUECAPTURETYPE_D3D11_2_x64=12,\\nU3DCAPTURETYPE_D3D11_3_x64=13,\\nRGBXD3D11游戏通用\\nD3D12CAPTURETYPE_D3D12_1_x64=14,\\nUED3D12CAPTURETYPE_D3D12_2_x64=15,\\nU3DD3D12CAPTURETYPE_D3D12_3_x64=16,\\nRGBXD3D12D3D12游戏通用\\n32CAPTURETYPE_OPENGL_1_x86=20,\\n占位CAPTURETYPE_OPENGL_2_x86=21,\\nGL_BGRA模拟器CAPTURETYPE_OPENGL_3_x86=22,\\nGL_BGRA模拟器\\n64CAPTURETYPE_OPENGL_1_x64=30,\\n占位CAPTURETYPE_OPENGL_2_x64=31,\\nGL_BGRA模拟器CAPTURETYPE_OPENGL_3_x64=32,\\nGL_BGRA模拟器\\n定制CAPTURETYPE_D3D9_Steam_x86=40,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用CAPTURETYPE_D3D11_Steam_x86=41,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用CAPTURETYPE_D3D9_Steam_x64=42,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用CAPTURETYPE_D3D11_Steam_x64=43,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用\\nNC模式CAPTURETYPE_D3D9_NC_x86=44,\\nNC游戏CAPTURETYPE_D3D11_NC_x86=45,\\nNC游戏CAPTURETYPE_D3D9_NC_x64=46,\\nNC游戏CAPTURETYPE_D3D11_NC_x64=47,\\nNC游戏\\nCAPTURETYPE_NORMAL=50,\\n这个前台模式\\nCAPTURETYPE_D3D12_Steam_x86=60,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用CAPTURETYPE_D3D12_Steam_x64=61,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用\\nCAPTURETYPE_D3D12_NC_x86=62,\\nNC游戏D3D12CAPTURETYPE_D3D12_NC_x64=63,\\nNC游戏D3D12 }CAPTURETYPE;额外说明:",
    "url": "/docs/yiyuyan/category_31",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "后台截图模块(CS) - HD截图_关闭",
    "content": "【功能描述】 关闭截图 【备注】 无",
    "url": "/docs/yiyuyan/category_31",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "后台截图模块(CS) - HD截图_获取截图数据",
    "content": "【功能描述】 关闭截图(和HCCS_OpenCSEx是一组接口) 【备注】 无",
    "url": "/docs/yiyuyan/category_31",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "后台截图模块(CS) - HD截图_打开查看器",
    "content": "【功能描述】 获取截图数据 【备注】 json:{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":AAA,\\\"addr\\\":XXX,\\\"eleSize\\\":YYY,\\\"len\\\":ZZZ,\\\"w\\\":1222,\\\"h\\\":699}]}AAA:调用接口返回值 XXX:图片二进制数据首地址(不是bmp数据是MYA8R8G8B8结构体缓冲区首地址)可以拿到这个缓冲区自行转换各种图片格式数据 YYY:MYA8R8G8B8结构体数量 ZZZ:字节大小(图片数据=MYA8R8G8B8* YYY) w:宽度 h:高度注意:拿到图片地址数据XXX使用后记得释放(HCCS_FreeArray) 图片数据地址不使用了记得释放掉HCCS_FreeMemPool调用此接口",
    "url": "/docs/yiyuyan/category_31",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "后台截图模块(CS) - HD截图_关闭查看器",
    "content": "【功能描述】 打开查看器 【备注】 无",
    "url": "/docs/yiyuyan/category_31",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "后台截图模块(CS) - HD截图_截图",
    "content": "【功能描述】 关闭查看器 【备注】 无",
    "url": "/docs/yiyuyan/category_31",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "后台截图模块(CS) - HD截图_获取BMP截图数据",
    "content": "【功能描述】 截图数据并保存为BMP图片文件 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":AAA,\\\"w\\\":1222,\\\"h\\\":699}]}",
    "url": "/docs/yiyuyan/category_31",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "后台截图模块(CS) - HD截图_释放数据",
    "content": "【功能描述】 获取当前截图后的BMP数据 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"addr\\\":XXX,\\\"eleSize\\\":YYY,\\\"allLen\\\":ZZZ,\\\"w\\\":1222,\\\"h\\\":699}]} XXX是BMP图片二进制数据首地址 YYY是MYA8R8G8B8结构体数量 ZZZ:BMP图片数据大小(真实的BMP图片数据:54+像素数据) 图片数据地址不使用了记得释放掉HCCS_FreeMemPool调用此接口",
    "url": "/docs/yiyuyan/category_31",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "后台截图模块(CS) - HCCS_GetCaptureBmpRangeData",
    "content": "【功能描述】 获取当前截图后的BMP数据(指定范围) 【备注】 如果想获取全图数据:xywh可以分别为-1也可以直接调用HCCS_GetCaptureBmpData json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"addr\\\":XXX,\\\"eleSize\\\":YYY,\\\"allLen\\\":ZZZ,\\\"w\\\":1222,\\\"h\\\":699}]} XXX是BMP图片二进制数据首地址 YYY是MYA8R8G8B8结构体数量 ZZZ:BMP图片数据大小(真实的BMP图片数据:54+像素数据) 图片数据地址不使用了记得释放掉HCCS_FreeMemPool调用此接口",
    "url": "/docs/yiyuyan/category_31",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "后台截图模块(CS) - HD截图_释放内存池数据",
    "content": "【功能描述】 释放内存 【备注】 释放内存该内存是使用new[]申请的内存",
    "url": "/docs/yiyuyan/category_31",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "后台截图模块(CS) - HD截图_是否后台缓存失败",
    "content": "【功能描述】 释放内存,内存池操作释放内存 【备注】 我们获取了截图数据不需要了都需要调用这个接口来释放掉,防止内存泄露 注意:该接口是释放【使用内存池申请的内存地址】的地址,与HCCS_FreeArray不一样 那个窗口序号返回申请的地址就用那个窗口序号释放",
    "url": "/docs/yiyuyan/category_31",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "后台截图模块(CS) - HCCS_IsCaptureValid",
    "content": "【功能描述】 后台截图缓存获取失败判断接口 【备注】 无",
    "url": "/docs/yiyuyan/category_31",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "黑屏优化模块 - HD黑屏_打开",
    "content": "【功能描述】 打开黑屏 【备注】 无",
    "url": "/docs/yiyuyan/category_32",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "黑屏优化模块 - HD黑屏_设置模型范围",
    "content": "【功能描述】 设置模型序号的过滤范围 【备注】 可以适当调整最小或者最大的序号来过滤模型,来实现黑屏,同时还支持图色识别",
    "url": "/docs/yiyuyan/category_32",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "黑屏优化模块 - HD黑屏_关闭",
    "content": "【功能描述】 关闭黑屏 【备注】 无",
    "url": "/docs/yiyuyan/category_32",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "CPU优化模块() - HD优化_开启CPU",
    "content": "【功能描述】 打开CPU优化 【备注】 无",
    "url": "/docs/yiyuyan/category_33",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "CPU优化模块() - HD优化_设置FPS",
    "content": "【功能描述】 设置帧数(绑定dx.public.down.cpu后台属性有效) 【备注】 并非实际的帧数,这里只是一个参考值,内置默认为30 动态优化调试帧数的(自动计算帧率)",
    "url": "/docs/yiyuyan/category_33",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "CPU优化模块() - HD优化_设置延迟",
    "content": "【功能描述】 设置帧数(绑定dx.public.down.cpu后台属性有效) 【备注】 如果调用了HC_HookMainThread挂接主线程,同时又调用了本接口,那么会动态(根据实际动态计算正数来)修改主线程调用CALL的检查频率",
    "url": "/docs/yiyuyan/category_33",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "CPU优化模块() - HD优化_关闭CPU",
    "content": "【功能描述】 关闭CPU优化 【备注】 无",
    "url": "/docs/yiyuyan/category_33",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "系统模块(SYS) - HD系统_是否开启字体平滑",
    "content": "【功能描述】 检查字体是否开启字体平滑 【备注】 无",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "系统模块(SYS) - HD系统_关闭字体平滑",
    "content": "【功能描述】 关闭字体平滑 【备注】 无",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "系统模块(SYS) - HD系统_打开字体平滑",
    "content": "【功能描述】 打开字体平滑 【备注】 无",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "系统模块(SYS) - HD系统_是否开启UAC",
    "content": "【功能描述】 检查当前系统是否开启了UAC(用户控制) 【备注】 无",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "系统模块(SYS) - HD系统_设置UAC",
    "content": "【功能描述】 设置当前系统的UAC(用户控制)开关 【备注】 无",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "系统模块(SYS) - HD系统_延迟",
    "content": "【功能描述】 延迟 【备注】 不会堵塞主线程",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "系统模块(SYS) - HD系统_随机延迟",
    "content": "【功能描述】 在随机范围内延迟 【备注】 不会堵塞主线程",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "系统模块(SYS) - HD系统_关闭系统",
    "content": "【功能描述】 关闭系统 【备注】 无",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "系统模块(SYS) - HD系统_关闭屏保",
    "content": "【功能描述】 关闭屏保 【备注】 无",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "系统模块(SYS) - HD系统_关闭电源管理",
    "content": "【功能描述】 关闭电源管理,不进入睡眠 【备注】 无",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "系统模块(SYS) - HD系统_恢复最近系统修改",
    "content": "【功能描述】 恢复系统上次的修改 【备注】 如果中控软件运行的时候修改了系统设置 那么这个最好在中控程序退出的时候调用",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "系统模块(SYS) - HD系统_禁止休眠",
    "content": "【功能描述】 设置当前的电源设置(禁止关闭显示器,禁止关闭硬盘,禁止睡眠和待机) 【备注】 无",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "系统模块(SYS) - HD系统_获取路径",
    "content": "【功能描述】 获取路径 【备注】 无",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "系统模块(SYS) - HD系统_获取CPU类型",
    "content": "【功能描述】 获取CPU类型 【备注】 无",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "系统模块(SYS) - HD系统_获取当前CPU使用率",
    "content": "【功能描述】 获取CPU使用率 【备注】 无",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "系统模块(SYS) - HD系统_获取CPU使用率",
    "content": "【功能描述】 获取指定进程的CPU使用率 【备注】 返回值是整数百分比 返回字符串字符串是(含小数百分比)",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "系统模块(SYS) - HD系统_获取内存使用率",
    "content": "【功能描述】 获取指定进程的内存使用率 【备注】 无",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "系统模块(SYS) - HD系统_获取磁盘序列号",
    "content": "【功能描述】 获取磁盘序列号 【备注】 进程要有管理员权限才能获取成功",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "系统模块(SYS) - HD系统_获取显卡信息",
    "content": "【功能描述】 获取显卡信息 【备注】 无",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "系统模块(SYS) - HD系统_获取DPI",
    "content": "【功能描述】 获取DPI 【备注】 无",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "系统模块(SYS) - HD系统_启动EXE",
    "content": "【功能描述】 运行指定路径下的exe 【备注】 这个不支持启动参数",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "系统模块(SYS) - HD系统_执行DOS指令取返回",
    "content": "【功能描述】 获取CMD命令形式的打开进程并获取返回输出",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "系统模块(SYS) - HD系统_管理员打开进程",
    "content": "【功能描述】 获取CMD命令形式的打开进程(支持管理员打开)(扩展版本) 【备注】 内部是调用ShellExecuteExA",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "系统模块(SYS) - HD系统_启动EXE带参数",
    "content": "【功能描述】 运行指定路径下的exe这个支持启动参数 【备注】 这个支持启动参数",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "系统模块(SYS) - HD系统_启动EXE带参数Ex",
    "content": "【功能描述】 运行指定路径下的exe(HCSYS_RunAppEx的扩展版本)这个支持启动参数同时指定了当前进程的路径 【备注】 这个支持启动参数",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "系统模块(SYS) - HD系统_获取磁盘特征码",
    "content": "【功能描述】 获取磁盘特征码 【备注】 无",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "系统模块(SYS) - HD系统_获取CPU特征码",
    "content": "【功能描述】 获取CPU特征码 【备注】 无",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "系统模块(SYS) - HD系统_获取BOIS制造日期",
    "content": "【功能描述】 获取BOIS制造日期 【备注】 无",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_29",
    "title": "系统模块(SYS) - HD系统_获取机器码",
    "content": "【功能描述】 获取机器码(包含网卡) 【备注】 无",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_30",
    "title": "系统模块(SYS) - HD系统_获取机器码无网卡",
    "content": "【功能描述】 获取机器码(不包含网卡) 【备注】 无",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_31",
    "title": "系统模块(SYS) - HD系统_获取网络时间",
    "content": "【功能描述】 获取网络时间 【备注】 北京时间 固定内置服务器IP",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_32",
    "title": "系统模块(SYS) - HD系统_获取网络时间Ex",
    "content": "【功能描述】 获取网络时间(指定服务器IP获取) 【备注】 北京时间",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_33",
    "title": "系统模块(SYS) - HD系统_获取系统版本",
    "content": "【功能描述】 获取系统版本 【备注】 无",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_34",
    "title": "系统模块(SYS) - HD系统_获取系统类型",
    "content": "【功能描述】 获取系统类型 【备注】 无",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_35",
    "title": "系统模块(SYS) - HD系统_开机经过时间",
    "content": "【功能描述】 获取开机到现在过经过的时间(毫秒) 【备注】 无",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_36",
    "title": "系统模块(SYS) - HD系统_当前进程是否X64",
    "content": "【功能描述】 当前进程是否是64位 【备注】 无",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_37",
    "title": "系统模块(SYS) - HD系统_是否支持vt",
    "content": "【功能描述】 是否支持vt 【备注】 可以在Bios中开启vt,如果不支持就没办法了",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_38",
    "title": "系统模块(SYS) - HD系统_获取屏幕的色深",
    "content": "【功能描述】 获取屏幕的色深(24/32之类的) 【备注】 无",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_39",
    "title": "系统模块(SYS) - HD系统_设置屏幕的色深",
    "content": "【功能描述】 设置屏幕的色深 【备注】 无",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_40",
    "title": "系统模块(SYS) - HD系统_获取屏幕高度",
    "content": "【功能描述】 获取屏幕高度 【备注】 无",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_41",
    "title": "系统模块(SYS) - HD系统_获取屏幕宽度",
    "content": "【功能描述】 获取屏幕宽度 【备注】 无",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_42",
    "title": "系统模块(SYS) - HD系统_设置屏幕分辨率",
    "content": "【功能描述】 设置屏幕分辨率 【备注】 无",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_43",
    "title": "系统模块(SYS) - HD系统_获取CMD命令返回值",
    "content": "【功能描述】 获取CMD命令返回值(字符串) 【备注】 无",
    "url": "/docs/yiyuyan/category_34",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "自定义插件模块(Com) - HD插件_加载插件",
    "content": "【功能描述】 添加自定义组件 【备注】 自定义模块需要导入包并来实现接口绑定",
    "url": "/docs/yiyuyan/category_35",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "自定义插件模块(Com) - HD插件_卸载插件",
    "content": "【功能描述】 卸载指定插件 【备注】 自定义模块需要导入包并来实现接口绑定",
    "url": "/docs/yiyuyan/category_35",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "自定义插件模块(Com) - HD插件_CALL",
    "content": "【功能描述】 调用自定义组件中的接口 【备注】 自定义模块需要导入包并来实现接口绑定 参考:X86X64自定义插件接口说明",
    "url": "/docs/yiyuyan/category_35",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "自定义插件模块(Com) - HD插件_CALLEx",
    "content": "【功能描述】 调用自定义组件中的接口(可传递任意参数类型) 【备注】 自定义模块需要导入包并来实现接口绑定 注意:传递的buffer字符串在自定义插件接口 typedefHDComRet(__stdcall* HDComFunType)(__int64 retStrAddr,__int64 rcx,__int64 rdx,__int64 r8,__int64 r9,__int64 l5,__int64 l6); 第一个参数retStrAddr作为字符串首地址(char* )能拿到 如: C++代码演示: char* info=(char* )retStrAddr; 参考:X86X64自定义插件接口说明",
    "url": "/docs/yiyuyan/category_35",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "插件包装器 - HCCOM_Load",
    "content": "【功能描述】 加载组件 【备注】 组件名为当前组件文件的名字(不包含后缀!,如果组件文件无后缀可忽视) 如:hdmad.dll所对应的组件名必须是hdmad 头文件: HDLoader.h 静态库: HDPacker.librelease版本 HDPackerd.libdebug版本",
    "url": "/docs/yiyuyan/category_36",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "插件包装器 - HCCOM_Register",
    "content": "【功能描述】 注册自定义组件中的接口 【备注】 内置数据初始化函数接口名字:HDDataInit(接口类型是HDComFunType)HDDataInit初始化函数会在加载组件的时候首次调用以便于完成对相关组件数据的初始化(比如:基地址相关表达式的获取)如果需要初始化就自己写一个名字叫做HDDataInit的函数,类型为HDComFunType,并调用HCCOM_Register 头文件: HDLoader.h 静态库: HDPacker.librelease版本 HDPackerd.libdebug版本 参考:X86X64自定义插件接口说明",
    "url": "/docs/yiyuyan/category_36",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "插件包装器 - HCCOM_NotifyToTarget",
    "content": "【功能描述】 自定义模块通知目标进程接口 【备注】 内置数据初始化函数接口名字:HDDataInit(接口类型是HDComFunType)HDDataInit初始化函数会在加载组件的时候首次调用以便于完成对相关组件数据的初始化(比如:基地址相关表达式的获取)如果需要初始化就自己写一个名字叫做HDDataInit的函数,类型为HDComFunType,并调用HCCOM_Register 头文件: HDLoader.h 静态库: HDPacker.librelease版本 HDPackerd.libdebug版本",
    "url": "/docs/yiyuyan/category_36",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "插件包装器 - HCCOM_NotifyToController",
    "content": "【功能描述】 自定义模块通知中控进程接口 【备注】 内置数据初始化函数接口名字:HDDataInit(接口类型是HDComFunType)HDDataInit初始化函数会在加载组件的时候首次调用以便于完成对相关组件数据的初始化(比如:基地址相关表达式的获取)如果需要初始化就自己写一个名字叫做HDDataInit的函数,类型为HDComFunType,并调用HCCOM_Register 头文件: HDLoader.h 静态库: HDPacker.librelease版本 HDPackerd.libdebug版本",
    "url": "/docs/yiyuyan/category_36",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "插件包装器 - HCCOM_GetRetJson",
    "content": "【功能描述】 获取自定义模块通知中控进程返回的字符串结果 【备注】 返回的字符串是自定义的 在中控中自己设置的事件处理回调函数中设置返回 头文件: HDLoader.h 静态库: HDPacker.librelease版本 HDPackerd.libdebug版本",
    "url": "/docs/yiyuyan/category_36",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "插件包装器 - HCCOM_FindCode",
    "content": "【功能描述】 特征码查找 【备注】 无",
    "url": "/docs/yiyuyan/category_36",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "插件包装器 - HCCOM_PrintLog",
    "content": "【功能描述】 是否打开debugview调试日志信息 【备注】 返回当前是否开启",
    "url": "/docs/yiyuyan/category_36",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "插件包装器 - HCCOM_GetVersion",
    "content": "【功能描述】 获取自定义内存插件版本号 【备注】 返回当前是否开启",
    "url": "/docs/yiyuyan/category_36",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "状态机模块 - HCHD_GetHDStatusControler",
    "content": "【功能描述】 获取控制器有且只有一个 【备注】 拿到控制器对象可以获取或者操作其他组件对象",
    "url": "/docs/yiyuyan/category_37",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "控制器模块 - HCHD_GetHDController",
    "content": "【功能描述】 获取控制器有且只有一个 【备注】 拿到控制器对象可以获取或者操作其他组件对象",
    "url": "/docs/yiyuyan/category_38",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "主板机模块[SC] - HD主板机_设置路径",
    "content": "【功能描述】 设置HDScrcpy投屏软件根目录,并重启adb相当于重置一下adb环境 【备注】 设置HDScrcpy投屏软件根目录如:J:\\\\hdscrcpy2.7\\\\默认C:\\\\hdscrcpy2.7\\\\ 软件在群文件或者找管理索取",
    "url": "/docs/yiyuyan/category_39",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "主板机模块[SC] - HD主板机_重置ADB服务",
    "content": "【功能描述】 重置adb服务 【备注】 无",
    "url": "/docs/yiyuyan/category_39",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "主板机模块[SC] - HD主板机_查询设备",
    "content": "【功能描述】 查询当前所有可用的设备 【备注】 无 设备号类型:1.emulator-5554/127.0.0.1:5009模拟器Device(-s) 2.01aa8320032fe731手机Device(-d) 3.127.0.0.1:5009tcpipDevice(-e)",
    "url": "/docs/yiyuyan/category_39",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "主板机模块[SC] - HD主板机_连接设备",
    "content": "【功能描述】 连接设备并通讯窗口序号（需要先初始化中控和登录！！HCHD_LoginHCEnv_Init/HCEnv_InitEx） 【备注】 1.该接口会自动连接指定的设备号 2.同时会进行通讯和重连判断(需要加载HD驱动) 3.无需再通讯 设备号类型:1.emulator-5554/127.0.0.1:5009模拟器Device(-s) 2.01aa8320032fe731手机Device(-d) 3.127.0.0.1:5009tcpipDevice(-e)",
    "url": "/docs/yiyuyan/category_39",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "虚拟机[VM] - HCVM_Run",
    "content": "【功能描述】 运行虚拟机(管理员运行) 【备注】 指令: D:\\vmwin10>D:\\vm16\\vmrun-Twsstart\\\"D:/vmwin10/Windows10x64.vmx\\\"guilparam D:\\vmwin10>D:\\vm16\\vmrun-Twsstart\\\"D:/vmwin10/Windows10x64.vmx\\\"noguilparam C++案例: autoret=HCVM_Run(0,\\\"D:\\\\vm16\\\\\\\",\\\"D:\\\\vmwin10\\\\Windows10x64.vmx\\\",TRUE,0,0,0);",
    "url": "/docs/yiyuyan/category_40",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "虚拟机[VM] - HCVM_Rerun",
    "content": "【功能描述】 重启运行虚拟机(管理员运行) 【备注】 指令: D:\\vmwin10>D:\\vm16\\vmrun-Twsrestart\\\"D:/vmwin10/Windows10x64.vmx\\\"guilparam D:\\vmwin10>D:\\vm16\\vmrun-Twsrestart\\\"D:/vmwin10/Windows10x64.vmx\\\"noguilparam C++案例: autoret=HCVM_Rerun(0,\\\"D:\\\\vm16\\\\\\\",\\\"D:\\\\vmwin10\\\\Windows10x64.vmx\\\",m_强制关闭CheckBox.GetCheck(),TRUE,0,0,0);</FONT>",
    "url": "/docs/yiyuyan/category_40",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "虚拟机[VM] - HCVM_Close",
    "content": "【功能描述】 关闭运行虚拟机(管理员运行) 【备注】 指令: D:\\vmwin10>D:\\vm16\\vmrun-Twsstop\\\"D:/vmwin10/Windows10x64.vmx\\\" D:\\vmwin10>D:\\vm16\\vmrun-Twsstop\\\"D:/vmwin10/Windows10x64.vmx\\\" C++案例: autoret=HCVM_Close(0,\\\"D:\\\\vm16\\\\\\\",\\\"D:\\\\vmwin10\\\\Windows10x64.vmx\\\",m_强制关闭CheckBox.GetCheck(),0,0);",
    "url": "/docs/yiyuyan/category_40",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "虚拟机[VM] - HCVM_List",
    "content": "【功能描述】 获取当前正在运行的虚拟机路径和总数(管理员运行) 【备注】 无 C++案例: autoret=HCVM_List(\\\"D:\\\\vm16\\\\\\\");",
    "url": "/docs/yiyuyan/category_40",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "虚拟机[VM] - HCVM_IsStart",
    "content": "【功能描述】 指定虚拟机是否已经开启(管理员运行) 【备注】 无 C++案例: autoret=HCVM_List(\\\"D:\\\\vm16\\\\\\\",\\\"D:/vmwin10/Windows10x64_1.vmx\\\");",
    "url": "/docs/yiyuyan/category_40",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取版本号",
    "content": "【功能描述】 获取DMA服务器版本号 【备注】 返回长整数:如:240401格式:24年-04版本号-01小版本号",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_版本是否一致",
    "content": "【功能描述】 判断HD插件的DMA接口和DMA服务器接口版本是否一致",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_开启服务器",
    "content": "【功能描述】 开启DMA服务器 【备注】 服务器在群下载或者官网下载 兼容指定自定义进程名(全路径\\\\XXXX.exe)XXXX.exe为自定义进程名不指定进程名表示使用内置进程名(全路径\\\\HDVMDma.exe)不指定路径(当前中控exe根目录\\\\HDVMDma.exe)",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_关闭服务器",
    "content": "【功能描述】 关闭服务器,同时结束进程 【备注】 无",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_服务器是否开启",
    "content": "【功能描述】 服务器是否已经开启 【备注】 循环检查直到服务器开启成功 如果使用HCVMDMA_StartServer开启服务器,不指定IP和端口,则使用的是HCVMDMA_ServerIsStart指定的IP和端口",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_关联虚拟机",
    "content": "【功能描述】 初始化并关联虚拟机 【备注】 需要先开启服务器HCVMDMA_StartServer 内部会自动调用HCEnv_Load接口,使窗口序号和虚拟机进程关联绑定然后初始化虚拟机相关资源 后续就可以使用该窗口虚拟机去操作对应的虚拟机中的进程",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取PID",
    "content": "【功能描述】 通过进程名获取PID 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_读地址",
    "content": "【功能描述】 读地址,仅支持1248地址大小 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_读单浮点",
    "content": "【功能描述】 读单浮点数 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_读双浮点",
    "content": "【功能描述】 读双浮点数 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_读字节集",
    "content": "【功能描述】 读字节集 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_写地址",
    "content": "【功能描述】 写地址,仅支持1248地址大小 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_写单浮点",
    "content": "【功能描述】 写单浮点数 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_写双浮点",
    "content": "【功能描述】 写双浮点数 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_15",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_写字节集",
    "content": "【功能描述】 写字节集 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_16",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取函数",
    "content": "【功能描述】 获取函数地址 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_17",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取主模块",
    "content": "【功能描述】 获取主模块地址 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_18",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取模块",
    "content": "【功能描述】 获取模块地址 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_19",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取执行环境X64",
    "content": "【功能描述】 初始化获取一个某个进程(x64)的执行环境句柄 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 支持内置保存执行环境最多可以保存20个进程执行环境,保存策略为->同线程-同虚拟机-指定虚拟机中的进程PID-执行环境-绑定 执行环境句柄解析: 1.可以理解成一个空间可以与物理机进行交互,实现参数传递和调用CALL 2.每次调用都会获取一个全新的执行环境句柄(实现物理机中控多线程调用) 3.物理机中控在一个执行环境句柄只能同时一个线程执行,如果要多线程执行请获取多个执行环境句柄 4.此接口不适合多线程获取,请在初始化最开始把所需要的执行环境句柄的数量初始化好,方便物理机中控多线程中单独分别使用",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_20",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_CALLX64",
    "content": "【功能描述】 通过指定一个初进程(x64)的执行环境句柄来执行CALL 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 执行环境句柄解析: 1.可以理解成一个空间可以与物理机进行交互,实现参数传递和调用CALL 2.如果需要参数传递,请自行往excuteEnvAddr+0x8写参数(参数最大缓冲区为0x200字节),同时自己的汇编机器码要引入自己参数的地址",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_21",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_ShellCodeInitX86",
    "content": "【功能描述】 初始化获取一个某个进程(x86)的执行环境句柄 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 支持内置保存执行环境最多可以保存20个进程执行环境,保存策略为->同线程-同虚拟机-指定虚拟机中的进程PID-执行环境-绑定 执行环境句柄解析: 1.可以理解成一个空间可以与物理机进行交互,实现参数传递和调用CALL 2.每次调用都会获取一个全新的执行环境句柄(实现物理机中控多线程调用) 3.物理机中控在一个执行环境句柄只能同时一个线程执行,如果要多线程执行请获取多个执行环境句柄 4.此接口不适合多线程获取,请在初始化最开始把所需要的执行环境句柄的数量初始化好,方便物理机中控多线程中单独分别使用",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_22",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_RunShellCodeX86",
    "content": "【功能描述】 通过指定一个初进程(x86)的执行环境句柄来执行CALL 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 执行环境句柄解析: 1.可以理解成一个空间可以与物理机进行交互,实现参数传递和调用CALL 2.如果需要参数传递,请自行往excuteEnvAddr+0x8写参数(参数最大缓冲区为0x200字节),同时自己的汇编机器码要引入自己参数的地址",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_23",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_搜索特征码x86",
    "content": "【功能描述】 特征码搜索(X86)(指定模块名) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_24",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_搜索特征码x86Ex",
    "content": "【功能描述】 特征码搜索(X86)(指定开始地址和搜索大小) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_25",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_搜索特征码x64",
    "content": "【功能描述】 特征码搜索(X64)(指定模块名) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_26",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_搜索特征码x64Ex",
    "content": "【功能描述】 特征码搜索(X64)(指定开始地址和搜索大小) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_27",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_断开虚拟机",
    "content": "【功能描述】 卸载并关闭连接虚拟机 【备注】 与HCVMDMA_Init是一对接口 内部会自动调用HCEnv_UnLoadEx接口,使窗口序号和虚拟机进程断开绑定然后释放虚拟机相关资源 一旦调用,则虚拟机需要被关闭后开启而不是重启PID不能一样",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_28",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取截图环境",
    "content": "【功能描述】 初始化截图环境 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 小技巧: 1.初始化接口有根据不同虚拟机,失败概率不同,为了提高初始化成功率,可以尝试自启动任务管理器,让系统激活起来,初始化完成就可以把任务管理器关掉了 2.步骤:打开虚拟机-关联虚拟机-检查是否有管理器PID-开始初始化键鼠/截图环境-如果失败3次直接重启虚拟机 3.如图操作自启任务管理器就行 4.支持内置保存截图环境一个虚拟机固定一个,自动判断是否之前初始化过 如果有的虚拟机初始化句柄超时建议:",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_29",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_截图一次",
    "content": "【功能描述】 截图一次(获取一次虚拟机全屏数据到物理机) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_30",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_开启截图",
    "content": "【功能描述】 开启截图(内部会开启一条线程循环调用HCVMDMA_Capture) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_31",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_关闭截图",
    "content": "【功能描述】 关闭截图(内部会关闭之前开启的线程)和HCVMDMA_OpenCapture是一对接口 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_32",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_获取键鼠环境",
    "content": "【功能描述】 初始化键鼠环境 【备注】 需要先初始化关联虚拟机HCVMDMA_Init 小技巧: 1.初始化接口有根据不同虚拟机,失败概率不同,为了提高初始化成功率,可以尝试自启动任务管理器,让系统激活起来,初始化完成就可以把任务管理器关掉了 2.步骤:打开虚拟机-关联虚拟机-检查是否有管理器PID-开始初始化键鼠/截图环境-如果失败3次直接重启虚拟机 3.如图操作自启任务管理器就行 4.支持内置保存键鼠环境一个虚拟机固定一个,自动判断是否之前初始化过 如果有的虚拟机初始化句柄超时建议:",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_33",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_鼠标移动",
    "content": "【功能描述】 鼠标移动(不包含轨迹) 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_34",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_左键按下",
    "content": "【功能描述】 鼠标左键按下 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_35",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_左键弹起",
    "content": "【功能描述】 鼠标左键弹起 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_36",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_左键点击",
    "content": "【功能描述】 鼠标左键点击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_37",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_左键双击",
    "content": "【功能描述】 鼠标左键双击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_38",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_中键按下",
    "content": "【功能描述】 鼠标中键按下 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_39",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_中键弹起",
    "content": "【功能描述】 鼠标中键弹起 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_40",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_中键点击",
    "content": "【功能描述】 鼠标中键点击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_41",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_中键双击",
    "content": "【功能描述】 鼠标中键双击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_42",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_右键按下",
    "content": "【功能描述】 鼠标右键按下 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_43",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_右键弹起",
    "content": "【功能描述】 鼠标右键弹起 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_44",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_右键点击",
    "content": "【功能描述】 鼠标右键点击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_45",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_右键双击",
    "content": "【功能描述】 鼠标右键双击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_46",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_滚轮滚上",
    "content": "【功能描述】 鼠标滚轮滚上 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_47",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_滚轮滚下",
    "content": "【功能描述】 鼠标滚轮滚下 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_48",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_键盘按下",
    "content": "【功能描述】 键盘按下 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_49",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_键盘按上",
    "content": "【功能描述】 键盘弹起 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_50",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_键盘敲击",
    "content": "【功能描述】 键盘敲击 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_51",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_发送文本Unicode",
    "content": "【功能描述】 发送unicode字符串 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_52",
    "title": "虚拟机DMA模块[VMDMA] - HDDMA_发送文本Ascii",
    "content": "【功能描述】 发送ascii字符串 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_53",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_GetPidList",
    "content": "【功能描述】 获取PID列表 【备注】 需要先初始化关联虚拟机HCVMDMA_Init C++解析获取案例: \\n最大51个数量存储量autojsonStr=HCEnv_GetRetJson(windowsIndex);if(jsonStr==NULL)returnERROR_获取数据失败;\\npid1,name1|pid2,name2|pid3,name3|vector<string>pidNameArray;Tool::HSplitStringA(jsonStr,pidNameArray,\\\"|\\\");if(pidNameArray.size()<=0)returnRET_失败;for(int index=0;index<pidSize;index++){\\npid1,name1，vector<string>proArray;Tool::HSplitStringA(pidNameArray[index]+\\\",\\\",proArray,\\\",\\\");if(proArray.size()<2)continue;if(atoi(proArray[0].c_str())==pid)returnRET_成功;\\n元素1就是PID元素2是进程名}returnRET_失败;\\n没找到",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_54",
    "title": "虚拟机DMA模块[VMDMA] - HCVMDMA_IsExistPid",
    "content": "【功能描述】 对应虚拟机中的进程PID是否存在 【备注】 需要先初始化关联虚拟机HCVMDMA_Init",
    "url": "/docs/yiyuyan/category_41",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "(B2)剑灵2台服 - HB2_GetPlayerInfo",
    "content": "【功能描述】 调用获取人物信息CALL 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"name\\\":\\\"Jack\\\",\\\"level\\\":26,\\\"curHp\\\":588,\\\"maxHp\\\":999,\\\"curMp\\\":255,\\\"maxMp\\\":666,\\\"gold\\\":99999,\\\"diamond\\\":999999}]}",
    "url": "/docs/yiyuyan/category_42",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "(B2)剑灵2台服 - HB2_GetBagInfo",
    "content": "【功能描述】 调用获取背包信息CALL 【备注】 json: {\\\"error\\\":0,\\\"flag\\\":99,\\\"ret\\\":[{\\\"id\\\":1111,\\\"tId\\\":22222,\\\"dId\\\":33333,\\\"num\\\":588},{\\\"id\\\":1111,\\\"tId\\\":22222,\\\"dId\\\":33333,\\\"num\\\":588},{\\\"id\\\":1111,\\\"tId\\\":22222,\\\"dId\\\":33333,\\\"num\\\":588}]}",
    "url": "/docs/yiyuyan/category_42",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "(B2)剑灵2台服 - HB2_GetShortCutInfo1",
    "content": "【功能描述】 调用获取快捷栏遍历信息CALL（前10个） 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"index\\\":0,\\\"id\\\":1111,\\\"bAct\\\":0},{\\\"index\\\":1,\\\"id\\\":2222,\\\"bAct\\\":1}]}",
    "url": "/docs/yiyuyan/category_42",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "(B2)剑灵2台服 - HB2_GetShortCutInfo2",
    "content": "【功能描述】 调用获取快捷栏遍历信息CALL（后10个） 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"index\\\":0,\\\"id\\\":1111,\\\"bAct\\\":0},{\\\"index\\\":1,\\\"id\\\":2222,\\\"bAct\\\":1}]}",
    "url": "/docs/yiyuyan/category_42",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "(B2)剑灵2台服 - HB2_GetPlayerXYZ",
    "content": "【功能描述】 调用获取人物坐标CALL 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"x\\\":125,\\\"y\\\":125,\\\"z\\\":125}]}",
    "url": "/docs/yiyuyan/category_42",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_6",
    "title": "(B2)剑灵2台服 - HB2_GetPlayerCurMapId",
    "content": "【功能描述】 调用获取人物当前地图IDCALL 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"mapId\\\":1993}]}",
    "url": "/docs/yiyuyan/category_42",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_7",
    "title": "(B2)剑灵2台服 - HB2_GetCurChapterTaskId",
    "content": "【功能描述】 调用遍历已结任务章节ID信息(主线+支线) 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"CTaskId\\\":1993,\\\"index\\\":1}]}",
    "url": "/docs/yiyuyan/category_42",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_8",
    "title": "(B2)剑灵2台服 - HB2_GetAChapterTask",
    "content": "【功能描述】 调用遍历已结任务章节ID信息(主线+支线) 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"CTaskId\\\":1993,\\\"index\\\":1,\\\"curNum\\\":2},{\\\"CTaskId\\\":1998,\\\"index\\\":2,\\\"curNum\\\":2}]}",
    "url": "/docs/yiyuyan/category_42",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_9",
    "title": "(B2)剑灵2台服 - HB2_PlayerIsMove",
    "content": "【功能描述】 调用人物是否移动CALL 【备注】 无",
    "url": "/docs/yiyuyan/category_42",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_10",
    "title": "(B2)剑灵2台服 - HB2_IsAutoUseMed",
    "content": "【功能描述】 调用人物是否自动使用药品状态 【备注】 无",
    "url": "/docs/yiyuyan/category_42",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_11",
    "title": "(B2)剑灵2台服 - HB2_Move",
    "content": "【功能描述】 调用移动CALL 【备注】 无",
    "url": "/docs/yiyuyan/category_42",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_12",
    "title": "(B2)剑灵2台服 - HB2_GetHuaShen",
    "content": "【功能描述】 调用化身遍历CALL 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"id\\\":0,\\\"xLevel\\\":1111,\\\"type\\\":0},{\\\"id\\\":0,\\\"xLevel\\\":1111,\\\"type\\\":0}]} id:化身IDxLevel:化身星级type:化身品质0123依次递增+1白绿蓝...",
    "url": "/docs/yiyuyan/category_42",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_13",
    "title": "(B2)剑灵2台服 - HB2_GetChongWu",
    "content": "【功能描述】 调用宠物遍历CALL 【备注】 json: {\\\"error\\\":0,\\\"ret\\\":[{\\\"id\\\":0,\\\"xLevel\\\":1111,\\\"type\\\":0},{\\\"id\\\":0,\\\"xLevel\\\":1111,\\\"type\\\":0}]} id:宠物IDxLevel:宠物星级type:宠物品质0123依次递增+1白绿蓝...",
    "url": "/docs/yiyuyan/category_42",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_14",
    "title": "(B2)剑灵2台服 - HB2_UseGoods",
    "content": "【功能描述】 调用使用物品CALL 【备注】 无",
    "url": "/docs/yiyuyan/category_42",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "谷歌内置浏览器模块[GB] - HD内置浏览器_附加谷歌1",
    "content": "【功能描述】 附加内置浏览器，附加监听模式1 【备注】 必须游戏进程自带内置谷歌浏览器,才会附加模块成功 由于每个游戏不同,需要定制浏览器接口 当前默认的内置谷歌浏览器接口仅适合夜鸦",
    "url": "/docs/yiyuyan/category_43",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "谷歌内置浏览器模块[GB] - HD内置浏览器_附加谷歌2",
    "content": "【功能描述】 附加内置浏览器，附加监听模式2 【备注】 必须游戏进程自带内置谷歌浏览器,才会附加模块成功 由于每个游戏不同,需要定制浏览器接口 当前默认的内置谷歌浏览器接口仅适合夜鸦",
    "url": "/docs/yiyuyan/category_43",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "谷歌内置浏览器模块[GB] - HD内置浏览器_脱离谷歌",
    "content": "【功能描述】 脱离之前的内置浏览器 【备注】 必须游戏进程自带内置谷歌浏览器,才会附加模块成功",
    "url": "/docs/yiyuyan/category_43",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "谷歌内置浏览器模块[GB] - HD内置浏览器_注入谷歌JS代码",
    "content": "【功能描述】 给内置浏览器注入JS代码 【备注】 必须游戏进程自带内置谷歌浏览器,才会附加模块成功",
    "url": "/docs/yiyuyan/category_43",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "谷歌内置浏览器模块[GB] - HD内置浏览器_注入谷歌JS文件",
    "content": "【功能描述】 给内置浏览器注入指定文件中的JS代码 【备注】 必须游戏进程自带内置谷歌浏览器,才会附加模块成功",
    "url": "/docs/yiyuyan/category_43",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "调试绘制模块(DS) - HD调试_设置颜色",
    "content": "【功能描述】 (用于调试)设置全局可视化标注颜色值 【备注】 颜色值是4字节分别对应XRGB如:0x00FF0000红色如:0x0000FF00绿色如:0x000000FF蓝色",
    "url": "/docs/yiyuyan/category_44",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "调试绘制模块(DS) - HD调试_设置调试窗口跟随",
    "content": "【功能描述】 (用于调试)设置当前调试窗口跟随的进程信息",
    "url": "/docs/yiyuyan/category_44",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "调试绘制模块(DS) - HD调试_标记窗口",
    "content": "【功能描述】 给指定窗口画边框或者填充矩形 【备注】 无",
    "url": "/docs/yiyuyan/category_44",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_4",
    "title": "调试绘制模块(DS) - HD调试_捕捉异常调用堆栈",
    "content": "【功能描述】 开启/关闭捕捉异常 【备注】 无",
    "url": "/docs/yiyuyan/category_44",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_5",
    "title": "调试绘制模块(DS) - HD调试_附加控制台",
    "content": "【功能描述】 附加控制台 【备注】 print fcout输入输出到控制台上显示注意:自行定时清空屏幕防止满屏卡主进程运行",
    "url": "/docs/yiyuyan/category_44",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_1",
    "title": "全局资源设置模块(RES) - HCRES_SetResPath",
    "content": "【功能描述】 设置资源路径 【备注】 图片字库文件都在这个里面找",
    "url": "/docs/yiyuyan/category_45",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_2",
    "title": "全局资源设置模块(RES) - HD资源_设置路径Ex",
    "content": "【功能描述】 设置资源路径 【备注】 图片字库文件都在这个里面找",
    "url": "/docs/yiyuyan/category_45",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  },
  {
    "id": "function_3",
    "title": "全局资源设置模块(RES) - HCRES_SetLanguageResPath",
    "content": "【功能描述】 设置语言或者字体文件资源路径 【备注】 语言文件都在这个里面找",
    "url": "/docs/yiyuyan/category_45",
    "source": "api_data_yiyuyan.json",
    "type": "函数"
  }
]