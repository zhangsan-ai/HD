[
  {
    "id": "category_1",
    "name": "基础说明",
    "functions": [
      {
        "id": "explanation_1",
        "name": "HD简介",
        "type": "说明",
        "description": "教程以官网为准 \n后面会出帖子教程\n供大家学习使用\n官网:\nhttps://www.hdgdk.com\nHD【RPG引擎库】交流群(3群):882724064 1030698387\n (有事请主动找群主和管理，群主和管理不会主动私聊任何人,请勿上当受骗！！！！)\n (有事请主动找群主和管理，群主和管理不会主动私聊任何人,请勿上当受骗！！！！)\n (有事请主动找群主和管理，群主和管理不会主动私聊任何人,请勿上当受骗！！！！)\n功能: \n1.自研驱动注入，模拟键鼠 ，读写内存相关操作，进程以及线程相关操作等. \n2.自研接口注入模式框架.\n3.目前支持 32 位/64位/ASCII/UNICODE(8个版本中控)<->32/64位 (目标程序) \n4.还支持LUA编写,自定义模块,谷歌内置浏览器,主板机投屏,多线程框架模块,yolov5,等操作\n5.支持易语言 C/C++ 火山 Python C# 炫语言 golong等语言（支持调用C++DLL的语言）\n6.具体看对应的模块功能接口\n7.支持win7/8/10/11系统\n=============================================================  \n一.【HD易语言基础课程】\nhttps://www.bilibili.com/video/BV1UgJFz5EKN/?spm_id_from=333.1387.homepage.video_card.click \n   .【HD易语言多线程框架实战课程】\nhttps://www.bilibili.com/video/BV1UgJFz5EKN/?spm_id_from=333.1387.homepage.video_card.click\n二.【HD火山基础课程】\nhttps://www.bilibili.com/video/BV1iBftYoE5b/?spm_id_from=333.1387.homepage.video_card.click\n三.【HD C++基础课程】\nhttps://www.bilibili.com/video/BV1G9fnYeEEp/?spm_id_from=333.1387.homepage.video_card.click\n    .【HD C++多线程框架实战课程】\nhttps://www.bilibili.com/video/BV1G9fnYeEEp/?spm_id_from=333.1387.homepage.video_card.click\n   .【HD C++ 夜鸦国际服实战课程】\nhttps://www.bilibili.com/video/BV1Ei1sYsELz/?spm_id_from=333.1387.homepage.video_card.click\n四.【HD Python基础课程】\nhttps://www.bilibili.com/video/BV1rtRAYXEwQ/?spm_id_from=333.1387.homepage.video_card.click\n五.【HD 炫语言基础课程】\nhttps://www.bilibili.com/video/BV1LJXGYPEXy/?spm_id_from=333.1387.homepage.video_card.click\nhttps://www.bilibili.com/video/BV1UNqdYqEBQ/?spm_id_from=333.1387.homepage.video_card.click\n六.【HD 综合工具使用教程】\nhttps://www.bilibili.com/video/BV1nscbeVEfY/?spm_id_from=333.1387.homepage.video_card.click\n七.【HD Yolov8综合工具使用教程】\nhttps://www.bilibili.com/video/BV13c3vzfE2D/?spm_id_from=333.1387.homepage.video_card.click\n=============================================================  ",
        "notes": [
          "免责声明",
          "一.        本软件完全出于个人兴趣爱好，由本人在业余时间开发，是一款安全，绿色，可靠的软件产品.",
          "二.        利用本软件所做出的任何软件作品，和本人无关.",
          "三.        本软件绝对不针对任何一款游戏或者游戏开发商，如果有人利用本软件开发非法游戏辅助，本人将保留追究其民事以及刑事责任的权利.",
          "四.        因使用本软件而引致的任何意外、疏忽、合约毁坏、诽谤、版权或知识产权侵犯及其所造成的任何损失，本人概不负责，亦概不承担任何民事或刑事法律责任。",
          "五.        当你第一次开始使用本人所提供的任何软件及资源的那一刻起就将被视为对本声明全部内容的认可。同时您必须认可上述免责条款，方可使用本软件及资源。如有任何异议，建议立刻删除本软件及资源并且停止使用.",
          "六.        以上内容，本人保留最终解释权。"
        ],
        "codeExamples": [
          {
            "title": "HD简介 - 基础示例",
            "code": ""
          },
          {
            "title": "HD简介 - 进阶用法",
            "code": "// huoshanpc 示例2\n"
          },
          {
            "title": "HD简介 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n"
          }
        ]
      },
      {
        "id": "explanation_2",
        "name": "HD返回值表",
        "type": "说明",
        "description": "接口返回值： 小于等于0 为错误代码 大于 0为成功  (驱动接口返回值在下面↓)\n\n#define RET_检查PID存在 8\n#define RET_环境已卸载 7\n#define RET_重连窗口序号不一致 6\n#define RET_重连窗口 5\n#define RET_状态变动 4\n#define RET_暂停过 3\n#define RET_结束 2\n#define RET_成功 1\n#define RET_失败 0\n#define RET_真 1\n#define RET_非 0\n#define ERROR_未初始化全局环境 -1000\n#define ERROR_未找到进程环境 -1001\n#define ERROR_进程环境内存为NULL -1002\n#define ERROR_获取CALL环境失败 -1003\n#define ERROR_超时返回 -1004\n#define ERROR_主线程调用超时返回 -1005\n#define ERROR_数据异常 -1006\n#define ERROR_参数错误 -1007\n#define ERROR_未挂接主线程 -1008\n#define ERROR_后台绑定句柄无效 -1009\n#define ERROR_未绑定后台 -1010\n#define ERROR_多开超出限制 -1011\n#define ERROR_字符串为空 -1012\n#define ERROR_地址为空 -1013\n#define ERROR_未知错误 -1014\n#define ERROR_远进程申请内存失败 -1015\n#define ERROR_文件夹创建失败 -1016\n#define ERROR_异步无法获取返回值 -1017\n#define ERROR_语法错误 -1018\n#define ERROR_申请内存失败 -1019\n#define ERROR_创建线程失败 -1020\n#define ERROR_缓冲区大小不足 -1021\n#define ERROR_未初始化LUA -1022\n#define ERROR_LUA状态机为NULL -1023\n#define ERROR_未找到LUA函数 -1024\n#define ERROR_返回值未知类型 -1025\n#define ERROR_LUA线程标识符不符合 -1026\n#define ERROR_模块获取失败 -1027\n#define ERROR_地址不可读 -1028\n#define ERROR_返回值为JSON -1029\n#define ERROR_获取数据失败 -1030\n#define ERROR_未初始化 -1031\n#define ERROR_已经开启 -1032\n#define ERROR_已经结束 -1033\n#define ERROR_未开启 -1034\n#define ERROR_未结束 -1035\n#define ERROR_高宽为0 -1036\n#define ERROR_数据为NULL -1037\n#define ERROR_数据不符合要求 -1038\n#define ERROR_文件打开失败 -1039\n#define ERROR_打开失败 -1040\n#define ERROR_解析失败 -1041\n#define ERROR_无游戏类型 -1042\n#define ERROR_HOOK失败 -1043\n#define ERROR_UNHOOK失败 -1044\n#define ERROR_功能失效 -1045\n#define ERROR_无效PE文件格式 -1046\n#define ERROR_未找到PE头 -1047\n#define ERROR_重定位表失败 -1048\n#define ERROR_未找到函数入口 -1049\n#define ERROR_无法附加DLL -1050\n#define ERROR_接口数量上限 -1051\n#define ERROR_已经存在 -1052\n#define ERROR_打开句柄失败 -1053\n#define ERROR_未找到全局环境 -1054\n#define ERROR_组件数量上限 -1055\n#define ERROR_未找到组件接口 -1056\n#define ERROR_接口类型不匹配 -1057\n#define ERROR_组件无效 -1058\n#define ERROR_接口地址无效 -1059\n#define ERROR_生成密钥失败 -1060\n#define ERROR_加密失败 -1061\n#define ERROR_解密失败 -1062\n#define ERROR_DLL中无此接口 -1063\n#define ERROR_下载失败 -1064\n#define ERROR_注册表操作失败 -1065\n#define ERROR_路径获取失败 -1066\n#define ERROR_提权失败 -1067\n#define ERROR_驱动已安装 -1068\n#define ERROR_HD驱动已安装无法安装HN驱动 -1069\n#define ERROR_资源未找到 -1070\n#define ERROR_资源加载失败 -1071\n#define ERROR_提取资源失败 -1072\n#define ERROR_未加载插件 -1073\n#define ERROR_文件无法保存 -1074\n#define ERROR_打开目录失败 -1075\n#define ERROR_写入文件的字节大小不符合要求 -1076\n#define ERROR_删除文件失败 -1077\n#define ERROR_获取字符串失败 -1078\n#define ERROR_获取注册表值失败 -1079\n#define ERROR_类型错误 -1080\n#define ERROR_参数不符合要求 -1081\n#define ERROR_区域超出 -1082\n#define ERROR_文件不存在 -1083\n#define ERROR_创建文件失败 -1084\n#define ERROR_文件读取失败 -1085\n#define ERROR_与系统驱动通讯失败 -1086\n#define ERROR_创建管道失败 -1087\n#define ERROR_创建进程失败 -1088\n#define ERROR_未找到相关字符串信息 -1089\n#define ERROR_缓冲区大小不充足 -1090\n#define ERROR_数据类型转换失败 -1091\n#define ERROR_格式化字符串失败 -1092\n#define ERROR_网络超时 -1093\n#define ERROR_网络连接失败 -1094\n#define ERROR_加载指定DLL失败 -1095\n#define ERROR_解析字符串失败 -1096\n#define ERROR_窗口大小变动导致数据不一致 -1097\n#define ERROR_打开剪切板失败 -1098\n#define ERROR_加锁失败 -1099\n#define ERROR_获取剪切板数据失败 -1100\n#define ERROR_版本号获取失败 -1101\n#define ERROR_已经绑定其他设备 -1102\n#define ERROR_已经达到最大在线数 -1103\n#define ERROR_账号或密码为空 -1104\n#define ERROR_验证失败 -1105\n#define ERROR_打开进程失败 -1106\n#define ERROR_进程位数不匹配 -1107\n#define ERROR_添加进程环境失败 -1108\n#define ERROR_定位特征地址失败 -1109\n#define ERROR_寻找空白地址失败 -1110\n#define ERROR_无操作类型 -1111\n#define ERROR_无相关句柄 -1112\n#define ERROR_无HDC句柄 -1113\n#define ERROR_获取矩形大小失败 -1114\n#define ERROR_拷贝数据失败 -1115\n#define ERROR_无效句柄 -1116\n#define ERROR_创建对象失败 -1117\n#define ERROR_截图方式需要重开才能切换 -1118\n#define ERROR_格式有误 -1119\n#define ERROR_字库数据为空 -1120\n#define ERROR_字库中未找到相应字 -1121\n#define ERROR_大小计算为0 -1122\n#define ERROR_容器大小不一致 -1123\n#define ERROR_句柄无效 -1124\n#define ERROR_获取PID无效 -1125\n#define ERROR_获取大小失败 -1126\n#define ERROR_获取失败 -1127\n#define ERROR_未找到 -1128\n#define ERROR_立即返回无效值 -1129\n#define ERROR_未设置路径 -1130\n#define ERROR_文件操作失败 -1131\n#define ERROR_写入内存失败 -1132\n#define ERROR_模块查找失败 -1133\n#define ERROR_接口查找失败 -1134\n#define ERROR_组件信息保存失败 -1135\n#define ERROR_组件加载失败 -1136\n#define ERROR_组件卸载失败 -1137\n#define ERROR_组件不符合卸载要求 -1138\n#define ERROR_进程环境句柄为NULL -1139\n#define ERROR_未绑定PID -1140\n#define ERROR_读取图片失败 -1141\n#define ERROR_打开注册表失败 -1142\n#define ERROR_获取注册表失败 -1143\n#define ERROR_写内存失败 -1144\n#define ERROR_清除缓存失败 -1145\n#define ERROR_字体无宽度 -1146\n#define ERROR_裁剪矩形数据失败 -1147\n#define ERROR_图片无宽或高 -1148\n#define ERROR_功能未开放 -1149\n#define ERROR_模块信息获取失败 -1150\n#define ERROR_未找到合适的JMP地址 -1151\n#define ERROR_HOOK初始化失败 -1152\n#define ERROR_无HOOK接口类型 -1153\n#define ERROR_CALL类型不匹配 -1154\n#define ERROR_创建通讯失败 -1155\n#define ERROR_加载通讯失败 -1156\n#define ERROR_数据格式错误 -1157\n#define ERROR_地址失效 -1158\n#define ERROR_坐标转换失败 -1159\n#define ERROR_容器为空 -1160\n#define ERROR_数据为空 -1161\n#define ERROR_特征不符合 -1162\n#define ERROR_范围未确定 -1163\n#define ERROR_缓冲区不足 -1164\n#define ERROR_此接口调试版本无效 -1165\n#define ERROR_子图不在范围内 -1166\n#define ERROR_插件数量上限 -1167\n#define ERROR_API枚举失败 -1168\n#define ERROR_无法定位模块 -1169\n#define ERROR_无效HOOK地址 -1170\n#define ERROR_无对应的HOOK函数 -1171\n#define ERROR_破坏字节超过容量 -1172\n#define ERROR_指定地址不适合HOOK -1173\n#define ERROR_没有充足的HOOK大小 -1174\n#define ERROR_设置回调地址失败 -1175\n#define ERROR_API获取时间失败 -1176\n#define ERROR_无效插件序号 -1177\n#define ERROR_进程不存在 -1178\n#define ERROR_未安装插件 -1179\n#define ERROR_初始化通讯失败 -1180\n#define ERROR_未初始化通讯序号 -1181\n#define ERROR_当前线程字库为空 -1182\n#define ERROR_线程数量超出限制 -1183\n#define ERROR_字库序号不存在 -1184\n#define ERROR_释放资源失败 -1185\n#define ERROR_超出容量 -1186\n#define ERROR_空模型 -1187\n#define ERROR_环境序号不存在 -1188\n#define ERROR_回调处理中 -1189\n#define ERROR_无法操作绑定窗口 -1190\n#define ERROR_接口已被移除 -1191\n#define ERROR_不支持类型 -1192\n#define ERROR_初始化失败 -1193\n#define ERROR_环境被卸载 -1194\n#define ERROR_进程已经关闭 -1195\n#define ERROR_中控环境未初始化 -1196\n#define ERROR_未加载HD驱动 -1197\n#define ERROR_未绑定设备 -1198\n#define ERROR_未找到进程 -1199\n#define ERROR_进程PID不匹配 -1200\n#define ERROR_前台模式无法后台 -1201\n#define ERROR_JMP地址无效 -1202\n#define ERROR_HOOK地址无效 -1203\n#define ERROR_类型和HOOK地址不匹配 -1204\n#define ERROR_不在HD多线程环境下 -1205\n#define ERROR_未连接 -1206\n#define ERROR_进程环境已被卸载 -1207\n#define ERROR_安装插件失败 -1208 //检查是否安装了驱动\n#define ERROR_安装驱动失败 -1209 //检查是否管理员或者杀毒或者关闭内核隔离\n#define ERROR_加载环境失败 -1210 //检查账号是否欠费或者网络问题或者参数不符合要求\n#define ERROR_初始化序号失败 -1211 //一般不会失败\n#define ERROR_获取PID超时返回 -1212 //确定是否打开进程成功或者增大等待时间\n#define ERROR_获取状态值20超时返回 -1213 //未安装插件或被拦截或增大等待时间\n#define ERROR_获取状态值120超时返回 -1214 //未安装插件或被拦截或增大等待时间\n#define ERROR_继续失败 -1215 //可能未初始化相关环境 一般不会失败\n#define ERROR_当前进程插件序号不一致 -1216 //说明指定的PID进程绑定的窗口序号已经存在 与指定的序号不一致 调用HCInject_GetPreWinIndex 获取指定PID的绑定的窗口序号\n#define ERROR_PID无效 -1217\n#define ERROR_扩展序号不能用 -1218//扩展序号不能自己指定\n#define ERROR_接口丢弃 -1219//老版本的接口丢弃\n#define ERROR_序号超出限制 -1220\n#define ERROR_已经重启 -1221\n#define ERROR_登录中无法重启 -1222\n#define ERROR_暂停中无法重启 -1223\n#define ERROR_操作中无法重启 -1224\n#define ERROR_强制关闭线程中无法发送 -1225\n#define ERROR_卸载失败 -1226\n#define ERROR_未完全开启 -1227\n#define ERROR_逻辑异常 -1228\n#define ERROR_无法连接VNC -1229\n#define ERROR_未连接过VNC -1230\n#define ERROR_未关联过VM -1231\n#define ERROR_未获取截图环境 -1232\n#define ERROR_未获取截图环境 -1232\n#define ERROR_环境为NULL -1233\n#define ERROR_区域无效 -1234\n#define ERROR_继续当前操作 -1235\n#define ERROR_加解密失败 -1236\n#define ERROR_未安装驱动 -1237\n#define ERROR_调试版本无法加解密 -1238\n#define ERROR_截图缓存不存在 -1239//检查截图模式不对 或者 未开启截图 请用截图查看器查看是否截图缓存存在",
        "notes": [
          "也可以可通过工具后台查看"
        ],
        "codeExamples": [
          {
            "title": "HD返回值表 - 基础示例",
            "code": ""
          },
          {
            "title": "HD返回值表 - 进阶用法",
            "code": "// huoshanpc 示例2\n"
          },
          {
            "title": "HD返回值表 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n"
          }
        ]
      }
    ]
  },
  {
    "id": "category_2",
    "name": "基础功能接口",
    "functions": [
      {
        "id": "function_1",
        "name": "HD登录.获取版本号",
        "type": "函数",
        "description": "获取当前插件版本号",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_GetVersion();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "返回值即是版本号长整数型(8字节)",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD登录.获取版本号 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD登录.获取版本号 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD登录.获取版本号 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_GetVersion"
      },
      {
        "id": "function_2",
        "name": "HCEnv_GetRetJson",
        "type": "函数",
        "description": "获取最近一次调用接口返回的json字符串",
        "prototypes": [
          {
            "prototype": "char* __stdcall HCEnv_GetRetJson(__int32 窗口序号);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号可以包含0表示中控"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "并不是所有接口都返回json字符串",
          "有一些接口返回单一的值就没必要调用这个接口",
          "一些接口需要拿到字符串信息返回,那么这些字符串会存在json字符串中,需要自己调用此接口获取"
        ],
        "codeExamples": [
          {
            "title": "HCEnv_GetRetJson - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCEnv_GetRetJson - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCEnv_GetRetJson - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_3",
        "name": "HD通用.获取最近返回值",
        "type": "函数",
        "description": "获取最近一次调用接口返回的值(用于检测是否有错)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_GetRetValue(__int32 窗口序号);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号可以包含0表示中控"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD通用.获取最近返回值 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通用.获取最近返回值 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通用.获取最近返回值 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCEnv_GetRetValue"
      },
      {
        "id": "function_4",
        "name": "HCEnv_GetErrorStr",
        "type": "函数",
        "description": "通过传递HD返回值获取字符串信息",
        "prototypes": [
          {
            "prototype": "char* __stdcall HCEnv_GetErrorStr(__int32 ret);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "ret",
            "type": "__int32",
            "desc": "HD返回值"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [],
        "codeExamples": [
          {
            "title": "HCEnv_GetErrorStr - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCEnv_GetErrorStr - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCEnv_GetErrorStr - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_5",
        "name": "HD通用.获取最近API返回值",
        "type": "函数",
        "description": "获取最近一次调用WIN32API错误值",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_GetLastError();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD通用.获取最近API返回值 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通用.获取最近API返回值 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通用.获取最近API返回值 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCEnv_GetLastError"
      },
      {
        "id": "function_6",
        "name": "HD环境.获取最大多开数",
        "type": "函数",
        "description": "获取最大窗口数",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_GetMaxWindowNum();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "窗口序号不能大于等于这个返回值同时也不能小于0"
        ],
        "codeExamples": [
          {
            "title": "HD环境.获取最大多开数 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.获取最大多开数 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.获取最大多开数 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCEnv_GetMaxWindowNum"
      },
      {
        "id": "function_7",
        "name": "HD通用.获取当前插件状态值",
        "type": "函数",
        "description": "获取当前环境搭建流程中的操作信息",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCInject_GetLastInfo(__int32 窗口序号);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "这个CALL返回HD状态信息可以确定当前处于那个步骤",
          "typedefenumHD状态信息{HD状态信息_无=0,\\n0HD状态信息_DLL环境_加载全局成功=1,\\n1HD状态信息_DLL环境_加载全局失败=2,\\n2HD状态信息_DLL环境_窗口序号不符合=3,\\n3HD状态信息_DLL环境_进程不符合=4,\\n4HD状态信息_DLL环境_打开句柄失败=5,\\n5HD状态信息_DLL环境_获取内存失败=6,\\n6HD状态信息_DLL环境_等待继续=20,\\n20需要调用HCInject_Continue()HD状态信息_通讯环境_开始=21,\\n21HD状态信息_通讯环境_成功=22,\\n22HD状态信息_通讯环境_失败=23,\\n23HD状态信息_通讯环境_打开句柄失败=24,\\n24HD状态信息_通讯环境_获取内存失败=25,\\n25HD状态信息_接口映射_成功=40,\\n40自制通讯协议创建HD状态信息_接口映射_失败=41,\\n41HD状态信息_LUA_成功=60,\\n60可以执行LUAHD状态信息_LUA_失败=61,\\n61不可以执行LUAHD状态信息_数据库_开启=80,\\n80需要调用HHIT2_Load()的时候参数bOpenData设置为1HD状态信息_数据库_未开启=81,\\n81HD状态信息_数据库_开启失败=82,\\n82内置特征码有误联系管理员HD状态信息_验证_有误=100,\\n100联系管理员HD状态信息_监听_成功=120,\\n120【【【【大于等于120说明可以调用接口了】】】】HD状态信息_监听_失败=121,\\n121基本是不会出现这个错误HD状态信息_挂接主线_开启=140,\\n140调用HD状态信息_挂接主线_进入=141,\\n141准备挂接HD状态信息_挂接主线_尝试中=142,\\n142处于这个阶段需要用SetHwnd()暂时没用HD状态信息_挂接主线_成功=143,\\n143成功挂接所有关于可以主线程调用的接口的参数\\\"是否主线程调用\\\"生效HD状态信息_挂接主线_失败=144,\\n144HD状态信息_挂接主线_已经开启=145,\\n145已经开启了HD状态信息_加载_延迟=146,\\n2秒延迟HD状态信息_通讯加载失败=147\\n2秒延迟}HD状态信息;"
        ],
        "codeExamples": [
          {
            "title": "HD通用.获取当前插件状态值 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通用.获取当前插件状态值 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通用.获取当前插件状态值 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCInject_GetLastInfo"
      },
      {
        "id": "function_8",
        "name": "HD环境.获取插件执行环境信息",
        "type": "函数",
        "description": "获取通讯插件所绑定的目标进程的执行线程环境信息",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_GetExcuteEnvInfo(__int32 窗口序号);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD环境.获取插件执行环境信息 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.获取插件执行环境信息 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.获取插件执行环境信息 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCEnv_GetExcuteEnvInfo"
      },
      {
        "id": "function_9",
        "name": "HD注入.设置插件信息",
        "type": "函数",
        "description": "设置插件信息",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCInject_SetPlugin(char* 发布版本DLL名=NULL,char* 调试版本DLL名=NULL);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "发布版本DLL名",
            "type": "char*",
            "desc": "为空则根据不同版本内置了DLL名字"
          },
          {
            "name": "调试版本DLL名",
            "type": "char*",
            "desc": "为空则根据不同版本内置了DLL名字"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "易语言/火山/Python/炫语言/C#等语言:还需要拿到模块源码更改导入DLL名字需要与自定义DLL同名",
          "内置版本名规则:",
          "\\n======64位#ifdef_WIN64#ifdef_UNICODE\\n64位W版本std::stringHCInject::g_发布版本DLL名字=\\\"hd64.dll\\\";std::stringHCInject::g_调试版本DLL名字=\\\"hddebug64.dll\\\";#else\\n64位A版本std::stringHCInject::g_发布版本DLL名字=\\\"hd64a.dll\\\";std::stringHCInject::g_调试版本DLL名字=\\\"hddebug64a.dll\\\";#endif\\n======32位#else#ifdef_UNICODE\\n32位W版本std::stringHCInject::g_发布版本DLL名字=\\\"hd.dll\\\";std::stringHCInject::g_调试版本DLL名字=\\\"hddebug.dll\\\";#else\\n32位A版本std::stringHCInject::g_发布版本DLL名字=\\\"hda.dll\\\";std::stringHCInject::g_调试版本DLL名字=\\\"hddebuga.dll\\\";#endif#endif\\n》》》》》》"
        ],
        "codeExamples": [
          {
            "title": "HD注入.设置插件信息 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD注入.设置插件信息 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD注入.设置插件信息 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCInject_SetPlugin"
      }
    ]
  },
  {
    "id": "category_3",
    "name": "IP模块[IP]",
    "functions": [
      {
        "id": "function_1",
        "name": "HDIP.有米设置路径",
        "type": "函数",
        "description": "设置有米软件路径(EXE路径)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCIP_YMSetRootPath(char* path);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "path",
            "type": "char*",
            "desc": "路径"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "软件找HD作者拿(魔改版)"
        ],
        "codeExamples": [
          {
            "title": "HDIP.有米设置路径 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDIP.有米设置路径 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDIP.有米设置路径 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCIP_YMSetRootPath"
      },
      {
        "id": "function_2",
        "name": "HDIP.有米添加IP",
        "type": "函数",
        "description": "添加IP",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCIP_YMAddIP(char* ip,int port,char* account,char* password,int type,int kfp=1,char* proName=NULL);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "ip",
            "type": "char*",
            "desc": "IP如"
          },
          {
            "name": "port",
            "type": "int",
            "desc": "端口"
          },
          {
            "name": "account",
            "type": "char*",
            "desc": "对于type==1是账号如"
          },
          {
            "name": "password",
            "type": "char*",
            "desc": "密码"
          },
          {
            "name": "type",
            "type": "int",
            "desc": "1socket52ss"
          },
          {
            "name": "kfp",
            "type": "int",
            "desc": "是否可分配(一般就为空默认1就行)"
          },
          {
            "name": "proName",
            "type": "char*",
            "desc": "进程名(一般就为空默认NULL就行)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "软件找HD作者拿(魔改版)"
        ],
        "codeExamples": [
          {
            "title": "HDIP.有米添加IP - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDIP.有米添加IP - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDIP.有米添加IP - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCIP_YMAddIP"
      },
      {
        "id": "function_3",
        "name": "HDIP.有米添加进程",
        "type": "函数",
        "description": "添加代理的进程名",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCIP_YMAddProcess(char* proName);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "proName",
            "type": "char*",
            "desc": "进程名如"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "软件找HD作者拿(魔改版)"
        ],
        "codeExamples": [
          {
            "title": "HDIP.有米添加进程 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDIP.有米添加进程 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDIP.有米添加进程 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCIP_YMAddProcess"
      },
      {
        "id": "function_4",
        "name": "HDIP.有米打开",
        "type": "函数",
        "description": "打开有米软件",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCIP_YMOpen(int type);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "type",
            "type": "int",
            "desc": "0国内IP1国外IP"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "软件找HD作者拿(魔改版)",
          "流程:",
          "1.先设置路径",
          "2.添加代理进程和IP",
          "3.打开有米"
        ],
        "codeExamples": [
          {
            "title": "HDIP.有米打开 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDIP.有米打开 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDIP.有米打开 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCIP_YMOpen"
      },
      {
        "id": "function_5",
        "name": "HDIP.有米是否打开",
        "type": "函数",
        "description": "有米软件是否已经打开",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCIP_YMIsOpen(int type);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "type",
            "type": "int",
            "desc": "0国内IP1国外IP"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "软件找HD作者拿(魔改版)",
          "流程:",
          "1.先设置路径",
          "2.添加代理进程和IP",
          "3.打开有米"
        ],
        "codeExamples": [
          {
            "title": "HDIP.有米是否打开 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDIP.有米是否打开 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDIP.有米是否打开 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCIP_YMIsOpen"
      },
      {
        "id": "function_6",
        "name": "HDIP.有米关闭",
        "type": "函数",
        "description": "关闭有米软件",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCIP_YMClose(int type);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "type",
            "type": "int",
            "desc": "0国内IP1国外IP"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "软件找HD作者拿(魔改版)",
          "流程:",
          "1.先设置路径",
          "2.添加代理进程和IP",
          "3.打开有米"
        ],
        "codeExamples": [
          {
            "title": "HDIP.有米关闭 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDIP.有米关闭 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDIP.有米关闭 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCIP_YMClose"
      }
    ]
  },
  {
    "id": "category_4",
    "name": "登录验证(Login)",
    "functions": [
      {
        "id": "function_1",
        "name": "HD登录.登录",
        "type": "函数",
        "description": "HD登录验证接口（强烈建议主线程中调用）",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_Login(char* account,char* password,char* appName,char* appLparam,BOOL bAutoUpdate=FALSE,BOOL bShowMsgBox=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "account",
            "type": "char*",
            "desc": "账号"
          },
          {
            "name": "password",
            "type": "char*",
            "desc": "密码"
          },
          {
            "name": "appName",
            "type": "char*",
            "desc": "中控进程名字(指定了方便自动更新)"
          },
          {
            "name": "appLparam",
            "type": "char*",
            "desc": "打开中控的启动参数(指定了方便自动更新)"
          },
          {
            "name": "bAutoUpdate",
            "type": "bool",
            "desc": "是否自动更新"
          },
          {
            "name": "bShowMsgBox",
            "type": "bool",
            "desc": "如果需要更新是否弹出消息框提醒"
          }
        ],
        "returnValue": "查看返回值表\n大于0表示版本号:当前服务器的版本号不是当前插件的版本号",
        "notes": [
          "1.验证接口,所有接口需要通过验证才能调用",
          "2.如果自己写中控可以不用打开自动更新"
        ],
        "codeExamples": [
          {
            "title": "HD登录.登录 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD登录.登录 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD登录.登录 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_Login"
      },
      {
        "id": "function_2",
        "name": "HD登录.获取最近登录点数",
        "type": "函数",
        "description": "最近登录时候的点数",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_GetLastLoginFYI();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD登录.获取最近登录点数 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD登录.获取最近登录点数 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD登录.获取最近登录点数 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_GetLastLoginFYI"
      },
      {
        "id": "function_3",
        "name": "HD登录.获取最近登录时间",
        "type": "函数",
        "description": "获取最近登录时间戳",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_GetExpiredTimeStamp();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD登录.获取最近登录时间 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD登录.获取最近登录时间 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD登录.获取最近登录时间 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_GetExpiredTimeStamp"
      },
      {
        "id": "function_4",
        "name": "HD登录.获取点数",
        "type": "函数",
        "description": "获取点数",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_GetFYI();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD登录.获取点数 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD登录.获取点数 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD登录.获取点数 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_GetFYI"
      },
      {
        "id": "function_5",
        "name": "HD登录.获取最大多开数",
        "type": "函数",
        "description": "获取最大多少开",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_GetOpenMaxNum();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD登录.获取最大多开数 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD登录.获取最大多开数 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD登录.获取最大多开数 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_GetOpenMaxNum"
      }
    ]
  },
  {
    "id": "category_5",
    "name": "安装插件扩展模块[ex]",
    "functions": [
      {
        "id": "function_1",
        "name": "HD扩展.安装插件1",
        "type": "函数",
        "description": "第一种通讯安装插件方式(安装插件再打开进程)如果使用HD多线程模块强烈建议在登录回调中使用",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HDEX_InstallPlugin1(__int32 winIndex,char* app,int appType,int injectType,int memeType,int gameType,BOOL bAccept,__int64 openFun,__int64 checkFun=NULL,int timeOut=30000);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "winIndex",
            "type": "__int32",
            "desc": "窗口序号"
          },
          {
            "name": "app",
            "type": "char*",
            "desc": "进程名"
          },
          {
            "name": "appType",
            "type": "int",
            "desc": "进程类型32/64"
          },
          {
            "name": "injectType",
            "type": "int",
            "desc": "注入类型012"
          },
          {
            "name": "memeType",
            "type": "int",
            "desc": "内存模式012"
          },
          {
            "name": "gameType",
            "type": "int",
            "desc": "游戏类型一般为0就行"
          },
          {
            "name": "bAccept",
            "type": "bool",
            "desc": "是否开启接受线程"
          },
          {
            "name": "openFun",
            "type": "__int64",
            "desc": "打开回调回调类型"
          },
          {
            "name": "checkFun",
            "type": "__int64",
            "desc": "检查回调回调类型"
          },
          {
            "name": "timeOut",
            "type": "int",
            "desc": "超时时间"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "可以参考表安装插件接口类型表",
          "1.支持重连,重连的前提是不能被HCEnv_UnLoad卸载",
          "回调解析:",
          "打开回调openFun:可以参考表安装插件接口类型表",
          "typedef__int64 (__stdcall* INSTALLPLUGint YPE)(int windowsIndex);",
          "参数:windowsIndex:当前指定序号",
          "说明:1.对于第一种方式打开回调不能为NULL,内部先安装插件再触发回调打开进程(在打开回调中可以手动或者自动打开进程1.如果是手动直接返回1就行或错误值表示中断操作2.如果是自动返回对应的PID或错误值表示中断操作)2.其他二种方式打开回调可以为NULL,表示进程已经打开了,不需要在回调中打开,此时使用指定的PID或者窗口句柄来安装插件,具体是PID还是句柄请查看安装插件接口类型表3.返回值根据当前的安装插件方式不同有不同的含义:（具体请看安装插件接口类型表和覆盖策略）",
          "3.1方式二是通过PID安装插件那么返回值应该为打开进程的PID,并把传递的PID参数给覆盖了(请看PID覆盖策略),可以返回小于等于0的错误值或者不存在的PID,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。",
          "3.1.1PID覆盖策略",
          "\\n1.如果指定的参数PID有效大于0并存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID\\n2.如果指定的参数PID有效大于0并存在同时打开回调返回的PID无效小于等于0不存在就用指定参数的PID\\n3.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID无效小于等于0不存在就直接返回错误\\n4.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID",
          "3.2方式三是通过窗口句柄安装插件那么返回值应该为打开进程的句柄,并把传递的句柄参数给覆盖了(请看窗口句柄覆盖策略),可以返回小于等于0的错误值或者窗口句柄无效,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。",
          "3.2.1窗口句柄覆盖策略",
          "\\n1.如果指定参数的窗口句柄有效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄\\n2.如果指定参数的窗口句柄有效同时打开回调返回的的句柄无效就用指定参数的句柄\\n3.如果指定参数的窗口句柄无效同时打开回调返回的的句柄无效就直接返回错误\\n4.如果指定参数的窗口句柄无效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄",
          "检查回调checkFun:",
          "typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int prePid,int error);",
          "参数:windowsIndex:当前指定序号preWindowsIndex:之前绑定的序号或者错误值(小于0)--来源HCInject_GetPreWinIndex返回prePid:之前绑定的序号对应的PID--来源HCInject_GetPid返回error:提示值",
          "error==RET_重连窗口(5)----->返回值含义:(1重连直接进行加载环境0新窗口)",
          "error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的)  我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 ",
          "error==RET_重连窗口序号不一致(6)----->返回值含义:(1重连并使用之前绑定的序号进行加载环境   0新窗口(需要用户在回调中把之前PID给关闭)) \n\nerror== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的)  我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 \n",
          "其他情况可以返回小于0的自定义值:表示直接中断安装插件流程,并返回对应的值(这个值只要小于0即可,可以作为自定义值)",
          "说明:",
          "1.如果指定的检查回调为NULL,当内部检查到是重连窗口的时候",
          "2.如果发现序号不一致就会直接返回(ERROR_当前进程插件序号不一致-1216)",
          "3.如果序号一致就直接加载环境并实现重连",
          "几个核心的点归纳总结出来其实就能规避掉很多坑了比如1.没安装过插件的都不算重连窗口全部当新窗口处理会触发打开回调2.安装过插件的不管是卸载了环境还是崩溃或重启中控都算重连窗口不会触发打开回调会触发检查回调",
          ""
        ],
        "codeExamples": [
          {
            "title": "HD扩展.安装插件1 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD扩展.安装插件1 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD扩展.安装插件1 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HDEX_InstallPlugin1"
      },
      {
        "id": "function_2",
        "name": "HD扩展.安装插件2",
        "type": "函数",
        "description": "第二种通讯安装插件方式(打开进程然后安装插件),通过pid如果使用HD多线程模块强烈建议在登录回调中使用",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HDEX_InstallPlugin2(__int32 winIndex,int funType,int pid,int appType,int gameType,BOOL bAccept,__int64 openFun=NULL,__int64 checkFun=NULL,int timeOut=30000);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "winIndex",
            "type": "__int32",
            "desc": "窗口序号"
          },
          {
            "name": "funType",
            "type": "int",
            "desc": "内部安装插件接口类型查看安装插件接口类型表支持246"
          },
          {
            "name": "pid",
            "type": "int",
            "desc": "指定PID可以为0,但是必须指定打开回调,打开回调返回PID"
          },
          {
            "name": "appType",
            "type": "int",
            "desc": "进程类型32/64"
          },
          {
            "name": "gameType",
            "type": "int",
            "desc": "游戏类型一般为0就行"
          },
          {
            "name": "bAccept",
            "type": "bool",
            "desc": "是否开启接受线程"
          },
          {
            "name": "openFun",
            "type": "__int64",
            "desc": "打开回调回调类型"
          },
          {
            "name": "checkFun",
            "type": "__int64",
            "desc": "检查回调回调类型"
          },
          {
            "name": "timeOut",
            "type": "int",
            "desc": "超时时间"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "可以参考表安装插件接口类型表",
          "1.支持重连,重连的前提是不能被HCEnv_UnLoad卸载",
          "回调解析:",
          "打开回调openFun",
          "typedef__int64 (__stdcall* INSTALLPLUGint YPE)(int windowsIndex);",
          "参数:windowsIndex:当前指定序号",
          "说明:1.对于第一种方式打开回调不能为NULL,内部先安装插件再触发回调打开进程(在打开回调中可以手动或者自动打开进程1.如果是手动直接返回1就行或错误值表示中断操作2.如果是自动返回对应的PID或错误值表示中断操作)2.其他二种方式打开回调可以为NULL,表示进程已经打开了,不需要在回调中打开,此时使用指定的PID或者窗口句柄来安装插件,具体是PID还是句柄请查看安装插件接口类型表3.返回值根据当前的安装插件方式不同有不同的含义:（具体请看安装插件接口类型表和覆盖策略）",
          "3.1方式二是通过PID安装插件那么返回值应该为打开进程的PID,并把传递的PID参数给覆盖了(请看PID覆盖策略),可以返回小于等于0的错误值或者不存在的PID,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。",
          "3.1.1PID覆盖策略",
          "\\n1.如果指定的参数PID有效大于0并存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID\\n2.如果指定的参数PID有效大于0并存在同时打开回调返回的PID无效小于等于0不存在就用指定参数的PID\\n3.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID无效小于等于0不存在就直接返回错误\\n4.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID",
          "3.2方式三是通过窗口句柄安装插件那么返回值应该为打开进程的句柄,并把传递的句柄参数给覆盖了(请看窗口句柄覆盖策略),可以返回小于等于0的错误值或者窗口句柄无效,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。",
          "3.2.1窗口句柄覆盖策略",
          "\\n1.如果指定参数的窗口句柄有效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄\\n2.如果指定参数的窗口句柄有效同时打开回调返回的的句柄无效就用指定参数的句柄\\n3.如果指定参数的窗口句柄无效同时打开回调返回的的句柄无效就直接返回错误\\n4.如果指定参数的窗口句柄无效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄",
          "检查回调checkFun:",
          "typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int prePid,int error);",
          "参数:windowsIndex:当前指定序号preWindowsIndex:之前绑定的序号或者错误值(小于0)--来源HCInject_GetPreWinIndex返回prePid:之前绑定的序号对应的PID--来源HCInject_GetPid返回error:提示值",
          "error==RET_重连窗口(5)----->返回值含义:(1重连直接进行加载环境0新窗口)",
          "error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的)  我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 ",
          "error==RET_重连窗口序号不一致(6)----->返回值含义:(1重连并使用之前绑定的序号进行加载环境0新窗口(需要用户在回调中把之前PID给关闭))",
          "说明:",
          "1.如果指定的检查回调为NULL,当内部检查到是重连窗口的时候",
          "2.如果发现序号不一致就会直接返回(ERROR_当前进程插件序号不一致-1216)",
          "3.如果序号一致就直接加载环境并实现重连",
          "几个核心的点归纳总结出来其实就能规避掉很多坑了比如1.没安装过插件的都不算重连窗口全部当新窗口处理会触发打开回调2.安装过插件的不管是卸载了环境还是崩溃了中控都算重连窗口不会触发打开回调"
        ],
        "codeExamples": [
          {
            "title": "HD扩展.安装插件2 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD扩展.安装插件2 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD扩展.安装插件2 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HDEX_InstallPlugin2"
      },
      {
        "id": "function_3",
        "name": "HD扩展.安装插件3",
        "type": "函数",
        "description": "第三种通讯安装插件方式(打开进程然后安装插件),通过窗口句柄如果使用HD多线程模块强烈建议在登录回调中使用",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HDEX_InstallPlugin3(__int32 winIndex,int funType,__int64 hwnd,int appType,int gameType,BOOL bAccept,__int64 openFun=NULL,__int64 checkFun=NULL,int timeOut=30000);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "winIndex",
            "type": "__int32",
            "desc": "窗口序号"
          },
          {
            "name": "funType",
            "type": "int",
            "desc": "内部安装插件接口类型查看安装插件接口类型表支持357"
          },
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "指定窗口句柄可以为0,但是必须指定打开回调,打开回调返回窗口句柄"
          },
          {
            "name": "appType",
            "type": "int",
            "desc": "进程类型32/64"
          },
          {
            "name": "gameType",
            "type": "int",
            "desc": "游戏类型一般为0就行"
          },
          {
            "name": "bAccept",
            "type": "bool",
            "desc": "是否开启接受线程"
          },
          {
            "name": "openFun",
            "type": "__int64",
            "desc": "打开回调回调类型"
          },
          {
            "name": "checkFun",
            "type": "__int64",
            "desc": "检查回调回调类型"
          },
          {
            "name": "timeOut",
            "type": "int",
            "desc": "超时时间"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "可以参考表安装插件接口类型表",
          "1.支持重连,重连的前提是不能被HCEnv_UnLoad卸载",
          "回调解析:",
          "打开回调openFun:可以参考表安装插件接口类型表",
          "typedef__int64 (__stdcall* INSTALLPLUGint YPE)(int windowsIndex);",
          "参数:windowsIndex:当前指定序号",
          "说明:1.对于第一种方式打开回调不能为NULL,内部先安装插件再触发回调打开进程(在打开回调中可以手动或者自动打开进程1.如果是手动直接返回1就行或错误值表示中断操作2.如果是自动返回对应的PID或错误值表示中断操作)2.其他二种方式打开回调可以为NULL,表示进程已经打开了,不需要在回调中打开,此时使用指定的PID或者窗口句柄来安装插件,具体是PID还是句柄请查看安装插件接口类型表3.返回值根据当前的安装插件方式不同有不同的含义:（具体请看安装插件接口类型表和覆盖策略）",
          "3.1方式二是通过PID安装插件那么返回值应该为打开进程的PID,并把传递的PID参数给覆盖了(请看PID覆盖策略),可以返回小于等于0的错误值或者不存在的PID,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。",
          "3.1.1PID覆盖策略",
          "\\n1.如果指定的参数PID有效大于0并存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID\\n2.如果指定的参数PID有效大于0并存在同时打开回调返回的PID无效小于等于0不存在就用指定参数的PID\\n3.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID无效小于等于0不存在就直接返回错误\\n4.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID",
          "3.2方式三是通过窗口句柄安装插件那么返回值应该为打开进程的句柄,并把传递的句柄参数给覆盖了(请看窗口句柄覆盖策略),可以返回小于等于0的错误值或者窗口句柄无效,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。",
          "3.2.1窗口句柄覆盖策略",
          "\\n1.如果指定参数的窗口句柄有效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄\\n2.如果指定参数的窗口句柄有效同时打开回调返回的的句柄无效就用指定参数的句柄\\n3.如果指定参数的窗口句柄无效同时打开回调返回的的句柄无效就直接返回错误\\n4.如果指定参数的窗口句柄无效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄",
          "检查回调checkFun:",
          "typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int prePid,int error);",
          "参数:windowsIndex:当前指定序号preWindowsIndex:之前绑定的序号或者错误值(小于0)--来源HCInject_GetPreWinIndex返回prePid:之前绑定的序号对应的PID--来源HCInject_GetPid返回error:提示值",
          "error==RET_重连窗口(5)----->返回值含义:(1重连直接进行加载环境0新窗口)",
          "error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的)  我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 ",
          "error==RET_重连窗口序号不一致(6)----->返回值含义:(1重连并使用之前绑定的序号进行加载环境0新窗口(需要用户在回调中把之前PID给关闭))",
          "说明:",
          "1.如果指定的检查回调为NULL,当内部检查到是重连窗口的时候",
          "2.如果发现序号不一致就会直接返回(ERROR_当前进程插件序号不一致-1216)",
          "3.如果序号一致就直接加载环境并实现重连",
          "几个核心的点归纳总结出来其实就能规避掉很多坑了比如1.没安装过插件的都不算重连窗口全部当新窗口处理会触发打开回调2.安装过插件的不管是卸载了环境还是崩溃了中控都算重连窗口不会触发打开回调"
        ],
        "codeExamples": [
          {
            "title": "HD扩展.安装插件3 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD扩展.安装插件3 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD扩展.安装插件3 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HDEX_InstallPlugin3"
      },
      {
        "id": "function_4",
        "name": "HD扩展.安装插件VM",
        "type": "函数",
        "description": "打开后安装通过PID针对虚拟机内部自动关联虚拟机如果使用HD多线程模块强烈建议在登录回调中使用",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HDEX_InstallPluginVM(__int32 winIndex,int funType,int vmPid,int vncPort,int appType,__int64 openFun=NULL,__int64 checkFun=NULL,int timeOut=30000);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "winIndex",
            "type": "__int32",
            "desc": "窗口序号"
          },
          {
            "name": "funType",
            "type": "int",
            "desc": "内部安装插件接口类型查看安装插件接口类型表支持357从第二种继承过来的用法一样"
          },
          {
            "name": "vmPid",
            "type": "int",
            "desc": "虚拟机PID或者打开回调指定"
          },
          {
            "name": "vncPort",
            "type": "int",
            "desc": "虚拟机VNC端口-1表示不连接VNC大于0表示连接VNC(会断开后重新连接)0为使用之前的缓存VNC端口(会断开后重新连接)"
          },
          {
            "name": "appType",
            "type": "int",
            "desc": "进程类型32/64"
          },
          {
            "name": "openFun",
            "type": "__int64",
            "desc": "打开回调回调类型"
          },
          {
            "name": "checkFun",
            "type": "__int64",
            "desc": "检查回调回调类型"
          },
          {
            "name": "timeOut",
            "type": "int",
            "desc": "超时时间"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "可以参考表安装插件接口类型表",
          "1.调用之前记得打开服务器HCVMDMA_StartServer并确定正确打开HCVMDMA_ServerIsStart",
          "2.其他规则和前3种安装插件方式一致",
          "3.支持重连,重连的前提是不能被HCEnv_UnLoad卸载",
          "回调解析:",
          "打开回调openFun:可以参考表安装插件接口类型表",
          "typedef__int64 (__stdcall* INSTALLPLUGint YPE)(int windowsIndex);",
          "参数:windowsIndex:当前指定序号",
          "说明:1.对于第一种方式打开回调不能为NULL,内部先安装插件再触发回调打开进程(在打开回调中可以手动或者自动打开进程1.如果是手动直接返回1就行或错误值表示中断操作2.如果是自动返回对应的PID或错误值表示中断操作)2.其他二种方式打开回调可以为NULL,表示进程已经打开了,不需要在回调中打开,此时使用指定的PID或者窗口句柄来安装插件,具体是PID还是句柄请查看安装插件接口类型表3.返回值根据当前的安装插件方式不同有不同的含义:（具体请看安装插件接口类型表和覆盖策略）",
          "3.1方式二是通过PID安装插件那么返回值应该为打开进程的PID,并把传递的PID参数给覆盖了(请看PID覆盖策略),可以返回小于等于0的错误值或者不存在的PID,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。",
          "3.1.1PID覆盖策略",
          "\\n1.如果指定的参数PID有效大于0并存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID\\n2.如果指定的参数PID有效大于0并存在同时打开回调返回的PID无效小于等于0不存在就用指定参数的PID\\n3.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID无效小于等于0不存在就直接返回错误\\n4.如果指定的参数PID无效小于等于0不存在同时打开回调返回的PID有效大于0并存在就用打开回调返回的PID覆盖指定参数的PID",
          "3.2方式三是通过窗口句柄安装插件那么返回值应该为打开进程的句柄,并把传递的句柄参数给覆盖了(请看窗口句柄覆盖策略),可以返回小于等于0的错误值或者窗口句柄无效,从而中断安装插件退出,不做相应的安装插件流程(初始化序号-获取PID-加载环境-等待20-继续-等待120),并把打开回调返回值当作安装插件返回值返回。",
          "3.2.1窗口句柄覆盖策略",
          "\\n1.如果指定参数的窗口句柄有效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄\\n2.如果指定参数的窗口句柄有效同时打开回调返回的的句柄无效就用指定参数的句柄\\n3.如果指定参数的窗口句柄无效同时打开回调返回的的句柄无效就直接返回错误\\n4.如果指定参数的窗口句柄无效同时打开回调返回的的句柄有效就用打开回调返回的句柄覆盖指定参数的句柄",
          "检查回调checkFun:",
          "typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int prePid,int error);",
          "参数:windowsIndex:当前指定序号preWindowsIndex:之前绑定的序号或者错误值(小于0)--来源HCInject_GetPreWinIndex返回prePid:之前绑定的序号对应的PID--来源HCInject_GetPid返回error:提示值",
          "error==RET_重连窗口(5)----->返回值含义:(1重连直接进行加载环境0新窗口)",
          "error== RET_检查PID存在(8)----->触发条件:内部检查是PID不存在触发,这种情况一般是隐藏PID导致的或者真实不存在 返回值含义 :(大于0表示开发者认为prepid参数指定的PID是存在的)  我们一般返回-1或者0就行,除非有特殊情况,比如隐藏了进程导致内部遍历系统拿不到PID这个时候会发送RET_检查PID存在(8)告知开发者来做处理 ",
          "error==RET_重连窗口序号不一致(6)----->返回值含义:(1重连并使用之前绑定的序号进行加载环境0新窗口(需要用户在回调中把之前PID给关闭))",
          "说明:",
          "1.如果指定的检查回调为NULL,当内部检查到是重连窗口的时候",
          "2.如果发现序号不一致就会直接返回(ERROR_当前进程插件序号不一致-1216)",
          "3.如果序号一致就直接加载环境并实现重连",
          "几个核心的点归纳总结出来其实就能规避掉很多坑了比如1.没安装过插件的都不算重连窗口全部当新窗口处理会触发打开回调2.安装过插件的不管是卸载了环境还是崩溃了中控都算重连窗口不会触发打开回调"
        ],
        "codeExamples": [
          {
            "title": "HD扩展.安装插件VM - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD扩展.安装插件VM - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD扩展.安装插件VM - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HDEX_InstallPluginVM"
      }
    ]
  },
  {
    "id": "category_6",
    "name": "环境初始化模块(Inject)",
    "functions": [
      {
        "id": "function_1",
        "name": "HD通讯.初始化",
        "type": "函数",
        "description": "初始化插件环境",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCInject_Init(__int32 窗口序号,BOOL 是否重置=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "是否重置",
            "type": "bool",
            "desc": "真(TRUE)就行"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "每次打开游戏都需要先初始化一次",
          "不要多次初始化",
          "该接口还会把当前全局进程位数HCEnv_SetProcessType与当前窗口序号进程绑定,省去了切换进程位数的操作,如果不绑定可能会返回-1107(ERROR_进程位数不匹配)"
        ],
        "codeExamples": [
          {
            "title": "HD通讯.初始化 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通讯.初始化 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通讯.初始化 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCInject_Init"
      },
      {
        "id": "function_2",
        "name": "HD通讯.初始化Ex",
        "type": "函数",
        "description": "初始化插件环境",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCInject_InitEx(__int32 窗口序号,char* 预加载LUA模块全路径,BOOL 是否重置=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "预加载LUA模块全路径",
            "type": "char*",
            "desc": "指定一个LUA文件路径+文件名(当插件被加载的时候会自动执行这个LUA文件),通讯后执行"
          },
          {
            "name": "是否重置",
            "type": "bool",
            "desc": "是否重置"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "每次打开游戏都需要先初始化一次",
          "不要多次初始化",
          "如果不需要用LUA来初始化自己的数据,可以直接使用HCInject_Init",
          "该接口还会把当前全局进程位数HCEnv_SetProcessType与当前窗口序号进程绑定,省去了切换进程位数的操作,如果不绑定可能会返回-1107(ERROR_进程位数不匹配)"
        ],
        "codeExamples": [
          {
            "title": "HD通讯.初始化Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通讯.初始化Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通讯.初始化Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCInject_InitEx"
      },
      {
        "id": "function_3",
        "name": "HD通讯.初始化Exx",
        "type": "函数",
        "description": "初始化插件环境",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCInject_InitExx(__int32 窗口序号,char* 预加载DLL模块全路径=NULL,char* 预加载LUA模块全路径=NULL,__int32 addType=-1,BOOL 是否重置=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "预加载DLL模块全路径",
            "type": "char*",
            "desc": "指定一个预加载的DLL,通讯前直接加载"
          },
          {
            "name": "预加载LUA模块全路径",
            "type": "char*",
            "desc": "指定一个LUA文件路径+文件名(当插件被加载的时候会自动执行这个LUA文件),通讯后执行"
          },
          {
            "name": "addType",
            "type": "__int32",
            "desc": "-1/0/1无痕无模块加载DLL2普通加载DLL"
          },
          {
            "name": "是否重置",
            "type": "bool",
            "desc": "是否重置"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "每次打开游戏都需要先初始化一次",
          "不要多次初始化",
          "如果不需要用LUA来初始化自己的数据或者预加载DLL,可以直接使用HCInject_Init",
          "该接口还会把当前全局进程位数HCEnv_SetProcessType与当前窗口序号进程绑定,省去了切换进程位数的操作,如果不绑定可能会返回-1107(ERROR_进程位数不匹配)"
        ],
        "codeExamples": [
          {
            "title": "HD通讯.初始化Exx - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通讯.初始化Exx - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通讯.初始化Exx - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCInject_InitExx"
      },
      {
        "id": "function_4",
        "name": "HD通讯.获取PID",
        "type": "函数",
        "description": "获取打开的进程PID",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCInject_GetPid(__int32 窗口序号);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "调用这个接口之前必须保证插件已经加载才会获取PID"
        ],
        "codeExamples": [
          {
            "title": "HD通讯.获取PID - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通讯.获取PID - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通讯.获取PID - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCInject_GetPid"
      },
      {
        "id": "function_5",
        "name": "HD通讯.获取之前PID",
        "type": "函数",
        "description": "获取打开的进程之前的PID(可以用于重连)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCInject_GetPrePid(__int32 窗口序号);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "当我们在调试的时候中控如果崩了,如果此时插件还在游戏进程中执行,那么可以当打开中控的时候直接获取PID进行通讯,而不是调用初始化之类的操作"
        ],
        "codeExamples": [
          {
            "title": "HD通讯.获取之前PID - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通讯.获取之前PID - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通讯.获取之前PID - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCInject_GetPrePid"
      },
      {
        "id": "function_6",
        "name": "HD通讯.获取绑定窗口序号",
        "type": "函数",
        "description": "通过进程PID尝试拿到绑定的窗口序号",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCInject_GetPreWinIndex(__int32 pid);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "指定一个进程PID"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "返回如果大于等于0的值表示之前进程绑定的窗口序号",
          "没有进程PID返回-1178",
          "没有绑定过返回-1179"
        ],
        "codeExamples": [
          {
            "title": "HD通讯.获取绑定窗口序号 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通讯.获取绑定窗口序号 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通讯.获取绑定窗口序号 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCInject_GetPreWinIndex"
      },
      {
        "id": "function_7",
        "name": "HCInject_GetPreWinIndexEx",
        "type": "函数",
        "description": "通过进程PID尝试拿到绑定的窗口序号",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCInject_GetPreWinIndexEx(__int32 pid,__int32 winIndex,__int64 checkFun);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "窗口序号winIndex"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "返回如果大于等于0的值表示之前进程绑定的窗口序号",
          "没有进程PID返回-1178",
          "没有绑定过返回-1179"
        ],
        "codeExamples": [
          {
            "title": "HCInject_GetPreWinIndexEx - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCInject_GetPreWinIndexEx - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCInject_GetPreWinIndexEx - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_8",
        "name": "HD通讯.获取窗口句柄",
        "type": "函数",
        "description": "获取窗口句柄,内部是通过PID获取窗口句柄需要先安装好插件到目标进程",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCInject_GetHwnd(__int32 窗口序号,char* className,char* title,__int32 filter,BOOL bType,__int32 mis=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "className",
            "type": "char*",
            "desc": "窗口类名(不指定为NULL/0)"
          },
          {
            "name": "title",
            "type": "char*",
            "desc": "窗口标题(不指定为NULL/0)"
          },
          {
            "name": "filter",
            "type": "__int32",
            "desc": "1标题2类名8检测是否无父窗口16检查窗口句柄是否有效多个标识可以用|累加"
          },
          {
            "name": "bType",
            "type": "bool",
            "desc": "真/1为模糊匹配假/0为完全匹配"
          },
          {
            "name": "mis",
            "type": "__int32",
            "desc": "循环检查毫秒数mis<=0表示不需要循环获取>0表示内部循环获取句柄直到有值"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "内部是通过HCWIN_EnumWindowByProcessId获取"
        ],
        "codeExamples": [
          {
            "title": "HD通讯.获取窗口句柄 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通讯.获取窗口句柄 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通讯.获取窗口句柄 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCInject_GetHwnd"
      },
      {
        "id": "function_9",
        "name": "HD通讯.获取窗口句柄Ex",
        "type": "函数",
        "description": "获取窗口句柄(需要内置,一般不需要调用这个获取句柄),如果需要通过PID获取句柄请调用HCInject_GetHwnd",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCInject_GetHwndEx(__int32 窗口序号);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "这个接口和内置的游戏接口有关,需要搭建完通讯才能调用",
          "并不是一定获取到",
          "如果要获取进程句柄还需要自行获取,除非内置了游戏数据"
        ],
        "codeExamples": [
          {
            "title": "HD通讯.获取窗口句柄Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通讯.获取窗口句柄Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通讯.获取窗口句柄Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCInject_GetHwndEx"
      },
      {
        "id": "function_10",
        "name": "HD通讯.继续",
        "type": "函数",
        "description": "继续环境加载操作",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCInject_Continue(__int32 窗口序号);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "当我们调用了HCEnv_Load后需要调用这个接口来验证"
        ],
        "codeExamples": [
          {
            "title": "HD通讯.继续 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通讯.继续 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通讯.继续 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCInject_Continue"
      },
      {
        "id": "function_11",
        "name": "HD通讯.存数据",
        "type": "函数",
        "description": "存自定义二进制数据",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCInject_SetData(__int32 窗口序号,void* 用户数据缓冲区,__int32 数据大小);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "用户数据缓冲区",
            "type": "void",
            "desc": "数据的来源缓冲区(可以字符串JSON其他类型值)内部会拷贝一份并存储到目标进程中方便下一次获取"
          },
          {
            "name": "数据大小",
            "type": "__int32",
            "desc": "数据的来源缓冲区中有效数据的大小总大小1024字节"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD通讯.存数据 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通讯.存数据 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通讯.存数据 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCInject_SetData"
      },
      {
        "id": "function_12",
        "name": "HD通讯.取数据",
        "type": "函数",
        "description": "取自定义二进制数据",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCInject_GetData(__int32 窗口序号,void* 用户数据缓冲区,__int32 缓冲区大小);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "用户数据缓冲区",
            "type": "void",
            "desc": "数据的存储缓冲区取的数据就是用HCInject_SetData接口存的数据"
          },
          {
            "name": "缓冲区大小",
            "type": "__int32",
            "desc": "数据的存储缓冲区数据的大小不能小于等于0从内部取的数据最大为1024"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "取的数据就是用HCInject_SetData接口存的数据"
        ],
        "codeExamples": [
          {
            "title": "HD通讯.取数据 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通讯.取数据 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通讯.取数据 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCInject_GetData"
      }
    ]
  },
  {
    "id": "category_7",
    "name": "通讯环境模块(Env)",
    "functions": [
      {
        "id": "function_1",
        "name": "HD环境.初始化",
        "type": "函数",
        "description": "HD插件环境加载(初始化中控环境)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_Init(__int32 timeOut=10000);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "timeOut",
            "type": "__int32",
            "desc": "通讯超时时间(毫秒),默认就行"
          }
        ],
        "returnValue": "查看返回值表\n返回值为0是正确的,表示当前中控进程窗口序号为0！！！\n目标进程窗口序号大于等于1,自己管理,0序号内置为中控进程窗口序号",
        "notes": [
          "中控初始化开始就要调用,仅仅一次"
        ],
        "codeExamples": [
          {
            "title": "HD环境.初始化 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.初始化 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.初始化 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCEnv_Init"
      },
      {
        "id": "function_2",
        "name": "HD环境.初始化Ex",
        "type": "函数",
        "description": "HD插件环境加载(初始化中控环境)(扩展版本)最新版本一般不用了",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_InitEx(__int32 通讯超时毫秒=10000,__int32 通讯检测间隔毫秒=20,__int32 回调响应毫秒=5);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "timeOut(通讯超时毫秒)",
            "type": "__int32",
            "desc": "通讯超时时间(毫秒),默认就行"
          },
          {
            "name": "通讯检测间隔毫秒",
            "type": "__int32",
            "desc": "默认就行,越小响应越快,CPU占用了越高(可以忽视最新版本不需要考虑这个问题了)"
          },
          {
            "name": "回调响应毫秒",
            "type": "__int32",
            "desc": "默认就行,越小响应越快,CPU占用了越高"
          }
        ],
        "returnValue": "查看返回值表\n返回值为0是正确的,表示当前中控进程窗口序号为0！！！\n目标进程窗口序号大于等于1,自己管理,0序号内置为中控进程窗口序号",
        "notes": [
          "中控初始化开始就要调用,仅仅一次"
        ],
        "codeExamples": [
          {
            "title": "HD环境.初始化Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.初始化Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.初始化Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCEnv_InitEx"
      },
      {
        "id": "function_3",
        "name": "HD环境.加载窗口",
        "type": "函数",
        "description": "HD插件环境加载",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_Load(__int32 窗口序号,__int32 目标进程PID,__int32 游戏类型=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "目标进程PID",
            "type": "__int32",
            "desc": "目标进程PID"
          },
          {
            "name": "游戏类型",
            "type": "__int32",
            "desc": "内置了游戏接口(每个游戏类型值不同),可以在工具上查看对应的值"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "调用这个接口需要先调用环境初始化模块中的初始化接口",
          "每次打开进程后都要调用"
        ],
        "codeExamples": [
          {
            "title": "HD环境.加载窗口 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.加载窗口 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.加载窗口 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCEnv_Load"
      },
      {
        "id": "function_4",
        "name": "HD环境.加载窗口Ex",
        "type": "函数",
        "description": "HD插件环境加载(扩展版本),涉及到回调",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_LoadEx(__int32 窗口序号,__int32 目标进程PID,__int32 游戏类型=0,BOOL 是否开启接受线程=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "目标进程PID",
            "type": "__int32",
            "desc": "目标进程PID"
          },
          {
            "name": "游戏类型",
            "type": "__int32",
            "desc": "内置了游戏接口(每个游戏类型值不同),可以在工具上查看对应的值"
          },
          {
            "name": "是否开启接受线程",
            "type": "bool",
            "desc": "如果需要开启跨进程回调(如"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "调用这个接口需要先调用环境初始化模块中的初始化接口",
          "每次打开进程后都要调用"
        ],
        "codeExamples": [
          {
            "title": "HD环境.加载窗口Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.加载窗口Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.加载窗口Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCEnv_LoadEx"
      },
      {
        "id": "function_5",
        "name": "HD环境.卸载窗口",
        "type": "函数",
        "description": "HD插件环境卸载",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_UnLoad(__int32 窗口序号);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号（从1开始）"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "调用这个接口需要先调用环境初始化模块中的初始化接口",
          "进程关闭一定要记得卸载窗口序号对应的窗口环境,以便于下次窗口序号使用",
          "1.没安装过插件的都不算重连窗口全部当新窗口处理",
          "2.安装过插件的不管卸载环境还是崩溃或者重启窗口都可以重连窗口一个序号只能绑定到一个窗口操作"
        ],
        "codeExamples": [
          {
            "title": "HD环境.卸载窗口 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.卸载窗口 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.卸载窗口 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCEnv_UnLoad"
      },
      {
        "id": "function_6",
        "name": "HD环境.卸载窗口Ex",
        "type": "函数",
        "description": "HD插件环境卸载(扩展版本)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_UnLoadEx(__int32 窗口序号,BOOL bRecon=TRUE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号（从1开始）"
          },
          {
            "name": "bRecon",
            "type": "bool",
            "desc": "是否还需要重连默认是需要重连"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "调用这个接口需要先调用环境初始化模块中的初始化接口",
          "进程关闭一定要记得卸载窗口序号对应的窗口环境,以便于下次窗口序号使用",
          "1.没安装过插件的都不算重连窗口全部当新窗口处理",
          "2.安装过插件的不管卸载环境还是崩溃或者重启窗口都可以重连窗口一个序号只能绑定到一个窗口操作"
        ],
        "codeExamples": [
          {
            "title": "HD环境.卸载窗口Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.卸载窗口Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.卸载窗口Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCEnv_UnLoadEx"
      },
      {
        "id": "function_7",
        "name": "HDEnv_GetWinExIndex",
        "type": "函数",
        "description": "获取副窗口序号",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HDEnv_GetWinExIndex(__int32 winIndex);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "winIndex",
            "type": "__int32",
            "desc": "传递窗口序号返回一个与当前指定的窗口序号的一个副窗口序号"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "这个副窗口序号可以用于登录器的绑定和操作,相当于窗口序号的一个助手,做一些额外的事情相当于一个窗口序号可以操作2个进程如:窗口序号1那么他返回的窗口扩展序号就是1+31也就是32序号"
        ],
        "codeExamples": [
          {
            "title": "HDEnv_GetWinExIndex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDEnv_GetWinExIndex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDEnv_GetWinExIndex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_8",
        "name": "HDEnv_GetGlobalWinExIndex",
        "type": "函数",
        "description": "获取全局副窗口序号,这是一个全局的序号",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HDEnv_GetGlobalWinExIndex();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "一个中控仅有一个计算方式:0+31也就是这个全局序号为31序号从0开始用途:给当前中控分配一个助手,来控制一个进程来辅助中控做一些事情"
        ],
        "codeExamples": [
          {
            "title": "HDEnv_GetGlobalWinExIndex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDEnv_GetGlobalWinExIndex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDEnv_GetGlobalWinExIndex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_9",
        "name": "HD环境.附加心跳",
        "type": "函数",
        "description": "给中控附加心跳",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_AttachHeart(__int32 type,__int64 funCallbackAddr,__int32 timeOutNor=10000,__int32 timeOut=10000);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "给中控附加心跳type",
            "type": "__int32",
            "desc": "0->正常心跳(内部触发心跳回调+排序回调)1->通讯线程2->主线程3->卡屏6->1+2+3如果需要检测主线程心跳是否卡住,请记得先HOOK主线程【HC_HookMaint hread()】接口timeOutNorL"
          }
        ],
        "returnValue": "1正常处理返回0禁止当前窗口序号的心跳(永久无法恢复除非重启中控一般用于测试调试)\n返回值:\n查看返回值表",
        "notes": [
          "检测主线程心跳",
          "如果需要检测主线程心跳是否卡住,请记得先HOOK主线程接口HC_HookMaint hread",
          "设置心跳回调函数类型",
          "typedef__int32 (* HeartFunType)(__int32 窗口索引,__int32 type);回调函数返回值:0不重置之前的记录1重置之前的记录(一般重新开启新进程会设置为1)",
          "\\n0.正常心跳进程存在的情况下会触发\\n1.通讯崩溃/关闭等等原因导致进程不存在->重启窗口\\n2.主线程崩溃/关闭/未响应/目标进程卡死原因导致进程不存在/存在->强制关闭->重启窗口设置挂接主线程\\n2.1.附加心跳的时候可以检查主线程的状态(游戏/目标)\\n2.2.后面的内存操作可以主线程调用\\n2.3.注意:附加心跳的时候设置的检查时间一定要大于安装插件到挂接主线程的时间\\n3.卡屏崩溃/关闭/区域图像卡死了原因导致进程不存在/存在->强制关闭->重启窗口设置屏幕检查范围\\n6.1+2+3"
        ],
        "codeExamples": [
          {
            "title": "HD环境.附加心跳 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.附加心跳 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.附加心跳 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCEnv_AttachHeart"
      },
      {
        "id": "function_10",
        "name": "HCEnv_SetWindowsSortInfo",
        "type": "函数",
        "description": "设置窗口排序信息",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_SetWindowsSortInfo(__int32 x,__int32 y,__int32 offsetx,__int32 offsety,__int32 cols,__int64 funCallbackAddr);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "x",
            "type": "__int32",
            "desc": "屏幕左上角X开始x"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [],
        "codeExamples": [
          {
            "title": "HCEnv_SetWindowsSortInfo - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCEnv_SetWindowsSortInfo - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCEnv_SetWindowsSortInfo - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_11",
        "name": "HD环境.设置卡屏检查信息",
        "type": "函数",
        "description": "当我们心跳检测指定了3或者6需要设置卡屏范围和卡屏检测次数当大于这个次数就调用回调",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_SetScreenCheckHeart(__int32 x,__int32 y,__int32 w,__int32 h,__int32 最大次数,__int32 截屏前后间隔时间=1000);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "x",
            "type": "__int32",
            "desc": "客户端x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "客户端y"
          },
          {
            "name": "w",
            "type": "__int32",
            "desc": "区域宽度"
          },
          {
            "name": "h",
            "type": "__int32",
            "desc": "区域高度"
          },
          {
            "name": "最大次数",
            "type": "__int32",
            "desc": "当到达这个次数就会触发回调"
          },
          {
            "name": "截屏前后间隔时间",
            "type": "__int32",
            "desc": "前后时间间隔用来比较图像是否卡主"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [],
        "codeExamples": [
          {
            "title": "HD环境.设置卡屏检查信息 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.设置卡屏检查信息 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.设置卡屏检查信息 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCEnv_SetScreenCheckHeart"
      },
      {
        "id": "function_12",
        "name": "HD环境.脱离心跳",
        "type": "函数",
        "description": "脱离中控附加的心跳检测",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_DetachHeart();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "脱离会堵塞直到脱离成功一般中控进程结果关闭前调用"
        ],
        "codeExamples": [
          {
            "title": "HD环境.脱离心跳 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.脱离心跳 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.脱离心跳 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCEnv_DetachHeart"
      },
      {
        "id": "function_13",
        "name": "HD环境.调试模式",
        "type": "函数",
        "description": "设置导入接口为调试模式",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_Debug(BOOL 是否调试=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "是否调试",
            "type": "bool",
            "desc": "当使用【HDDebug.dll】导入接口的时候就需要调用这个设置为调试模式(否者插件可能安装不成功)然后方可继续后面的一系列操作"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "中控初始化开始就可以调用,仅仅一次",
          "发布版本不需要调用此接口,默认为发布版本"
        ],
        "codeExamples": [
          {
            "title": "HD环境.调试模式 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.调试模式 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.调试模式 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCEnv_Debug"
      },
      {
        "id": "function_14",
        "name": "HD环境.开启文件提示",
        "type": "函数",
        "description": "设置是否打开文件提示窗口",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_MsgFile(BOOL 是否文件提示=TRUE);</FONT>",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "是否文件提示",
            "type": "bool",
            "desc": "是否开启文件提示日志"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "当HD内部导致中控关闭或者插件失效会一文件形式提示信息"
        ],
        "codeExamples": [
          {
            "title": "HD环境.开启文件提示 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.开启文件提示 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.开启文件提示 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCEnv_MsgFile"
      },
      {
        "id": "function_15",
        "name": "HD环境.添加线程",
        "type": "函数",
        "description": "添加线程环境",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_AddThread(__int32 窗口序号,__int32 线程ID,__int32 bDebug=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号（从1开始）"
          },
          {
            "name": "线程ID",
            "type": "__int32",
            "desc": "当前线程ID"
          },
          {
            "name": "bDebug",
            "type": "__int32",
            "desc": "是否是调试模式,如果是那么线程ID可以任意指定"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "这个接口用来测试用的,开发者一般用不到"
        ],
        "codeExamples": [
          {
            "title": "HD环境.添加线程 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.添加线程 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.添加线程 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCEnv_AddThread"
      },
      {
        "id": "function_16",
        "name": "HD环境.测试通讯值",
        "type": "函数",
        "description": "测试是否通讯成功,返回单一值",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_TestCALL_RetValue(__int32 窗口序号,__int64 rcx=0,__int64 rdx=0,__int64 r8=0,__int64 r9=0,__int64 lparam5=0,__int64 lparam6=0,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号（从1开始）"
          },
          {
            "name": "rcx",
            "type": "__int64",
            "desc": "CALL参数"
          },
          {
            "name": "rdx",
            "type": "__int64",
            "desc": "CALL参数"
          },
          {
            "name": "r8",
            "type": "__int64",
            "desc": "CALL参数"
          },
          {
            "name": "r9",
            "type": "__int64",
            "desc": "CALL参数"
          },
          {
            "name": "l5",
            "type": "",
            "desc": "CALL参数"
          },
          {
            "name": "l6",
            "type": "",
            "desc": "CALL参数"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否主线程调用这个CALL,需要挂接主线程"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "这个接口用来测试是否环境搭建成功"
        ],
        "codeExamples": [
          {
            "title": "HD环境.测试通讯值 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.测试通讯值 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.测试通讯值 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCEnv_TestCALL_RetValue"
      },
      {
        "id": "function_17",
        "name": "HCEnv_TestCALL_RetArray",
        "type": "函数",
        "description": "测试是否通讯成功,返回json字符串",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_TestCALL_RetArray(__int32 窗口序号,__int64 rcx=0,__int64 rdx=0,__int64 r8=0,__int64 r9=0,__int64 lparam5=0,__int64 lparam6=0,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号（从1开始）"
          },
          {
            "name": "rcx",
            "type": "__int64",
            "desc": "CALL参数"
          },
          {
            "name": "rdx",
            "type": "__int64",
            "desc": "CALL参数"
          },
          {
            "name": "r8",
            "type": "__int64",
            "desc": "CALL参数"
          },
          {
            "name": "r9",
            "type": "__int64",
            "desc": "CALL参数"
          },
          {
            "name": "l5",
            "type": "",
            "desc": "CALL参数"
          },
          {
            "name": "l6",
            "type": "",
            "desc": "CALL参数"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否主线程调用这个CALL,需要挂接主线程"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "这个接口用来测试是否环境搭建成功"
        ],
        "codeExamples": [
          {
            "title": "HCEnv_TestCALL_RetArray - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCEnv_TestCALL_RetArray - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCEnv_TestCALL_RetArray - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_18",
        "name": "HCEnv_TestCALL_RetValueEx",
        "type": "函数",
        "description": "测试是否通讯成功,返回单一值",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_TestCALL_RetValueEx(__int32 窗口序号,__int32 线程ID,__int64 rcx=0,__int64 rdx=0,__int64 r8=0,__int64 r9=0,__int64 lparam5=0,__int64 lparam6=0,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号（从1开始）"
          },
          {
            "name": "线程ID",
            "type": "__int32",
            "desc": "当前线程ID或者添加的指定ID"
          },
          {
            "name": "rcx",
            "type": "__int64",
            "desc": "CALL参数"
          },
          {
            "name": "rdx",
            "type": "__int64",
            "desc": "CALL参数"
          },
          {
            "name": "r8",
            "type": "__int64",
            "desc": "CALL参数"
          },
          {
            "name": "r9",
            "type": "__int64",
            "desc": "CALL参数"
          },
          {
            "name": "l5",
            "type": "",
            "desc": "CALL参数"
          },
          {
            "name": "l6",
            "type": "",
            "desc": "CALL参数"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否主线程调用这个CALL,需要挂接主线程"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "这个接口用来测试是否环境搭建成功"
        ],
        "codeExamples": [
          {
            "title": "HCEnv_TestCALL_RetValueEx - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCEnv_TestCALL_RetValueEx - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCEnv_TestCALL_RetValueEx - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_19",
        "name": "HD环境.测试通讯字符串Ex",
        "type": "函数",
        "description": "测试是否通讯成功,返回json字符串",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_TestCALL_RetArrayEx(__int32 窗口序号,__int32 线程ID,__int64 rcx=0,__int64 rdx=0,__int64 r8=0,__int64 r9=0,__int64 lparam5=0,__int64 lparam6=0,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号（从1开始）"
          },
          {
            "name": "线程ID",
            "type": "__int32",
            "desc": "当前线程ID或者添加的指定ID"
          },
          {
            "name": "rcx",
            "type": "__int64",
            "desc": "CALL参数"
          },
          {
            "name": "rdx",
            "type": "__int64",
            "desc": "CALL参数"
          },
          {
            "name": "r8",
            "type": "__int64",
            "desc": "CALL参数"
          },
          {
            "name": "r9",
            "type": "__int64",
            "desc": "CALL参数"
          },
          {
            "name": "l5",
            "type": "",
            "desc": "CALL参数"
          },
          {
            "name": "l6",
            "type": "",
            "desc": "CALL参数"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否主线程调用这个CALL,需要挂接主线程"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "这个接口用来测试是否环境搭建成功"
        ],
        "codeExamples": [
          {
            "title": "HD环境.测试通讯字符串Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.测试通讯字符串Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.测试通讯字符串Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCEnv_TestCALL_RetArrayEx"
      },
      {
        "id": "function_20",
        "name": "HD环境.设置目标进程位数",
        "type": "函数",
        "description": "设置目标进程位数",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_SetProcessType(__int32 进程位数);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "进程位数",
            "type": "__int32",
            "desc": "32/64"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "该接口是全局设置,也就是设置了一次,接下来的所有进程都是该位数,可以多次调用切换进程位数,建议使用HCEnv_SetProcessTypeEx这个扩展版本",
          "如果使用了HDEX_InstallPlugin1HDEX_InstallPlugin2HDEX_InstallPlugin3这些接口可以不用调用这个接口设置目标进程位数",
          "如果是自定义通讯流程就需要自己设置后然后初始化序号进行通讯绑定"
        ],
        "codeExamples": [
          {
            "title": "HD环境.设置目标进程位数 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.设置目标进程位数 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.设置目标进程位数 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCEnv_SetProcessType"
      },
      {
        "id": "function_21",
        "name": "HD环境.设置目标进程位数Ex",
        "type": "函数",
        "description": "指定某个序号绑定的进程位数",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_SetProcessTypeEx(__int32 窗口序号,__int32 进程位数);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号"
          },
          {
            "name": "进程位数",
            "type": "__int32",
            "desc": "32/64"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "如果使用了HDEX_InstallPlugin1HDEX_InstallPlugin2HDEX_InstallPlugin3这些接口可以不用调用这个接口设置目标进程位数",
          "如果是自定义通讯流程就需要自己设置后然后初始化序号进行通讯绑定"
        ],
        "codeExamples": [
          {
            "title": "HD环境.设置目标进程位数Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.设置目标进程位数Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.设置目标进程位数Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCEnv_SetProcessTypeEx"
      },
      {
        "id": "function_22",
        "name": "HD环境.设置中控事件处理回调函数",
        "type": "函数",
        "description": "设置中控事件处理回调函数",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_SetHandleEventCallBack(__int64 funCallBack);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "funCallBack",
            "type": "__int64",
            "desc": "事件处理函数地址"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "这个回调函数作用于当自定义模块通知中控的时候",
          "中控事件处理回调函数接口类型:",
          "typedef__int32 (__stdcall* HandleEventFunType)(__int32 窗口序号,__int32 插件序号,HDHandleEventInfoInfo);",
          "HDHandleEventInfo结构体:",
          "typedefstructHDHandleEventInfo\\n处理事件{__int32 m_callType;\\n自定义HDValuem_call;HDValuem_rcx;HDValuem_rdx;HDValuem_r8;HDValuem_r9;HDValuem_lparam5;HDValuem_lparam6;HDValuem_lparam7;HDValuem_lparam8;HDValuem_value;HDValuem_size;charm_buffer[MAX_PATH];charm_buffer2[MAX_PATH];HDValue* m_pRetValue;\\n值单独char* m_pRetJson;\\n字符串返回}HDHandleEventInfo;",
          "代码案例:",
          "__int32 HCLogin::HandleEvent(__int32 窗口序号,__int32 插件序号,HDHandleEventInfoInfo){HDbgPrint f_Normal(\\\"处理接受事件->窗口序号:%dcallType:%dbuffer1:%sbuffer2:%scall:%llXrcx:%llXrdx:%llX\\\",窗口序号,Info.m_callType,Info.m_buffer,Info.m_buffer2,Info.m_call,Info.m_rcx,Info.m_rdx);if(Info.m_callType==1){* Info.m_pRetValue=999;autoret=HCMKB_UnBind(窗口序号);HDbgPrint f_Normal(\\\"解绑后台ret:%d\\\",ret);return8;}elseif(Info.m_callType==2){\\n处理逻辑* Info.m_pRetValue=123;sprint f_s(Info.m_pRetJson,1024* 10,\\\"%s\\\",\\\"我是中控\\\");\\n672637autoret=HCMKB_Bind(窗口序号,Info.m_call,\\\"1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|0|1|\\\");HDbgPrint f_Normal(\\\"绑定后台ret:%d\\\",ret);if(ret==1){Sleep(1000);ret=HCMKB_MoveTo(窗口序号,672,610,0);HDbgPrint f_Normal(\\\"模拟移动一次->672610ret:%d\\\",ret);ret=HCMKB_LeftClick(窗口序号);HDbgPrint f_Normal(\\\"模拟点击一次->ret:%d\\\",ret);}return1024* 10;\\n大于8认为是字符串}* Info.m_pRetValue=1;return8;}"
        ],
        "codeExamples": [
          {
            "title": "HD环境.设置中控事件处理回调函数 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.设置中控事件处理回调函数 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.设置中控事件处理回调函数 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCEnv_SetHandleEventCallBack"
      },
      {
        "id": "function_23",
        "name": "HCEnv_SetShutDownCallBack",
        "type": "函数",
        "description": "设置关闭回调函数(处理HD功能失效,内部自动关闭中控前的操作)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_SetShutDownCallBack(__int64 funCallBack);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "funCallBack",
            "type": "__int64",
            "desc": "事件处理函数地址"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "当HD出现异常或者失效或者网络验证出现断线,会在自动关闭自身在期间会先调用这个回调(这个回调自己做好关闭前处理工作)然后会自动调用微软API接口ExitProcess();结束自身",
          "在这个回调用户可以自行处理自己的业务逻辑",
          "1.资源清理逻辑",
          "2.接口释放逻辑",
          "3.自启逻辑",
          "4.自定义处理逻辑",
          "回调函数接口类型:",
          "typedef__int32 (__stdcall* ShutDownEventFunType)(__int32 code);",
          "code:错误代码"
        ],
        "codeExamples": [
          {
            "title": "HCEnv_SetShutDownCallBack - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCEnv_SetShutDownCallBack - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCEnv_SetShutDownCallBack - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_24",
        "name": "HCEnv_SetPidCheckBack",
        "type": "函数",
        "description": "设置PID检查回调(内部检查PID不存在会触发这个回调)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_SetPidCheckBack(__int64 checkFun);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "checkFun",
            "type": "__int64",
            "desc": "检查回调和安装插件那个检查回调一样的函数类型触发条件"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "1.这是设置全局PID检查回调",
          "2.内部检查PID不存在会触发这个回调",
          "3.如果没有调用此接口设置全局PID检查回调,那么对于4种安装插件方式中,当内部检查不到PID存在也会触发检查回调并传递给回调参数窗口序号:0之前窗口序号:0检查PID:pid提示值:8",
          "回调函数接口类型:",
          "typedef__int64 (__stdcall* CHECKINSTALLPLUGint YPE)(int windowsIndex,int preWindowsIndex,int checkPid,int error);",
          "windowsIndex:窗口序号",
          "preWindowsIndex:窗口序号",
          "checkPid:当前检查的PID",
          "error:传递8表示需要检查PID"
        ],
        "codeExamples": [
          {
            "title": "HCEnv_SetPidCheckBack - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCEnv_SetPidCheckBack - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCEnv_SetPidCheckBack - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_25",
        "name": "HD环境.设置通讯检测间隔",
        "type": "函数",
        "description": "设置通讯检测间隔毫秒",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_SetCheckComItlTime(__int32 通讯检测间隔毫秒=20);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "通讯检测间隔毫秒",
            "type": "__int32",
            "desc": "默认就行,越小响应越快,CPU占用了越高(也可以调用HCEnv_InitEx设置)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "1.值越小响应越快,随之带来的效率更高但是会导致CPU利用率变高2.值的大小根据当前的项目指定,对于一直要实时响应的最好小点"
        ],
        "codeExamples": [
          {
            "title": "HD环境.设置通讯检测间隔 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.设置通讯检测间隔 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.设置通讯检测间隔 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCEnv_SetCheckComItlTime"
      },
      {
        "id": "function_26",
        "name": "HD环境.设置回调响应间隔",
        "type": "函数",
        "description": "设置回调响应毫秒",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_SetCheckCallBackTime(__int32 回调响应毫秒=5);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "回调响应毫秒",
            "type": "__int32",
            "desc": "默认就行,越小响应越快,CPU占用了越高(也可以调用HCEnv_InitEx设置)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "1.值越小响应越快,随之带来的效率更高但是会导致CPU利用率变高2.值的大小根据当前的项目指定,对于一直要实时响应的最好小点"
        ],
        "codeExamples": [
          {
            "title": "HD环境.设置回调响应间隔 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.设置回调响应间隔 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.设置回调响应间隔 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCEnv_SetCheckCallBackTime"
      },
      {
        "id": "function_27",
        "name": "HD环境.强制结束线程",
        "type": "函数",
        "description": "强制结束当前线程(可以在卸载环境后调用)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_TerminateThread(__int32 窗口序号,__int32 threadId,BOOL 是否操作锁=TRUE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "指定当前强制关闭线程所操作的窗口序号"
          },
          {
            "name": "threadId",
            "type": "__int32",
            "desc": "强制关闭的线程ID,调用此接口的线程不要和结束的线程是同一个(虽然内部有检查)"
          },
          {
            "name": "是否操作锁",
            "type": "bool",
            "desc": "一般为了安全的强制关闭线程,必须为真,否则会很有可能出现死锁的情况"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "强制结束当前线程内部会对锁操作循环拿到锁才会强制关闭并返回成功此接口小心使用1.不到万不得已不要强制关闭线程(因为强制关闭线程不管在任何时候都有可能造成不可能预计的BUG)2.调用此接口的线程不要和结束的线程是同一个(虽然内部有检查)3.该接口如果参数:是否操作锁为真,那么会堵塞,直到拿到锁权限后,才会强制关闭线程,然后解锁(防止死锁)."
        ],
        "codeExamples": [
          {
            "title": "HD环境.强制结束线程 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.强制结束线程 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.强制结束线程 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCEnv_TerminateThread"
      },
      {
        "id": "function_28",
        "name": "HD环境.强制结束线程Ex",
        "type": "函数",
        "description": "强制结束当前线程(可以在卸载环境后调用)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_TerminateThreadEx(__int32 窗口序号,__int64 threadHandle,BOOL 是否操作锁=TRUE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "指定当前强制关闭线程所操作的窗口序号"
          },
          {
            "name": "threadHandle",
            "type": "__int64",
            "desc": "强制关闭的线程句柄,调用此接口的线程不要和结束的线程是同一个(虽然有检查但是可能会崩溃)"
          },
          {
            "name": "是否操作锁",
            "type": "bool",
            "desc": "一般为了安全的强制关闭线程,必须为真,否则会很有可能出现死锁的情况"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "强制结束当前线程内部会对锁操作循环拿到锁才会强制关闭并返回成功此接口小心使用1.不到万不得已不要强制关闭线程(因为强制关闭线程不管在任何时候都有可能造成不可能预计的BUG)2.调用此接口的线程不要和结束的线程是同一个(虽然内部有检查)3.该接口如果参数:是否操作锁为真,那么会堵塞,直到拿到锁权限后,才会强制关闭线程,然后解锁(防止死锁)."
        ],
        "codeExamples": [
          {
            "title": "HD环境.强制结束线程Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.强制结束线程Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.强制结束线程Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCEnv_TerminateThreadEx"
      },
      {
        "id": "function_29",
        "name": "HD环境.关闭绑定进程",
        "type": "函数",
        "description": "关闭绑定的目标窗口",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCEnv_ExitProcess(__int32 窗口序号);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "指定当前强制关闭线程所操作的窗口序号"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "内部实现可能是正常关闭也可能是强制关闭 至于是哪一种会根据实际情况动态调用"
        ],
        "codeExamples": [
          {
            "title": "HD环境.关闭绑定进程 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.关闭绑定进程 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD环境.关闭绑定进程 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCEnv_ExitProcess"
      }
    ]
  },
  {
    "id": "category_8",
    "name": "多线程模块[MT]",
    "functions": [
      {
        "id": "function_1",
        "name": "HD多线程.初始化流程回调",
        "type": "函数",
        "description": "初始化多线程设置相关流程回调",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_InitProcess(__int64 hwnd,void* updateUICallBack,void* loginCallBack,void* firstCallBack,void* secondCallBack,void* endCallBack,void* restartPreCallBack);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "中控UI的窗口主句柄内部会HOOK窗口过程updateUICallBack"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "1.普通回调1参数windowsIndex:代表的是窗口序号也是主序号",
          "2.每个回调参数的函数类型不一样,注意对应",
          "回调触发顺序:",
          "开启窗口:登录回调--->第一/第二执行回调同时开启--->结束回调",
          "重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->结束回调",
          "参数回调函数类型:",
          "------------------------------------------------------------------------------------普通回调1",
          "typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex);",
          "windowsIndex:窗口序号",
          "------------------------------------------------------------------------------------普通回调2",
          "typedef__int64 (__stdcall* FUNTYPE)(__int32 index);",
          "index:窗口序号/主序号/副序号",
          "------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2);",
          "windowsIndex:窗口序号",
          "stepText:日志信息/操作信息",
          "end1:主执行线程的结束标志状态",
          "pause1:主执行线程的暂停标志状态",
          "threadState1:主执行线程的线程操作状态",
          "end2:副线程的结束标志状态",
          "pause2:副线程的暂停标志状态",
          "threadState2:副线程的线程操作状态",
          "------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam);",
          "wparam:自定义参数1",
          "lparam:自定义参数2"
        ],
        "codeExamples": [
          {
            "title": "HD多线程.初始化流程回调 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.初始化流程回调 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.初始化流程回调 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_InitProcess"
      },
      {
        "id": "function_2",
        "name": "HD多线程.初始化流程回调Ex",
        "type": "函数",
        "description": "初始化多线程设置相关流程回调可以绑定一个全局参数",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_InitProcessEx(__int64 hwnd,void* updateUICallBackEx,void* loginCallBack,void* firstCallBack,void* secondCallBack,void* endCallBack,void* restartPreCallBack,void* lparam);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "中控UI的窗口主句柄内部会HOOK窗口过程updateUICallBack"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "1.普通回调1参数windowsIndex:代表的是窗口序号也是主序号",
          "2.每个回调参数的函数类型不一样,注意对应",
          "回调触发顺序:",
          "开启窗口:登录回调--->第一/第二执行回调同时开启--->结束回调",
          "重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->结束回调",
          "参数回调函数类型:",
          "------------------------------------------------------------------------------------普通回调1",
          "typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex);",
          "windowsIndex:窗口序号",
          "------------------------------------------------------------------------------------普通回调2",
          "typedef__int64 (__stdcall* FUNTYPE)(__int32 index);",
          "index:窗口序号/主序号/副序号",
          "------------------------------------------------------------------------------------UI回调EXtypedef__int64 (__stdcall* UIFUNTYPEEX)(__int32 windowsIndex,char* stepText,void* lparam,BOOL m_end1,BOOL m_pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2);",
          "windowsIndex:窗口序号",
          "stepText:日志信息/操作信息",
          "lparam:HCMT_InitProcessEx绑定一个全局参数,一般我们指定为一个UI对象地址,这个回调可以拿到这个地址",
          "end1:主执行线程的结束标志状态",
          "pause1:主执行线程的暂停标志状态",
          "threadState1:主执行线程的线程操作状态",
          "end2:副线程的结束标志状态",
          "pause2:副线程的暂停标志状态",
          "threadState2:副线程的线程操作状态",
          "------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam);",
          "wparam:自定义参数1",
          "lparam:自定义参数2"
        ],
        "codeExamples": [
          {
            "title": "HD多线程.初始化流程回调Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.初始化流程回调Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.初始化流程回调Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_InitProcessEx"
      },
      {
        "id": "function_3",
        "name": "HD多线程.初始化操作回调",
        "type": "函数",
        "description": "初始化多线程结束/暂停/恢复状态的操作回调",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_InitOperate(void* endBindCallBack,void* pauseBindCallBack,void* recoverBindCallBack);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "endBindCallBack",
            "type": "void",
            "desc": "FUNTYPE结束绑定回调当调用HCMT_SetStop/HCMT_SetAllStop会触发pauseBindCallBack"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "1.仅仅对于这3个回调而言普通回调2参数index:大于多开限制数量,就是副序号;小于就是主序号(也是窗口序号);计算公式:if(index>=多开限制数)主序号=index-多开限制数;",
          "\\n(index>=多开环境数量)?(index-多开环境数量):(index)2.其他接口的windowsIndex就代表的是窗口序号也是主序号3.多开限制数量最大常量为31,请自行在程序里面定义",
          "4.多开限制数量用HCEnv_GetMaxWindowNum返回一个常数,可以自己写成一个常量",
          "回调触发顺序:",
          "结束窗口操作:endBindCallBack并传递对应的线程序号(线程序号可能是主序号也就是窗口序号,也有可能是副序号)",
          "暂停窗口操作:pauseBindCallBack并传递对应的线程序号(线程序号可能是主序号也就是窗口序号,也有可能是副序号)",
          "恢复窗口操作:recoverBindCallBack并传递对应的线程序号(线程序号可能是主序号也就是窗口序号,也有可能是副序号)",
          "参数回调函数类型:",
          "------------------------------------------------------------------------------------普通回调1",
          "typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex);",
          "windowsIndex:窗口序号",
          "------------------------------------------------------------------------------------普通回调2",
          "typedef__int64 (__stdcall* FUNTYPE)(__int32 index);",
          "index:窗口序号/主序号/副序号",
          "------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2);",
          "windowsIndex:窗口序号",
          "stepText:日志信息/操作信息",
          "end1:主执行线程的结束标志状态",
          "pause1:主执行线程的暂停标志状态",
          "threadState1:主执行线程的线程操作状态",
          "end2:副线程的结束标志状态",
          "pause2:副线程的暂停标志状态",
          "threadState2:副线程的线程操作状态",
          "------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam);",
          "wparam:自定义参数1",
          "lparam:自定义参数2"
        ],
        "codeExamples": [
          {
            "title": "HD多线程.初始化操作回调 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.初始化操作回调 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.初始化操作回调 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_InitOperate"
      },
      {
        "id": "function_4",
        "name": "HD多线程.注册消息回调",
        "type": "函数",
        "description": "注册窗口消息",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_RegisterMessage(__int32 msg,void* msgCallBack);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "msg",
            "type": "__int32",
            "desc": "自定义消息整数值(规定值大于等于41124)msgCallBack"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "1.通过HCMT_MsgSend/HCMT_MsgPost来触发回调",
          "参数回调函数类型:",
          "------------------------------------------------------------------------------------普通回调1",
          "typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex);",
          "windowsIndex:窗口序号",
          "------------------------------------------------------------------------------------普通回调2",
          "typedef__int64 (__stdcall* FUNTYPE)(__int32 index);",
          "index:窗口序号/主序号/副序号",
          "------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2);",
          "windowsIndex:窗口序号",
          "stepText:日志信息/操作信息",
          "end1:主执行线程的结束标志状态",
          "pause1:主执行线程的暂停标志状态",
          "threadState1:主执行线程的线程操作状态",
          "end2:副线程的结束标志状态",
          "pause2:副线程的暂停标志状态",
          "threadState2:副线程的线程操作状态",
          "------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,LPARAMlparam);",
          "wparam:自定义参数1",
          "lparam:自定义参数2"
        ],
        "codeExamples": [
          {
            "title": "HD多线程.注册消息回调 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.注册消息回调 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.注册消息回调 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_RegisterMessage"
      },
      {
        "id": "function_5",
        "name": "HD多线程.同步发送消息",
        "type": "函数",
        "description": "发送消息(同步)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_MsgSend(__int32 msg,void* wparam,void* lparam);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "msg",
            "type": "__int32",
            "desc": "消息整数值wparam"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
          "参数回调函数类型:",
          "------------------------------------------------------------------------------------普通回调1",
          "typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex);",
          "windowsIndex:窗口序号",
          "------------------------------------------------------------------------------------普通回调2",
          "typedef__int64 (__stdcall* FUNTYPE)(__int32 index);",
          "index:窗口序号/主序号/副序号",
          "------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2);",
          "windowsIndex:窗口序号",
          "stepText:日志信息/操作信息",
          "end1:主执行线程的结束标志状态",
          "pause1:主执行线程的暂停标志状态",
          "threadState1:主执行线程的线程操作状态",
          "end2:副线程的结束标志状态",
          "pause2:副线程的暂停标志状态",
          "threadState2:副线程的线程操作状态",
          "------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam);",
          "wparam:自定义参数1",
          "lparam:自定义参数2"
        ],
        "codeExamples": [
          {
            "title": "HD多线程.同步发送消息 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.同步发送消息 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.同步发送消息 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_MsgSend"
      },
      {
        "id": "function_6",
        "name": "HD多线程.异步发送消息",
        "type": "函数",
        "description": "发送消息(异步)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_MsgPost(__int32 msg,void* wparam,void* lparam);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "msg",
            "type": "__int32",
            "desc": "消息整数值wparam"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
          "参数回调函数类型:",
          "------------------------------------------------------------------------------------普通回调1",
          "typedef__int64 (__stdcall* FUNTYPE)(__int32 windowsIndex);",
          "windowsIndex:窗口序号",
          "------------------------------------------------------------------------------------普通回调2",
          "typedef__int64 (__stdcall* FUNTYPE)(__int32 index);",
          "index:窗口序号/主序号/副序号",
          "------------------------------------------------------------------------------------UI回调typedef__int64 (__stdcall* UIFUNTYPE)(__int32 windowsIndex,char* stepText,BOOL end1,BOOL pause1,__int32 threadState1,BOOL m_end2,BOOL m_pause2,__int32 threadState2);",
          "windowsIndex:窗口序号",
          "stepText:日志信息/操作信息",
          "end1:主执行线程的结束标志状态",
          "pause1:主执行线程的暂停标志状态",
          "threadState1:主执行线程的线程操作状态",
          "end2:副线程的结束标志状态",
          "pause2:副线程的暂停标志状态",
          "threadState2:副线程的线程操作状态",
          "------------------------------------------------------------------------------------消息回调typedef__int64 (__stdcall* MSGFUNTYPE)(WPARAMwparam,,LPARAMlparam);",
          "wparam:自定义参数1",
          "lparam:自定义参数2"
        ],
        "codeExamples": [
          {
            "title": "HD多线程.异步发送消息 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.异步发送消息 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.异步发送消息 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_MsgPost"
      },
      {
        "id": "function_7",
        "name": "HD多线程.开启窗口Msg",
        "type": "函数",
        "description": "通过消息开启窗口操作",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_MsgStart(__int32 windowsIndex,BOOL bAsyn=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "windowsIndex",
            "type": "__int32",
            "desc": "窗口序号bAsyn"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
          "2.开启成功后会相应触发对应设置的回调函数",
          "3.顺序:",
          "开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调",
          "重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调",
          "停止窗口:结束绑定回调->结束回调"
        ],
        "codeExamples": [
          {
            "title": "HD多线程.开启窗口Msg - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.开启窗口Msg - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.开启窗口Msg - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_MsgStart"
      },
      {
        "id": "function_8",
        "name": "HD多线程.停止窗口Msg",
        "type": "函数",
        "description": "通过消息停止窗口操作",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_MsgStop(__int32 windowsIndex,BOOL bAsyn=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "windowsIndex",
            "type": "__int32",
            "desc": "窗口序号bAsyn"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
          "2.开启成功后会相应触发对应设置的回调函数",
          "3.顺序:",
          "开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调",
          "重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调",
          "停止窗口:结束绑定回调->结束回调"
        ],
        "codeExamples": [
          {
            "title": "HD多线程.停止窗口Msg - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.停止窗口Msg - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.停止窗口Msg - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_MsgStop"
      },
      {
        "id": "function_9",
        "name": "HD多线程.重启窗口Msg",
        "type": "函数",
        "description": "通过消息重启窗口操作",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_MsgReStart(__int32 windowsIndex,BOOL bAsyn=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "windowsIndex",
            "type": "__int32",
            "desc": "窗口序号bAsyn"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
          "2.开启成功后会相应触发对应设置的回调函数",
          "3.顺序:",
          "开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调",
          "重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调",
          "停止窗口:结束绑定回调->结束回调"
        ],
        "codeExamples": [
          {
            "title": "HD多线程.重启窗口Msg - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.重启窗口Msg - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.重启窗口Msg - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_MsgReStart"
      },
      {
        "id": "function_10",
        "name": "HD多线程.重启窗口MsgEx",
        "type": "函数",
        "description": "通过消息重启窗口操作(扩展版本)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_MsgReStartEx(__int32 windowsIndex,BOOL bUnload=TRUE,BOOL bAsyn=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "windowsIndex",
            "type": "__int32",
            "desc": "窗口序号"
          },
          {
            "name": "bUnload",
            "type": "bool",
            "desc": "是否重启前卸载进程环境(HCEnv_UnLoad)一般我们肯定要卸载环境的尤其是在配合心跳HCEnv_AttachHeart的时候"
          },
          {
            "name": "bAsyn",
            "type": "bool",
            "desc": "是否异步发送"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
          "2.开启成功后会相应触发对应设置的回调函数",
          "3.顺序:",
          "开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调",
          "重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调",
          "停止窗口:结束绑定回调->结束回调"
        ],
        "codeExamples": [
          {
            "title": "HD多线程.重启窗口MsgEx - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.重启窗口MsgEx - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.重启窗口MsgEx - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_MsgReStartEx"
      },
      {
        "id": "function_11",
        "name": "HD多线程.更新UI",
        "type": "函数",
        "description": "通过消息触发UI回调,并传递线程状态信息和日志操作信息给UI回调",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_MsgUpdateUI(__int32 windowsIndex,BOOL bAsyn=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "windowsIndex",
            "type": "__int32",
            "desc": "窗口序号bAsyn"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "1.HDMT_InitProcess/HCMT_InitOperate后才能调用"
        ],
        "codeExamples": [
          {
            "title": "HD多线程.更新UI - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.更新UI - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.更新UI - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_MsgUpdateUI"
      },
      {
        "id": "function_12",
        "name": "HD多线程.发送文本",
        "type": "函数",
        "description": "通过消息触发UI回调,并传递线程状态信息和日志操作信息给UI回调",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_MsgStepText(__int32 windowsIndex,char* text,BOOL bAsyn=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "windowsIndex",
            "type": "__int32",
            "desc": "窗口序号text"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "1.HDMT_InitProcess/HCMT_InitOperate后才能调用"
        ],
        "codeExamples": [
          {
            "title": "HD多线程.发送文本 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.发送文本 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.发送文本 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_MsgStepText"
      },
      {
        "id": "function_13",
        "name": "HD多线程.所有窗口暂停",
        "type": "函数",
        "description": "设置所有窗口结束",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_SetAllPause();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
          "2.仅仅设置的是标志位,不会堵塞线程",
          "3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调"
        ],
        "codeExamples": [
          {
            "title": "HD多线程.所有窗口暂停 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.所有窗口暂停 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.所有窗口暂停 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_SetAllPause"
      },
      {
        "id": "function_14",
        "name": "HD多线程.获取线程状态值",
        "type": "函数",
        "description": "获取主副序号对应的线程的状态值",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_GetState(__int32 index);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "index",
            "type": "__int32",
            "desc": "主副序号注意"
          }
        ],
        "returnValue": "返回1:状态值注意:如果需要转换为字符串,需要调用HCMT_GetStateString\n返回其他值:查看返回值表",
        "notes": [
          "1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
          "2.仅仅设置的是标志位,不会堵塞线程",
          "3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调",
          "typedefenumTHREADSTATE\\n线程状态{THREADSTATE_NONE=-1,\\n未启动THREADSTATE_STARTING=0,\\n开启中THREADSTATE_LOGINING=1,\\n正在登录THREADSTATE_RUNNING=2,\\n正在运行THREADSTATE_PAUSE=3,\\n暂停THREADSTATE_PAUSEING=4,\\n正在暂停THREADSTATE_RECOVERING=5,\\n正在恢复THREADSTATE_WILLSTOP=6,\\n准备停止THREADSTATE_STOPPING=7\\n正在停止}THREADSTATE;"
        ],
        "codeExamples": [
          {
            "title": "HD多线程.获取线程状态值 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.获取线程状态值 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.获取线程状态值 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_GetState"
      },
      {
        "id": "function_15",
        "name": "HCMT_GetStateString",
        "type": "函数",
        "description": "获取状态整数值对应的字符串",
        "prototypes": [
          {
            "prototype": "char* __stdcall HCMT_GetStateString(__int32 threadState);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "threadState",
            "type": "__int32",
            "desc": "状态值"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HCMT_GetStateString - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCMT_GetStateString - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCMT_GetStateString - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_16",
        "name": "HD多线程.是否能开启",
        "type": "函数",
        "description": "判断是否能开启新的(主副线程)传递的只能是主序号",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_IsCanStart(__int32 windowsIndex);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "windowsIndex",
            "type": "__int32",
            "desc": "主序号"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD多线程.是否能开启 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.是否能开启 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.是否能开启 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_IsCanStart"
      },
      {
        "id": "function_17",
        "name": "HD多线程.开启窗口",
        "type": "函数",
        "description": "直接开启窗口操作",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_Start(__int32 windowsIndex);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "windowsIndex",
            "type": "__int32",
            "desc": "窗口序号"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
          "2.开启成功后会相应触发对应设置的回调函数",
          "3.顺序:",
          "开启窗口:登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调",
          "重启窗口:重启前回调--->登录回调--->第一/第二执行回调同时开启--->{暂停/恢复/结束绑定回调}->结束回调",
          "停止窗口:结束绑定回调->结束回调"
        ],
        "codeExamples": [
          {
            "title": "HD多线程.开启窗口 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.开启窗口 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.开启窗口 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_Start"
      },
      {
        "id": "function_18",
        "name": "HD多线程.所有窗口恢复",
        "type": "函数",
        "description": "设置所有窗口恢复",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_SetAllRecover();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
          "2.仅仅设置的是标志位,不会堵塞线程",
          "3.标志会在HCMT_Sleep接口中检查并触发对应的恢复绑定回调"
        ],
        "codeExamples": [
          {
            "title": "HD多线程.所有窗口恢复 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.所有窗口恢复 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.所有窗口恢复 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_SetAllRecover"
      },
      {
        "id": "function_19",
        "name": "HD多线程.所有窗口停止",
        "type": "函数",
        "description": "设置所有窗口停止",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_SetAllStop();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
          "2.仅仅设置的是标志位,不会堵塞线程",
          "3.标志会在HCMT_Sleep接口中检查并触发对应的停止绑定回调"
        ],
        "codeExamples": [
          {
            "title": "HD多线程.所有窗口停止 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.所有窗口停止 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.所有窗口停止 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_SetAllStop"
      },
      {
        "id": "function_20",
        "name": "HD多线程.暂停窗口",
        "type": "函数",
        "description": "设置窗口暂停",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_SetPause(__int32 windowsIndex);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "windowsIndex",
            "type": "__int32",
            "desc": "窗口序号"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
          "2.仅仅设置的是标志位,不会堵塞线程",
          "3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调"
        ],
        "codeExamples": [
          {
            "title": "HD多线程.暂停窗口 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.暂停窗口 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.暂停窗口 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_SetPause"
      },
      {
        "id": "function_21",
        "name": "HD多线程.暂停线程",
        "type": "函数",
        "description": "设置主副序号对应的线程暂停",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_SetPauseEx(__int32 index);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "index",
            "type": "__int32",
            "desc": "主副序号注意"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
          "2.仅仅设置的是标志位,不会堵塞线程",
          "3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调"
        ],
        "codeExamples": [
          {
            "title": "HD多线程.暂停线程 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.暂停线程 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.暂停线程 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_SetPauseEx"
      },
      {
        "id": "function_22",
        "name": "HD多线程.恢复窗口",
        "type": "函数",
        "description": "设置窗口恢复",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_SetRecover(__int32 windowsIndex);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "windowsIndex",
            "type": "__int32",
            "desc": "窗口序号"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
          "2.仅仅设置的是标志位,不会堵塞线程",
          "3.标志会在HCMT_Sleep接口中检查并触发对应的恢复绑定回调"
        ],
        "codeExamples": [
          {
            "title": "HD多线程.恢复窗口 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.恢复窗口 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.恢复窗口 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_SetRecover"
      },
      {
        "id": "function_23",
        "name": "HD多线程.恢复线程",
        "type": "函数",
        "description": "设置主副序号对应的线程恢复",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_SetRecoverEx(__int32 index);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "index",
            "type": "__int32",
            "desc": "主副序号注意"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
          "2.仅仅设置的是标志位,不会堵塞线程",
          "3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调"
        ],
        "codeExamples": [
          {
            "title": "HD多线程.恢复线程 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.恢复线程 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.恢复线程 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_SetRecoverEx"
      },
      {
        "id": "function_24",
        "name": "HD多线程.停止窗口",
        "type": "函数",
        "description": "设置窗口停止",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_SetStop(__int32 windowsIndex);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "windowsIndex",
            "type": "__int32",
            "desc": "窗口序号"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
          "2.仅仅设置的是标志位,不会堵塞线程",
          "3.标志会在HCMT_Sleep接口中检查并触发对应的结束绑定回调"
        ],
        "codeExamples": [
          {
            "title": "HD多线程.停止窗口 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.停止窗口 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.停止窗口 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_SetStop"
      },
      {
        "id": "function_25",
        "name": "HD多线程.是否运行中",
        "type": "函数",
        "description": "(第一第二)回调里面调用,检查当前线程是否结束",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_IsRunning();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD多线程.是否运行中 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.是否运行中 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.是否运行中 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_IsRunning"
      },
      {
        "id": "function_26",
        "name": "HD多线程.是否暂停",
        "type": "函数",
        "description": "判断主副序号对应的线程是否是已被暂停状态",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_IsPause(__int32 index);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "index",
            "type": "__int32",
            "desc": "主副序号注意"
          }
        ],
        "returnValue": "返回1:表示已经暂停\n返回0:表示未被暂停\n返回其他值:查看返回值表",
        "notes": [
          "1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
          "2.仅仅设置的是标志位,不会堵塞线程",
          "3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调"
        ],
        "codeExamples": [
          {
            "title": "HD多线程.是否暂停 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.是否暂停 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.是否暂停 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_IsPause"
      },
      {
        "id": "function_27",
        "name": "HD多线程.是否停止",
        "type": "函数",
        "description": "判断主副序号对应的线程是否是已被结束状态",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_IsStop(__int32 index);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "index",
            "type": "__int32",
            "desc": "主副序号注意"
          }
        ],
        "returnValue": "返回1:表示已经结束\n返回其他值:查看返回值表",
        "notes": [
          "1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
          "2.仅仅设置的是标志位,不会堵塞线程",
          "3.标志会在HCMT_Sleep接口中检查并触发对应的暂停绑定回调"
        ],
        "codeExamples": [
          {
            "title": "HD多线程.是否停止 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.是否停止 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.是否停止 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_IsStop"
      },
      {
        "id": "function_28",
        "name": "HD多线程.延迟",
        "type": "函数",
        "description": "设延迟函数,自带暂停/结束/恢复检查",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_Sleep(int mis);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "mis",
            "type": "int",
            "desc": "毫秒"
          }
        ],
        "returnValue": "1:正常\n2:线程结束\n3.线程被暂停过\n其他值:查看返回值表",
        "notes": [
          "1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
          "2.仅仅设置的是标志位,不会堵塞线程",
          "3.检查随后触发HCMT_InitOperate设置的3个回调;理论上不能在HCMT_InitOperate设置的3个回调中调用,因为会导致无限调用自己(但是内部做了检测所以不会无限调用,也就是如果当前第一次已经检查到标志位并触发对应的绑定回调了,在回调中又再一次调用HCMT_Sleep,那么这一次的HCMT_Sleep只会正常休眠,并不继续检查了,防止无限调用);",
          "3.其他回调均可以(无影响)",
          "4.如果要内部检测状态机状态需要调用HCMT_StatusSleep"
        ],
        "codeExamples": [
          {
            "title": "HD多线程.延迟 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.延迟 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD多线程.延迟 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_Sleep"
      }
    ]
  },
  {
    "id": "category_9",
    "name": "多线程状态机",
    "functions": [
      {
        "id": "function_1",
        "name": "HD状态机.开启状态机",
        "type": "函数",
        "description": "开启状态机",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_StartStatus();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "1.HDMT_InitProcess/HCMT_InitOperate后才能调用配合多线程模块一起使用",
          "2.一般在执行回调或者检查回调调用就行不需要都开启(内部有检测是否开启)",
          "3.支持多线程,但是不建议,执行回调中调用就行了"
        ],
        "codeExamples": [
          {
            "title": "HD状态机.开启状态机 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD状态机.开启状态机 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD状态机.开启状态机 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_StartStatus"
      },
      {
        "id": "function_2",
        "name": "HD状态机.操作状态",
        "type": "函数",
        "description": "全局(全部窗口序号)禁用或者开启状态",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_EnableStatus(__int32 statusType,BOOL bEnable);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "statusType",
            "type": "__int32",
            "desc": "自定义的状态值"
          },
          {
            "name": "bEnable",
            "type": "bool",
            "desc": "是否有效真"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "1.HDMT_InitProcess/HCMT_InitOperate后才能调用配合多线程模块一起使用",
          "2.操作的状态值,必须先调用HCMT_AddStatus添加状态,否则无效",
          "3.支持多线程",
          "4.如果当前状态正在执行中,此时调用该接口使其状态被禁止/无效,那么当前状态对应的状态回调中就会立即退出回调或者立即监控到状态被改变了",
          "5.一旦被禁止,就算我们切换到该状态,也无法去执行绑定的状态回调了"
        ],
        "codeExamples": [
          {
            "title": "HD状态机.操作状态 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD状态机.操作状态 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD状态机.操作状态 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_EnableStatus"
      },
      {
        "id": "function_3",
        "name": "HD状态机.改变当前状态",
        "type": "函数",
        "description": "改变状态机状态",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_ChangeStatus(__int32 statusType);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "statusType",
            "type": "__int32",
            "desc": "自定义的状态值"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用",
          "2.操作的状态值,必须先调用HCMT_AddStatus添加状态,否则无效",
          "3.支持多线程,一般在检测回调中调用",
          "4.只能改变比之前优先级低的优先级",
          "《《《特别注意:状态值的大小也表示优先级,优先级越高的回调,享有最先执行权限！！！！》》》",
          "如:登录回调>死亡回调>买药回调>限时副本回调>主线回调",
          "优先级大小策略:",
          "1.优先级用户自行定义大小(-1表示没有,不要重复)建议从0开始123...依次递增值越大优先级越高",
          "2.优先级高回调的可以打断或者中断优先级低的回调,当优先级高的回调执行完毕,会继续执行优先级低的回调",
          "2.如果是优先级一样的回调,只有执行完第一个,才能执行第二个.",
          "3.优先级低的回调是不能打断优先级高的回调,此时如果想执行优先级低的回调,那么必须等待优先级高的回调执行完毕后,方可执行优先级低的回调",
          "4.回调内部如果有循环流程,应加入退出循环条件(一般使用HCMT_IsStatus作为退出循环的条件判断或者其他),不要死循环,否则无法实现状态切换"
        ],
        "codeExamples": [
          {
            "title": "HD状态机.改变当前状态 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD状态机.改变当前状态 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD状态机.改变当前状态 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_ChangeStatus"
      },
      {
        "id": "function_4",
        "name": "HD状态机.回溯上个状态",
        "type": "函数",
        "description": "回溯状态",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_RetraceStatus(BOOL bClear=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "bClear",
            "type": "bool",
            "desc": "真表示清除之前的栈缓存同时改变当前状态为-1(空/无状态)bClear"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用",
          "2.操作的状态值,必须先调用HCMT_AddStatus添加状态,否则无效",
          "3.支持多线程,一般在检测回调中调用",
          "4.只能改变比之前优先级低的优先级",
          "《《《特别注意:状态值的大小也表示优先级,优先级越高的回调,享有最先执行权限！！！！》》》",
          "如:登录回调>死亡回调>买药回调>限时副本回调>主线回调",
          "优先级大小策略:",
          "1.优先级用户自行定义大小(-1表示没有,不要重复)建议从0开始123...依次递增值越大优先级越高",
          "2.优先级高回调的可以打断或者中断优先级低的回调,当优先级高的回调执行完毕,会继续执行优先级低的回调",
          "2.如果是优先级一样的回调,只有执行完第一个,才能执行第二个.",
          "3.优先级低的回调是不能打断优先级高的回调,此时如果想执行优先级低的回调,那么必须等待优先级高的回调执行完毕后,方可执行优先级低的回调",
          "4.回调内部如果有循环流程,应加入退出循环条件(一般使用HCMT_IsStatus作为退出循环的条件判断或者其他),不要死循环,否则无法实现状态切换"
        ],
        "codeExamples": [
          {
            "title": "HD状态机.回溯上个状态 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD状态机.回溯上个状态 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD状态机.回溯上个状态 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_RetraceStatus"
      },
      {
        "id": "function_5",
        "name": "HD状态机.是否状态中",
        "type": "函数",
        "description": "当前状态机的状态在回调中是否有效",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_IsStatus();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用",
          "2.用在状态回调中,检索是否是当前状态3.在设置的状态回调函数中循环调用检查当前窗口序号的状态类型是否是当前的映射的回调状态类型4.支持多线程",
          "C++例子:",
          "==========",
          "__int64 __stdcall HMT::登录状态回调(__int32 windowsIndex,__int64 lparam){while(HCMT_IsStatus()){autoret=HCMT_StatusSleep(1000);HDbgPrint f_Command(\\\"HCMT_StatusSleep:%lld\\\",ret);HCMT_MsgStepText(windowsIndex,\\\"正在登录中...\\\");}return1;}",
          "=========="
        ],
        "codeExamples": [
          {
            "title": "HD状态机.是否状态中 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD状态机.是否状态中 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD状态机.是否状态中 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_IsStatus"
      },
      {
        "id": "function_6",
        "name": "HD状态机.状态延迟",
        "type": "函数",
        "description": "状态机延迟函数(自带暂停/结束/恢复/状态机)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_StatusSleep(int mis);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "mis",
            "type": "int",
            "desc": "延迟毫秒"
          }
        ],
        "returnValue": "1:正常\n2:线程结束\n3.线程被暂停过\n4.状态机当前状态被改变\n其他值:查看返回值表",
        "notes": [
          "1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用2.支持多线程自带暂停/结束/恢复/状态机",
          "3.注意区别于HCMT_Sleep这个接口是没法检索状态机状态的",
          "C++例子:",
          "==========",
          "__int64 __stdcall HMT::登录状态回调(__int32 windowsIndex,__int64 lparam){while(HCMT_IsStatus()){autoret=HCMT_StatusSleep(1000);\\n<<<<<<<<-----------------------------这里能及时返回(当我们状态变动的时候)返回值:4表示状态变动HDbgPrint f_Command(\\\"HCMT_StatusSleep:%lld\\\",ret);HCMT_MsgStepText(windowsIndex,\\\"正在登录中...\\\");}return1;}",
          "=========="
        ],
        "codeExamples": [
          {
            "title": "HD状态机.状态延迟 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD状态机.状态延迟 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD状态机.状态延迟 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_StatusSleep"
      },
      {
        "id": "function_7",
        "name": "HD状态机.获取当前状态",
        "type": "函数",
        "description": "获取状态机状态",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_GetStatus(__int32 windowsIndex);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "windowsIndex",
            "type": "__int32",
            "desc": "窗口序号"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "1.HDMT_InitProcess/HCMT_InitOperate/HCMT_StartStatus后才能调用配合多线程模块一起使用",
          "2.支持多线程,一般在UI回调中调用,获取状态值并显示到控件上"
        ],
        "codeExamples": [
          {
            "title": "HD状态机.获取当前状态 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD状态机.获取当前状态 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD状态机.获取当前状态 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMT_GetStatus"
      },
      {
        "id": "function_8",
        "name": "HCMT_SleepEx",
        "type": "函数",
        "description": "设延迟函数,自带暂停/结束/恢复检查/状态机状态(可选)(扩展版本)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMT_SleepEx(int mis,BOOL bStatus=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "mis",
            "type": "int",
            "desc": "毫秒"
          },
          {
            "name": "bStatus",
            "type": "bool",
            "desc": "是否状态机回调,默认为FALSE,如果在状态机回调中调用,请置为真/TURE"
          }
        ],
        "returnValue": "1:正常\n2:线程结束\n3.线程被暂停过\n4.状态改变了\n其他值:查看返回值表",
        "notes": [
          "1.HDMT_InitProcess/HCMT_InitOperate后才能调用",
          "2.仅仅设置的是标志位,不会堵塞线程",
          "3.检查随后触发HCMT_InitOperate设置的3个回调;理论上不能在HCMT_InitOperate设置的3个回调中调用,因为会导致无限调用自己(但是内部做了检测所以不会无限调用,也就是如果当前第一次已经检查到标志位并触发对应的绑定回调了,在回调中又再一次调用HCMT_Sleep,那么这一次的HCMT_Sleep只会正常休眠,并不继续检查了,防止无限调用);",
          "3.其他回调均可以(无影响)",
          "4.如果要内部检测状态机状态需要调用HCMT_StatusSleep"
        ],
        "codeExamples": [
          {
            "title": "HCMT_SleepEx - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCMT_SleepEx - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCMT_SleepEx - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      }
    ]
  },
  {
    "id": "category_10",
    "name": "APIHOOK",
    "functions": [
      {
        "id": "function_1",
        "name": "HDHOOK.Send发包",
        "type": "函数",
        "description": "调用SendAPI(目标进程中调用)X86X64",
        "prototypes": [
          {
            "prototype": "__int64 HDHK_SendApi(__int32 窗口序号,__int32 socket,BYTE* buffer,__int32 bufferSize,__int32 flag,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "socket",
            "type": "__int32",
            "desc": "套接字socket"
          },
          {
            "name": "buffer",
            "type": "byte*",
            "desc": "字节缓冲区地址"
          },
          {
            "name": "bufferSize",
            "type": "__int32",
            "desc": "缓冲区字节大小"
          },
          {
            "name": "flag",
            "type": "__int32",
            "desc": "send的第4个参数flag"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "需要开启才开启,一般默认就行"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HDHOOK.Send发包 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDHOOK.Send发包 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDHOOK.Send发包 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HDHK_SendApi"
      },
      {
        "id": "function_2",
        "name": "HDHOOK.SendTo发包",
        "type": "函数",
        "description": "调用SendtoAPI(目标进程中调用)X86X64",
        "prototypes": [
          {
            "prototype": "__int64 HDHK_SendToApi(__int32 窗口序号,__int32 socket,BYTE* buffer,__int32 bufferSize,__int32 flag,__int32 port,__int32 ip,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "socket",
            "type": "__int32",
            "desc": "套接字socket"
          },
          {
            "name": "buffer",
            "type": "byte*",
            "desc": "字节缓冲区地址"
          },
          {
            "name": "bufferSize",
            "type": "__int32",
            "desc": "缓冲区字节大小"
          },
          {
            "name": "flag",
            "type": "__int32",
            "desc": "send的第4个参数flag"
          },
          {
            "name": "port",
            "type": "__int32",
            "desc": "目标地址端口"
          },
          {
            "name": "ip",
            "type": "__int32",
            "desc": "IP网络字节序,需要把字符串如"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "需要开启才开启,一般默认就行"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HDHOOK.SendTo发包 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDHOOK.SendTo发包 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDHOOK.SendTo发包 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HDHK_SendToApi"
      }
    ]
  },
  {
    "id": "category_11",
    "name": "AddressHOOK",
    "functions": [
      {
        "id": "function_1",
        "name": "HDHOOK.挂钩",
        "type": "函数",
        "description": "任意HOOK(内置插件)X86X64",
        "prototypes": [
          {
            "prototype": "__int64 HDHK_Hook(__int32 窗口序号,__int64 hook地址,__int32 破坏字节,__int64 回调地址,__int64 附加参数,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "hook地址",
            "type": "__int64",
            "desc": "当前HOOK的目标地址(参考适合的HOOK地址X86HOOK地址规则X64HOOK地址规则)"
          },
          {
            "name": "破坏字节数",
            "type": "__int32",
            "desc": "涉及到的汇编字节数"
          },
          {
            "name": "回调地址",
            "type": "__int64",
            "desc": "遵循下面回调函数类型"
          },
          {
            "name": "附加参数",
            "type": "__int64",
            "desc": "自定义参数,此参数会传递给回调函数"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "需要开启才开启,一般默认就行"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无",
          "回调写法:",
          "=============",
          "X86X64:typedef__int64 (__stdcall* HandleCallBackFunType)(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam);",
          "参数解析:",
          "窗口序号:对应的窗口序号",
          "插件序号:内部自动传递",
          "raxOreaxrbxOrebxrcxOrecxrdxOredxrbpOrebprspOresprsiOresirdiOredi:分别对应X86X64的8个寄存器",
          "r8r9r10r11r12r13r14r15:分别对应X64的8个寄存器",
          "lparam:是HDHK_Hook的第五个参数附加参数",
          "备注:",
          "返回值:",
          "0【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】",
          "1【走原有流程】",
          "2【需要修改值】+【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】",
          "3【需要修改值】+【走原有流程】",
          "备注:调用约定是__stdcall",
          "X86X64通用调用案例:",
          "__int32 __stdcall HandleHookCallBackFun(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam){",
          "HDbgPrint f_HOOK(\\\"触发HOOK回调->窗口序号:%d插件序号:%draxOreax:%llXrbxOrebx:%llXrcxOrecx:%llXrdxOredx:%llXrbpOrebp::%llXrspOresp:%llXrsiOresi:%llXrdiOredi:%llXr8:%llXr9:%llXr10:%llXr11:%llXr12:%llXr13:%llXr14:%llXr15:%llXlparam:%d\\\",窗口序号,插件序号,raxOreax,rbxOrebx,rcxOrecx,rdxOredx,rbpOrebp,rspOresp,rsiOresi,rdiOredi,r8,r9,r10,r11,r12,r13,r14,r15,lparam);",
          "\\n....中间执行自己的逻辑",
          "\\n....可以用驱动读写",
          "\\n如果需要修改寄存器值就调用HDHK_SetProcessHookCallBackLparam设置__int32 mark=1;autoret=HDHK_SetProcessHookCallBackLparam(窗口序号,插件序号,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,mark);HDbgPrint f_HOOK(\\\"ret:%lld\\\",ret);",
          "\\n返回值:0忽视HOOK语句直接跳到原来1走原有流程2需要修改值+直接跳到原来3需要修改值+走原有流程return3;}",
          "回调内修改写法请转至》》》》》修改回调返回方法(X86X64)《《《《《《"
        ],
        "codeExamples": [
          {
            "title": "HDHOOK.挂钩 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDHOOK.挂钩 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDHOOK.挂钩 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HDHK_Hook"
      },
      {
        "id": "function_2",
        "name": "HDHOOK.挂钩Ex",
        "type": "函数",
        "description": "任意HOOK(内置插件)X64(该接口针对X64有效)",
        "prototypes": [
          {
            "prototype": "__int64 HDHK_HookEx(__int32 窗口序号,char* 所属模块名字,__int64 hook地址,__int32 破坏字节,__int64 回调地址,__int64 附加参数,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "所属模块名字",
            "type": "char*",
            "desc": "当前HOOK地址所属那个模块当前HOOK地址所属那个模块可以不指定为0就行但是建议指定"
          },
          {
            "name": "hook地址",
            "type": "__int64",
            "desc": "当前HOOK的目标地址(参考适合的HOOK地址X86HOOK地址规则X64HOOK地址规则)"
          },
          {
            "name": "破坏字节数",
            "type": "__int32",
            "desc": "涉及到的汇编字节数"
          },
          {
            "name": "回调地址",
            "type": "__int64",
            "desc": "遵循下面回调函数类型"
          },
          {
            "name": "附加参数",
            "type": "__int64",
            "desc": "自定义参数,此参数会传递给回调函数"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "需要开启才开启,一般默认就行"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无",
          "回调写法:",
          "=============",
          "X86X64:typedef__int64 (__stdcall* HandleCallBackFunType)(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam);",
          "参数解析:",
          "窗口序号:对应的窗口序号",
          "插件序号:内部自动传递",
          "raxOreaxrbxOrebxrcxOrecxrdxOredxrbpOrebprspOresprsiOresirdiOredi:分别对应X86X64的8个寄存器",
          "r8r9r10r11r12r13r14r15:分别对应X64的8个寄存器",
          "lparam:是HDHK_Hook的第五个参数附加参数",
          "备注:",
          "返回值:",
          "0【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】",
          "1【走原有流程】",
          "2【需要修改值】+【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】",
          "3【需要修改值】+【走原有流程】",
          "备注:调用约定是__stdcall",
          "X86X64通用调用案例:",
          "__int32 __stdcall HandleHookCallBackFun(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam){",
          "HDbgPrint f_HOOK(\\\"触发HOOK回调->窗口序号:%d插件序号:%draxOreax:%llXrbxOrebx:%llXrcxOrecx:%llXrdxOredx:%llXrbpOrebp::%llXrspOresp:%llXrsiOresi:%llXrdiOredi:%llXr8:%llXr9:%llXr10:%llXr11:%llXr12:%llXr13:%llXr14:%llXr15:%llXlparam:%d\\\",窗口序号,插件序号,raxOreax,rbxOrebx,rcxOrecx,rdxOredx,rbpOrebp,rspOresp,rsiOresi,rdiOredi,r8,r9,r10,r11,r12,r13,r14,r15,lparam);",
          "\\n....中间执行自己的逻辑",
          "\\n....可以用驱动读写",
          "\\n如果需要修改寄存器值就调用HDHK_SetProcessHookCallBackLparam设置__int32 mark=1;autoret=HDHK_SetProcessHookCallBackLparam(窗口序号,插件序号,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,mark);HDbgPrint f_HOOK(\\\"ret:%lld\\\",ret);",
          "\\n返回值:0忽视HOOK语句直接跳到原来1走原有流程2需要修改值+直接跳到原来3需要修改值+走原有流程return3;}",
          "回调内修改写法请转至》》》》》修改回调返回方法(X86X64)《《《《《《"
        ],
        "codeExamples": [
          {
            "title": "HDHOOK.挂钩Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDHOOK.挂钩Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDHOOK.挂钩Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HDHK_HookEx"
      },
      {
        "id": "function_3",
        "name": "HDHOOK.挂钩Exx",
        "type": "函数",
        "description": "任意HOOK(内置插件)X64(该接口针对X64有效)",
        "prototypes": [
          {
            "prototype": "__int64 HDHK_HookExx(__int32 窗口序号,char* 所属模块名字,__int64 模块首地址,__int32 模块大小,__int64 hook地址,__int32 破坏字节,__int64 回调地址,__int64 附加参数,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "所属模块名字",
            "type": "char*",
            "desc": "当前HOOK地址所属那个模块必须指定"
          },
          {
            "name": "模块首地址",
            "type": "__int64",
            "desc": "HOOK地址所属模块的模块基地址"
          },
          {
            "name": "模块大小",
            "type": "__int32",
            "desc": "HOOK地址所属模块的模块大小字节"
          },
          {
            "name": "hook地址",
            "type": "__int64",
            "desc": "当前HOOK的目标地址(参考适合的HOOK地址X86HOOK地址规则X64HOOK地址规则)"
          },
          {
            "name": "破坏字节数",
            "type": "__int32",
            "desc": "涉及到的汇编字节数"
          },
          {
            "name": "回调地址",
            "type": "__int64",
            "desc": "遵循下面回调函数类型"
          },
          {
            "name": "附加参数",
            "type": "__int64",
            "desc": "自定义参数,此参数会传递给回调函数"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "需要开启才开启,一般默认就行"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无",
          "回调写法:",
          "=============",
          "X86X64:typedef__int64 (__stdcall* HandleCallBackFunType)(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam);",
          "参数解析:",
          "窗口序号:对应的窗口序号",
          "插件序号:内部自动传递",
          "raxOreaxrbxOrebxrcxOrecxrdxOredxrbpOrebprspOresprsiOresirdiOredi:分别对应X86X64的8个寄存器",
          "r8r9r10r11r12r13r14r15:分别对应X64的8个寄存器",
          "lparam:是HDHK_Hook的第五个参数附加参数",
          "备注:",
          "返回值:",
          "0【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】",
          "1【走原有流程】",
          "2【需要修改值】+【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】",
          "3【需要修改值】+【走原有流程】",
          "备注:调用约定是__stdcall",
          "X86X64通用调用案例:",
          "__int32 __stdcall HandleHookCallBackFun(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam){",
          "HDbgPrint f_HOOK(\\\"触发HOOK回调->窗口序号:%d插件序号:%draxOreax:%llXrbxOrebx:%llXrcxOrecx:%llXrdxOredx:%llXrbpOrebp::%llXrspOresp:%llXrsiOresi:%llXrdiOredi:%llXr8:%llXr9:%llXr10:%llXr11:%llXr12:%llXr13:%llXr14:%llXr15:%llXlparam:%d\\\",窗口序号,插件序号,raxOreax,rbxOrebx,rcxOrecx,rdxOredx,rbpOrebp,rspOresp,rsiOresi,rdiOredi,r8,r9,r10,r11,r12,r13,r14,r15,lparam);",
          "\\n....中间执行自己的逻辑",
          "\\n....可以用驱动读写",
          "\\n如果需要修改寄存器值就调用HDHK_SetProcessHookCallBackLparam设置__int32 mark=1;autoret=HDHK_SetProcessHookCallBackLparam(窗口序号,插件序号,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,mark);HDbgPrint f_HOOK(\\\"ret:%lld\\\",ret);",
          "\\n返回值:0忽视HOOK语句直接跳到原来1走原有流程2需要修改值+直接跳到原来3需要修改值+走原有流程return3;}",
          "回调内修改写法请转至》》》》》修改回调返回方法(X86X64)《《《《《《",
          "HDHK_HookExxx",
          "函数简介:",
          "任意HOOK(内置插件)X64(该接口针对X64有效)",
          "函数原型:__int64 HDHK_HookExxx(__int32 窗口序号,__int64 hook地址,char* 所属模块名字,__int64 jmp13空白地址,__int64 保留汇编地址,__int32 破坏字节,__int64 回调地址,__int64 附加参数,BOOL 是否主线程调用=FALSE);",
          "参数定义:",
          "窗口序号:窗口序号(从1开始)",
          "所属模块名字:当前HOOK地址所属那个模块可以不指定为0就行",
          "jmp13空白地址:在当前模块的代码地址找一个空白空间大小为13字节用于存储jmp一些指令",
          "保留汇编地址:用来存储破坏字节数量+5字节大小的空白空间的首地址一般这个地址位于当前所属模块代码空白空间",
          "hook地址:当前HOOK的目标地址(参考适合的HOOK地址X86HOOK地址规则X64HOOK地址规则)",
          "破坏字节数:涉及到的汇编字节数",
          "回调地址:遵循下面回调函数类型",
          "附加参数:自定义参数,此参数会传递给回调函数",
          "是否主线程调用:需要开启才开启,一般默认就行",
          "返回值:",
          "查看返回值表",
          "备注:",
          "无",
          "回调写法:",
          "=============",
          "X86X64:typedef__int64 (__stdcall* HandleCallBackFunType)(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam);",
          "参数解析:",
          "窗口序号:对应的窗口序号",
          "插件序号:内部自动传递",
          "raxOreaxrbxOrebxrcxOrecxrdxOredxrbpOrebprspOresprsiOresirdiOredi:分别对应X86X64的8个寄存器",
          "r8r9r10r11r12r13r14r15:分别对应X64的8个寄存器",
          "lparam:是HDHK_Hook的第五个参数附加参数",
          "备注:",
          "返回值:",
          "0【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】",
          "1【走原有流程】",
          "2【需要修改值】+【忽视被破坏的汇编语句,直接跳到下一句汇编地址(HOOK地址+破坏字节)】",
          "3【需要修改值】+【走原有流程】",
          "备注:调用约定是__stdcall",
          "X86X64通用调用案例:",
          "__int32 __stdcall HandleHookCallBackFun(__int32 窗口序号,__int32 插件序号,__int64 raxOreax,__int64 rbxOrebx,__int64 rcxOrecx,__int64 rdxOredx,__int64 rbpOrebp,__int64 rspOresp,__int64 rsiOresi,__int64 rdiOredi,__int64 r8,__int64 r9,__int64 r10,__int64 r11,__int64 r12,__int64 r13,__int64 r14,__int64 r15,__int64 lparam){",
          "HDbgPrint f_HOOK(\\\"触发HOOK回调->窗口序号:%d插件序号:%draxOreax:%llXrbxOrebx:%llXrcxOrecx:%llXrdxOredx:%llXrbpOrebp::%llXrspOresp:%llXrsiOresi:%llXrdiOredi:%llXr8:%llXr9:%llXr10:%llXr11:%llXr12:%llXr13:%llXr14:%llXr15:%llXlparam:%d\\\",窗口序号,插件序号,raxOreax,rbxOrebx,rcxOrecx,rdxOredx,rbpOrebp,rspOresp,rsiOresi,rdiOredi,r8,r9,r10,r11,r12,r13,r14,r15,lparam);",
          "\\n....中间执行自己的逻辑",
          "\\n....可以用驱动读写",
          "\\n如果需要修改寄存器值就调用HDHK_SetProcessHookCallBackLparam设置__int32 mark=1;autoret=HDHK_SetProcessHookCallBackLparam(窗口序号,插件序号,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,mark);HDbgPrint f_HOOK(\\\"ret:%lld\\\",ret);",
          "\\n返回值:0忽视HOOK语句直接跳到原来1走原有流程2需要修改值+直接跳到原来3需要修改值+走原有流程return3;}",
          "回调内修改写法请转至》》》》》修改回调返回方法(X86X64)《《《《《《"
        ],
        "codeExamples": [
          {
            "title": "HDHOOK.挂钩Exx - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDHOOK.挂钩Exx - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDHOOK.挂钩Exx - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HDHK_HookExx"
      },
      {
        "id": "function_4",
        "name": "HDHOOK.暂停挂钩",
        "type": "函数",
        "description": "暂停任意HOOK(内置插件)X86X64",
        "prototypes": [
          {
            "prototype": "__int64 HDHK_PauseHook(__int32 窗口序号,__int64 hook地址,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "hook地址",
            "type": "__int64",
            "desc": "当前HOOK的目标地址"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "需要开启才开启,一般默认就行"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HDHOOK.暂停挂钩 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDHOOK.暂停挂钩 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDHOOK.暂停挂钩 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HDHK_PauseHook"
      },
      {
        "id": "function_5",
        "name": "HDHOOK.恢复挂钩",
        "type": "函数",
        "description": "恢复任意HOOK(内置插件)X86X64",
        "prototypes": [
          {
            "prototype": "__int64 HDHK_RecoverHook(__int32 窗口序号,__int64 hook地址,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "hook地址",
            "type": "__int64",
            "desc": "当前HOOK的目标地址"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "需要开启才开启,一般默认就行"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HDHOOK.恢复挂钩 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDHOOK.恢复挂钩 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDHOOK.恢复挂钩 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HDHK_RecoverHook"
      },
      {
        "id": "function_6",
        "name": "HDHOOK.卸载挂钩",
        "type": "函数",
        "description": "卸载任意HOOK(内置插件)X86X64",
        "prototypes": [
          {
            "prototype": "__int64 HDHK_UnHook(__int32 窗口序号,__int64 hook地址,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "hook地址",
            "type": "__int64",
            "desc": "当前HOOK的目标地址"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "需要开启才开启,一般默认就行"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HDHOOK.卸载挂钩 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDHOOK.卸载挂钩 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDHOOK.卸载挂钩 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HDHK_UnHook"
      }
    ]
  },
  {
    "id": "category_12",
    "name": "通用模块",
    "functions": [
      {
        "id": "function_1",
        "name": "HD通用.CALLX64",
        "type": "函数",
        "description": "通用CALL(适合X64),支持0-8个参数",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HC_CALL(__int32 窗口序号,__int64 CALL地址,__int64 rcx=0,__int64 rdx=0,__int64 r8=0,__int64 r9=0,__int64 lparam5=0,__int64 lparam6=0,__int64 lparam7=0,__int64 lparam8=0,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号（从1开始）"
          },
          {
            "name": "CALL地址",
            "type": "__int64",
            "desc": "CALL地址"
          },
          {
            "name": "rcx",
            "type": "__int64",
            "desc": "CALL参数"
          },
          {
            "name": "rdx",
            "type": "__int64",
            "desc": "CALL参数"
          },
          {
            "name": "r8",
            "type": "__int64",
            "desc": "CALL参数"
          },
          {
            "name": "r9",
            "type": "__int64",
            "desc": "CALL参数"
          },
          {
            "name": "l5",
            "type": "",
            "desc": "CALL参数"
          },
          {
            "name": "l6",
            "type": "",
            "desc": "CALL参数"
          },
          {
            "name": "l7",
            "type": "",
            "desc": "CALL参数"
          },
          {
            "name": "l8",
            "type": "",
            "desc": "CALL参数"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否主线程调用这个CALL,需要挂接主线程"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "如果需要更多参数传递请联系作者"
        ],
        "codeExamples": [
          {
            "title": "HD通用.CALLX64 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通用.CALLX64 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通用.CALLX64 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HC_CALL"
      },
      {
        "id": "function_2",
        "name": "HD通用.CALLX86",
        "type": "函数",
        "description": "通用CALL(适合X86),支持0到8个参数",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HC_CALLX86(__int32 窗口序号,__int32 CALL地址,__int32 ecx=0,__int32 lparam1=0,__int32 lparam2=0,__int32 lparam3=0,__int32 lparam4=0,__int32 lparam5=0,__int32 lparam6=0,__int32 lparam7=0,__int32 lparam8=0,__int32 lparamNum=0,__int32 addEsp=-1,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号（从1开始）"
          },
          {
            "name": "call地址",
            "type": "__int32",
            "desc": "4字节接口地址"
          },
          {
            "name": "ecx",
            "type": "__int32",
            "desc": "对象参数"
          },
          {
            "name": "lparam1-lparam8",
            "type": "__int32",
            "desc": "从第一个到第八个参数"
          },
          {
            "name": "lparamNum",
            "type": "__int32",
            "desc": "当前接口地址的传递的参数数量(支持0到8个参数)"
          },
          {
            "name": "addEsp",
            "type": "__int32",
            "desc": "如果调用的接口地址是内平栈就置为-1,如果是外平栈就设置为参数数量(lparamNum)* 0x4"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否主线程调用这个CALL,需要挂接主线程"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "如果需要更多参数传递请联系作者",
          "HC_HookMaint hread",
          "函数简介:",
          "挂接主线程",
          "函数原型:__int64 __stdcall HC_HookMaint hread(__int32 窗口序号,__int64 窗口句柄);",
          "参数定义:",
          "窗口序号:窗口序号(从1开始)",
          "窗口句柄:窗口句柄",
          "返回值:",
          "查看返回值表",
          "备注:",
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD通用.CALLX86 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通用.CALLX86 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD通用.CALLX86 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HC_CALLX86"
      }
    ]
  },
  {
    "id": "category_13",
    "name": "ShellCode模块(SH)",
    "functions": [
      {
        "id": "function_1",
        "name": "HD汇编.转机器码",
        "type": "函数",
        "description": "汇编文本转换机器码",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSH_GetShellCode(__int32 模式,char* 汇编文本,BYTE* 机器码缓冲区,__int32 机器码缓冲区大小,__int64 返回机器码字节大小的地址,__int64 错误1变量的地址,__int64 错误2变量的地址);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "模式",
            "type": "__int32",
            "desc": "32位（4）/64位（8）"
          },
          {
            "name": "汇编文本",
            "type": "char*",
            "desc": "缓冲区字符串地址"
          },
          {
            "name": "机器码缓冲区",
            "type": "byte*",
            "desc": "用来存转换的机器码缓冲区(单位"
          },
          {
            "name": "机器码缓冲区大小",
            "type": "__int32",
            "desc": "机器码缓冲区大小(单位"
          },
          {
            "name": "返回机器码字节大小的地址",
            "type": "__int64",
            "desc": "用来存转换的机器码缓冲区的大小变量的地址注意是传递变量的地址,在CALL内部写入值(单位"
          },
          {
            "name": "错误1",
            "type": "__int64",
            "desc": "返回错误1(第几行有错误)注意是传递变量的地址,在CALL内部写入值"
          },
          {
            "name": "错误2",
            "type": "__int64",
            "desc": "返回错误2(具体错误描述)注意是传递变量的地址,在CALL内部写入值"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD汇编.转机器码 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD汇编.转机器码 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD汇编.转机器码 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSH_GetShellCode"
      },
      {
        "id": "function_2",
        "name": "HD汇编.写入机器码",
        "type": "函数",
        "description": "机器码写入到进程",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSH_WriteShellCode(__int32 pid,BYTE* 机器码缓冲区,__int32 机器码缓冲区大小,__int64 返回变量的地址);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程pid"
          },
          {
            "name": "机器码缓冲区",
            "type": "byte*",
            "desc": "机器码缓冲区"
          },
          {
            "name": "机器码缓冲区大小",
            "type": "__int32",
            "desc": "机器码缓冲区大小"
          },
          {
            "name": "返回地址",
            "type": "",
            "desc": "返回写入的地址注意是传递变量的地址,在CALL内部写入值"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "这里执行用的是HD驱动来申请和写入这个机器码,注意要把HD驱动安装好",
          "拿到了写入地址可以使用HD驱动创建远线程来执行"
        ],
        "codeExamples": [
          {
            "title": "HD汇编.写入机器码 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD汇编.写入机器码 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD汇编.写入机器码 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSH_WriteShellCode"
      }
    ]
  },
  {
    "id": "category_14",
    "name": "LUA模块(LUA)",
    "functions": [
      {
        "id": "function_1",
        "name": "HDLUA.读文件",
        "type": "函数",
        "description": "执行或加载LUA文件",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCLUA_ReadFile(__int32 窗口序号,char* 文件名路径,__int32 LUA标识符,BOOL 是否执行=FALSE,BOOL 是否需要拿到返回值=FALSE,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "文件名路径",
            "type": "char*",
            "desc": "LUA文件名路径"
          },
          {
            "name": "LUA标识符",
            "type": "__int32",
            "desc": "一个任意整数的标识(不要重复就行)"
          },
          {
            "name": "是否执行",
            "type": "bool",
            "desc": "是否直接执行LUA文件"
          }
        ],
        "returnValue": "是否需要拿到返回值\n是否主线程调用:是否需要主线程来调用这个CALL\n返回值:\n查看返回值表",
        "notes": [
          "LUA标识符:当【是否需要拿到返回值】参数为真的时候,用作线程的标识符,方便主动退出线程，标识符规则:不要太大了{0到100}以内就行是否执行:真表示执行并加载LUA(比如:注入一些自定义LUA接口同时还能执行LUA),反之只是加载LUA文件(比如:注入一些自定义LUA接口)是否需要拿到返回值:真表示堵塞直到LUA文件执行完毕并获取返回值，反之表示开启一根线程执行(无法拿到返回值,可以在LUA文件中做一些耗时的操作)"
        ],
        "codeExamples": [
          {
            "title": "HDLUA.读文件 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDLUA.读文件 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDLUA.读文件 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCLUA_ReadFile"
      },
      {
        "id": "function_2",
        "name": "HDLUA.结束LUA",
        "type": "函数",
        "description": "关闭LUA线程",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCLUA_CloseLua(__int32 窗口序号,__int32 LUA标识符=-1);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "LUA标识符",
            "type": "__int32",
            "desc": "通过标识符来停止LUA线程"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "LUA标识符:调用【HCLUA_ReadFile】接口指定的【LUA标识符】参数,一一对应,-1表示全部LUA线程退出！！！"
        ],
        "codeExamples": [
          {
            "title": "HDLUA.结束LUA - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDLUA.结束LUA - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDLUA.结束LUA - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCLUA_CloseLua"
      },
      {
        "id": "function_3",
        "name": "HDLUA.执行CALL",
        "type": "函数",
        "description": "执行被注册过的LUA函数",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCLUA_ExcuteCall(__int32 窗口序号,char* 函数名,__int32 参数数量=0,__int64 rcx=0,__int64 rdx=0,__int64 r8=0,__int64 r9=0,__int64 lparam5=0,__int64 lparam6=0,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "函数名",
            "type": "char*",
            "desc": "被注册过的函数名"
          },
          {
            "name": "参数数量",
            "type": "__int32",
            "desc": "参数数量"
          },
          {
            "name": "rcx",
            "type": "__int64",
            "desc": "CALL参数"
          },
          {
            "name": "rdx",
            "type": "__int64",
            "desc": "CALL参数"
          },
          {
            "name": "r8",
            "type": "__int64",
            "desc": "CALL参数"
          },
          {
            "name": "r9",
            "type": "__int64",
            "desc": "CALL参数"
          },
          {
            "name": "l5",
            "type": "",
            "desc": "CALL参数"
          },
          {
            "name": "l6",
            "type": "",
            "desc": "CALL参数"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否主线程调用"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "json:{\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":XXX}"
        ],
        "codeExamples": [
          {
            "title": "HDLUA.执行CALL - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDLUA.执行CALL - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDLUA.执行CALL - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCLUA_ExcuteCall"
      }
    ]
  },
  {
    "id": "category_15",
    "name": "驱动模块(N)",
    "functions": [
      {
        "id": "function_1",
        "name": "HCN_LoadDrv",
        "type": "函数",
        "description": "加载N驱动",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCN_LoadDrv();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表\n成功返回1",
        "notes": [
          "需要联网,可以卸载,驱动内置了进程,如需要自定义进程名联系管理员添加或者用HD驱动"
        ],
        "codeExamples": [
          {
            "title": "HCN_LoadDrv - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCN_LoadDrv - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCN_LoadDrv - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_2",
        "name": "HCN_InjectDll(W/A)X86",
        "type": "函数",
        "description": "注入32/64位DLL(需要先加载N驱动)",
        "prototypes": [
          {
            "prototype": "HEARTDLL_API_HN__int64 __stdcall HCN_InjectDllWX86(wchar_t* DLL路径W);",
            "description": ""
          },
          {
            "prototype": "HEARTDLL_API_HN__int64 __stdcall HCN_InjectDllAX86(char* DLL路径A);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "DLL路径W",
            "type": "wchar_t*",
            "desc": "Unicode字符串"
          },
          {
            "name": "DLL路径W",
            "type": "wchar_t*",
            "desc": "Ascii字符串"
          }
        ],
        "returnValue": "查看返回值表\n成功返回1",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HCN_InjectDll(W/A)X86 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCN_InjectDll(W/A)X86 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCN_InjectDll(W/A)X86 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_3",
        "name": "HCN_InjectDll(W/A)X64",
        "type": "函数",
        "description": "注入32/64位DLL(需要先加载N驱动)",
        "prototypes": [
          {
            "prototype": "HEARTDLL_API_HN__int64 __stdcall HCN_InjectDllWX64(wchar_t* DLL路径W);",
            "description": ""
          },
          {
            "prototype": "HEARTDLL_API_HN__int64 __stdcall HCN_InjectDllAX64(char* DLL路径A);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "DLL路径W",
            "type": "wchar_t*",
            "desc": "Unicode字符串"
          },
          {
            "name": "DLL路径W",
            "type": "wchar_t*",
            "desc": "Ascii字符串"
          }
        ],
        "returnValue": "查看返回值表\n成功返回1",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HCN_InjectDll(W/A)X64 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCN_InjectDll(W/A)X64 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCN_InjectDll(W/A)X64 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_4",
        "name": "HCN_InstallPlug(86/64)",
        "type": "函数",
        "description": "安装32/64位HD插件(需要先加载N驱动)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCN_InstallPlugX86();",
            "description": ""
          },
          {
            "prototype": "__int64 __stdcall HCN_InstallPlugX64();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表\n成功返回1",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HCN_InstallPlug(86/64) - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCN_InstallPlug(86/64) - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCN_InstallPlug(86/64) - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_5",
        "name": "HCN_UnLoadDrv",
        "type": "函数",
        "description": "卸载驱动同时清除了注入的DLL缓存",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCN_UnLoadDrv();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表\n返回值:0释放失败1成功释放",
        "notes": [
          "取消窗口关联,一定要卸载相关信息,随后所有循环会快速内退,从而线程安全退出！！！！"
        ],
        "codeExamples": [
          {
            "title": "HCN_UnLoadDrv - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCN_UnLoadDrv - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCN_UnLoadDrv - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      }
    ]
  },
  {
    "id": "category_16",
    "name": "驱动模块(HD)",
    "functions": [
      {
        "id": "function_1",
        "name": "HD驱动.安装",
        "type": "函数",
        "description": "加载HD驱动(正式版本)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_LoadDrv();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要联网,不可以卸载驱动,可以清除注入DLL缓存",
          "此接口相当于调用HCHD_LoadDrv2传递-1:HDEx正式版本(云下发正常驱动,无特殊处理)"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.安装 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.安装 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.安装 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_LoadDrv"
      },
      {
        "id": "function_2",
        "name": "HD驱动.安装2",
        "type": "函数",
        "description": "云下发加载驱动或组件(可以通过指定驱动序号,加载不同版本的驱动如:正式版本定制版本备用版本其他保护盾VT等等)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_LoadDrv2(__int32 type=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "type",
            "type": "__int32",
            "desc": "驱动序号-1表示"
          },
          {
            "name": "说明",
            "type": "",
            "desc": "云下发加载驱动或组件-1"
          },
          {
            "name": "注意",
            "type": "",
            "desc": "-1016不能共存其他任意组合都可以共存！！！！"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "需要联网,不可以卸载驱动,可以清除注入DLL缓存"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.安装2 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.安装2 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.安装2 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_LoadDrv2"
      },
      {
        "id": "function_3",
        "name": "HD驱动.初始化快速读写",
        "type": "函数",
        "description": "初始化HD驱动快速读写(一般在HD安装驱动接口后的下一句就开始初始化)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_InitFastRW();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "如果最开始安装HD驱动调用的是HCHD_LoadDrv同时又需要快速读写遍历,就需要先调用此接口,然后调用HCHD_RWExx进行快读内存读写遍历(百万级别)",
          "如果最开始安装HD驱动调用的是HCHD_LoadDrv2并传递驱动序号为0,表示可以直接调用HCHD_RWExx进行快读内存读写遍历(百万级别),不需要再调用此接口了"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.初始化快速读写 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.初始化快速读写 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.初始化快速读写 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_InitFastRW"
      },
      {
        "id": "function_4",
        "name": "HD驱动.无痕注入DLL",
        "type": "函数",
        "description": "把DLL注入到指定进程中(指定DLL二进制文件数据)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_InjectX86X64(char* injectExeName,__int32 dllBits,__int32 injectMode,__int32 memoryHide,PVOIDinjectData,__int32 injectSize);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "injectExeName",
            "type": "char*",
            "desc": "进程名(如"
          },
          {
            "name": "dllBits",
            "type": "__int32",
            "desc": "进程位(32/64)"
          },
          {
            "name": "injectMode",
            "type": "__int32",
            "desc": "注入模式(0/1/2),一般0,1模式就行,2用于steam游戏"
          },
          {
            "name": "memoryHide",
            "type": "__int32",
            "desc": "内存保护模式(0/1/2)"
          },
          {
            "name": "injectData",
            "type": "",
            "desc": "注入数据缓冲区首地址"
          },
          {
            "name": "injectSize",
            "type": "__int32",
            "desc": "注入数据缓冲区大小(单位"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "不能卸载驱动,可以清除注入DLL缓存,支持32/64进程"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.无痕注入DLL - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.无痕注入DLL - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.无痕注入DLL - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_InjectX86X64"
      },
      {
        "id": "function_5",
        "name": "HCHD_InjectX86X64ByFile",
        "type": "函数",
        "description": "把DLL注入到指定进程中(指定DLL文件路径)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_InjectX86X64ByFile(char* injectExeName,__int32 dllBits,__int32 injectMode,__int32 memoryHide,char* DLL绝对路径A);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "injectExeName",
            "type": "char*",
            "desc": "进程名(如"
          },
          {
            "name": "dllBits",
            "type": "__int32",
            "desc": "进程位(32/64)"
          },
          {
            "name": "injectMode",
            "type": "__int32",
            "desc": "注入模式(0/1/2),一般0,1模式就行,2用于steam游戏"
          },
          {
            "name": "memoryHide",
            "type": "__int32",
            "desc": "内存保护模式(0/1/2)"
          },
          {
            "name": "DLL绝对路径A",
            "type": "char*",
            "desc": "DLL绝对路径A"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "不能卸载驱动,可以清除注入DLL缓存,支持32/64进程"
        ],
        "codeExamples": [
          {
            "title": "HCHD_InjectX86X64ByFile - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCHD_InjectX86X64ByFile - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCHD_InjectX86X64ByFile - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_6",
        "name": "HCHD_InstallPlug(86/64)",
        "type": "函数",
        "description": "安装HD插件到指定进程中",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_InstallPlugX86(char* injectExeName,__int32 injectMode,__int32 memoryHide);",
            "description": ""
          },
          {
            "prototype": "__int64 __stdcall HCHD_InstallPlugX64(char* injectExeName,__int32 injectMode,__int32 memoryHide);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "injectExeName",
            "type": "char*",
            "desc": "进程名(如"
          },
          {
            "name": "injectMode",
            "type": "__int32",
            "desc": "注入模式(0/1/2),一般0,1模式就行,2用于steam游戏"
          },
          {
            "name": "memoryHide",
            "type": "__int32",
            "desc": "内存保护模式(0/1/2)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "需要联网,可以清除注入DLL缓存,支持32/64进程"
        ],
        "codeExamples": [
          {
            "title": "HCHD_InstallPlug(86/64) - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCHD_InstallPlug(86/64) - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCHD_InstallPlug(86/64) - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_7",
        "name": "HD驱动.卸载插件",
        "type": "函数",
        "description": "卸载插件(并不是从进程中卸载,而是清除了下一次进程打开的时候安装插件的缓存)",
        "prototypes": [
          {
            "prototype": "__int64 __int64 __stdcall HCHD_UnInstallPlug();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.卸载插件 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.卸载插件 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.卸载插件 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_UnInstallPlug"
      },
      {
        "id": "function_8",
        "name": "HD驱动.前台鼠标移动点击",
        "type": "函数",
        "description": "前台驱动鼠标移动并点击",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_MousePress(__int32 abx,__int32 aby,__int32 mButCode,__int32 mis);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "X",
            "type": "__int32",
            "desc": "屏幕坐标X"
          },
          {
            "name": "X",
            "type": "__int32",
            "desc": "屏幕坐标Y"
          },
          {
            "name": "mButCode",
            "type": "__int32",
            "desc": ""
          },
          {
            "name": "mButCode 鼠标移动时鼠标按钮的值如下 指定0表示移动不按键",
            "type": "__int32",
            "desc": "#defineMOUSE_BUTTON_1_DOWN1左按下#defineMOUSE_BUTTON_1_UP2左弹起#defineMOUSE_BUTTON_2_DOWN4中按下#defineMOUSE_BUTTON_2_UP8中弹起#defineMOUSE_BUTTON_3_DOWN16右按下#defineMOUSE_BUTTON_3_UP32右弹起"
          },
          {
            "name": "mis",
            "type": "__int32",
            "desc": "按下和弹起之间的毫秒差"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "可以通过调用HCHD_SetMMTrackType来设置鼠标全局移动轨迹类型",
          "按键在轨迹坐标集中那些坐标有效:第一个点操作按键-中间点不操作按键-最后一个点不操作按键"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.前台鼠标移动点击 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.前台鼠标移动点击 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.前台鼠标移动点击 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_MousePress"
      },
      {
        "id": "function_9",
        "name": "HD驱动.前台鼠标移动点击Ex",
        "type": "函数",
        "description": "前台驱动鼠标移动并点击(可指定句柄)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_MousePressEx(__int64 hwnd,__int32 x,__int32 y,__int32 mButCode,__int32 mis);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "窗口句柄"
          },
          {
            "name": "X",
            "type": "__int32",
            "desc": "窗口客户区坐标X"
          },
          {
            "name": "X",
            "type": "__int32",
            "desc": "窗口客户区坐标Y"
          },
          {
            "name": "mButCode",
            "type": "__int32",
            "desc": ""
          },
          {
            "name": "mButCode 鼠标移动时鼠标按钮的值如下 指定0表示移动不按键",
            "type": "__int32",
            "desc": "#defineMOUSE_BUTTON_1_DOWN1左按下#defineMOUSE_BUTTON_1_UP2左弹起#defineMOUSE_BUTTON_2_DOWN4中按下#defineMOUSE_BUTTON_2_UP8中弹起#defineMOUSE_BUTTON_3_DOWN16右按下#defineMOUSE_BUTTON_3_UP32右弹起"
          },
          {
            "name": "mis",
            "type": "__int32",
            "desc": "按下和弹起之间的毫秒差"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "可以通过调用HCHD_SetMMTrackType来设置鼠标全局移动轨迹类型",
          "按键在轨迹坐标集中那些坐标有效:第一个点操作按键-中间点不操作按键-最后一个点不操作按键"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.前台鼠标移动点击Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.前台鼠标移动点击Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.前台鼠标移动点击Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_MousePressEx"
      },
      {
        "id": "function_10",
        "name": "HD驱动.前台鼠标移动按下",
        "type": "函数",
        "description": "前台驱动鼠标移动并按下指定键(可指定句柄)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_MouseDown(__int64 hwnd,__int32 x,__int32 y,__int32 mButCode);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "窗口句柄"
          },
          {
            "name": "X",
            "type": "__int32",
            "desc": "窗口客户区坐标X"
          },
          {
            "name": "X",
            "type": "__int32",
            "desc": "窗口客户区坐标Y"
          },
          {
            "name": "mButCode",
            "type": "__int32",
            "desc": ""
          },
          {
            "name": "mButCode 鼠标移动时鼠标按钮的值如下 指定0表示移动不按键",
            "type": "__int32",
            "desc": "#defineMOUSE_BUTTON_1_DOWN1左按下#defineMOUSE_BUTTON_2_DOWN4中按下#defineMOUSE_BUTTON_3_DOWN16右按下"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "可以通过调用HCHD_SetMMTrackType来设置鼠标全局移动轨迹类型",
          "按键在轨迹坐标集中那些坐标有效:第一个点操作按键-中间点不操作按键-最后一个点不操作按键"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.前台鼠标移动按下 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.前台鼠标移动按下 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.前台鼠标移动按下 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_MouseDown"
      },
      {
        "id": "function_11",
        "name": "HD驱动.前台鼠标移动弹起",
        "type": "函数",
        "description": "前台驱动鼠标移动并弹起指定键(可指定句柄)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_MouseUp(__int64 hwnd,__int32 x,__int32 y,__int32 mButCode);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "窗口句柄"
          },
          {
            "name": "X",
            "type": "__int32",
            "desc": "窗口客户区坐标X"
          },
          {
            "name": "X",
            "type": "__int32",
            "desc": "窗口客户区坐标Y"
          },
          {
            "name": "mButCode",
            "type": "__int32",
            "desc": ""
          },
          {
            "name": "mButCode 鼠标移动时鼠标按钮的值如下 指定0表示移动不按键",
            "type": "__int32",
            "desc": "#defineMOUSE_BUTTON_1_UP2左弹起#defineMOUSE_BUTTON_2_UP8中弹起#defineMOUSE_BUTTON_3_UP32右弹起"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "可以通过调用HCHD_SetMMTrackType来设置鼠标全局移动轨迹类型",
          "按键在轨迹坐标集中那些坐标有效:第一个点操作按键-中间点不操作按键-最后一个点不操作按键"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.前台鼠标移动弹起 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.前台鼠标移动弹起 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.前台鼠标移动弹起 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_MouseUp"
      },
      {
        "id": "function_12",
        "name": "HD驱动.前台按键",
        "type": "函数",
        "description": "前台驱动键盘(按下并弹起)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_KbPress(__int32 virtualKeyCode,__int32 mis);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "virtualKeyCode",
            "type": "__int32",
            "desc": "虚拟键码"
          },
          {
            "name": "mis",
            "type": "__int32",
            "desc": "按下和弹起之间的毫秒差"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.前台按键 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.前台按键 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.前台按键 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_KbPress"
      },
      {
        "id": "function_13",
        "name": "HD驱动.前台按键按下",
        "type": "函数",
        "description": "前台驱动键盘(按下某键)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_KbDown(__int32 virtualKeyCode);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "virtualKeyCode",
            "type": "__int32",
            "desc": "虚拟键码"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.前台按键按下 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.前台按键按下 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.前台按键按下 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_KbDown"
      },
      {
        "id": "function_14",
        "name": "HD驱动.前台按键弹起",
        "type": "函数",
        "description": "前台驱动键盘(弹起某键)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_KbUp(__int32 virtualKeyCode);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "virtualKeyCode",
            "type": "__int32",
            "desc": "虚拟键码"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.前台按键弹起 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.前台按键弹起 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.前台按键弹起 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_KbUp"
      },
      {
        "id": "function_15",
        "name": "HD驱动.驱动读写",
        "type": "函数",
        "description": "驱动读写",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_RW(__int32 pid,__int64 targetAddress,__int64 bufferAddress,__int32 bufferOfBytes,__int32 rwType);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程ID"
          },
          {
            "name": "targetAddress",
            "type": "__int64",
            "desc": "目标地址"
          },
          {
            "name": "bufferAddress",
            "type": "__int64",
            "desc": "数据缓冲区指针"
          },
          {
            "name": "bufferOfBytes",
            "type": "__int32",
            "desc": "数据缓冲区大小,"
          },
          {
            "name": "rwType",
            "type": "__int32",
            "desc": "读写类型[0=读内存;1=写内存;2=强写内存]"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.驱动读写 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.驱动读写 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.驱动读写 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_RW"
      },
      {
        "id": "function_16",
        "name": "HD驱动.开始读写",
        "type": "函数",
        "description": "驱动读写Ex(开始批读写)与HCHD_EndRWEx成对出现适合快速遍历(百万级别读写单线程)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_BeginRWEx(__int32 pid);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程ID"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "适合快速遍历"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.开始读写 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.开始读写 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.开始读写 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_BeginRWEx"
      },
      {
        "id": "function_17",
        "name": "HD驱动.驱动读写Ex",
        "type": "函数",
        "description": "驱动读写Ex(批量读写)(百万级别读写单线程)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_RWEx(__int64 targetAddress,__int64 bufferAddress,__int32 bufferOfBytes,__int32 rwType);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "targetAddress",
            "type": "__int64",
            "desc": "目标地址"
          },
          {
            "name": "bufferAddress",
            "type": "__int64",
            "desc": "数据缓冲区指针"
          },
          {
            "name": "bufferOfBytes",
            "type": "__int32",
            "desc": "数据缓冲区大小,"
          },
          {
            "name": "rwType",
            "type": "__int32",
            "desc": "读写类型[0=读内存;1=写内存;2=强写内存]"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "先调用HCHD_BeginRWEx然后中间调用该接口HCHD_RWEx最后调用HCHD_EndRWEx用于释放环境"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.驱动读写Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.驱动读写Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.驱动读写Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_RWEx"
      },
      {
        "id": "function_18",
        "name": "HD驱动.结束读写",
        "type": "函数",
        "description": "驱动读写Ex(结束批读写)与HCHD_BeginRWEx成对出现适合快速遍历(百万级别读写单线程)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_EndRWEx();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "适合快速遍历"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.结束读写 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.结束读写 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.结束读写 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_EndRWEx"
      },
      {
        "id": "function_19",
        "name": "HD驱动.地址是否可读",
        "type": "函数",
        "description": "检查地址是否可读",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_AddrIsRead(__int32 pid,__int64 addr,__int32 size);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程ID指定为0表示初始化HD快速读写遍历(适合)"
          },
          {
            "name": "addr",
            "type": "__int64",
            "desc": "需要测试的地址"
          },
          {
            "name": "size",
            "type": "__int32",
            "desc": "地址所涉及到的字节大小(4字节或者8字节),不能为其他字节数"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.地址是否可读 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.地址是否可读 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.地址是否可读 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_AddrIsRead"
      },
      {
        "id": "function_20",
        "name": "HD驱动.进程保护",
        "type": "函数",
        "description": "进程保护",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_PP(__int32 pid,BOOL bOpen);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程ID"
          },
          {
            "name": "bOpen",
            "type": "bool",
            "desc": "是否开启[1=开启保护;0=关闭保护]"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.进程保护 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.进程保护 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.进程保护 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_PP"
      },
      {
        "id": "function_21",
        "name": "HD驱动.进程隐藏",
        "type": "函数",
        "description": "开启进程隐藏",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_PHide(__int32 pid);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程ID"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "一次性只能隐藏一个,如果需要隐藏第二个,先把之前的给显示了"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.进程隐藏 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.进程隐藏 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.进程隐藏 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_PHide"
      },
      {
        "id": "function_22",
        "name": "HCHD_PHideEx",
        "type": "函数",
        "description": "开启进程隐藏(加强版本)无法恢复",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_PHideEx(__int32 pid);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程ID"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "1.隐藏后关闭进程不会蓝屏",
          "2.隐藏后该接口无法恢复显示,其实也没必要恢复显示"
        ],
        "codeExamples": [
          {
            "title": "HCHD_PHideEx - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCHD_PHideEx - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCHD_PHideEx - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_23",
        "name": "HD驱动.进程显示",
        "type": "函数",
        "description": "进程显示",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_PShow(__int32 pid);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程ID"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.进程显示 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.进程显示 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.进程显示 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_PShow"
      },
      {
        "id": "function_24",
        "name": "HD.进程杀死",
        "type": "函数",
        "description": "进程杀死",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_PPKill(char* processName,__int32 pid);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "processName",
            "type": "char*",
            "desc": "进程名把当前所有相同进程名全部杀掉"
          },
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程PID指定了PID进程名就失效"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD.进程杀死 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD.进程杀死 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD.进程杀死 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_PPKill"
      },
      {
        "id": "function_25",
        "name": "HD驱动.申请内存",
        "type": "函数",
        "description": "驱动申请内存",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_MemoryAllocate(__int32 pid,__int64 memorySize,__int32 memoryProtect,BOOL bHighAddress,__int64 pOutBuffer);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程ID"
          },
          {
            "name": "memorySize",
            "type": "__int64",
            "desc": "申请大小"
          },
          {
            "name": "memoryProtect",
            "type": "__int32",
            "desc": "内存保护属性例如"
          },
          {
            "name": "bHighAddress",
            "type": "bool",
            "desc": "是否申请高位内存如果申请大小超过4字节存储的值就属于高位内存一般为假就行"
          },
          {
            "name": "pOutBuffer",
            "type": "__int64",
            "desc": "缓冲区指针(存申请返回的地址)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.申请内存 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.申请内存 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.申请内存 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_MemoryAllocate"
      },
      {
        "id": "function_26",
        "name": "HD驱动.申请内存Ex",
        "type": "函数",
        "description": "驱动申请内存(扩展版本)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_MemoryAllocateEx(__int32 pid,__int64 memoryAddr,__int64 memorySize,__int32 memoryProtect,BOOL bHighAddress,__int64 pOutBuffer);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程ID"
          },
          {
            "name": "memoryAddr",
            "type": "__int64",
            "desc": "指定的内存地址或者为NULL(0)"
          },
          {
            "name": "memorySize",
            "type": "__int64",
            "desc": "申请大小"
          },
          {
            "name": "memoryProtect",
            "type": "__int32",
            "desc": "内存保护属性"
          },
          {
            "name": "bHighAddress",
            "type": "bool",
            "desc": "是否申请高位内存如果申请大小超过4字节存储的值就属于高位内存一般为假就行"
          },
          {
            "name": "pOutBuffer",
            "type": "__int64",
            "desc": "缓冲区指针(存申请返回的地址)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.申请内存Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.申请内存Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.申请内存Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_MemoryAllocateEx"
      },
      {
        "id": "function_27",
        "name": "HD驱动.内存释放",
        "type": "函数",
        "description": "驱动内存释放",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_MemoryFree(__int32 pid,__int64 memoryAddress);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程ID"
          },
          {
            "name": "memoryAddress",
            "type": "__int64",
            "desc": "需要释放的内存地址"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.内存释放 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.内存释放 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.内存释放 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_MemoryFree"
      },
      {
        "id": "function_28",
        "name": "HD驱动.修改内存保护",
        "type": "函数",
        "description": "驱动修改内存保护属性",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_MemoryProtect(__int32 pid,__int64 memoryAddress,__int64 memoryOfBytes,__int32 newProtect);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程ID"
          },
          {
            "name": "memoryAddress",
            "type": "__int64",
            "desc": "内存地址"
          },
          {
            "name": "memoryOfBytes",
            "type": "__int64",
            "desc": "内存大小"
          },
          {
            "name": "newProtect",
            "type": "__int32",
            "desc": "新保护值"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.修改内存保护 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.修改内存保护 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.修改内存保护 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_MemoryProtect"
      },
      {
        "id": "function_29",
        "name": "HD驱动.内存隐藏",
        "type": "函数",
        "description": "驱动内存隐藏",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_MemoryHide(__int32 pid,__int64 memoryAddress,__int64 memoryOfBytes);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程ID"
          },
          {
            "name": "memoryAddress",
            "type": "__int64",
            "desc": "内存地址"
          },
          {
            "name": "memoryOfBytes",
            "type": "__int64",
            "desc": "内存大小"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.内存隐藏 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.内存隐藏 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.内存隐藏 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_MemoryHide"
      },
      {
        "id": "function_30",
        "name": "HD驱动.内存查询",
        "type": "函数",
        "description": "驱动内存查询",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_MemoryQuery(__int32 pid,__int64 memoryAddress,PVOIDpOutBuffer);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程ID"
          },
          {
            "name": "memoryAddress",
            "type": "__int64",
            "desc": "内存地址"
          },
          {
            "name": "pOutBuffer",
            "type": "",
            "desc": "缓冲区指针[这里固定使用的是64位的MEMORY_BASIC_INFORMATION结构体,结构体大(48字节)]结构体"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.内存查询 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.内存查询 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.内存查询 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_MemoryQuery"
      },
      {
        "id": "function_31",
        "name": "HD驱动.特征码查找地址",
        "type": "函数",
        "description": "驱动通过特征码查找地址",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_MemoryFindCode(__int32 pid,__int64 address,__int64 siginCode,__int32 siginCodeSize,__int32 iProtect,__int64 outBuffer);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程ID"
          },
          {
            "name": "address",
            "type": "__int64",
            "desc": "起始搜索地址"
          },
          {
            "name": "siginCode",
            "type": "__int64",
            "desc": "特征码(二进制缓冲区不是字符串)"
          },
          {
            "name": "siginCodeSize",
            "type": "__int32",
            "desc": "特征码长度(字节单位),"
          },
          {
            "name": "iProtect",
            "type": "__int32",
            "desc": "要搜索的内存保护属性"
          },
          {
            "name": "outBuffer",
            "type": "__int64",
            "desc": "缓冲区(存地址)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.特征码查找地址 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.特征码查找地址 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.特征码查找地址 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_MemoryFindCode"
      },
      {
        "id": "function_32",
        "name": "HD驱动.获取主模块地址",
        "type": "函数",
        "description": "驱动获取主模块EXE的地址",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_GetMainModuleBase(__int32 pid,__int64 outBuffer);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程ID"
          },
          {
            "name": "outBuffer",
            "type": "__int64",
            "desc": "缓冲区指针(存地址)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.获取主模块地址 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.获取主模块地址 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.获取主模块地址 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_GetMainModuleBase"
      },
      {
        "id": "function_33",
        "name": "HD驱动.获取模块地址",
        "type": "函数",
        "description": "驱动获取指定模块的地址",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_GetModuleBase(__int32 pid,char* moduleName,__int64 outBuffer);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程ID"
          },
          {
            "name": "moduleName",
            "type": "char*",
            "desc": "模块名(Ascii字符串)"
          },
          {
            "name": "outBuffer",
            "type": "__int64",
            "desc": "缓冲区指针(存地址)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.获取模块地址 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.获取模块地址 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.获取模块地址 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_GetModuleBase"
      },
      {
        "id": "function_34",
        "name": "HD驱动.获取模块函数地址",
        "type": "函数",
        "description": "驱动获取指定模块的指定的函数地址",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_GetModuleCallAddr(__int32 pid,char* moduleName,char* callName,__int64 outBuffer);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程ID"
          },
          {
            "name": "moduleName",
            "type": "char*",
            "desc": "模块名(Ascii字符串)"
          },
          {
            "name": "callName",
            "type": "char*",
            "desc": "函数名字(Ascii字符串)"
          },
          {
            "name": "outBuffer",
            "type": "__int64",
            "desc": "缓冲区指针(存地址)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.获取模块函数地址 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.获取模块函数地址 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.获取模块函数地址 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_GetModuleCallAddr"
      },
      {
        "id": "function_35",
        "name": "HD驱动.修改机器码",
        "type": "函数",
        "description": "驱动修改机器码",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_ChangeMachineKey(__int32 type);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "参数",
            "type": "",
            "desc": "类型0=全部开启1=注册表2=硬盘序列号3=网卡序列号4=本地文件特征5=微端设备序列号6=网络代理设备序列号7=图形处理器(GPU-GUID)8=分区序列号9=固态硬盘序列号10=主板BIOS序列号11=硬盘数据卷序列号(静态)12=硬盘数据卷序列号(动态)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.修改机器码 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.修改机器码 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.修改机器码 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_ChangeMachineKey"
      },
      {
        "id": "function_36",
        "name": "HD驱动.反截图",
        "type": "函数",
        "description": "驱动内核反截图",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_NTNCaptureScreen(__int64 hWnd,BOOL Enable);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "hWnd",
            "type": "__int64",
            "desc": "窗口句柄"
          },
          {
            "name": "Enable",
            "type": "bool",
            "desc": "是否开启"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.反截图 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.反截图 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.反截图 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_NTNCaptureScreen"
      },
      {
        "id": "function_37",
        "name": "HD驱动.远线程执行CALL",
        "type": "函数",
        "description": "驱动内存远线程执行函数",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_NTThreadRunCall(__int32 pid,__int64 callAddress);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程PID"
          },
          {
            "name": "callAddress",
            "type": "__int64",
            "desc": "CALL地址"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.远线程执行CALL - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.远线程执行CALL - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.远线程执行CALL - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_NTThreadRunCall"
      },
      {
        "id": "function_38",
        "name": "HD驱动.清除注入缓存",
        "type": "函数",
        "description": "驱动清除注入缓存(全局插件缓存,DLL缓存)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_ClearInject();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.清除注入缓存 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.清除注入缓存 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.清除注入缓存 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_ClearInject"
      },
      {
        "id": "function_39",
        "name": "HD驱动.进程提权",
        "type": "函数",
        "description": "进程提权",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_PcrocessRoot(__int32 pid);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程PID(内部会通过PID获取进程句柄)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.进程提权 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.进程提权 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.进程提权 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_PcrocessRoot"
      },
      {
        "id": "function_40",
        "name": "HCHD_HandleRoot",
        "type": "函数",
        "description": "进程提权",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_HandleRoot(__int64 handle);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "handle",
            "type": "__int64",
            "desc": "句柄"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HCHD_HandleRoot - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCHD_HandleRoot - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCHD_HandleRoot - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_41",
        "name": "HD驱动.设置鼠标轨迹",
        "type": "函数",
        "description": "设置驱动鼠标移动轨迹类型",
        "prototypes": [
          {
            "prototype": "__int64 __int64 __stdcall  HCHD_SetMMTrackType(__int32 type);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "type",
            "type": "__int32",
            "desc": "轨迹类型 -1或0 表示无轨迹  1 表示随机轨迹 2表示直线轨迹 3表示直线波动轨迹(过检测强)  具体的轨迹效果可以参考:后台键鼠的轨迹"
          }
        ],
        "returnValue": "查看返回值表\n返回之前的轨迹类型",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD驱动.设置鼠标轨迹 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.设置鼠标轨迹 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD驱动.设置鼠标轨迹 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_SetMMTrackType"
      }
    ]
  },
  {
    "id": "category_17",
    "name": "注入模块(Inject)",
    "functions": [
      {
        "id": "function_1",
        "name": "HD注入.普通安装插件X86",
        "type": "函数",
        "description": "普通注入插件(X86),不需要安装驱动,这个不是无痕注入,只支持32位的",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCN_NormalInstallPlugX86(__int32 pid);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程PID"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "这个不是无痕注入方便操作一些小程序普通注入插件DLL参数->进程PID,进程位数(32)可以在打开进程的经常下安装插件DLL初始化进程环境后调用这个安装插件然后循环等待拿到PID不是驱动级别"
        ],
        "codeExamples": [
          {
            "title": "HD注入.普通安装插件X86 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD注入.普通安装插件X86 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD注入.普通安装插件X86 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCN_NormalInstallPlugX86"
      },
      {
        "id": "function_2",
        "name": "HD注入.普通安装插件X86Ex",
        "type": "函数",
        "description": "普通注入插件(X86)),不需要安装驱动,这个不是无痕注入",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCN_NormalInstallPlugX86Ex(__int64 topHwnd);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "进程窗口句柄"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "这个不是无痕注入",
          "方便操作一些小程序",
          "用法和HCN_NormalInstallPlugX86一样这个接口只是参数是句柄防止一些进程一次性打开多个这个句柄可以用来指定某个窗口"
        ],
        "codeExamples": [
          {
            "title": "HD注入.普通安装插件X86Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD注入.普通安装插件X86Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD注入.普通安装插件X86Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCN_NormalInstallPlugX86Ex"
      },
      {
        "id": "function_3",
        "name": "HD注入.普通安装插件X64",
        "type": "函数",
        "description": "普通注入插件(X64),不需要安装驱动,这个不是无痕注入,只支持64位的",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCN_NormalInstallPlugX64(__int32 pid);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程PID"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "这个不是无痕注入方便操作一些小程序普通注入插件DLL参数->进程PID,进程位数(32)可以在打开进程的经常下安装插件DLL初始化进程环境后调用这个安装插件然后循环等待拿到PID不是驱动级别"
        ],
        "codeExamples": [
          {
            "title": "HD注入.普通安装插件X64 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD注入.普通安装插件X64 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD注入.普通安装插件X64 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCN_NormalInstallPlugX64"
      },
      {
        "id": "function_4",
        "name": "HD注入.普通安装插件X64Ex",
        "type": "函数",
        "description": "普通注入插件(X64),不需要安装驱动,这个不是无痕注入,只支持64位的",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCN_NormalInstallPlugX64Ex(__int64 topHwnd);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "进程窗口句柄"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "这个不是无痕注入",
          "方便操作一些小程序",
          "用法和HCN_NormalInstallPlugX86一样这个接口只是参数是句柄防止一些进程一次性打开多个这个句柄可以用来指定某个窗口"
        ],
        "codeExamples": [
          {
            "title": "HD注入.普通安装插件X64Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD注入.普通安装插件X64Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD注入.普通安装插件X64Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCN_NormalInstallPlugX64Ex"
      },
      {
        "id": "function_5",
        "name": "HD注入.驱动安装插件",
        "type": "函数",
        "description": "安装HD插件(需要预先安装HD驱动),【注入方式1】",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_NormalInstallPlugX86X64(__int32 pid,__int32 dllBits,BOOL bWait=TRUE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程PID"
          },
          {
            "name": "dllBits",
            "type": "__int32",
            "desc": "32/64"
          },
          {
            "name": "bWait",
            "type": "bool",
            "desc": "可以忽视,暂时无效"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "不是无模块注入可以在打开进程的情况下注入驱动级别的,自动判断目标进程位数"
        ],
        "codeExamples": [
          {
            "title": "HD注入.驱动安装插件 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD注入.驱动安装插件 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD注入.驱动安装插件 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_NormalInstallPlugX86X64"
      },
      {
        "id": "function_6",
        "name": "HD注入.驱动注入DLL",
        "type": "函数",
        "description": "安装指定DLL(需要预先安装HD驱动),【注入方式1】",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_NormalInjectX86X64ByFile(__int32 pid,char* DLL绝对路径A,BOOL bWait=TRUE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程PID"
          },
          {
            "name": "DLL绝对路径A",
            "type": "char*",
            "desc": "需要加载的DLL全路径"
          },
          {
            "name": "bWait",
            "type": "bool",
            "desc": "可以忽视,暂时无效"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "不是无模块注入可以在打开进程的情况下注入驱动级别的,自动判断目标进程位数"
        ],
        "codeExamples": [
          {
            "title": "HD注入.驱动注入DLL - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD注入.驱动注入DLL - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD注入.驱动注入DLL - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_NormalInjectX86X64ByFile"
      },
      {
        "id": "function_7",
        "name": "HD注入.驱动安装插件Ex",
        "type": "函数",
        "description": "安装HD插件(需要预先安装HD驱动),【注入方式2】",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_NormalInstallPlugX86X64Ex(__int32 pid,__int32 dllBits,BOOL bWait=TRUE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程PID"
          },
          {
            "name": "dllBits",
            "type": "__int32",
            "desc": "32/64"
          },
          {
            "name": "bWait",
            "type": "bool",
            "desc": "可以忽视,暂时无效"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "不是无模块注入可以在打开进程的情况下注入驱动级别的,自动判断目标进程位数"
        ],
        "codeExamples": [
          {
            "title": "HD注入.驱动安装插件Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD注入.驱动安装插件Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD注入.驱动安装插件Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_NormalInstallPlugX86X64Ex"
      },
      {
        "id": "function_8",
        "name": "HD注入.驱动注入DLLEx",
        "type": "函数",
        "description": "安装指定DLL(需要预先安装HD驱动),【注入方式2】",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_NormalInjectX86X64ByFileEx(__int32 pid,char* DLL绝对路径A,BOOL bWait=TRUE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程PID"
          },
          {
            "name": "DLL绝对路径A",
            "type": "char*",
            "desc": "需要加载的DLL全路径"
          },
          {
            "name": "bWait",
            "type": "bool",
            "desc": "可以忽视,暂时无效"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "不是无模块注入可以在打开进程的情况下注入驱动级别的,自动判断目标进程位数"
        ],
        "codeExamples": [
          {
            "title": "HD注入.驱动注入DLLEx - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD注入.驱动注入DLLEx - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD注入.驱动注入DLLEx - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_NormalInjectX86X64ByFileEx"
      }
    ]
  },
  {
    "id": "category_18",
    "name": "盾",
    "functions": [
      {
        "id": "function_1",
        "name": "HD盾.保护",
        "type": "函数",
        "description": "一键保护进程(隐藏等)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHDPP_Protect(__int32 pid);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程PID"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "需要调用HCHD_LoadDrv2传递参数3来安装保护盾HDPP驱动"
        ],
        "codeExamples": [
          {
            "title": "HD盾.保护 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD盾.保护 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD盾.保护 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHDPP_Protect"
      },
      {
        "id": "function_2",
        "name": "HD盾.开启窗口保护",
        "type": "函数",
        "description": "打开窗口保护以及子窗口",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHDPW_OnProtect(__int64 hwnd);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "窗口句柄目标窗口句柄一般为父窗口句柄"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "需要调用HCHD_LoadDrv2传递参数5来安装保护盾HDPW驱动",
          "可以多次指定内部会把指定的保护窗口句柄以及所属子窗口一起保护"
        ],
        "codeExamples": [
          {
            "title": "HD盾.开启窗口保护 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD盾.开启窗口保护 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD盾.开启窗口保护 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHDPW_OnProtect"
      },
      {
        "id": "function_3",
        "name": "HD盾.关闭窗口保护",
        "type": "函数",
        "description": "取消所有窗口保护(指定保护过的)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHDPW_OffProtect();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要调用HCHD_LoadDrv2传递参数5来安装保护盾HDPW驱动",
          "可以取消调用过HCHDPW_OnProtect所有保护的窗口句柄"
        ],
        "codeExamples": [
          {
            "title": "HD盾.关闭窗口保护 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD盾.关闭窗口保护 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD盾.关闭窗口保护 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHDPW_OffProtect"
      }
    ]
  },
  {
    "id": "category_19",
    "name": "HDVT",
    "functions": [
      {
        "id": "function_1",
        "name": "HDVT.申请内存",
        "type": "函数",
        "description": "VT驱动申请内存",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHDVT_AllocateMemory(__int32 pid,__int32 size);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程PID"
          },
          {
            "name": "size",
            "type": "__int32",
            "desc": "申请内存大小(字节)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动"
        ],
        "codeExamples": [
          {
            "title": "HDVT.申请内存 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVT.申请内存 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVT.申请内存 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHDVT_AllocateMemory"
      },
      {
        "id": "function_2",
        "name": "HDVT.释放内存",
        "type": "函数",
        "description": "VT驱动释放内存",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHDVT_FreeMemory(__int32 pid,__int64 addr,__int32 size);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程PID"
          },
          {
            "name": "addr",
            "type": "__int64",
            "desc": "释放地址(该地址是由HCHDVT_AllocateMemory申请的内存地址)"
          },
          {
            "name": "size",
            "type": "__int32",
            "desc": "申请内存大小(字节)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动"
        ],
        "codeExamples": [
          {
            "title": "HDVT.释放内存 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVT.释放内存 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVT.释放内存 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHDVT_FreeMemory"
      },
      {
        "id": "function_3",
        "name": "HDVT.读内存",
        "type": "函数",
        "description": "VT驱动读内存",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHDVT_Read(__int32 pid,__int64 addr,void* data,__int32 size);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程PID"
          },
          {
            "name": "addr",
            "type": "__int64",
            "desc": "目标地址"
          },
          {
            "name": "data",
            "type": "void",
            "desc": "存读数据的缓冲区地址"
          },
          {
            "name": "size",
            "type": "__int32",
            "desc": "读的大小(字节),缓冲区的大小要大于等于读的大小"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动"
        ],
        "codeExamples": [
          {
            "title": "HDVT.读内存 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVT.读内存 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVT.读内存 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHDVT_Read"
      },
      {
        "id": "function_4",
        "name": "HDVT.写内存",
        "type": "函数",
        "description": "VT驱动写内存",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHDVT_Write(__int32 pid,__int64 addr,void* data,__int32 size);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程PID"
          },
          {
            "name": "addr",
            "type": "__int64",
            "desc": "目标地址"
          },
          {
            "name": "data",
            "type": "void",
            "desc": "写入数据的缓冲区地址(存要写的数据)"
          },
          {
            "name": "size",
            "type": "__int32",
            "desc": "写的大小(字节),缓冲区的大小要大于等于写的大小"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动"
        ],
        "codeExamples": [
          {
            "title": "HDVT.写内存 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVT.写内存 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVT.写内存 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHDVT_Write"
      },
      {
        "id": "function_5",
        "name": "HDVT.获取模块地址",
        "type": "函数",
        "description": "VT驱动获取模块地址",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHDVT_GetModule(__int32 pid,char* moduleName);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程PID"
          },
          {
            "name": "moduleName",
            "type": "char*",
            "desc": "模块名字(ascii编码)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动"
        ],
        "codeExamples": [
          {
            "title": "HDVT.获取模块地址 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVT.获取模块地址 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVT.获取模块地址 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHDVT_GetModule"
      },
      {
        "id": "function_6",
        "name": "HDVT.获取模块函数地址",
        "type": "函数",
        "description": "VT驱动获取模块函数地址",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHDVT_GetModuleFun(__int32 pid,__int64 moduleAddr,char* funName);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程PID"
          },
          {
            "name": "moduleAddr",
            "type": "__int64",
            "desc": "模块地址"
          },
          {
            "name": "moduleName",
            "type": "",
            "desc": "函数名字(ascii编码)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动"
        ],
        "codeExamples": [
          {
            "title": "HDVT.获取模块函数地址 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVT.获取模块函数地址 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVT.获取模块函数地址 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHDVT_GetModuleFun"
      },
      {
        "id": "function_7",
        "name": "HDVT.无痕HOOK",
        "type": "函数",
        "description": "VT驱动无痕HOOK,过CRC",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHDVT_Hook(__int32 pid,__int64 addr,void* data,__int32 size,__int32 type);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程PID"
          },
          {
            "name": "addr",
            "type": "__int64",
            "desc": "HOOK地址"
          },
          {
            "name": "data",
            "type": "void",
            "desc": "写入数据缓冲区"
          },
          {
            "name": "size",
            "type": "__int32",
            "desc": "写入数据缓冲区大小"
          },
          {
            "name": "type",
            "type": "__int32",
            "desc": ""
          },
          {
            "name": "0",
            "type": "",
            "desc": "关闭VTHCHDVT_Hook(0,0,0,0,0)"
          },
          {
            "name": "1",
            "type": "",
            "desc": "开启VTHCHDVT_Hook(0,0,0,0,1)"
          },
          {
            "name": "2",
            "type": "",
            "desc": "VT写入HCHDVT_Hook(pid,addr,data,size,2)"
          },
          {
            "name": "3",
            "type": "",
            "desc": "VT恢复之前HOOK的地址HCHDVT_Hook(pid,addr,0,0,3)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动"
        ],
        "codeExamples": [
          {
            "title": "HDVT.无痕HOOK - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVT.无痕HOOK - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVT.无痕HOOK - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHDVT_Hook"
      },
      {
        "id": "function_8",
        "name": "HDVT.远程执行",
        "type": "函数",
        "description": "VT驱动远程插入执行",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHDVT_RemoteCall(__int32 pid,void* data,__int32 size);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程PID"
          },
          {
            "name": "data",
            "type": "void",
            "desc": "执行shellcode首地址(注意"
          },
          {
            "name": "size",
            "type": "__int32",
            "desc": "shellcode字节大小"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动"
        ],
        "codeExamples": [
          {
            "title": "HDVT.远程执行 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVT.远程执行 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVT.远程执行 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHDVT_RemoteCall"
      },
      {
        "id": "function_9",
        "name": "HCHDVT_InjectX64",
        "type": "函数",
        "description": "VT驱动无痕无模块注入X64DLL",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHDVT_InjectX64(__int32 pid,void* data,__int32 size);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程PID"
          },
          {
            "name": "data",
            "type": "void",
            "desc": "DLL二进制数据"
          },
          {
            "name": "size",
            "type": "__int32",
            "desc": "DLL二进制数据大小"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动"
        ],
        "codeExamples": [
          {
            "title": "HCHDVT_InjectX64 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCHDVT_InjectX64 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCHDVT_InjectX64 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_10",
        "name": "HCHDVT_InjectX86",
        "type": "函数",
        "description": "VT驱动无痕无模块注入X86DLL",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHDVT_InjectX86(__int32 pid,void* data,__int32 size);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程PID"
          },
          {
            "name": "data",
            "type": "void",
            "desc": "DLL二进制数据"
          },
          {
            "name": "size",
            "type": "__int32",
            "desc": "DLL二进制数据大小"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动"
        ],
        "codeExamples": [
          {
            "title": "HCHDVT_InjectX86 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCHDVT_InjectX86 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCHDVT_InjectX86 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_11",
        "name": "HDVT.安装插件X64",
        "type": "函数",
        "description": "VT驱动无痕无模块安装X64插件到目标进程中",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHDVT_InstallPlugX64(__int32 pid);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程PID"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动"
        ],
        "codeExamples": [
          {
            "title": "HDVT.安装插件X64 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVT.安装插件X64 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVT.安装插件X64 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHDVT_InstallPlugX64"
      },
      {
        "id": "function_12",
        "name": "HDVT.安装插件X86",
        "type": "函数",
        "description": "VT驱动无痕无模块安装X86插件到目标进程中",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHDVT_InstallPlugX86(__int32 pid);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程PID"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "需要调用HCHD_LoadDrv2传递参数2来安装HDVT驱动"
        ],
        "codeExamples": [
          {
            "title": "HDVT.安装插件X86 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVT.安装插件X86 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVT.安装插件X86 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHDVT_InstallPlugX86"
      }
    ]
  },
  {
    "id": "category_20",
    "name": "YOLOV(HDYOLOV)",
    "functions": [
      {
        "id": "function_1",
        "name": "HCYOLO_AddModel",
        "type": "函数",
        "description": "添加YOLOV(ncnn.bin和ncnn.param)模型文件(从内存中加载模型)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCYOLO_AddModel(__int32 ver,void* modeData,__int32 modeDataSize,void* modeLparam,__int32 modeLparamSize,__int32 size=640,BOOL bGpu=FALSE,char* password=NULL);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "ver",
            "type": "__int32",
            "desc": "yolov版本支持581011版本"
          },
          {
            "name": "modeData",
            "type": "void",
            "desc": "ncnn.bin模型文件的二进制数据"
          },
          {
            "name": "modeDataSize",
            "type": "__int32",
            "desc": "ncnn.bin模型文件的二进制数据大小"
          },
          {
            "name": "modeLparam",
            "type": "void",
            "desc": "ncnn.param模型文件的二进制数据"
          },
          {
            "name": "modeLparamSize",
            "type": "__int32",
            "desc": "ncnn.param模型文件的二进制数据大小"
          },
          {
            "name": "size",
            "type": "__int32",
            "desc": "训练时候的图片大小一般默认640"
          },
          {
            "name": "bGpu",
            "type": "bool",
            "desc": "是否GPU识别"
          },
          {
            "name": "password",
            "type": "char*",
            "desc": "没有就空,一般为默认空就行"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "ncnn模型bin“＝XXX.ncnn.bin”param“＝XXX.ncnn.param”从内存中加载模型备注:一个进程仅同时支持一个版本的模型",
          "需要调用HCHD_LoadDrv2传递参数4来安装YOLOV组件模块"
        ],
        "codeExamples": [
          {
            "title": "HCYOLO_AddModel - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCYOLO_AddModel - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCYOLO_AddModel - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_2",
        "name": "HCYOLO_AddModelFile",
        "type": "函数",
        "description": "添加YOLOV(ncnn.bin和ncnn.param)模型文件(从文件中加载模型)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCYOLO_AddModelFile(__int32 ver,char* modeFileName,char* modeLparamName,__int32 size=640,BOOL bGpu=FALSE,char* password=NULL);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "ver",
            "type": "__int32",
            "desc": "yolov版本支持581011版本"
          },
          {
            "name": "modeFileName",
            "type": "char*",
            "desc": "ncnn.bin模型文件名(支持绝对路径或相对路径)相对路径需要调用HCRES_SetResPath设置路径"
          },
          {
            "name": "modeLparamName",
            "type": "char*",
            "desc": "ncnn.param模型文件名(支持绝对路径或相对路径)相对路径需要调用HCRES_SetResPath设置路径"
          },
          {
            "name": "size",
            "type": "__int32",
            "desc": "训练时候的图片大小一般默认640"
          },
          {
            "name": "bGpu",
            "type": "bool",
            "desc": "是否GPU识别"
          },
          {
            "name": "password",
            "type": "char*",
            "desc": "没有就空,一般为默认空就行"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "ncnn模型bin“＝XXX.ncnn.bin”param“＝XXX.ncnn.param”从文件中加载模型备注:一个进程仅同时支持一个版本的模型",
          "需要调用HCHD_LoadDrv2传递参数4来安装YOLOV组件模块"
        ],
        "codeExamples": [
          {
            "title": "HCYOLO_AddModelFile - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCYOLO_AddModelFile - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCYOLO_AddModelFile - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_3",
        "name": "HCYOLO_Identify",
        "type": "函数",
        "description": "添加YOLOV(ncnn.bin和ncnn.param)模型文件(从文件中加载模型),从后台截图缓存识别",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCYOLO_Identify(__int32 窗口序号,floatconf=0.7f,floatiou=0.4f,BOOL bDebug=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号"
          },
          {
            "name": "conf",
            "type": "",
            "desc": "置信度默认0.7"
          },
          {
            "name": "iou",
            "type": "",
            "desc": "过重率一般默认在0.4~0.6之间默认0.4"
          },
          {
            "name": "bDebug",
            "type": "bool",
            "desc": "是否弹窗调试标注查看默认假"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "识别信息调用HCEnv_GetRetJson“获取字符串信息以|”分割,自行切割",
          "%d,%f,%f,%f,%f,%f,%d|%d,%f,%f,%f,%f,%f,%d|",
          "字段含义:类别,X1,Y1,X2,Y2,置信度,耗时|类别,X1,Y1,X2,Y2,置信度,耗时|",
          "需要调用HCHD_LoadDrv2传递参数4来安装YOLOV组件模块"
        ],
        "codeExamples": [
          {
            "title": "HCYOLO_Identify - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCYOLO_Identify - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCYOLO_Identify - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_4",
        "name": "HCYOLO_IdentifyByFile",
        "type": "函数",
        "description": "添加YOLOV(ncnn.bin和ncnn.param)模型文件(从文件中加载模型),从指定图片文件识别",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCYOLO_IdentifyByFile(__int32 窗口序号,char* image,floatconf=0.7f,floatiou=0.4f,BOOL bDebug=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号"
          },
          {
            "name": "image",
            "type": "char*",
            "desc": "图片文件名(支持绝对路径或相对路径)相对路径需要调用HCRES_SetResPath设置路径(图片格式支持多种格式"
          },
          {
            "name": "conf",
            "type": "",
            "desc": "置信度默认0.7"
          },
          {
            "name": "iou",
            "type": "",
            "desc": "过重率一般默认在0.4~0.6之间默认0.4"
          },
          {
            "name": "bDebug",
            "type": "bool",
            "desc": "是否弹窗调试标注查看默认假"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "识别信息调用HCEnv_GetRetJson“获取字符串信息以|”分割,自行切割",
          "%d,%f,%f,%f,%f,%f,%d|%d,%f,%f,%f,%f,%f,%d|",
          "字段含义:类别,X1,Y1,X2,Y2,置信度,耗时|类别,X1,Y1,X2,Y2,置信度,耗时|",
          "需要调用HCHD_LoadDrv2传递参数4来安装YOLOV组件模块"
        ],
        "codeExamples": [
          {
            "title": "HCYOLO_IdentifyByFile - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCYOLO_IdentifyByFile - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCYOLO_IdentifyByFile - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      }
    ]
  },
  {
    "id": "category_21",
    "name": "VNC(HDVNC)",
    "functions": [
      {
        "id": "function_1",
        "name": "HDVNC.连接虚拟机",
        "type": "函数",
        "description": "连接虚拟机",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVnc_Connect(__int32 windowsIndex,__int32 port);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "",
            "desc": "窗口序号每个窗口序号可以绑定一个虚拟机VNC端口注意"
          },
          {
            "name": "port",
            "type": "__int32",
            "desc": "虚拟机开启VNC设置的端口"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "对应的虚拟机请开启VNC并设置好端口",
          "两种使用VNC模式特别注意:",
          "1.安装插件(HDEX_InstallPluginVM)的形式连接VNC:支持重连port==0属于重连会检查安装插件时候的PID同时自动获取之前连接过的端口前提是已经连接过卸载的时候内部调用(HCEnv_UnLoadEx)",
          "2.未安装插件(HCVnc_Connect)的形式连接VNC:重连一直都可以不能port==0因为会检查PID未安装插件的PID为0卸载的时候内部调用(HCEnv_UnLoad)"
        ],
        "codeExamples": [
          {
            "title": "HDVNC.连接虚拟机 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.连接虚拟机 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.连接虚拟机 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVnc_Connect"
      },
      {
        "id": "function_2",
        "name": "HDVNC.关闭连接",
        "type": "函数",
        "description": "关闭连接虚拟机",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVnc_Close(__int32 windowsIndex);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "",
            "desc": "窗口序号每个窗口序号可以绑定一个虚拟机VNC端口"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "对应的虚拟机请开启VNC并设置好端口",
          "两种使用VNC模式特别注意:",
          "1.安装插件(HDEX_InstallPluginVM)的形式连接VNC:支持重连port==0属于重连会检查安装插件时候的PID同时自动获取之前连接过的端口前提是已经连接过卸载的时候内部调用(HCEnv_UnLoadEx)",
          "2.未安装插件(HCVnc_Connect)的形式连接VNC:重连一直都可以不能port==0因为会检查PID未安装插件的PID为0卸载的时候内部调用(HCEnv_UnLoad)"
        ],
        "codeExamples": [
          {
            "title": "HDVNC.关闭连接 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.关闭连接 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.关闭连接 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVnc_Close"
      },
      {
        "id": "function_3",
        "name": "HDVNC.鼠标绝对移动",
        "type": "函数",
        "description": "VNC鼠标绝对移动(自带移动轨迹直线波动防检测)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVnc_MoveTo(__int32 windowsIndex,__int32 x,__int32 y);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "",
            "desc": "窗口序号每个窗口序号可以绑定一个虚拟机VNC端口"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "虚拟机屏幕坐标X"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "虚拟机屏幕坐标Y"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HDVNC.鼠标绝对移动 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.鼠标绝对移动 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.鼠标绝对移动 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVnc_MoveTo"
      },
      {
        "id": "function_4",
        "name": "HDVNC.鼠标相对移动",
        "type": "函数",
        "description": "VNC鼠标相对移动(自带移动轨迹直线波动防检测)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVnc_MoveToOffset(__int32 windowsIndex,__int32 x,__int32 y);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "",
            "desc": "窗口序号每个窗口序号可以绑定一个虚拟机VNC端口"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "虚拟机屏幕相对坐标X"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "虚拟机屏幕相对坐标X"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HDVNC.鼠标相对移动 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.鼠标相对移动 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.鼠标相对移动 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVnc_MoveToOffset"
      },
      {
        "id": "function_5",
        "name": "HDVNC.鼠标左键点击",
        "type": "函数",
        "description": "VNC鼠标左键点击",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVnc_LeftClick(__int32 windowsIndex);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "",
            "desc": "窗口序号每个窗口序号可以绑定一个虚拟机VNC端口"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HDVNC.鼠标左键点击 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.鼠标左键点击 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.鼠标左键点击 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVnc_LeftClick"
      },
      {
        "id": "function_6",
        "name": "HDVNC.鼠标左键按下",
        "type": "函数",
        "description": "VNC鼠标左键按下",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVnc_LeftDown(__int32 windowsIndex);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "",
            "desc": "窗口序号每个窗口序号可以绑定一个虚拟机VNC端口"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HDVNC.鼠标左键按下 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.鼠标左键按下 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.鼠标左键按下 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVnc_LeftDown"
      },
      {
        "id": "function_7",
        "name": "HDVNC.鼠标左键弹起",
        "type": "函数",
        "description": "VNC鼠标左键弹起",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVnc_LeftUp(__int32 windowsIndex);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "",
            "desc": "窗口序号每个窗口序号可以绑定一个虚拟机VNC端口"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HDVNC.鼠标左键弹起 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.鼠标左键弹起 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.鼠标左键弹起 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVnc_LeftUp"
      },
      {
        "id": "function_8",
        "name": "HDVNC.鼠标左键双击",
        "type": "函数",
        "description": "VNC鼠标左键双击",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVnc_LeftDoubleClick(__int32 windowsIndex);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "",
            "desc": "窗口序号每个窗口序号可以绑定一个虚拟机VNC端口"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HDVNC.鼠标左键双击 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.鼠标左键双击 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.鼠标左键双击 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVnc_LeftDoubleClick"
      },
      {
        "id": "function_9",
        "name": "HDVNC.鼠标右键点击",
        "type": "函数",
        "description": "VNC鼠标右键点击",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVnc_RightClick(__int32 windowsIndex);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "",
            "desc": "窗口序号每个窗口序号可以绑定一个虚拟机VNC端口"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HDVNC.鼠标右键点击 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.鼠标右键点击 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.鼠标右键点击 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVnc_RightClick"
      },
      {
        "id": "function_10",
        "name": "HDVNC.鼠标右键按下",
        "type": "函数",
        "description": "VNC鼠标右键按下",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVnc_RightDown(__int32 windowsIndex);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "",
            "desc": "窗口序号每个窗口序号可以绑定一个虚拟机VNC端口"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HDVNC.鼠标右键按下 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.鼠标右键按下 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.鼠标右键按下 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVnc_RightDown"
      },
      {
        "id": "function_11",
        "name": "HDVNC.鼠标右键弹起",
        "type": "函数",
        "description": "VNC鼠标右键弹起",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVnc_RightUp(__int32 windowsIndex);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "",
            "desc": "窗口序号每个窗口序号可以绑定一个虚拟机VNC端口"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HDVNC.鼠标右键弹起 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.鼠标右键弹起 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.鼠标右键弹起 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVnc_RightUp"
      },
      {
        "id": "function_12",
        "name": "HDVNC.鼠标滚轮滚下",
        "type": "函数",
        "description": "VNC鼠标滚轮滚下",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVnc_WheelDown(__int32 windowsIndex);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "",
            "desc": "窗口序号每个窗口序号可以绑定一个虚拟机VNC端口"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HDVNC.鼠标滚轮滚下 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.鼠标滚轮滚下 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.鼠标滚轮滚下 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVnc_WheelDown"
      },
      {
        "id": "function_13",
        "name": "HDVNC.鼠标滚轮滚上",
        "type": "函数",
        "description": "VNC鼠标滚轮滚上",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVnc_WheelUp(__int32 windowsIndex);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "",
            "desc": "窗口序号每个窗口序号可以绑定一个虚拟机VNC端口"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HDVNC.鼠标滚轮滚上 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.鼠标滚轮滚上 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.鼠标滚轮滚上 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVnc_WheelUp"
      },
      {
        "id": "function_14",
        "name": "HCVnc_KeyPress",
        "type": "函数",
        "description": "VNC键盘按键敲击",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVnc_KeyPress(__int32 windowsIndex,int keycode,BOOL isKeypad=false);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "",
            "desc": "窗口序号每个窗口序号可以绑定一个虚拟机VNC端口"
          },
          {
            "name": "keycode",
            "type": "int",
            "desc": "VK键值"
          },
          {
            "name": "isKeypad",
            "type": "bool",
            "desc": "是否数字小键盘一般假"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HCVnc_KeyPress - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCVnc_KeyPress - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCVnc_KeyPress - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_15",
        "name": "HDVNC.键盘按键按下",
        "type": "函数",
        "description": "VNC键盘按键按下",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVnc_KeyDown(__int32 windowsIndex,int keycode);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "",
            "desc": "窗口序号每个窗口序号可以绑定一个虚拟机VNC端口"
          },
          {
            "name": "keycode",
            "type": "int",
            "desc": "VK键值"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HDVNC.键盘按键按下 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.键盘按键按下 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.键盘按键按下 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVnc_KeyDown"
      },
      {
        "id": "function_16",
        "name": "HDVNC.键盘按键弹起",
        "type": "函数",
        "description": "VNC键盘按键弹起",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVnc_KeyUp(__int32 windowsIndex,int keycode);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "",
            "desc": "窗口序号每个窗口序号可以绑定一个虚拟机VNC端口"
          },
          {
            "name": "keycode",
            "type": "int",
            "desc": "VK键值"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HDVNC.键盘按键弹起 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.键盘按键弹起 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.键盘按键弹起 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVnc_KeyUp"
      },
      {
        "id": "function_17",
        "name": "HCVnc_KeyPressStr",
        "type": "函数",
        "description": "VNC键盘连续按键字符串(数字+字母)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVnc_KeyPressStr(__int32 windowsIndex,char* strText,BOOL isKeypad=false);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "",
            "desc": "窗口序号每个窗口序号可以绑定一个虚拟机VNC端口"
          },
          {
            "name": "strText",
            "type": "char*",
            "desc": "字符串(ascii编码)如"
          },
          {
            "name": "isKeypad",
            "type": "bool",
            "desc": "是否数字小键盘一般假"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HCVnc_KeyPressStr - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCVnc_KeyPressStr - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCVnc_KeyPressStr - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_18",
        "name": "HCVnc_SendString",
        "type": "函数",
        "description": "VNC键盘输入字符串(中文+数字+符号+字母)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVnc_SendString(__int32 windowsIndex,char* strText);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "",
            "desc": "窗口序号每个窗口序号可以绑定一个虚拟机VNC端口"
          },
          {
            "name": "strText",
            "type": "char*",
            "desc": "字符串(ascii编码)如"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HCVnc_SendString - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCVnc_SendString - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCVnc_SendString - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_19",
        "name": "HDVNC.开启截图",
        "type": "函数",
        "description": "开启截图(内部会开启一根线程循环获取虚拟机画面)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVnc_OpenCapture(__int32 windowsIndex);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "",
            "desc": "窗口序号每个窗口序号可以绑定一个虚拟机VNC端口"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "可以调用HCVnc_CloseCapture来结束截图线程"
        ],
        "codeExamples": [
          {
            "title": "HDVNC.开启截图 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.开启截图 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.开启截图 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVnc_OpenCapture"
      },
      {
        "id": "function_20",
        "name": "HDVNC.关闭截图",
        "type": "函数",
        "description": "关闭截图(结束开启截图内部产生的线程)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVnc_CloseCapture(__int32 windowsIndex);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "",
            "desc": "窗口序号每个窗口序号可以绑定一个虚拟机VNC端口"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "需要多次调用关闭,直到关闭成功,通常情况一次就能关闭成功"
        ],
        "codeExamples": [
          {
            "title": "HDVNC.关闭截图 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.关闭截图 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDVNC.关闭截图 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVnc_CloseCapture"
      }
    ]
  },
  {
    "id": "category_22",
    "name": "窗口模块(WIN)",
    "functions": [
      {
        "id": "function_1",
        "name": "HD窗口.排序通讯窗口",
        "type": "函数",
        "description": "排序安装过插件的进程",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCWIN_SortWindows(__int32 offsetW,__int32 offsetH,__int32 width,__int32 height);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "offsertX",
            "type": "",
            "desc": "水平偏移距离(2个相邻窗口的左上角的水平距离)"
          },
          {
            "name": "offsertY",
            "type": "",
            "desc": "垂直偏移距离(2个相邻窗口的左上角的垂直距离)"
          },
          {
            "name": "width",
            "type": "__int32",
            "desc": "窗口宽度"
          },
          {
            "name": "height",
            "type": "__int32",
            "desc": "窗口高度"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "安装过插件的经常意思表示:",
          "1.通讯过的窗口序号的对应的进程PID(未被第二次初始化序号HCInject_Init)",
          "2.卸载进程环境不会影响绑定过的进程排序(不能调用始化序号HCInject_Init的前提下,也就是可以重连的情况下)",
          "3.HCInject_Init这个接口一旦调用,就会取消所有关联(意味着不能重连了),从而影响当前绑定的窗口PID,意味着新窗口即将打开"
        ],
        "codeExamples": [
          {
            "title": "HD窗口.排序通讯窗口 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.排序通讯窗口 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.排序通讯窗口 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCWIN_SortWindows"
      },
      {
        "id": "function_2",
        "name": "HD窗口.伪装进程",
        "type": "函数",
        "description": "伪装进程(防止检查到实际的进程存在)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCWIN_CamouflageProcess(char* runName,char* targetPath,__int32 type);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "runName",
            "type": "char*",
            "desc": "给伪装进程取的别名(任意前缀/后缀名字)如"
          },
          {
            "name": "targetPath",
            "type": "char*",
            "desc": "需要伪装的进程全路径(包含.exe)如"
          },
          {
            "name": "type",
            "type": "__int32",
            "desc": "需要伪装的进程位数32或64"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无",
          "案例:",
          "把注入器伪装成了hd.exe"
        ],
        "codeExamples": [
          {
            "title": "HD窗口.伪装进程 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.伪装进程 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.伪装进程 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCWIN_CamouflageProcess"
      },
      {
        "id": "function_3",
        "name": "HD窗口.设置窗口状态",
        "type": "函数",
        "description": "设置或者操作窗口状态",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCWIN_SetWindowState(__int64 hwnd,__int32 type);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "窗口句柄如果type==18/19表示刷新桌面这个时候hwnd可以为0type"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD窗口.设置窗口状态 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.设置窗口状态 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.设置窗口状态 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCWIN_SetWindowState"
      },
      {
        "id": "function_4",
        "name": "HD窗口.设置窗口大小",
        "type": "函数",
        "description": "设置窗口大小",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCWIN_SetWindowSize(__int64 hwnd,__int32 width,__int32 hight,BOOL bCenter=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "窗口句柄"
          },
          {
            "name": "width",
            "type": "__int32",
            "desc": "宽度"
          },
          {
            "name": "hight",
            "type": "__int32",
            "desc": "高度"
          },
          {
            "name": "bCenter",
            "type": "bool",
            "desc": "窗口是否居中"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "窗口居中会改变窗口位置"
        ],
        "codeExamples": [
          {
            "title": "HD窗口.设置窗口大小 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.设置窗口大小 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.设置窗口大小 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCWIN_SetWindowSize"
      },
      {
        "id": "function_5",
        "name": "HD窗口.窗口移动",
        "type": "函数",
        "description": "移动窗口",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCWIN_MoveWindow(__int64 hwnd,__int32 x,__int32 y);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "窗口句柄"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "屏幕坐标x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "屏幕坐标y"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD窗口.窗口移动 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.窗口移动 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.窗口移动 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCWIN_MoveWindow"
      },
      {
        "id": "function_6",
        "name": "HD窗口.是否64位进程",
        "type": "函数",
        "description": "目标窗口句柄/目标进程是否64位",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCWIN_IsWow64Process(__int64 hwnd,__int32 pid=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "窗口句柄"
          },
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程PID"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "窗口句柄或者PID任意指定一个就行",
          "如果2个都指定则PID用于检测"
        ],
        "codeExamples": [
          {
            "title": "HD窗口.是否64位进程 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.是否64位进程 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.是否64位进程 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCWIN_IsWow64Process"
      },
      {
        "id": "function_7",
        "name": "HD窗口.获取窗口标题",
        "type": "函数",
        "description": "获取目标窗口标题",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCWIN_GetWindowTitle(__int64 hwnd);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "窗口句柄"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD窗口.获取窗口标题 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.获取窗口标题 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.获取窗口标题 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCWIN_GetWindowTitle"
      },
      {
        "id": "function_8",
        "name": "HD窗口.获取窗口线程ID",
        "type": "函数",
        "description": "获取目标窗口句柄的线程ID",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCWIN_GetWindowThreadProcessId(__int64 hwnd);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "窗口句柄"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD窗口.获取窗口线程ID - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.获取窗口线程ID - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.获取窗口线程ID - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCWIN_GetWindowThreadProcessId"
      },
      {
        "id": "function_9",
        "name": "HD窗口.获取窗口进程ID",
        "type": "函数",
        "description": "获取目标窗口句柄的进程ID",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCWIN_GetWindowProcessId(__int64 hwnd);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "窗口句柄"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD窗口.获取窗口进程ID - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.获取窗口进程ID - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.获取窗口进程ID - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCWIN_GetWindowProcessId"
      },
      {
        "id": "function_10",
        "name": "HD窗口.获取窗口进程路径",
        "type": "函数",
        "description": "获取目标窗口句柄的路径",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCWIN_GetWindowProcessPath(__int64 hwnd);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "窗口句柄"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD窗口.获取窗口进程路径 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.获取窗口进程路径 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.获取窗口进程路径 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCWIN_GetWindowProcessPath"
      },
      {
        "id": "function_11",
        "name": "HD窗口.获取窗口位置",
        "type": "函数",
        "description": "获取窗口在屏幕上的位置",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCWIN_GetWindowRect(__int64 hwnd,void* pRect=NULL);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "窗口句柄"
          },
          {
            "name": "pRect",
            "type": "void",
            "desc": "指向RECT结构体地址(供C/C++调用)这个参数可以直接获取值,如果是其他语言可以HCEnv_GetRetJson获取字符串"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "返回字符串:",
          "left|top|rifght|bottom|",
          "RECT结构体:",
          "typedefstructtagRECT{LONGleft;LONGtop;LONGright;LONGbottom;}RECT,* PRECT;"
        ],
        "codeExamples": [
          {
            "title": "HD窗口.获取窗口位置 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.获取窗口位置 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.获取窗口位置 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCWIN_GetWindowRect"
      },
      {
        "id": "function_12",
        "name": "HD窗口.获取窗口类名",
        "type": "函数",
        "description": "获取目标窗口句柄的窗口类名",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCWIN_GetWindowClass(__int64 hwnd);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "窗口句柄"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD窗口.获取窗口类名 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.获取窗口类名 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.获取窗口类名 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCWIN_GetWindowClass"
      },
      {
        "id": "function_13",
        "name": "HD窗口.获取窗口状态",
        "type": "函数",
        "description": "获取目标窗口句柄的窗口状态",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCWIN_GetWindowState(__int64 hwnd,__int32 flag);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "窗口句柄"
          },
          {
            "name": "flag",
            "type": "__int32",
            "desc": "判断窗口是否存在(0),判断窗口是否处于激活(1),判断窗口是否可见(2),判断窗口是否最小化(3),判断窗口是否最大化(4),判断窗口是否置顶(5),判断窗口是否无响应(6),"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD窗口.获取窗口状态 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.获取窗口状态 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.获取窗口状态 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCWIN_GetWindowState"
      },
      {
        "id": "function_14",
        "name": "HD窗口.获取特殊窗口",
        "type": "函数",
        "description": "获取特殊窗口桌面Shell_TrayWnd",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCWIN_GetSpecialWindow(__int32 flag);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "flag",
            "type": "__int32",
            "desc": "桌面(0),Shell_TrayWnd(1)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD窗口.获取特殊窗口 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.获取特殊窗口 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.获取特殊窗口 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCWIN_GetSpecialWindow"
      },
      {
        "id": "function_15",
        "name": "HD窗口.获取窗口关联句柄",
        "type": "函数",
        "description": "获取目标窗口句柄的关联窗口句柄",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCWIN_GetWindow(__int64 hwnd,__int32 flag)",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "窗口句柄"
          },
          {
            "name": "flag",
            "type": "__int32",
            "desc": "获取父窗口(0),获取第一个子窗口(1),获取第一个窗口(2),获取最后个窗口(3),获取下一个窗口(4),获取上一个窗口(5),获取拥有者窗口(6),获取顶层窗口(7)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD窗口.获取窗口关联句柄 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.获取窗口关联句柄 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.获取窗口关联句柄 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCWIN_GetWindow"
      },
      {
        "id": "function_16",
        "name": "HD窗口.获取顶层活动窗口句柄",
        "type": "函数",
        "description": "获取顶层活动窗口,可以获取到按键自带插件无法获取到的句柄",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCWIN_GetForegroundWindow();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD窗口.获取顶层活动窗口句柄 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.获取顶层活动窗口句柄 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.获取顶层活动窗口句柄 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCWIN_GetForegroundWindow"
      },
      {
        "id": "function_17",
        "name": "HD窗口.获取顶层焦点窗口句柄",
        "type": "函数",
        "description": "获取顶层活动窗口中具有输入焦点的窗口句柄",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCWIN_GetForegroundFocus();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD窗口.获取顶层焦点窗口句柄 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.获取顶层焦点窗口句柄 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.获取顶层焦点窗口句柄 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCWIN_GetForegroundFocus"
      },
      {
        "id": "function_18",
        "name": "HD窗口.设置焦点到窗口",
        "type": "函数",
        "description": "设置输入焦点到窗口",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCWIN_SetForegroundFocus(__int64 hwnd);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "窗口句柄"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD窗口.设置焦点到窗口 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.设置焦点到窗口 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.设置焦点到窗口 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCWIN_SetForegroundFocus"
      },
      {
        "id": "function_19",
        "name": "HD窗口.获取窗口客户区域",
        "type": "函数",
        "description": "获取窗口客户区域的宽度和高度",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCWIN_GetClientSize(__int64 hwnd,void* pW=NULL,void* pH=NULL);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "窗口句柄"
          },
          {
            "name": "pW",
            "type": "void",
            "desc": "指向4字节宽度整数int 地址(供C/C++使用),其他语言调用HCEnv_GetRetJson获取字符串并自行解析"
          },
          {
            "name": "pH",
            "type": "void",
            "desc": "指向4字节高度整数int 地址(供C/C++使用),其他语言调用HCEnv_GetRetJson获取字符串并自行解析"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "返回字符串:",
          "w|h|"
        ],
        "codeExamples": [
          {
            "title": "HD窗口.获取窗口客户区域 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.获取窗口客户区域 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.获取窗口客户区域 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCWIN_GetClientSize"
      },
      {
        "id": "function_20",
        "name": "HD窗口.获取窗口客户区域在屏幕",
        "type": "函数",
        "description": "获取窗口客户区域在屏幕上的位置",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCWIN_GetClientRectInWindow(__int64 hwnd,void* pRect=NULL);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "窗口句柄"
          },
          {
            "name": "pRect",
            "type": "void",
            "desc": "指向RECT结构体地址(供C/C++调用)这个参数可以直接获取值,如果是其他语言可以HCEnv_GetRetJson获取字符串"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "返回字符串:",
          "left|top|rifght|bottom|",
          "RECT结构体:",
          "typedefstructtagRECT{LONGleft;LONGtop;LONGright;LONGbottom;}RECT,* PRECT;"
        ],
        "codeExamples": [
          {
            "title": "HD窗口.获取窗口客户区域在屏幕 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.获取窗口客户区域在屏幕 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.获取窗口客户区域在屏幕 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCWIN_GetClientRectInWindow"
      },
      {
        "id": "function_21",
        "name": "HD窗口.查找窗口",
        "type": "函数",
        "description": "查找符合类名或者标题名的顶层可见窗口,如果指定了parent,则在parent的第一层子窗口中查找",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCWIN_FindWindowEx(__int64 parentHwnd,char* className,char* title,BOOL bType=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "parentHwnd",
            "type": "__int64",
            "desc": "窗口的父窗口句柄(不指定则从桌面窗口开始搜索)"
          },
          {
            "name": "className",
            "type": "char*",
            "desc": "窗口类名(不指定为NULL/0)"
          },
          {
            "name": "title",
            "type": "char*",
            "desc": "窗口标题(不指定为NULL/0)"
          },
          {
            "name": "bType",
            "type": "bool",
            "desc": "真/1为模糊匹配假/0为完全匹配"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD窗口.查找窗口 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.查找窗口 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.查找窗口 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCWIN_FindWindowEx"
      },
      {
        "id": "function_22",
        "name": "HD窗口.查找顶层窗口",
        "type": "函数",
        "description": "查找顶层窗口句柄,父窗口句柄为NULL",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCWIN_FindTopWindow(char* className,char* title,BOOL bType=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "className",
            "type": "char*",
            "desc": "窗口类名(不指定为NULL/0/“”)"
          },
          {
            "name": "title",
            "type": "char*",
            "desc": "窗口标题(不指定为NULL/0/“”)"
          },
          {
            "name": "bType",
            "type": "bool",
            "desc": "真/1为模糊匹配假/0为完全匹配"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD窗口.查找顶层窗口 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.查找顶层窗口 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.查找顶层窗口 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCWIN_FindTopWindow"
      },
      {
        "id": "function_23",
        "name": "HD窗口.枚举查找窗口",
        "type": "函数",
        "description": "根据指定进程以及其它条件,枚举系统中符合条件的窗口",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCWIN_EnumWindowByProcess(char* processName,char* className,char* title,__int32 filter,BOOL bType=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "processName",
            "type": "char*",
            "desc": "进程名(如果是完全匹配要加.exe,如果是模糊匹配自行判断)"
          },
          {
            "name": "className",
            "type": "char*",
            "desc": "窗口类名(不指定为NULL/0)"
          },
          {
            "name": "title",
            "type": "char*",
            "desc": "窗口标题(不指定为NULL/0)"
          },
          {
            "name": "filter",
            "type": "__int32",
            "desc": "1标题2类名4第一个PID8检测是否无父窗口16检查窗口是否显示32检索多PID多个标识可以用|累加"
          },
          {
            "name": "bType",
            "type": "bool",
            "desc": "真/1为模糊匹配假/0为完全匹配"
          }
        ],
        "returnValue": "查看返回值表\n0表示未找到",
        "notes": [
          "单PID返回字符串:",
          "hwnd",
          "多PID返回字符串:根据创建时间排序过的",
          "hwnd1|hwnd2|hwnd3|"
        ],
        "codeExamples": [
          {
            "title": "HD窗口.枚举查找窗口 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.枚举查找窗口 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.枚举查找窗口 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCWIN_EnumWindowByProcess"
      },
      {
        "id": "function_24",
        "name": "HD窗口.枚举查找窗口Ex",
        "type": "函数",
        "description": "根据指定进程pid以及其它条件,枚举系统中符合条件的窗口,可以枚举到按键自带的无法枚举到的窗口",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCWIN_EnumWindowByProcessId(__int32 pid,char* className,char* title,__int32 filter,BOOL bType=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程PID"
          },
          {
            "name": "className",
            "type": "char*",
            "desc": "窗口类名(不指定为NULL/0)"
          },
          {
            "name": "title",
            "type": "char*",
            "desc": "窗口标题(不指定为NULL/0)"
          },
          {
            "name": "filter",
            "type": "__int32",
            "desc": "1标题2类名8检测是否无父窗口16检查窗口是否显示多个标识可以用|累加"
          },
          {
            "name": "bType",
            "type": "bool",
            "desc": "真/1为模糊匹配假/0为完全匹配"
          }
        ],
        "returnValue": "查看返回值表\n0表示未找到\n1表示找到结果存在返回json字符串",
        "notes": [
          "单PID返回字符串:",
          "hwnd"
        ],
        "codeExamples": [
          {
            "title": "HD窗口.枚举查找窗口Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.枚举查找窗口Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.枚举查找窗口Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCWIN_EnumWindowByProcessId"
      },
      {
        "id": "function_25",
        "name": "HD窗口.枚举进程",
        "type": "函数",
        "description": "根据指定进程名,枚举系统中符合条件的进程PID",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCWIN_EnumProcess(char* processName,BOOL bType=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "processName",
            "type": "char*",
            "desc": "进程名(如果是完全匹配要加.exe,如果是模糊匹配自行判断)"
          },
          {
            "name": "bType",
            "type": "bool",
            "desc": "真/1为模糊匹配假/0为完全匹配"
          }
        ],
        "returnValue": "查看返回值表\n0表示未找到",
        "notes": [
          "返回字符串:",
          "pid1|pid2|pid3|"
        ],
        "codeExamples": [
          {
            "title": "HD窗口.枚举进程 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.枚举进程 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.枚举进程 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCWIN_EnumProcess"
      },
      {
        "id": "function_26",
        "name": "HD窗口.枚举窗口",
        "type": "函数",
        "description": "根据指定条件,枚举系统中符合条件的窗口,可以枚举到按键自带的无法枚举到的窗口",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCWIN_EnumWindow(__int64 parentHwnd,char* className,char* title,__int32 filter,BOOL bType=FALSE,BOOL bChild=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "parentHwnd",
            "type": "__int64",
            "desc": "窗口的父窗口句柄(可以不指定为NULL)"
          },
          {
            "name": "className",
            "type": "char*",
            "desc": "窗口类名(不指定为NULL/0)"
          },
          {
            "name": "title",
            "type": "char*",
            "desc": "窗口标题(不指定为NULL/0)"
          },
          {
            "name": "filter",
            "type": "__int32",
            "desc": "1标题2类名4检测父窗口是否是指定8检测是否无父窗口16检查窗口是否显示多个标识可以用|累加"
          },
          {
            "name": "bType",
            "type": "bool",
            "desc": "真/1为模糊匹配假/0为完全匹配"
          },
          {
            "name": "bChild",
            "type": "bool",
            "desc": "根据指定条件,枚举指定父句柄的子窗口"
          }
        ],
        "returnValue": "查看返回值表\n0表示未找到",
        "notes": [
          "多句柄返回字符串:",
          "hwnd1|hwnd2|hwnd3|"
        ],
        "codeExamples": [
          {
            "title": "HD窗口.枚举窗口 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.枚举窗口 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD窗口.枚举窗口 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCWIN_EnumWindow"
      }
    ]
  },
  {
    "id": "category_23",
    "name": "目标[TARGET]",
    "functions": [
      {
        "id": "function_1",
        "name": "HCTarget_UseVT",
        "type": "函数",
        "description": "目标进程是否使用VT驱动",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCTarget_UseVT(__int32 type);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "type",
            "type": "__int32",
            "desc": "1使用0不使用"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "目标进程是否使用VT驱动需要中控安装和开启VT驱动type:0不使用1使用作用模块包含:后台键鼠模块后台截图模块谷歌内置浏览器模块APIHOOK模块自定义HOOK模块目的:过检测能力强"
        ],
        "codeExamples": [
          {
            "title": "HCTarget_UseVT - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCTarget_UseVT - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCTarget_UseVT - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      }
    ]
  },
  {
    "id": "category_24",
    "name": "内核(NT)",
    "functions": [
      {
        "id": "function_1",
        "name": "HDNT.窗口句柄取PID",
        "type": "函数",
        "description": "获取目标窗口句柄的进程ID(R3层内核版本)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCNT_GetWindowProcessId(__int64 hwnd);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "窗口句柄"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "可以绕过一些检测,比如NP等"
        ],
        "codeExamples": [
          {
            "title": "HDNT.窗口句柄取PID - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDNT.窗口句柄取PID - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDNT.窗口句柄取PID - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCNT_GetWindowProcessId"
      }
    ]
  },
  {
    "id": "category_25",
    "name": "内存操作模块(M)",
    "functions": [
      {
        "id": "function_1",
        "name": "HD内存.特征码",
        "type": "函数",
        "description": "特征码查找",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCM_FindCode(__int32 窗口序号,char* 特征码字符串地址,__int32 偏移,__int32 次数,__int32 type=1,char* 模块名字=NULL);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "特征码字符串地址",
            "type": "char*",
            "desc": "特征码字符串地址(支持??)"
          },
          {
            "name": "偏移",
            "type": "__int32",
            "desc": "正负偏移"
          },
          {
            "name": "次数",
            "type": "__int32",
            "desc": "找到的第几次从1开始"
          },
          {
            "name": "type",
            "type": "__int32",
            "desc": "获取的是(基地址/CALL地址/直接地址/地址中的值)1为地址2为基地址3为CALL4为地址中的值"
          },
          {
            "name": "模块名字",
            "type": "char*",
            "desc": "在指定的模块中搜索,默认为主模块NULL为默认"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD内存.特征码 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD内存.特征码 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD内存.特征码 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCM_FindCode"
      },
      {
        "id": "function_2",
        "name": "HD内存.特征码Ex",
        "type": "函数",
        "description": "特征码查找(通过指定地址)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCM_FindCodeEx(__int32 窗口序号,__int64 开始地址,__int64 扫描范围大小,char* 特征码字符串地址,__int32 偏移,__int32 次数,__int32 type=1);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "开始地址",
            "type": "__int64",
            "desc": "指定开始扫描的地址"
          },
          {
            "name": "扫描范围大小",
            "type": "__int64",
            "desc": "指定开始扫描的地址大小,结束地址等于开始地址+扫描范围大小"
          },
          {
            "name": "特征码字符串地址",
            "type": "char*",
            "desc": "特征码字符串地址(支持??)"
          },
          {
            "name": "偏移",
            "type": "__int32",
            "desc": "正负偏移"
          },
          {
            "name": "次数",
            "type": "__int32",
            "desc": "找到的第几次从1开始"
          },
          {
            "name": "type",
            "type": "__int32",
            "desc": "获取的是(基地址/CALL地址/直接地址/地址中的值)1为地址2为基地址3为CALL4为地址中的值"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD内存.特征码Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD内存.特征码Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD内存.特征码Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCM_FindCodeEx"
      },
      {
        "id": "function_3",
        "name": "HD内存.读表达式",
        "type": "函数",
        "description": "读整数数据",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCM_Read(__int32 窗口序号,char* 表达式字符串地址,__int32 读取大小,char* 模块名字=NULL,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "表达式字符串地址",
            "type": "char*",
            "desc": "表达式字符串地址(格式)"
          },
          {
            "name": "读取大小",
            "type": "__int32",
            "desc": "读取大小支持1248大小"
          },
          {
            "name": "模块名字",
            "type": "char*",
            "desc": "在指定的模块中读写,默认为主模块"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否主线程调用"
          },
          {
            "name": "格式",
            "type": "",
            "desc": ""
          },
          {
            "name": "相对偏移]+x]+y]+z取地址相对偏移]+x]+y]+z]取地址值\\n如",
            "type": "",
            "desc": "0x123456]+0x56]-0x44]第一个偏移表示的是基地址的偏移不是基地址地址\\n加号\\\"+\\\"可要可不要\\n减号\\\"-\\\"负偏移需要\\n最后一个\\\"]\\\"加了取地址里面值不加是地址"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD内存.读表达式 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD内存.读表达式 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD内存.读表达式 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCM_Read"
      },
      {
        "id": "function_4",
        "name": "HD内存.读地址",
        "type": "函数",
        "description": "读整数数据",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCM_ReadAddr(__int32 窗口序号,__int64 addr,__int32 读取大小,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "addr",
            "type": "__int64",
            "desc": "需要读的内存地址"
          },
          {
            "name": "读取大小",
            "type": "__int32",
            "desc": "读取大小支持1248大小"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否主线程调用"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD内存.读地址 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD内存.读地址 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD内存.读地址 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCM_ReadAddr"
      },
      {
        "id": "function_5",
        "name": "HD内存.写表达式",
        "type": "函数",
        "description": "写整数数据",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCM_Write(__int32 窗口序号,char* 表达式字符串地址,__int64 value,__int32 写入大小,char* 模块名字=NULL,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "表达式字符串地址",
            "type": "char*",
            "desc": "表达式字符串地址最后一个必须+“]”才有意义否则会忽视最后一个偏移"
          },
          {
            "name": "value",
            "type": "__int64",
            "desc": "写入值"
          },
          {
            "name": "写入大小",
            "type": "__int32",
            "desc": "写入值的字节大小(最大就8字节)"
          },
          {
            "name": "模块名字",
            "type": "char*",
            "desc": "在指定的模块中读写,默认为主模块"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否主线程调用"
          },
          {
            "name": "格式",
            "type": "",
            "desc": ""
          },
          {
            "name": "\\n【偏移表达式格式】\\n尽支持十六进制格式",
            "type": "",
            "desc": "XXX]XXX]XXX]XXX]\\n如"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD内存.写表达式 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD内存.写表达式 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD内存.写表达式 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCM_Write"
      },
      {
        "id": "function_6",
        "name": "HD内存.写地址",
        "type": "函数",
        "description": "写整数数据",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCM_WriteAddr(__int32 窗口序号,__int64 addr,__int64 value,__int32 写入大小,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "addr",
            "type": "__int64",
            "desc": "需要写的内存地址"
          },
          {
            "name": "value",
            "type": "__int64",
            "desc": "写入的值"
          },
          {
            "name": "写入大小",
            "type": "__int32",
            "desc": "写入大小(最大8字节)"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否主线程调用"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD内存.写地址 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD内存.写地址 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD内存.写地址 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCM_WriteAddr"
      },
      {
        "id": "function_7",
        "name": "HD内存.读表达式字节流",
        "type": "函数",
        "description": "读字节流数据",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCM_ReadData(__int32 窗口序号,char* 表达式字符串地址,BYTE* byteBuffer,__int32 byBufferSize,__int32 读取大小,char* 模块名字=NULL,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "表达式字符串地址",
            "type": "char*",
            "desc": "表达式字符串地址(格式)读字节流最后一个必须+“]”才有意义否则会忽视最后一个偏移"
          },
          {
            "name": "byteBuffer",
            "type": "byte*",
            "desc": "存放读取字节集缓冲区"
          },
          {
            "name": "byBufferSize",
            "type": "__int32",
            "desc": "存放读取字节集缓冲区的大小"
          },
          {
            "name": "读取大小",
            "type": "__int32",
            "desc": "读取大小1到100KB大小"
          },
          {
            "name": "模块名字",
            "type": "char*",
            "desc": "在指定的模块中读写,默认为主模块"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否主线程调用"
          },
          {
            "name": "格式",
            "type": "",
            "desc": ""
          },
          {
            "name": "\\n【偏移表达式格式】\\n尽支持十六进制格式",
            "type": "",
            "desc": "XXX]XXX]XXX]XXX]\\n如"
          }
        ],
        "returnValue": "查看返回值表\n高4字节是GetLastError()返回\n低4字节是HD返回值",
        "notes": [
          "json返回字节流利用HCEnv_GetRetJson拿到返回地址,提取的字节数为读取大小数最大读取100KB字节大小,注意这个限制,否则会报错"
        ],
        "codeExamples": [
          {
            "title": "HD内存.读表达式字节流 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD内存.读表达式字节流 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD内存.读表达式字节流 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCM_ReadData"
      },
      {
        "id": "function_8",
        "name": "HCM_ReadFD",
        "type": "函数",
        "description": "读单/双浮点数",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCM_ReadFD(__int32 窗口序号,char* 表达式字符串地址,__int32 读取大小,char* 模块名字=NULL,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "表达式字符串地址",
            "type": "char*",
            "desc": "表达式字符串地址(格式)最后一个必须+“]”才有意义否则会忽视最后一个偏移"
          },
          {
            "name": "读取大小",
            "type": "__int32",
            "desc": "4float单浮点8double双浮点"
          },
          {
            "name": "模块名字",
            "type": "char*",
            "desc": "在指定的模块中读写,默认为主模块"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否主线程调用"
          },
          {
            "name": "格式",
            "type": "",
            "desc": ""
          },
          {
            "name": "\\n【偏移表达式格式】\\n尽支持十六进制格式",
            "type": "",
            "desc": "XXX]XXX]XXX]XXX]\\n如"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "返回结果以float举例:json返回字符串如:{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":1,\\\\\"iError\\\\\":0,\\\\\"value\\\\\":999.000}]}"
        ],
        "codeExamples": [
          {
            "title": "HCM_ReadFD - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCM_ReadFD - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCM_ReadFD - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_9",
        "name": "HD内存.读地址字节流",
        "type": "函数",
        "description": "读字节流数据",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCM_ReadDataAddr(__int32 窗口序号,__int64 addr,BYTE* byteBuffer,__int32 byBufferSize,__int32 读取大小,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "addr",
            "type": "__int64",
            "desc": "目标进程的地址"
          },
          {
            "name": "byteBuffer",
            "type": "byte*",
            "desc": "存放读取字节集缓冲区"
          },
          {
            "name": "byBufferSize",
            "type": "__int32",
            "desc": "存放读取字节集缓冲区的大小"
          },
          {
            "name": "读取大小",
            "type": "__int32",
            "desc": "1到100KB大小"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否主线程调用"
          }
        ],
        "returnValue": "查看返回值表\n高4字节是GetLastError()返回\n低4字节是HD返回值",
        "notes": [
          "json返回字节流利用HCEnv_GetRetJson拿到返回地址,提取的字节数为读取大小数最大读取100KB字节大小,注意这个限制,否则会报错"
        ],
        "codeExamples": [
          {
            "title": "HD内存.读地址字节流 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD内存.读地址字节流 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD内存.读地址字节流 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCM_ReadDataAddr"
      },
      {
        "id": "function_10",
        "name": "HCM_ReadFDAddr",
        "type": "函数",
        "description": "读单/双浮点数",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCM_ReadFDAddr(__int32 窗口序号,__int64 addr,__int32 读取大小,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "addr",
            "type": "__int64",
            "desc": "目标进程的地址"
          },
          {
            "name": "读取大小",
            "type": "__int32",
            "desc": "4float单浮点8double双浮点"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否主线程调用"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "读取大小:4float单浮点8double双浮点以float举例:json返回字符串如:\\\"999.0000\\\""
        ],
        "codeExamples": [
          {
            "title": "HCM_ReadFDAddr - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCM_ReadFDAddr - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCM_ReadFDAddr - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_11",
        "name": "HD内存.写表达式字节流",
        "type": "函数",
        "description": "写字节流数据",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCM_WriteData(__int32 窗口序号,char* 表达式字符串地址,char* byteBuffer,__int32 写入大小,char* 模块名字=NULL,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "表达式字符串地址",
            "type": "char*",
            "desc": "表达式字符串地址(格式)"
          },
          {
            "name": "byteBuffer",
            "type": "char*",
            "desc": "字节流缓冲区地址"
          },
          {
            "name": "写入大小",
            "type": "__int32",
            "desc": "写入大小1到100KB大小"
          },
          {
            "name": "模块名字",
            "type": "char*",
            "desc": "在指定的模块中读写,默认为主模块"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否主线程调用"
          },
          {
            "name": "格式",
            "type": "",
            "desc": ""
          },
          {
            "name": "\\n【偏移表达式格式】\\n尽支持十六进制格式",
            "type": "",
            "desc": "XXX]XXX]XXX]XXX]\\n如"
          }
        ],
        "returnValue": "查看返回值表\n高4字节是GetLastError()返回\n低4字节是HD返回值",
        "notes": [
          "最大写入100KB字节大小,注意这个限制,否则会报错json返回值{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":1,\\\\\"iError\\\\\":0}]}"
        ],
        "codeExamples": [
          {
            "title": "HD内存.写表达式字节流 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD内存.写表达式字节流 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD内存.写表达式字节流 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCM_WriteData"
      },
      {
        "id": "function_12",
        "name": "HCM_WriteF",
        "type": "函数",
        "description": "写单浮点数4字节",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCM_WriteF(__int32 窗口序号,char* 表达式字符串地址,floatvalue,char* 模块名字=NULL,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "表达式字符串地址",
            "type": "char*",
            "desc": "表达式字符串地址(格式)最后一个必须+“]”才有意义否则会忽视最后一个偏移"
          },
          {
            "name": "value",
            "type": "",
            "desc": "需要写入的单浮点数"
          },
          {
            "name": "模块名字",
            "type": "char*",
            "desc": "在指定的模块中读写,默认为主模块"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否主线程调用"
          },
          {
            "name": "格式",
            "type": "",
            "desc": ""
          },
          {
            "name": "\\n【偏移表达式格式】\\n尽支持十六进制格式",
            "type": "",
            "desc": "XXX]XXX]XXX]XXX]\\n如"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "json返回值{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":1,\\\\\"iError\\\\\":0}]}"
        ],
        "codeExamples": [
          {
            "title": "HCM_WriteF - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCM_WriteF - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCM_WriteF - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_13",
        "name": "HCM_WriteD",
        "type": "函数",
        "description": "写双浮点数8字节",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCM_WriteD(__int32 窗口序号,char* 表达式字符串地址,doublevalue,char* 模块名字=NULL,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "表达式字符串地址",
            "type": "char*",
            "desc": "表达式字符串地址(格式)最后一个必须+“]”才有意义否则会忽视最后一个偏移"
          },
          {
            "name": "value",
            "type": "",
            "desc": "需要写入的双浮点数"
          },
          {
            "name": "模块名字",
            "type": "char*",
            "desc": "在指定的模块中读写,默认为主模块"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否主线程调用"
          },
          {
            "name": "格式",
            "type": "",
            "desc": ""
          },
          {
            "name": "\\n【偏移表达式格式】\\n尽支持十六进制格式",
            "type": "",
            "desc": "XXX]XXX]XXX]XXX]\\n如"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "json返回值{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":1,\\\\\"iError\\\\\":0}]}"
        ],
        "codeExamples": [
          {
            "title": "HCM_WriteD - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCM_WriteD - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCM_WriteD - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_14",
        "name": "HD内存.写地址字节流",
        "type": "函数",
        "description": "写字节流数据",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCM_WriteDataAddr(__int32 窗口序号,__int64 addr,char* byteBuffer,__int32 写入大小,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "addr",
            "type": "__int64",
            "desc": "目标进程的地址"
          },
          {
            "name": "byteBuffer",
            "type": "char*",
            "desc": "字节缓冲区,最大写入100KB"
          },
          {
            "name": "写入大小",
            "type": "__int32",
            "desc": "1到100KB大小"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否主线程调用"
          }
        ],
        "returnValue": "查看返回值表\n高4字节是GetLastError()返回\n低4字节是HD返回值",
        "notes": [
          "json返回字节流利用HCEnv_GetRetJson拿到返回地址,提取的字节数为读取大小数最大读取100KB字节大小,注意这个限制,否则会报错"
        ],
        "codeExamples": [
          {
            "title": "HD内存.写地址字节流 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD内存.写地址字节流 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD内存.写地址字节流 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCM_WriteDataAddr"
      },
      {
        "id": "function_15",
        "name": "HCM_WriteAddrF",
        "type": "函数",
        "description": "写单浮点数4字节",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCM_WriteAddrF(__int32 窗口序号,__int64 addr,floatvalue,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "addr",
            "type": "__int64",
            "desc": "目标进程地址"
          },
          {
            "name": "value",
            "type": "",
            "desc": "float单浮点值"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否主线程调用"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HCM_WriteAddrF - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCM_WriteAddrF - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCM_WriteAddrF - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_16",
        "name": "HCM_WriteAddrD",
        "type": "函数",
        "description": "写双浮点数8字节",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCM_WriteAddrD(__int32 窗口序号,__int64 addr,doublevalue,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "addr",
            "type": "__int64",
            "desc": "目标进程地址"
          },
          {
            "name": "value",
            "type": "",
            "desc": "double单浮点值"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否主线程调用"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HCM_WriteAddrD - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCM_WriteAddrD - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCM_WriteAddrD - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_17",
        "name": "HCM_GetModuleBase",
        "type": "函数",
        "description": "获取模块地址",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCM_GetModuleBase(__int32 窗口序号,char* 模块名字=NULL,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "模块名字",
            "type": "char*",
            "desc": "NULL默认获取主模块首地址"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否主线程调用"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HCM_GetModuleBase - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCM_GetModuleBase - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCM_GetModuleBase - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_18",
        "name": "HCM_GetModuleFunAddr",
        "type": "函数",
        "description": "获取模块中的导出接口地址",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCM_GetModuleFunAddr(__int32 窗口序号,char* 模块名字=NULL,char* 函数名字=NULL,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "模块名字",
            "type": "char*",
            "desc": "NULL默认获取主模块首地址"
          },
          {
            "name": "函数名字",
            "type": "char*",
            "desc": "导出接口名字"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否主线程调用"
          }
        ],
        "returnValue": "查看返回值表\n成功:返回地址",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HCM_GetModuleFunAddr - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCM_GetModuleFunAddr - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCM_GetModuleFunAddr - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_19",
        "name": "HCM_IsBadReadAddr",
        "type": "函数",
        "description": "判断指定地址是否在目标进程中有效可读",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCM_IsBadReadAddr(__int32 窗口序号,__int64 addr,__int32 size,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "addr",
            "type": "__int64",
            "desc": "目标进程地址"
          },
          {
            "name": "size",
            "type": "__int32",
            "desc": "地址大小一般32位是4字节64位是8字节"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否主线程调用"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HCM_IsBadReadAddr - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCM_IsBadReadAddr - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCM_IsBadReadAddr - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_20",
        "name": "HCM_AsmCallX86",
        "type": "函数",
        "description": "执行汇编CALLX86传递汇编代码",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCM_AsmCallX86(__int32 窗口序号,__int64 excuteCallAddr,char* 汇编文本A=NULL,BOOL bFreeAddr=FALSE,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "excuteCallAddr",
            "type": "__int64",
            "desc": "目标进程地址"
          },
          {
            "name": "汇编文本A",
            "type": "char*",
            "desc": "汇编文本汇编文本不宜过大内部转换为汇编最大2048字节"
          },
          {
            "name": "如果汇编转换机器码错误,则json格式",
            "type": "",
            "desc": "\\\"{\\\\\"error\\\\\""
          },
          {
            "name": "bFreeAddr",
            "type": "bool",
            "desc": "是否释放地址指定excuteCallAddr参数仅仅只是释放内存不会执行汇编"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否主线程调用"
          }
        ],
        "returnValue": "查看返回值表\n返回执行汇编CALL的返回值或错误值\n当执行汇编流程会返回这个json格式:XXXX|YYYYY===执行内存地址|汇编执行返回值\n当汇编转换错误会返回这个json格式:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":%d,\\\\\"outSize\\\\\":%d,\\\\\"count\\\\\":%d,\\\\\"error\\\\\":%d}]}\\\"",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HCM_AsmCallX86 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCM_AsmCallX86 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCM_AsmCallX86 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_21",
        "name": "HCM_AsmCallX64",
        "type": "函数",
        "description": "执行汇编CALLX64传递汇编代码",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCM_AsmCallX64(__int32 窗口序号,__int64 excuteCallAddr,char* 汇编文本A=NULL,BOOL bFreeAddr=FALSE,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "excuteCallAddr",
            "type": "__int64",
            "desc": "目标进程地址"
          },
          {
            "name": "汇编文本A",
            "type": "char*",
            "desc": "汇编文本汇编文本不宜过大内部转换为汇编最大2048字节"
          },
          {
            "name": "如果汇编转换机器码错误,则json格式",
            "type": "",
            "desc": "\\\"{\\\\\"error\\\\\""
          },
          {
            "name": "bFreeAddr",
            "type": "bool",
            "desc": "是否释放地址指定excuteCallAddr参数仅仅只是释放内存不会执行汇编"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否主线程调用"
          }
        ],
        "returnValue": "查看返回值表\n返回执行汇编CALL的返回值或错误值\n当执行汇编流程会返回这个json格式:XXXX|YYYYY===执行内存地址|汇编执行返回值\n当汇编转换错误会返回这个json格式:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":%d,\\\\\"outSize\\\\\":%d,\\\\\"count\\\\\":%d,\\\\\"error\\\\\":%d}]}\\\"",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HCM_AsmCallX64 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCM_AsmCallX64 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCM_AsmCallX64 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      }
    ]
  },
  {
    "id": "category_26",
    "name": "找图模块(FP)",
    "functions": [
      {
        "id": "function_1",
        "name": "HD识图.截图",
        "type": "函数",
        "description": "截图并保存到文件(.bmp)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_Capture(__int32 窗口序号,__int32 x,__int32 y,__int32 w,__int32 h,char* fileNamePath,BOOL 是否打开查看器=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "__int32",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "__int32",
            "desc": "矩形范围高度"
          },
          {
            "name": "fileNamePath",
            "type": "char*",
            "desc": "保存到文件的路径+文件名(.bmp)"
          },
          {
            "name": "是否打开查看器",
            "type": "bool",
            "desc": "是否打开查看"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD识图.截图 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.截图 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.截图 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFP_Capture"
      },
      {
        "id": "function_2",
        "name": "HD识图.单点找色",
        "type": "函数",
        "description": "单点找色",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_FindColor(__int32 窗口序号,__int32 x,__int32 y,__int32 w,__int32 h,char* deltaColor,doublesim,__int32 dirType=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "__int32",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "__int32",
            "desc": "矩形范围高度"
          },
          {
            "name": "deltaColor",
            "type": "char*",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          }
        ],
        "returnValue": "查看返回值表\n大于0表示:高4字节为x低4字节为y\njson:\\\"{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":ret,\\\"info\\\":\\\"X1,Y1\\\"}]}\\\",",
        "notes": [
          "注意返回值含义和XY值的提取"
        ],
        "codeExamples": [
          {
            "title": "HD识图.单点找色 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.单点找色 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.单点找色 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFP_FindColor"
      },
      {
        "id": "function_3",
        "name": "HD识图.多点找色",
        "type": "函数",
        "description": "多点找色",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_FindColors(__int32 窗口序号,__int32 x,__int32 y,__int32 w,__int32 h,char* deltaColor,doublesim,__int32 dirType=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "__int32",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "__int32",
            "desc": "矩形范围高度"
          },
          {
            "name": "deltaColor",
            "type": "char*",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          }
        ],
        "returnValue": "查看返回值表\n返回找到匹配颜色的数量",
        "notes": [
          "json:",
          "{error:0,ret:[{bRet:1,info:结果}]}\\\"",
          "info格式->像素序号,x1,y1|像素序号,x2,y2"
        ],
        "codeExamples": [
          {
            "title": "HD识图.多点找色 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.多点找色 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.多点找色 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFP_FindColors"
      },
      {
        "id": "function_4",
        "name": "HD识图.多点偏移找色",
        "type": "函数",
        "description": "多点偏移找色",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_FindColorsOffset(__int32 窗口序号,__int32 x,__int32 y,__int32 w,__int32 h,char* firstDeltaColor,char* deltaColor,doublesim,__int32 bALL=0,__int32 dirType=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "__int32",
            "desc": "宽度"
          },
          {
            "name": "h",
            "type": "__int32",
            "desc": "高度"
          },
          {
            "name": "firstDeltaColor",
            "type": "char*",
            "desc": "首色XXXXXX-YYYYYY格式"
          },
          {
            "name": "deltaColor",
            "type": "char*",
            "desc": "偏移色x1|y1|XXXXXX-YYYYYY|XXXXXX-YYYYYY|...,x2|y3|XXXXXX-YYYYYY|XXXXXX-YYYYYY|...,...格式"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "相似度"
          },
          {
            "name": "bALL",
            "type": "__int32",
            "desc": "是否全部找0表示找到一个就返回"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "json:",
          "\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":%lld,\\\\\"info\\\\\":\\\\\"%s\\\\\"}]}\\\",",
          "info:x1,y1|x2,y2|"
        ],
        "codeExamples": [
          {
            "title": "HD识图.多点偏移找色 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.多点偏移找色 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.多点偏移找色 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFP_FindColorsOffset"
      },
      {
        "id": "function_5",
        "name": "HD识图.比较颜色",
        "type": "函数",
        "description": "比较颜色",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_CmpColors(__int32 窗口序号,__int32 x,__int32 y,char* deltaColor);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "deltaColor",
            "type": "char*",
            "desc": "XXXXXX-YYYYYY格式"
          }
        ],
        "returnValue": "查看返回值表\n1找到\n0未找到",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD识图.比较颜色 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.比较颜色 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.比较颜色 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFP_CmpColors"
      },
      {
        "id": "function_6",
        "name": "HD识图.比较颜色Ex",
        "type": "函数",
        "description": "多点找色确定某个图像块,指定多个具体点",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_CmpColorExs(__int32 窗口序号,char* deltaXYColor);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "deltaXYColor",
            "type": "char*",
            "desc": "x1|y1|e3e6eb-101010|e3e6eb-101010|e3e6eb-101010|...,x2|y2|e3e6eb-101010|e3e6eb-101010|e3e6eb-101010|..."
          }
        ],
        "returnValue": "查看返回值表\n找到返回8字节长整数包含第一个坐标点x1,y1低4字节x1高4字节y1\n未找到返回0或者小于0\njson:\\\"{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":ret,\\\"info\\\":”X1,Y1“}]}\\\",",
        "notes": [
          "这个接口是给具体的坐标直接比较颜色",
          "而这个HCFP_FindColorsOffset是是先搜索首色然后以首色开始拿到偏移的坐标去比较颜色"
        ],
        "codeExamples": [
          {
            "title": "HD识图.比较颜色Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.比较颜色Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.比较颜色Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFP_CmpColorExs"
      },
      {
        "id": "function_7",
        "name": "HD识图.获取颜色",
        "type": "函数",
        "description": "获取某个点的颜色值(从后台)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_GetColor(__int32 窗口序号,__int32 x,__int32 y);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "客户区x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "客户区y"
          }
        ],
        "returnValue": "查看返回值表\n大于0表示具体颜色值(ARGB)4字节颜色",
        "notes": [
          "注意返回值含义和值的提取",
          "#pragmapack(1)typedefstructMYA8R8G8B8{BYTEm_a;\\n0x00BYTEm_r;\\n低8位BYTEm_g;\\n中8位BYTEm_b;\\n高8位MYA8R8G8B8(){m_a=0;m_r=0;m_g=0;m_b=0;}}MYA8R8G8B8;",
          "#pragmapack()",
          "json:",
          "“{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"info\\\":\\\"44,29,5B\\\"}]}”A(0x00)rgbr红色:低8位g绿色:中8位b蓝色:高8位RGBFFFFFF"
        ],
        "codeExamples": [
          {
            "title": "HD识图.获取颜色 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.获取颜色 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.获取颜色 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFP_GetColor"
      },
      {
        "id": "function_8",
        "name": "HD识图.范围找图",
        "type": "函数",
        "description": "在客户区范围内找图(仅支持一个图片)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_FindPic(__int32 窗口序号,__int32 x,__int32 y,__int32 w,__int32 h,char* 图片名字,char* deltaColor,doublesim,__int32 dirType=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "__int32",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "__int32",
            "desc": "矩形范围高度"
          },
          {
            "name": "图片名字",
            "type": "char*",
            "desc": "一张图片(bmp)文件名字(不包含路径，路径调用HCRES_SetResPath全局设置)"
          },
          {
            "name": "deltaColor",
            "type": "char*",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          }
        ],
        "returnValue": "查看返回值表\n大于0表示:低4字节为x高4字节为y\n返回json:0,x1,y1,w1,h1|对于这种单图索引固定为0",
        "notes": [
          "注意返回值含义和xy值的提取",
          "{error:0,ret:[{bRet:NN,info:MM}]}",
          "图片索引,左上角X,左上角Y,宽度,高度|",
          "NN:返回值",
          "MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|"
        ],
        "codeExamples": [
          {
            "title": "HD识图.范围找图 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.范围找图 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.范围找图 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFP_FindPic"
      },
      {
        "id": "function_9",
        "name": "HD识图.范围找图Ex",
        "type": "函数",
        "description": "在客户区范围内找图(返回找到其中一张信息)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_FindPicEx(__int32 窗口序号,__int32 x,__int32 y,__int32 w,__int32 h,char* 图片名字集合,char* deltaColor,doublesim,__int32 dirType=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "__int32",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "__int32",
            "desc": "矩形范围高度"
          },
          {
            "name": "图片名字集合",
            "type": "char*",
            "desc": "多张张图片(bmp)文件名字(不包含路径，路径调用HCRES_SetResPath全局设置),以'|'分隔开"
          },
          {
            "name": "deltaColor",
            "type": "char*",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          }
        ],
        "returnValue": "查看返回值表\n大于0表示:低4字节为x高4字节为y\n返回json:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|",
        "notes": [
          "注意返回值含义和xy值的提取",
          "返回json:",
          "{error:0,ret:[{bRet:NN,info:MM}]}",
          "图片索引,左上角X,左上角Y,宽度,高度|",
          "NN:返回值",
          "MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|"
        ],
        "codeExamples": [
          {
            "title": "HD识图.范围找图Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.范围找图Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.范围找图Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFP_FindPicEx"
      },
      {
        "id": "function_10",
        "name": "HCFP_FindPicExx",
        "type": "函数",
        "description": "在客户区范围内找图(返回全部找到的信息)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_FindPicExx(__int32 窗口序号,__int32 x,__int32 y,__int32 w,__int32 h,char* 图片名字集合,char* deltaColor,doublesim,BOOL bAll=TRUE,__int32 dirType=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "__int32",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "__int32",
            "desc": "矩形范围高度"
          },
          {
            "name": "图片名字集合",
            "type": "char*",
            "desc": "多张张图片(bmp)文件名字(不包含路径，路径调用HCRES_SetResPath全局设置),以'|'分隔开"
          },
          {
            "name": "deltaColor",
            "type": "char*",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "bAll",
            "type": "bool",
            "desc": "是否全部找如果不是表示每个图片只找一次就换下个图片"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          }
        ],
        "returnValue": "查看返回值表\n返回01错误值",
        "notes": [
          "注意返回值含义和xy值的提取",
          "返回json:",
          "{error:0,ret:[{bRet:NN,info:MM}]}",
          "图片索引,左上角X,左上角Y,宽度,高度|",
          "NN:返回值",
          "MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|"
        ],
        "codeExamples": [
          {
            "title": "HCFP_FindPicExx - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCFP_FindPicExx - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCFP_FindPicExx - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_11",
        "name": "HD识图.是否卡屏",
        "type": "函数",
        "description": "在客户区范围内检测再规定时间内是否卡图",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_IsDisplayDead(__int32 窗口序号,__int32 x,__int32 y,__int32 w,__int32 h,__int32 mstime);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "__int32",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "__int32",
            "desc": "矩形范围高度"
          },
          {
            "name": "mstime",
            "type": "__int32",
            "desc": "间隔时间(不变就说明卡屏了),不会卡主线程"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD识图.是否卡屏 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.是否卡屏 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.是否卡屏 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFP_IsDisplayDead"
      },
      {
        "id": "function_12",
        "name": "HD识图.获取区域图像CRC",
        "type": "函数",
        "description": "在客户区范围内获取像素CRC值,用于卡屏校验",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_GetRangeCRC(__int32 窗口序号,__int32 x,__int32 y,__int32 w,__int32 h);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "__int32",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "__int32",
            "desc": "矩形范围高度"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "json:",
          "{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":[{\\\\\"bRet\\\\\":%lld,\\\\\"info\\\\\":\\\"%X“,\\\\\"time\\\\\":%d}]}",
          "info字段是校验值4字节整数"
        ],
        "codeExamples": [
          {
            "title": "HD识图.获取区域图像CRC - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.获取区域图像CRC - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.获取区域图像CRC - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFP_GetRangeCRC"
      },
      {
        "id": "function_13",
        "name": "HD识图.单点找色从文件",
        "type": "函数",
        "description": "单点找色(从文件)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_FindColorByFile(__int32 窗口序号,char* orgImageName,__int32 x,__int32 y,__int32 w,__int32 h,char* deltaColor,doublesim,__int32 dirType=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "orgImageName",
            "type": "char*",
            "desc": "指定一张原图数据(支持绝对路径和相对路径)bmp图片文件"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "__int32",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "__int32",
            "desc": "矩形范围高度"
          },
          {
            "name": "deltaColor",
            "type": "char*",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          }
        ],
        "returnValue": "查看返回值表\n大于0表示:高4字节为x低4字节为y\njson:\\\"{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":ret,\\\"info\\\":\\\"X1,Y1\\\"}]}\\\",",
        "notes": [
          "注意返回值含义和XY值的提取"
        ],
        "codeExamples": [
          {
            "title": "HD识图.单点找色从文件 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.单点找色从文件 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.单点找色从文件 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFP_FindColorByFile"
      },
      {
        "id": "function_14",
        "name": "HD识图.单点找色从内存",
        "type": "函数",
        "description": "单点找色(从内存)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_FindColorByMem(__int32 窗口序号,BYTE* data,__int32 dataSize,__int32 x,__int32 y,__int32 w,__int32 h,char* deltaColor,doublesim,__int32 dirType=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "data",
            "type": "byte*",
            "desc": "Bmp图片字节数据缓冲区地址"
          },
          {
            "name": "dataSize",
            "type": "__int32",
            "desc": "Bmp图片字节大小"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "__int32",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "__int32",
            "desc": "矩形范围高度"
          },
          {
            "name": "deltaColor",
            "type": "char*",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          }
        ],
        "returnValue": "查看返回值表\n大于0表示:高4字节为x低4字节为y\njson:\\\"{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":ret,\\\"info\\\":\\\"X1,Y1\\\"}]}\\\",",
        "notes": [
          "注意返回值含义和XY值的提取",
          "图片内存缓冲区自己维护"
        ],
        "codeExamples": [
          {
            "title": "HD识图.单点找色从内存 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.单点找色从内存 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.单点找色从内存 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFP_FindColorByMem"
      },
      {
        "id": "function_15",
        "name": "HD识图.多点找色从文件",
        "type": "函数",
        "description": "多点找色(从文件)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_FindColorsByFile(__int32 窗口序号,char* orgImageName,__int32 x,__int32 y,__int32 w,__int32 h,char* deltaColor,doublesim,__int32 dirType=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "orgImageName",
            "type": "char*",
            "desc": "指定一张原图数据(支持绝对路径和相对路径)"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "__int32",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "__int32",
            "desc": "矩形范围高度"
          },
          {
            "name": "deltaColor",
            "type": "char*",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "json:",
          "{error:0,ret:[{bRet:1,info:结果}]}\\\"",
          "info格式->像素序号,x1,y1|像素序号,x2,y2"
        ],
        "codeExamples": [
          {
            "title": "HD识图.多点找色从文件 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.多点找色从文件 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.多点找色从文件 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFP_FindColorsByFile"
      },
      {
        "id": "function_16",
        "name": "HD识图.多点找色从内存",
        "type": "函数",
        "description": "多点找色(从内存)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_FindColorsByMem(__int32 窗口序号,BYTE* data,__int32 dataSize,__int32 x,__int32 y,__int32 w,__int32 h,char* deltaColor,doublesim,__int32 dirType=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "data",
            "type": "byte*",
            "desc": "Bmp图片字节数据缓冲区地址"
          },
          {
            "name": "dataSize",
            "type": "__int32",
            "desc": "Bmp图片字节大小"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "__int32",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "__int32",
            "desc": "矩形范围高度"
          },
          {
            "name": "deltaColor",
            "type": "char*",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "json:",
          "{error:0,ret:[{bRet:1,info:结果}]}\\\"",
          "info格式->像素序号,x1,y1|像素序号,x2,y2",
          "图片内存缓冲区自己维护"
        ],
        "codeExamples": [
          {
            "title": "HD识图.多点找色从内存 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.多点找色从内存 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.多点找色从内存 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFP_FindColorsByMem"
      },
      {
        "id": "function_17",
        "name": "HD识图.多点偏移找色从文件",
        "type": "函数",
        "description": "多点偏移找色(从文件)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_FindColorsOffsetByFile(__int32 窗口序号,char* orgImageName,__int32 x,__int32 y,__int32 w,__int32 h,char* firstDeltaColor,char* deltaColor,doublesim,__int32 bALL=0,__int32 dirType=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "orgImageName",
            "type": "char*",
            "desc": "指定一张原图数据(支持绝对路径和相对路径)"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "__int32",
            "desc": "宽度"
          },
          {
            "name": "h",
            "type": "__int32",
            "desc": "高度"
          },
          {
            "name": "firstDeltaColor",
            "type": "char*",
            "desc": "首色XXXXXX-YYYYYY格式"
          },
          {
            "name": "deltaColor",
            "type": "char*",
            "desc": "偏移色x1|y1|XXXXXX-YYYYYY|XXXXXX-YYYYYY|...,x2|y3|XXXXXX-YYYYYY|XXXXXX-YYYYYY|...,...格式"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "相似度"
          },
          {
            "name": "bALL",
            "type": "__int32",
            "desc": "是否全部找0表示找到一个就返回"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD识图.多点偏移找色从文件 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.多点偏移找色从文件 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.多点偏移找色从文件 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFP_FindColorsOffsetByFile"
      },
      {
        "id": "function_18",
        "name": "HD识图.多点偏移找色从内存",
        "type": "函数",
        "description": "多点偏移找色(从内存)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_FindColorsOffsetByMem(__int32 窗口序号,BYTE* data,__int32 dataSize,__int32 x,__int32 y,__int32 w,__int32 h,char* firstDeltaColor,char* deltaColor,doublesim,__int32 bALL=0,__int32 dirType=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "data",
            "type": "byte*",
            "desc": "Bmp图片字节数据缓冲区地址"
          },
          {
            "name": "dataSize",
            "type": "__int32",
            "desc": "Bmp图片字节大小"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "__int32",
            "desc": "宽度"
          },
          {
            "name": "h",
            "type": "__int32",
            "desc": "高度"
          },
          {
            "name": "firstDeltaColor",
            "type": "char*",
            "desc": "首色XXXXXX-YYYYYY格式"
          },
          {
            "name": "deltaColor",
            "type": "char*",
            "desc": "偏移色x1|y1|XXXXXX-YYYYYY|XXXXXX-YYYYYY|...,x2|y3|XXXXXX-YYYYYY|XXXXXX-YYYYYY|...,...格式"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "相似度"
          },
          {
            "name": "bALL",
            "type": "__int32",
            "desc": "是否全部找0表示找到一个就返回"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "图片内存缓冲区自己维护"
        ],
        "codeExamples": [
          {
            "title": "HD识图.多点偏移找色从内存 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.多点偏移找色从内存 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.多点偏移找色从内存 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFP_FindColorsOffsetByMem"
      },
      {
        "id": "function_19",
        "name": "HD识图.范围找图从文件",
        "type": "函数",
        "description": "在客户区范围内找图(从文件)(仅支持一个图片)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_FindPicByFile(__int32 窗口序号,char* orgImageName,__int32 x,__int32 y,__int32 w,__int32 h,char* 图片名字,char* deltaColor,doublesim,__int32 dirType=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "orgImageName",
            "type": "char*",
            "desc": "指定一张原图数据(支持绝对路径和相对路径)"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "__int32",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "__int32",
            "desc": "矩形范围高度"
          },
          {
            "name": "图片名字",
            "type": "char*",
            "desc": "一张图片(bmp)文件名字(路径调用HCRES_SetResPath全局设置)(支持绝对路径和相对路径)"
          },
          {
            "name": "deltaColor",
            "type": "char*",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          }
        ],
        "returnValue": "查看返回值表\n大于0表示:高4字节为x低4字节为y",
        "notes": [
          "注意返回值含义和xy值的提取",
          "{error:0,ret:[{bRet:NN,info:MM}]}",
          "图片索引,左上角X,左上角Y,宽度,高度|",
          "NN:返回值",
          "MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|"
        ],
        "codeExamples": [
          {
            "title": "HD识图.范围找图从文件 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.范围找图从文件 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.范围找图从文件 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFP_FindPicByFile"
      },
      {
        "id": "function_20",
        "name": "HD识图.范围找图从内存",
        "type": "函数",
        "description": "在客户区范围内找图(从内存)(仅支持一个图片)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_FindPicByMem(__int32 窗口序号,BYTE* data,__int32 dataSize,__int32 x,__int32 y,__int32 w,__int32 h,char* 图片名字,char* deltaColor,doublesim,__int32 dirType=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "data",
            "type": "byte*",
            "desc": "Bmp图片字节数据缓冲区地址"
          },
          {
            "name": "dataSize",
            "type": "__int32",
            "desc": "Bmp图片字节大小"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "__int32",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "__int32",
            "desc": "矩形范围高度"
          },
          {
            "name": "图片名字",
            "type": "char*",
            "desc": "一张图片(bmp)文件名字(路径调用HCRES_SetResPath全局设置)(支持绝对路径和相对路径)"
          },
          {
            "name": "deltaColor",
            "type": "char*",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          }
        ],
        "returnValue": "查看返回值表\n大于0表示:高4字节为x低4字节为y",
        "notes": [
          "注意返回值含义和xy值的提取",
          "图片内存缓冲区自己维护",
          "{error:0,ret:[{bRet:NN,info:MM}]}",
          "图片索引,左上角X,左上角Y,宽度,高度|",
          "NN:返回值",
          "MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|"
        ],
        "codeExamples": [
          {
            "title": "HD识图.范围找图从内存 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.范围找图从内存 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.范围找图从内存 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFP_FindPicByMem"
      },
      {
        "id": "function_21",
        "name": "HD识图.范围找图从文件Ex",
        "type": "函数",
        "description": "在客户区范围内找图(从文件)(找到一个图片就返回)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_FindPicExByFile(__int32 窗口序号,char* orgImageName,__int32 x,__int32 y,__int32 w,__int32 h,char* 图片名字集合,char* deltaColor,doublesim,__int32 dirType=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "orgImageName",
            "type": "char*",
            "desc": "指定一张原图数据(支持绝对路径和相对路径)"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "__int32",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "__int32",
            "desc": "矩形范围高度"
          },
          {
            "name": "图片名字集合",
            "type": "char*",
            "desc": "多张张图片(bmp)文件名字(不包含路径，路径调用HCRES_SetResPath全局设置),以'|'分隔开(支持绝对路径和相对路径)"
          },
          {
            "name": "deltaColor",
            "type": "char*",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          }
        ],
        "returnValue": "查看返回值表\n大于0表示:低4字节为x高4字节为y",
        "notes": [
          "注意返回值含义和xy值的提取",
          "返回json:",
          "{error:0,ret:[{bRet:NN,info:MM}]}",
          "图片索引,左上角X,左上角Y,宽度,高度|",
          "NN:返回值",
          "MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|"
        ],
        "codeExamples": [
          {
            "title": "HD识图.范围找图从文件Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.范围找图从文件Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.范围找图从文件Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFP_FindPicExByFile"
      },
      {
        "id": "function_22",
        "name": "HD识图.范围找图从内存Ex",
        "type": "函数",
        "description": "在客户区范围内找图(从内存)(找到一个图片就返回)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_FindPicExByMem(__int32 窗口序号,BYTE* data,__int32 dataSize,__int32 x,__int32 y,__int32 w,__int32 h,char* 图片名字集合,char* deltaColor,doublesim,__int32 dirType=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "data",
            "type": "byte*",
            "desc": "Bmp图片字节数据缓冲区地址"
          },
          {
            "name": "dataSize",
            "type": "__int32",
            "desc": "Bmp图片字节大小"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "__int32",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "__int32",
            "desc": "矩形范围高度"
          },
          {
            "name": "图片名字集合",
            "type": "char*",
            "desc": "多张张图片(bmp)文件名字(不包含路径，路径调用HCRES_SetResPath全局设置),以'|'分隔开(支持绝对路径和相对路径)"
          },
          {
            "name": "deltaColor",
            "type": "char*",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          }
        ],
        "returnValue": "查看返回值表\n大于0表示:低4字节为x高4字节为y",
        "notes": [
          "注意返回值含义和xy值的提取",
          "图片内存缓冲区自己维护",
          "返回json:",
          "{error:0,ret:[{bRet:NN,info:MM}]}",
          "图片索引,左上角X,左上角Y,宽度,高度|",
          "NN:返回值",
          "MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|"
        ],
        "codeExamples": [
          {
            "title": "HD识图.范围找图从内存Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.范围找图从内存Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.范围找图从内存Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFP_FindPicExByMem"
      },
      {
        "id": "function_23",
        "name": "HCFP_FindPicExxByFile",
        "type": "函数",
        "description": "在客户区范围内找图(从文件)(找全部图片信息坐标)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_FindPicExxByFile(__int32 窗口序号,char* orgImageName,__int32 x,__int32 y,__int32 w,__int32 h,char* 图片名字集合,char* deltaColor,doublesim,BOOL bAll=TRUE,__int32 dirType=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "orgImageName",
            "type": "char*",
            "desc": "指定一张原图数据(支持绝对路径和相对路径)"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "__int32",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "__int32",
            "desc": "矩形范围高度"
          },
          {
            "name": "图片名字集合",
            "type": "char*",
            "desc": "多张张图片(bmp)文件名字(不包含路径，路径调用HCRES_SetResPath全局设置),以'|'分隔开(支持绝对路径和相对路径)"
          },
          {
            "name": "deltaColor",
            "type": "char*",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "bAll",
            "type": "bool",
            "desc": "是否全部找如果不是表示每个图片只找一次就换下个图片"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          }
        ],
        "returnValue": "查看返回值表\n返回01错误值",
        "notes": [
          "注意返回值含义和xy值的提取",
          "返回json:",
          "{error:0,ret:[{bRet:NN,info:MM}]}",
          "图片索引,左上角X,左上角Y,宽度,高度|",
          "NN:返回值",
          "MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|"
        ],
        "codeExamples": [
          {
            "title": "HCFP_FindPicExxByFile - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCFP_FindPicExxByFile - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCFP_FindPicExxByFile - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_24",
        "name": "HCFP_FindPicExxByMem",
        "type": "函数",
        "description": "在客户区范围内找图(从内存)(找全部图片信息坐标)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_FindPicExxByMem(__int32 窗口序号,BYTE* data,__int32 dataSize,__int32 x,__int32 y,__int32 w,__int32 h,char* 图片名字集合,char* deltaColor,doublesim,BOOL bAll=TRUE,__int32 dirType=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "data",
            "type": "byte*",
            "desc": "Bmp图片字节数据缓冲区地址"
          },
          {
            "name": "dataSize",
            "type": "__int32",
            "desc": "Bmp图片字节大小"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "__int32",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "__int32",
            "desc": "矩形范围高度"
          },
          {
            "name": "图片名字集合",
            "type": "char*",
            "desc": "多张张图片(bmp)文件名字(不包含路径，路径调用HCRES_SetResPath全局设置),以'|'分隔开(支持绝对路径和相对路径)"
          },
          {
            "name": "deltaColor",
            "type": "char*",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "bAll",
            "type": "bool",
            "desc": "是否全部找如果不是表示每个图片只找一次就换下个图片"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          }
        ],
        "returnValue": "查看返回值表\n返回01错误值",
        "notes": [
          "注意返回值含义和xy值的提取",
          "图片内存缓冲区自己维护",
          "返回json:",
          "{error:0,ret:[{bRet:NN,info:MM}]}",
          "图片索引,左上角X,左上角Y,宽度,高度|</SPAN>",
          "NN:返回值",
          "MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|"
        ],
        "codeExamples": [
          {
            "title": "HCFP_FindPicExxByMem - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCFP_FindPicExxByMem - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCFP_FindPicExxByMem - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_25",
        "name": "HD识图.范围找图来源内存Ex",
        "type": "函数",
        "description": "在客户区范围内找图(子图从内存)(找到一个图片就返回)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_FindPicExFromMem(__int32 窗口序号,__int32 x,__int32 y,__int32 w,__int32 h,char* 子图内存地址集合字符串,char* deltaColor,doublesim,__int32 dirType=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "子图内存地址集合字符串",
            "type": "char*",
            "desc": "\\\"地址1,长度1|地址2,长度2|地址3,长度3\\\"地址和长度用十进制表示"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "__int32",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "__int32",
            "desc": "矩形范围高度"
          },
          {
            "name": "图片名字集合",
            "type": "",
            "desc": "多张张图片(bmp)文件名字(不包含路径，路径调用HCRES_SetResPath全局设置),以'|'分隔开(支持绝对路径和相对路径)"
          },
          {
            "name": "deltaColor",
            "type": "char*",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          }
        ],
        "returnValue": "查看返回值表\n大于0表示:低4字节为x高4字节为y",
        "notes": [
          "注意返回值含义和xy值的提取",
          "图片内存缓冲区自己维护",
          "返回json:",
          "{error:0,ret:[{bRet:NN,info:MM}]}",
          "图片索引,左上角X,左上角Y,宽度,高度|",
          "NN:返回值",
          "MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|"
        ],
        "codeExamples": [
          {
            "title": "HD识图.范围找图来源内存Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.范围找图来源内存Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.范围找图来源内存Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFP_FindPicExFromMem"
      },
      {
        "id": "function_26",
        "name": "HCFP_FindPicExxFromMem",
        "type": "函数",
        "description": "在客户区范围内找图(子图从内存)(找全部图片信息坐标)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_FindPicExxFromMem(__int32 窗口序号,__int32 x,__int32 y,__int32 w,__int32 h,char* 子图内存地址集合字符串,char* deltaColor,doublesim,BOOL bAll=TRUE,__int32 dirType=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "子图内存地址集合字符串",
            "type": "char*",
            "desc": "\\\"地址1,长度1|地址2,长度2|地址3,长度3\\\"地址和长度用十进制表示"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "__int32",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "__int32",
            "desc": "矩形范围高度"
          },
          {
            "name": "图片名字集合",
            "type": "",
            "desc": "多张张图片(bmp)文件名字(不包含路径，路径调用HCRES_SetResPath全局设置),以'|'分隔开(支持绝对路径和相对路径)"
          },
          {
            "name": "deltaColor",
            "type": "char*",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "bAll",
            "type": "bool",
            "desc": "是否全部找如果不是表示每个图片只找一次就换下个图片"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          }
        ],
        "returnValue": "查看返回值表\n返回01错误值",
        "notes": [
          "注意返回值含义和xy值的提取",
          "图片内存缓冲区自己维护",
          "返回json:",
          "{error:0,ret:[{bRet:NN,info:MM}]}",
          "图片索引,左上角X,左上角Y,宽度,高度|",
          "NN:返回值",
          "MM:index1,x1,y1,w1,h1|index2,x2,y2,w3,h3|index3,x3,y3,w3,h3|含义:图片索引(0开始),左上角X,左上角Y,宽度,高度|"
        ],
        "codeExamples": [
          {
            "title": "HCFP_FindPicExxFromMem - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCFP_FindPicExxFromMem - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCFP_FindPicExxFromMem - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_27",
        "name": "HD识图.比较颜色从文件",
        "type": "函数",
        "description": "比较颜色(从文件)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_CmpColorsByFile(__int32 窗口序号,char* orgImageName,__int32 x,__int32 y,char* deltaColor);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "orgImageName",
            "type": "char*",
            "desc": "指定一张原图数据(支持绝对路径和相对路径)"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "deltaColor",
            "type": "char*",
            "desc": "XXXXXX-YYYYYY格式"
          }
        ],
        "returnValue": "查看返回值表\n1找到\n0未找到",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD识图.比较颜色从文件 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.比较颜色从文件 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.比较颜色从文件 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFP_CmpColorsByFile"
      },
      {
        "id": "function_28",
        "name": "HD识图.比较颜色从内存",
        "type": "函数",
        "description": "比较颜色(从内存)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_CmpColorsByMem(__int32 窗口序号,BYTE* data,__int32 dataSize,__int32 x,__int32 y,char* deltaColor);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "data",
            "type": "byte*",
            "desc": "Bmp图片字节数据缓冲区地址"
          },
          {
            "name": "dataSize",
            "type": "__int32",
            "desc": "Bmp图片字节大小"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "deltaColor",
            "type": "char*",
            "desc": "XXXXXX-YYYYYY格式"
          }
        ],
        "returnValue": "查看返回值表\n1找到\n0未找到",
        "notes": [
          "图片内存缓冲区自己维护"
        ],
        "codeExamples": [
          {
            "title": "HD识图.比较颜色从内存 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.比较颜色从内存 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.比较颜色从内存 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFP_CmpColorsByMem"
      },
      {
        "id": "function_29",
        "name": "HD识图.比较颜色从文件Ex",
        "type": "函数",
        "description": "多点找色确定某个图像块,指定多个具体点,从文件",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_CmpColorExsByFile(__int32 窗口序号,char* orgImageName,char* deltaXYColor);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "orgImageName",
            "type": "char*",
            "desc": "指定一张原图数据(支持绝对路径和相对路径)"
          },
          {
            "name": "deltaXYColor",
            "type": "char*",
            "desc": "x1|y1|e3e6eb-101010|e3e6eb-101010|e3e6eb-101010|...,x2|y2|e3e6eb-101010|e3e6eb-101010|e3e6eb-101010|..."
          }
        ],
        "returnValue": "查看返回值表\n找到返回8字节长整数包含第一个坐标点x1,y1低4字节x1高4字节y1\n未找到返回0或者小于0\njson:\\\"{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":ret,\\\"info\\\":”X1,Y1“}]}\\\",",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD识图.比较颜色从文件Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.比较颜色从文件Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.比较颜色从文件Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFP_CmpColorExsByFile"
      },
      {
        "id": "function_30",
        "name": "HD识图.比较颜色从内存Ex",
        "type": "函数",
        "description": "多点找色确定某个图像块,指定多个具体点,从内存",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_CmpColorExsByMem(__int32 窗口序号,BYTE* data,__int32 dataSize,char* deltaXYColor);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "data",
            "type": "byte*",
            "desc": "Bmp图片字节数据缓冲区地址"
          },
          {
            "name": "dataSize",
            "type": "__int32",
            "desc": "Bmp图片字节大小"
          },
          {
            "name": "deltaXYColor",
            "type": "char*",
            "desc": "x1|y1|e3e6eb-101010|e3e6eb-101010|e3e6eb-101010|...,x2|y2|e3e6eb-101010|e3e6eb-101010|e3e6eb-101010|..."
          }
        ],
        "returnValue": "查看返回值表\n找到返回8字节长整数包含第一个坐标点x1,y1低4字节x1高4字节y1\n未找到返回0或者小于0\njson:\\\"{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":ret,\\\"info\\\":”X1,Y1“}]}\\\",",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD识图.比较颜色从内存Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.比较颜色从内存Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.比较颜色从内存Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFP_CmpColorExsByMem"
      },
      {
        "id": "function_31",
        "name": "HD识图.获取颜色从文件",
        "type": "函数",
        "description": "获取颜色(从文件)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_GetColorByFile(__int32 窗口序号,char* orgImageName,__int32 x,__int32 y);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "orgImageName",
            "type": "char*",
            "desc": "指定一张原图数据(支持绝对路径和相对路径)"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "注意返回值含义和值的提取",
          "#pragmapack(1)typedefstructMYA8R8G8B8{BYTEm_a;\\n0x00BYTEm_r;\\n低8位BYTEm_g;\\n中8位BYTEm_b;\\n高8位MYA8R8G8B8(){m_a=0;m_r=0;m_g=0;m_b=0;}}MYA8R8G8B8;",
          "#pragmapack()",
          "json:",
          "“{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"info\\\":\\\"44,29,5B\\\"}]}”A(0x00)rgbr红色:低8位g绿色:中8位b蓝色:高8位RGBFFFFFF"
        ],
        "codeExamples": [
          {
            "title": "HD识图.获取颜色从文件 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.获取颜色从文件 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.获取颜色从文件 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFP_GetColorByFile"
      },
      {
        "id": "function_32",
        "name": "HD识图.获取颜色从内存",
        "type": "函数",
        "description": "获取颜色(从内存)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFP_GetColorByMem(__int32 窗口序号,BYTE* data,__int32 dataSize,__int32 x,__int32 y);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "data",
            "type": "byte*",
            "desc": "Bmp图片字节数据缓冲区地址"
          },
          {
            "name": "dataSize",
            "type": "__int32",
            "desc": "Bmp图片字节大小"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "图片内存缓冲区自己维护",
          "注意返回值含义和值的提取",
          "#pragmapack(1)typedefstructMYA8R8G8B8{BYTEm_a;\\n0x00BYTEm_r;\\n低8位BYTEm_g;\\n中8位BYTEm_b;\\n高8位MYA8R8G8B8(){m_a=0;m_r=0;m_g=0;m_b=0;}}MYA8R8G8B8;",
          "#pragmapack()",
          "json:",
          "“{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"info\\\":\\\"44,29,5B\\\"}]}”A(0x00)rgbr红色:低8位g绿色:中8位b蓝色:高8位RGBFFFFFF"
        ],
        "codeExamples": [
          {
            "title": "HD识图.获取颜色从内存 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.获取颜色从内存 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识图.获取颜色从内存 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFP_GetColorByMem"
      }
    ]
  },
  {
    "id": "category_27",
    "name": "找字模块(FS)",
    "functions": [
      {
        "id": "function_1",
        "name": "HD识字.设置字库",
        "type": "函数",
        "description": "设置当前像素识字的字库文件(为了提高识别效率,不支持多线程)\n建议在登录回调中最开始初始化调用\n其他线程需要那个序号就切换那个序号HCFS_SwitchCurDictFile\n调用一次会给所有窗口序号添加当前设置的字库文件",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFS_SetDictFile(__int32 窗口序号,__int32 字库序号,char* file);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号"
          },
          {
            "name": "字库序号",
            "type": "__int32",
            "desc": "字库序号自定义整数类型枚举类型宏定义不要小于0！！小于0用于错误返回值"
          },
          {
            "name": "file",
            "type": "char*",
            "desc": "字库文件名字(可以加路径)最后寻找路径"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径",
          "设置后会自动解析文件字库数据",
          "设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突",
          "这个不支持多线程,请在开启前首先设置好",
          "类型提前添加字库,需要在当前线程使用字库必须调用HCFS_SwitchCurDictFile切换字库",
          "字库文件绑定窗口序号字库序号绑定线程窗口序号支持多线程多进程来操作目标进程可以在多线程中通过窗口序号拿到所有绑定的字库文件信息至于在多线程中要使用的是哪一个字库文件？取决于当前线程所绑定的字库序号",
          "总结:1.所有字库文件只需要和窗口序号关联一次就行\\n2.在多线程中需要使用到那个字库序号就切换就行多线程有自己的字库序号副本互不影响各自切换"
        ],
        "codeExamples": [
          {
            "title": "HD识字.设置字库 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.设置字库 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.设置字库 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFS_SetDictFile"
      },
      {
        "id": "function_2",
        "name": "HD识字.设置字库Ex",
        "type": "函数",
        "description": "设置当前像素识字的字库文件(为了提高识别效率,不支持多线程)\n请在主线程中最开始初始化调用\n其他线程需要那个序号就切换那个序号HCFS_SwitchCurDictFile\n调用一次会给所有窗口序号添加当前设置的字库文件",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFS_SetDictFileEx(__int32 字库序号,char* file);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "",
            "desc": "窗口序号"
          },
          {
            "name": "字库序号",
            "type": "__int32",
            "desc": "字库序号自定义整数类型枚举类型宏定义不要小于0！！小于0用于错误返回值"
          },
          {
            "name": "file",
            "type": "char*",
            "desc": "字库文件名字(可以加路径)最后寻找路径"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径",
          "设置后会自动解析文件字库数据",
          "设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突",
          "这个不支持多线程,请在开启前首先设置好",
          "类型提前添加字库,需要在当前线程使用字库必须调用HCFS_SwitchCurDictFile切换字库"
        ],
        "codeExamples": [
          {
            "title": "HD识字.设置字库Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.设置字库Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.设置字库Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFS_SetDictFileEx"
      },
      {
        "id": "function_3",
        "name": "HD识字.设置字库Exx",
        "type": "函数",
        "description": "设置当前像素识字的字库文件(为了提高识别效率,不支持多线程)\n建议在登录回调中最开始初始化调用\n其他线程需要那个序号就切换那个序号HCFS_SwitchCurDictFile\n调用一次会给所有窗口序号添加当前设置的字库文件",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFS_SetDictFileExx(__int32 窗口序号,__int32 字库序号,char* file,char* password=NULL);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号"
          },
          {
            "name": "字库序号",
            "type": "__int32",
            "desc": "字库序号自定义整数类型枚举类型宏定义不要小于0！！小于0用于错误返回值"
          },
          {
            "name": "file",
            "type": "char*",
            "desc": "字库文件名字(可以加路径)最后寻找路径"
          },
          {
            "name": "password",
            "type": "char*",
            "desc": "密码使用综合工具进行加密"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径",
          "设置后会自动解析文件字库数据",
          "设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突",
          "这个不支持多线程,请在开启前首先设置好",
          "类型提前添加字库,需要在当前线程使用字库必须调用HCFS_SwitchCurDictFile切换字库",
          "字库文件绑定窗口序号字库序号绑定线程窗口序号支持多线程多进程来操作目标进程可以在多线程中通过窗口序号拿到所有绑定的字库文件信息至于在多线程中要使用的是哪一个字库文件？取决于当前线程所绑定的字库序号",
          "总结:1.所有字库文件只需要和窗口序号关联一次就行\\n2.在多线程中需要使用到那个字库序号就切换就行多线程有自己的字库序号副本互不影响各自切换"
        ],
        "codeExamples": [
          {
            "title": "HD识字.设置字库Exx - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.设置字库Exx - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.设置字库Exx - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFS_SetDictFileExx"
      },
      {
        "id": "function_4",
        "name": "HD识字.切换字库序号",
        "type": "函数",
        "description": "切换当前像素识字的字库文件(支持多线程)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFS_SwitchCurDictFile(__int32 窗口序号,__int32 字库序号);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号"
          },
          {
            "name": "字库序号",
            "type": "__int32",
            "desc": "字库序号自定义整数类型枚举类型宏定义"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径",
          "设置后会自动解析文件字库数据",
          "设置字库文件初始化要全部设置好",
          "运行起来了就不能设置否则冲突",
          "切换字库文件可以在运行的时候切换,而HCFS_SetDictFile设置字库文件必须在初始化阶段中进行！",
          "对于多线程操作同一个窗口序号的时候,切换字库支持多线程操作,操作前请先在主执行线程中设置字库就行其他副线程(包含主线程)就只需要切换就行"
        ],
        "codeExamples": [
          {
            "title": "HD识字.切换字库序号 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.切换字库序号 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.切换字库序号 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFS_SwitchCurDictFile"
      },
      {
        "id": "function_5",
        "name": "HD识字.获取当前字库",
        "type": "函数",
        "description": "获取当前线程的加载后的字库文件信息(支持多线程)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFS_GetCurDictInfo(__int32 窗口序号);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "json:",
          "\\\"{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":ret,\\\"info\\\":info}]}\\\"",
          "info:窗口索引,当前字库索引,加载了字库文件数量,(加载的字库序号,对应的字条数目)|...如:info:0,1,3,(1,55)|(2,55)|(3,55)|",
          "注意返回的是当前线程的字库信息"
        ],
        "codeExamples": [
          {
            "title": "HD识字.获取当前字库 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.获取当前字库 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.获取当前字库 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFS_GetCurDictInfo"
      },
      {
        "id": "function_6",
        "name": "HD识字.获取当前字库序号",
        "type": "函数",
        "description": "获取当前线程绑定的字库索引(支持多线程)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFS_GetCurDictIndex(__int32 窗口序号);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "返回大于等于0的值是当前线程绑定的字库索引"
        ],
        "codeExamples": [
          {
            "title": "HD识字.获取当前字库序号 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.获取当前字库序号 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.获取当前字库序号 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFS_GetCurDictIndex"
      },
      {
        "id": "function_7",
        "name": "HD识字.单字符找字",
        "type": "函数",
        "description": "在客户区范围内找字(只支持单字符串并且是单字符字库)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFS_FindStr(__int32 窗口序号,longfindX,longfindY,longfindW,longfindH,LPCSTRstr,LPCSTRdeltaColor,doublesim,longbfx,__int32 dirType=0,int spaceH=11,int spaceV=11,doublegroundRate=0.1,BOOL bOne11=TRUE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "x",
            "type": "",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "int",
            "desc": "矩形范围高度"
          },
          {
            "name": "str",
            "type": "",
            "desc": "需要找找的字符串"
          },
          {
            "name": "deltaColor",
            "type": "",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "bfx",
            "type": "",
            "desc": "是否开启反向相似度(开启更精准,但是对于一些小范围的可能会过滤掉,一般开启就行)"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          },
          {
            "name": "spaceH",
            "type": "int",
            "desc": "字体水平间距默认11像素参考"
          },
          {
            "name": "spaceV",
            "type": "int",
            "desc": "字体垂直间距默认11像素参考"
          },
          {
            "name": "groundRate",
            "type": "",
            "desc": "一个字的周围占比默认0.1参考"
          },
          {
            "name": "bOne11",
            "type": "bool",
            "desc": "一个字是否独占11像素默认真/TREU/开启参考"
          }
        ],
        "returnValue": "查看返回值表\n大于0表示:高4字节为y低4字节为x",
        "notes": [
          "字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径",
          "设置后会自动解析文件字库数据",
          "设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突",
          "json:",
          "{error:0,ret:[{bRet:1,info:识字结果}]}\\\"",
          "info格式->0,x1,y1,w1,h1,sim",
          "字库格式:（兼容大漠插件字库文件）",
          "3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库",
          "009813FE7FC008$1$0.0.23$9----》单字符字库"
        ],
        "codeExamples": [
          {
            "title": "HD识字.单字符找字 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.单字符找字 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.单字符找字 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFS_FindStr"
      },
      {
        "id": "function_8",
        "name": "HD识字.单字符找字Ex",
        "type": "函数",
        "description": "在客户区范围内找字(支持多字符串并且是单字符字库)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFS_FindStrEx(__int32 窗口序号,longfindX,longfindY,longfindW,longfindH,LPCSTRstr,LPCSTRdeltaColor,doublesim,longbfx,__int32 dirType=0,int spaceH=11,int spaceV=11,doublegroundRate=0.1,BOOL bOne11=TRUE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "x",
            "type": "",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "int",
            "desc": "矩形范围高度"
          },
          {
            "name": "str",
            "type": "",
            "desc": "需要找找的字符串支持多字符串例如"
          },
          {
            "name": "deltaColor",
            "type": "",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "bfx",
            "type": "",
            "desc": "是否开启反向相似度(开启更精准,但是对于一些小范围的可能会过滤掉,一般开启就行)"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          },
          {
            "name": "spaceH",
            "type": "int",
            "desc": "字体水平间距默认11像素参考"
          },
          {
            "name": "spaceV",
            "type": "int",
            "desc": "字体垂直间距默认11像素参考"
          },
          {
            "name": "groundRate",
            "type": "",
            "desc": "一个字的周围占比默认0.1参考"
          },
          {
            "name": "bOne11",
            "type": "bool",
            "desc": "一个字是否独占11像素默认真/TREU/开启参考"
          }
        ],
        "returnValue": "查看返回值表\n字符串用HCEnv_GetRetJson获取",
        "notes": [
          "字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径",
          "设置后会自动解析文件字库数据",
          "设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突",
          "json:",
          "{error:0,ret:[{bRet:1,info:识字结果}]}\\\"",
          "info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim",
          "字库格式:（兼容大漠插件字库文件）",
          "3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库",
          "009813FE7FC008$1$0.0.23$9----》单字符字库"
        ],
        "codeExamples": [
          {
            "title": "HD识字.单字符找字Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.单字符找字Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.单字符找字Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFS_FindStrEx"
      },
      {
        "id": "function_9",
        "name": "HD识字.单字符找字Exx",
        "type": "函数",
        "description": "在客户区范围内找字(支持多字符串并且是单字符字库)找到一个就返回",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFS_FindStrExx(__int32 窗口序号,longfindX,longfindY,longfindW,longfindH,LPCSTRstr,LPCSTRdeltaColor,doublesim,longbfx,__int32 dirType=0,int spaceH=11,int spaceV=11,doublegroundRate=0.1,BOOL bOne11=TRUE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "x",
            "type": "",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "int",
            "desc": "矩形范围高度"
          },
          {
            "name": "str",
            "type": "",
            "desc": "需要找找的字符串支持多字符串例如"
          },
          {
            "name": "deltaColor",
            "type": "",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "bfx",
            "type": "",
            "desc": "是否开启反向相似度(开启更精准,但是对于一些小范围的可能会过滤掉,一般开启就行)"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          },
          {
            "name": "spaceH",
            "type": "int",
            "desc": "字体水平间距默认11像素参考"
          },
          {
            "name": "spaceV",
            "type": "int",
            "desc": "字体垂直间距默认11像素参考"
          },
          {
            "name": "groundRate",
            "type": "",
            "desc": "一个字的周围占比默认0.1参考"
          },
          {
            "name": "bOne11",
            "type": "bool",
            "desc": "一个字是否独占11像素默认真/TREU/开启参考"
          }
        ],
        "returnValue": "查看返回值表\n字符串用HCEnv_GetRetJson获取\n大于0表示:高4字节为x低4字节为y同时字符串信息存在json中",
        "notes": [
          "字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径",
          "设置后会自动解析文件字库数据",
          "设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突",
          "json:",
          "{error:0,ret:[{bRet:1,info:识字结果}]}\\\"",
          "info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim",
          "字库格式:（兼容大漠插件字库文件）",
          "3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库",
          "009813FE7FC008$1$0.0.23$9----》单字符字库"
        ],
        "codeExamples": [
          {
            "title": "HD识字.单字符找字Exx - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.单字符找字Exx - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.单字符找字Exx - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFS_FindStrExx"
      },
      {
        "id": "function_10",
        "name": "HD识字.列表单列找字从文件",
        "type": "函数",
        "description": "单字符串找(原图从文件)\n字库是字符串\n例如:洛阳多行返回多个坐标一行只找一列(一次)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFS_FindStrMutilVPointsByFile(__int32 窗口序号,longfindX,longfindY,longfindW,longfindH,LPCSTRstr,LPCSTRcolor_format,doublesim,LPCSTRiamgeName,__int32 bfx,__int32 dirType=0,int spaceH=11,int spaceV=11,doublegroundRate=0.1,BOOL bOne11=TRUE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "int",
            "desc": "矩形范围高度"
          },
          {
            "name": "str",
            "type": "",
            "desc": "需要找找的字符串"
          },
          {
            "name": "color_format",
            "type": "",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "iamgeName",
            "type": "",
            "desc": "bmp图片名字,支持加路径,不加路径则在全局路径找,图片后缀不要省略(支持绝对路径和相对路径)"
          },
          {
            "name": "bfx",
            "type": "__int32",
            "desc": "是否开启反向相似度(开启更精准,但是对于一些小范围的可能会过滤掉,一般开启就行)"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          },
          {
            "name": "spaceH",
            "type": "int",
            "desc": "字体水平间距默认11像素参考"
          },
          {
            "name": "spaceV",
            "type": "int",
            "desc": "字体垂直间距默认11像素参考"
          },
          {
            "name": "groundRate",
            "type": "",
            "desc": "一个字的周围占比默认0.1参考"
          },
          {
            "name": "bOne11",
            "type": "bool",
            "desc": "一个字是否独占11像素默认真/TREU/开启参考"
          }
        ],
        "returnValue": "查看返回值表\n大于0表示:找到的数量",
        "notes": [
          "字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径",
          "设置后会自动解析文件字库数据",
          "设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突",
          "json:",
          "{error:0,ret:[{bRet:1,info:识字结果}]}\\\"",
          "info格式->0,x1,y1,w,h,sim|0,x2,y2,w,h,sim|0,x3,y2,w,h,sim|...",
          "字库格式:（兼容大漠插件字库文件）",
          "3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库",
          "009813FE7FC008$1$0.0.23$9----》单字符字库"
        ],
        "codeExamples": [
          {
            "title": "HD识字.列表单列找字从文件 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.列表单列找字从文件 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.列表单列找字从文件 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFS_FindStrMutilVPointsByFile"
      },
      {
        "id": "function_11",
        "name": "HD识字.列表单列找字从内存",
        "type": "函数",
        "description": "单字符串找(原图从内存)\n字库是字符串\n例如:洛阳多行返回多个坐标一行只找一列(一次)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFS_FindStrMutilVPointsByMem(__int32 窗口序号,longfindX,longfindY,longfindW,longfindH,LPCSTRstr,LPCSTRcolor_format,doublesim,BYTE* data,__int32 dataSize,__int32 bfx,__int32 dirType=0,int spaceH=11,int spaceV=11,doublegroundRate=0.1,BOOL bOne11=TRUE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "int",
            "desc": "矩形范围高度"
          },
          {
            "name": "str",
            "type": "",
            "desc": "需要找找的字符串"
          },
          {
            "name": "color_format",
            "type": "",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "data",
            "type": "byte*",
            "desc": "bmp图片格式的二进制内存数据首地址"
          },
          {
            "name": "dataSize",
            "type": "__int32",
            "desc": "图片数据大小"
          },
          {
            "name": "bfx",
            "type": "__int32",
            "desc": "是否开启反向相似度(开启更精准,但是对于一些小范围的可能会过滤掉,一般开启就行)"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          },
          {
            "name": "spaceH",
            "type": "int",
            "desc": "字体水平间距默认11像素参考"
          },
          {
            "name": "spaceV",
            "type": "int",
            "desc": "字体垂直间距默认11像素参考"
          },
          {
            "name": "groundRate",
            "type": "",
            "desc": "一个字的周围占比默认0.1参考"
          },
          {
            "name": "bOne11",
            "type": "bool",
            "desc": "一个字是否独占11像素默认真/TREU/开启参考"
          }
        ],
        "returnValue": "查看返回值表\n大于0表示:找到的数量",
        "notes": [
          "字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径",
          "设置后会自动解析文件字库数据",
          "设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突",
          "json:",
          "{error:0,ret:[{bRet:1,info:识字结果}]}\\\"",
          "info格式->0,x1,y1,w,h,sim|0,x2,y2,w,h,sim|0,x3,y2,w,h,sim|...",
          "字库格式:（兼容大漠插件字库文件）",
          "3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库",
          "009813FE7FC008$1$0.0.23$9----》单字符字库"
        ],
        "codeExamples": [
          {
            "title": "HD识字.列表单列找字从内存 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.列表单列找字从内存 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.列表单列找字从内存 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFS_FindStrMutilVPointsByMem"
      },
      {
        "id": "function_12",
        "name": "HD识字.列表多列找字从文件",
        "type": "函数",
        "description": "单字符串找(原图从文件)\n字库是字符串\n例如:洛阳多行多列返回多个坐标\n一行找多列(多次)找多行",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表\n大于0表示:找到的数量",
        "notes": [
          "字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径",
          "设置后会自动解析文件字库数据",
          "设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突",
          "json:",
          "{error:0,ret:[{bRet:1,info:识字结果}]}\\\"",
          "info格式->0,x1,y1,w,h,sim|0,x2,y2,w,h,sim|0,x3,y2,w,h,sim|...",
          "字库格式:（兼容大漠插件字库文件）",
          "3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库",
          "009813FE7FC008$1$0.0.23$9----》单字符字库"
        ],
        "codeExamples": [
          {
            "title": "HD识字.列表多列找字从文件 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.列表多列找字从文件 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.列表多列找字从文件 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFS_FindStrMutilHVPointsByFile"
      },
      {
        "id": "function_13",
        "name": "HD识字.列表多列找字从内存",
        "type": "函数",
        "description": "单字符串找(原图从内存)\n字库是字符串\n例如:洛阳多行多列返回多个坐标\n一行找多列(多次)找多行",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表\n大于0表示:找到的数量",
        "notes": [
          "字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径",
          "设置后会自动解析文件字库数据",
          "设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突",
          "json:",
          "{error:0,ret:[{bRet:1,info:识字结果}]}\\\"",
          "info格式->0,x1,y1,w,h,sim|0,x2,y2,w,h,sim|0,x3,y2,w,h,sim|...",
          "字库格式:（兼容大漠插件字库文件）",
          "3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库",
          "009813FE7FC008$1$0.0.23$9----》单字符字库"
        ],
        "codeExamples": [
          {
            "title": "HD识字.列表多列找字从内存 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.列表多列找字从内存 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.列表多列找字从内存 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFS_FindStrMutilHVPointsByMem"
      },
      {
        "id": "function_14",
        "name": "HD识字.自动识字",
        "type": "函数",
        "description": "单/多字符串找都兼容|分割\n字库是字符串或单字\n找到一个就返回",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFS_FindStrMutilsAuto(__int32 窗口序号,longfindX,longfindY,longfindW,longfindH,LPCSTRstrs,LPCSTRcolor_format,doublesim,longbfx,__int32 dirType=0,int spaceH=11,int spaceV=11,doublegroundRate=0.1,BOOL bOne11=TRUE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "x",
            "type": "",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "int",
            "desc": "矩形范围高度"
          },
          {
            "name": "str",
            "type": "",
            "desc": "需要找找的字符串支持多字符串例如"
          },
          {
            "name": "deltaColor",
            "type": "",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "bfx",
            "type": "",
            "desc": "是否开启反向相似度(开启更精准,但是对于一些小范围的可能会过滤掉,一般开启就行)"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          },
          {
            "name": "spaceH",
            "type": "int",
            "desc": "字体水平间距默认11像素参考"
          },
          {
            "name": "spaceV",
            "type": "int",
            "desc": "字体垂直间距默认11像素参考"
          },
          {
            "name": "groundRate",
            "type": "",
            "desc": "一个字的周围占比默认0.1参考"
          },
          {
            "name": "bOne11",
            "type": "bool",
            "desc": "一个字是否独占11像素默认真/TREU/开启参考"
          }
        ],
        "returnValue": "查看返回值表\nMAKEXYWHTO8(fx1,fy1,w,h);\n字符串用HCEnv_GetRetJson获取",
        "notes": [
          "单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理",
          "字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径",
          "设置后会自动解析文件字库数据",
          "设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突",
          "json:",
          "{error:0,ret:[{bRet:1,info:识字结果}]}\\\"",
          "info格式->字符串序号(0开始),x1,y1,w,h,sim",
          "字库格式:（兼容大漠插件字库文件）",
          "3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库",
          "009813FE7FC008$1$0.0.23$9----》单字符字库"
        ],
        "codeExamples": [
          {
            "title": "HD识字.自动识字 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.自动识字 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.自动识字 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFS_FindStrMutilsAuto"
      },
      {
        "id": "function_15",
        "name": "HD识字.自动识字从文件",
        "type": "函数",
        "description": "单/多字符串找都兼容|分割\n字库是字符串或单字\n找到一个就返回\n可以通过指定图片来获取截图数据其他功能和HCFS_FindStrMutilsAuto一致",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFS_FindStrMutilsAutoByFile(__int32 窗口序号,longfindX,longfindY,longfindW,longfindH,LPCSTRstrs,LPCSTRcolor_format,doublesim,LPCSTRiamgeName,longbfx,__int32 dirType=0,int spaceH=11,int spaceV=11,doublegroundRate=0.1,BOOL bOne11=TRUE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "x",
            "type": "",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "int",
            "desc": "矩形范围高度"
          },
          {
            "name": "str",
            "type": "",
            "desc": "需要找找的字符串支持多字符串例如"
          },
          {
            "name": "deltaColor",
            "type": "",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "iamgeName",
            "type": "",
            "desc": "bmp图片名字,支持加路径,不加路径则在全局路径找,图片后缀不要省略(支持绝对路径和相对路径)"
          },
          {
            "name": "bfx",
            "type": "",
            "desc": "是否开启反向相似度(开启更精准,但是对于一些小范围的可能会过滤掉,一般开启就行)"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          },
          {
            "name": "spaceH",
            "type": "int",
            "desc": "字体水平间距默认11像素参考"
          },
          {
            "name": "spaceV",
            "type": "int",
            "desc": "字体垂直间距默认11像素参考"
          },
          {
            "name": "groundRate",
            "type": "",
            "desc": "一个字的周围占比默认0.1参考"
          },
          {
            "name": "bOne11",
            "type": "bool",
            "desc": "一个字是否独占11像素默认真/TREU/开启参考"
          }
        ],
        "returnValue": "查看返回值表\nMAKEXYWHTO8(fx1,fy1,w,h);\n字符串用HCEnv_GetRetJson获取",
        "notes": [
          "单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理",
          "字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径",
          "设置后会自动解析文件字库数据",
          "设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突",
          "json:",
          "{error:0,ret:[{bRet:1,info:识字结果}]}\\\"",
          "info格式->字符串序号,x1,y1,w,h,sim",
          "字库格式:（兼容大漠插件字库文件）",
          "3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库",
          "009813FE7FC008$1$0.0.23$9----》单字符字库"
        ],
        "codeExamples": [
          {
            "title": "HD识字.自动识字从文件 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.自动识字从文件 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.自动识字从文件 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFS_FindStrMutilsAutoByFile"
      },
      {
        "id": "function_16",
        "name": "HD识字.自动识字从内存",
        "type": "函数",
        "description": "单/多字符串找都兼容|分割\n字库是字符串或单字\n找到一个就返回\n可以通过指定图片来获取截图数据其他功能和HCFS_FindStrMutilsAuto一致",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFS_FindStrMutilsAutoByMem(__int32 窗口序号,longfindX,longfindY,longfindW,longfindH,LPCSTRstrs,LPCSTRcolor_format,doublesim,BYTE* data,__int32 dataSize,__int32 bfx,__int32 dirType=0,int spaceH=11,int spaceV=11,doublegroundRate=0.1,BOOL bOne11=TRUE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "int",
            "desc": "矩形范围高度"
          },
          {
            "name": "str",
            "type": "",
            "desc": "需要找找的字符串支持多字符串例如"
          },
          {
            "name": "deltaColor",
            "type": "",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "data",
            "type": "byte*",
            "desc": "bmp图片格式的二进制内存数据首地址"
          },
          {
            "name": "dataSize",
            "type": "__int32",
            "desc": "图片数据大小"
          },
          {
            "name": "bfx",
            "type": "__int32",
            "desc": "是否开启反向相似度(开启更精准,但是对于一些小范围的可能会过滤掉,一般开启就行)"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          },
          {
            "name": "spaceH",
            "type": "int",
            "desc": "字体水平间距默认11像素参考"
          },
          {
            "name": "spaceV",
            "type": "int",
            "desc": "字体垂直间距默认11像素参考"
          },
          {
            "name": "groundRate",
            "type": "",
            "desc": "一个字的周围占比默认0.1参考"
          },
          {
            "name": "bOne11",
            "type": "bool",
            "desc": "一个字是否独占11像素默认真/TREU/开启参考"
          }
        ],
        "returnValue": "查看返回值表\nMAKEXYWHTO8(fx1,fy1,w,h);\n字符串用HCEnv_GetRetJson获取",
        "notes": [
          "单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理",
          "字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径",
          "设置后会自动解析文件字库数据",
          "设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突",
          "json:",
          "{error:0,ret:[{bRet:1,info:识字结果}]}\\\"",
          "info格式->字符串序号,x1,y1,w,h,sim",
          "字库格式:（兼容大漠插件字库文件）",
          "3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库",
          "009813FE7FC008$1$0.0.23$9----》单字符字库"
        ],
        "codeExamples": [
          {
            "title": "HD识字.自动识字从内存 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.自动识字从内存 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.自动识字从内存 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFS_FindStrMutilsAutoByMem"
      },
      {
        "id": "function_17",
        "name": "HD识字.自动识字Ex",
        "type": "函数",
        "description": "单/多字符串找都兼容|分割\n字库是字符串或单字\n找到全部或仅仅找一个",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFS_FindStrMutilsAutoEx(__int32 窗口序号,longfindX,longfindY,longfindW,longfindH,LPCSTRstrs,LPCSTRcolor_format,doublesim,longbfx,__int32 dirType=0,__int32 bFindOne=0,int spaceH=11,int spaceV=11,doublegroundRate=0.1,BOOL bOne11=TRUE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "x",
            "type": "",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "int",
            "desc": "矩形范围高度"
          },
          {
            "name": "str",
            "type": "",
            "desc": "需要找找的字符串支持多字符串例如"
          },
          {
            "name": "deltaColor",
            "type": "",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "bfx",
            "type": "",
            "desc": "是否开启反向相似度(开启更精准,但是对于一些小范围的可能会过滤掉,一般开启就行)"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          },
          {
            "name": "bFindOne",
            "type": "__int32",
            "desc": "是否找到一个就返回"
          },
          {
            "name": "spaceH",
            "type": "int",
            "desc": "字体水平间距默认11像素参考"
          },
          {
            "name": "spaceV",
            "type": "int",
            "desc": "字体垂直间距默认11像素参考"
          },
          {
            "name": "groundRate",
            "type": "",
            "desc": "一个字的周围占比默认0.1参考"
          },
          {
            "name": "bOne11",
            "type": "bool",
            "desc": "一个字是否独占11像素默认真/TREU/开启参考"
          }
        ],
        "returnValue": "查看返回值表\nMAKEXYWHTO8(fx1,fy1,w,h);\n字符串用HCEnv_GetRetJson获取",
        "notes": [
          "单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理",
          "字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径",
          "设置后会自动解析文件字库数据",
          "设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突",
          "json:",
          "{error:0,ret:[{bRet:1,info:识字结果}]}\\\"",
          "info格式->字符串序号(0开始),x1,y1,w,h,sim",
          "字库格式:（兼容大漠插件字库文件）",
          "3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库",
          "009813FE7FC008$1$0.0.23$9----》单字符字库"
        ],
        "codeExamples": [
          {
            "title": "HD识字.自动识字Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.自动识字Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.自动识字Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFS_FindStrMutilsAutoEx"
      },
      {
        "id": "function_18",
        "name": "HD识字.自动识字从文件Ex",
        "type": "函数",
        "description": "单/多字符串找都兼容|分割\n字库是字符串或单字\n找到全部或仅仅找一个\n可以通过指定图片来获取截图数据其他功能和HCFS_FindStrMutilsAuto一致",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFS_FindStrMutilsAutoByFileEx(__int32 窗口序号,longfindX,longfindY,longfindW,longfindH,LPCSTRstrs,LPCSTRcolor_format,doublesim,LPCSTRiamgeName,longbfx,__int32 dirType=0,__int32 bFindOne=0,int spaceH=11,int spaceV=11,doublegroundRate=0.1,BOOL bOne11=TRUE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "x",
            "type": "",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "int",
            "desc": "矩形范围高度"
          },
          {
            "name": "str",
            "type": "",
            "desc": "需要找找的字符串支持多字符串例如"
          },
          {
            "name": "deltaColor",
            "type": "",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "iamgeName",
            "type": "",
            "desc": "bmp图片名字,支持加路径,不加路径则在全局路径找,图片后缀不要省略(支持绝对路径和相对路径)"
          },
          {
            "name": "bfx",
            "type": "",
            "desc": "是否开启反向相似度(开启更精准,但是对于一些小范围的可能会过滤掉,一般开启就行)"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          },
          {
            "name": "bFindOne",
            "type": "__int32",
            "desc": "是否找到一个就返回"
          },
          {
            "name": "spaceH",
            "type": "int",
            "desc": "字体水平间距默认11像素参考"
          },
          {
            "name": "spaceV",
            "type": "int",
            "desc": "字体垂直间距默认11像素参考"
          },
          {
            "name": "groundRate",
            "type": "",
            "desc": "一个字的周围占比默认0.1参考"
          },
          {
            "name": "bOne11",
            "type": "bool",
            "desc": "一个字是否独占11像素默认真/TREU/开启参考"
          }
        ],
        "returnValue": "查看返回值表\nMAKEXYWHTO8(fx1,fy1,w,h);\n字符串用HCEnv_GetRetJson获取",
        "notes": [
          "单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理",
          "字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径",
          "设置后会自动解析文件字库数据",
          "设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突",
          "json:",
          "{error:0,ret:[{bRet:1,info:识字结果}]}\\\"",
          "info格式->字符串序号,x1,y1,w,h,sim",
          "字库格式:（兼容大漠插件字库文件）",
          "3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库",
          "009813FE7FC008$1$0.0.23$9----》单字符字库"
        ],
        "codeExamples": [
          {
            "title": "HD识字.自动识字从文件Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.自动识字从文件Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.自动识字从文件Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFS_FindStrMutilsAutoByFileEx"
      },
      {
        "id": "function_19",
        "name": "HD识字.自动识字从内存Ex",
        "type": "函数",
        "description": "单/多字符串找都兼容|分割\n字库是字符串或单字\n找到全部或仅仅找一个\n可以通过指定图片来获取截图数据其他功能和HCFS_FindStrMutilsAuto一致",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFS_FindStrMutilsAutoByMemEx(__int32 窗口序号,longfindX,longfindY,longfindW,longfindH,LPCSTRstrs,LPCSTRcolor_format,doublesim,BYTE* data,__int32 dataSize,__int32 bfx,__int32 dirType=0,__int32 bFindOne=0,int spaceH=11,int spaceV=11,doublegroundRate=0.1,BOOL bOne11=TRUE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "int",
            "desc": "矩形范围高度"
          },
          {
            "name": "str",
            "type": "",
            "desc": "需要找找的字符串支持多字符串例如"
          },
          {
            "name": "deltaColor",
            "type": "",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "data",
            "type": "byte*",
            "desc": "bmp图片格式的二进制内存数据首地址"
          },
          {
            "name": "dataSize",
            "type": "__int32",
            "desc": "图片数据大小"
          },
          {
            "name": "bfx",
            "type": "__int32",
            "desc": "是否开启反向相似度(开启更精准,但是对于一些小范围的可能会过滤掉,一般开启就行)"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          },
          {
            "name": "bFindOne",
            "type": "__int32",
            "desc": "是否找到一个就返回默认0表示全部找"
          },
          {
            "name": "spaceH",
            "type": "int",
            "desc": "字体水平间距默认11像素参考"
          },
          {
            "name": "spaceV",
            "type": "int",
            "desc": "字体垂直间距默认11像素参考"
          },
          {
            "name": "groundRate",
            "type": "",
            "desc": "一个字的周围占比默认0.1参考"
          },
          {
            "name": "bOne11",
            "type": "bool",
            "desc": "一个字是否独占11像素默认真/TREU/开启参考"
          }
        ],
        "returnValue": "查看返回值表\nMAKEXYWHTO8(fx1,fy1,w,h);\n字符串用HCEnv_GetRetJson获取",
        "notes": [
          "单多字符串找都兼容|分割找到一个就返回字库是字符串或单字判断规则:拼接+完整1.有完整先识别完整2.无完整按拼接处理3.有分隔符|,统一按完整字符串处理",
          "字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径",
          "设置后会自动解析文件字库数据",
          "设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突",
          "json:",
          "{error:0,ret:[{bRet:1,info:识字结果}]}\\\"",
          "info格式->字符串序号,x1,y1,w,h,sim",
          "字库格式:（兼容大漠插件字库文件）",
          "3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库",
          "009813FE7FC008$1$0.0.23$9----》单字符字库"
        ],
        "codeExamples": [
          {
            "title": "HD识字.自动识字从内存Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.自动识字从内存Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.自动识字从内存Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFS_FindStrMutilsAutoByMemEx"
      },
      {
        "id": "function_20",
        "name": "HD识字.多字符识字",
        "type": "函数",
        "description": "单字符串找字库是字符串例如:洛阳",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFS_FindStrMutil(__int32 窗口序号,longfindX,longfindY,longfindW,longfindH,LPCSTRstr,LPCSTRcolor_format,doublesim,longbfx,__int32 dirType=0,int spaceH=11,int spaceV=11,doublegroundRate=0.1,BOOL bOne11=TRUE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "x",
            "type": "",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "int",
            "desc": "矩形范围高度"
          },
          {
            "name": "str",
            "type": "",
            "desc": "需要找找的字符串"
          },
          {
            "name": "color_format",
            "type": "",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "bfx",
            "type": "",
            "desc": "是否开启反向相似度(开启更精准,但是对于一些小范围的可能会过滤掉,一般开启就行)"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          },
          {
            "name": "spaceH",
            "type": "int",
            "desc": "字体水平间距默认11像素参考"
          },
          {
            "name": "spaceV",
            "type": "int",
            "desc": "字体垂直间距默认11像素参考"
          },
          {
            "name": "groundRate",
            "type": "",
            "desc": "一个字的周围占比默认0.1参考"
          },
          {
            "name": "bOne11",
            "type": "bool",
            "desc": "一个字是否独占11像素默认真/TREU/开启参考"
          }
        ],
        "returnValue": "查看返回值表\nMAKEXYWHTO8(fx1,fy1,w,h);",
        "notes": [
          "字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径",
          "设置后会自动解析文件字库数据",
          "设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突",
          "在客户区范围内找字符串(只支持单字符串),同时字库是字符串",
          "json:",
          "{error:0,ret:[{bRet:1,info:识字结果}]}\\\"",
          "info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim",
          "字库格式:（兼容大漠插件字库文件）",
          "3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库",
          "009813FE7FC008$1$0.0.23$9----》单字符字库"
        ],
        "codeExamples": [
          {
            "title": "HD识字.多字符识字 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.多字符识字 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.多字符识字 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFS_FindStrMutil"
      },
      {
        "id": "function_21",
        "name": "HD识字.多字符识字Ex",
        "type": "函数",
        "description": "多字符串找字库是字符串例如:洛阳|北京|广州",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFS_FindStrMutilsEx(__int32 窗口序号,longfindX,longfindY,longfindW,longfindH,LPCSTRstr,LPCSTRcolor_format,doublesim,longbfx,__int32 dirType=0,int spaceH=11,int spaceV=11,doublegroundRate=0.1,BOOL bOne11=TRUE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "x",
            "type": "",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "int",
            "desc": "矩形范围高度"
          },
          {
            "name": "str",
            "type": "",
            "desc": "需要找找的字符串"
          },
          {
            "name": "color_format",
            "type": "",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "bfx",
            "type": "",
            "desc": "是否开启反向相似度(开启更精准,但是对于一些小范围的可能会过滤掉,一般开启就行)"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          },
          {
            "name": "spaceH",
            "type": "int",
            "desc": "字体水平间距默认11像素参考"
          },
          {
            "name": "spaceV",
            "type": "int",
            "desc": "字体垂直间距默认11像素参考"
          },
          {
            "name": "groundRate",
            "type": "",
            "desc": "一个字的周围占比默认0.1参考"
          },
          {
            "name": "bOne11",
            "type": "bool",
            "desc": "一个字是否独占11像素默认真/TREU/开启参考"
          }
        ],
        "returnValue": "查看返回值表\nMAKEXYWHTO8(fx1,fy1,w,h);",
        "notes": [
          "字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径",
          "在客户区范围内找字符串(只支持单字符串),同时字库是字符串",
          "json:",
          "{error:0,ret:[{bRet:1,info:识字结果}]}\\\"",
          "info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim",
          "字库格式:（兼容大漠插件字库文件）",
          "3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库",
          "009813FE7FC008$1$0.0.23$9----》单字符字库"
        ],
        "codeExamples": [
          {
            "title": "HD识字.多字符识字Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.多字符识字Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.多字符识字Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFS_FindStrMutilsEx"
      },
      {
        "id": "function_22",
        "name": "HCFS_FindStrMutilsExx",
        "type": "函数",
        "description": "多字符串找字库是字符串例如:洛阳|北京|广州找到一个就返回",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFS_FindStrMutilsExx(__int32 窗口序号,longfindX,longfindY,longfindW,longfindH,LPCSTRstr,LPCSTRcolor_format,doublesim,longbfx,__int32 dirType=0,int spaceH=11,int spaceV=11,doublegroundRate=0.1,BOOL bOne11=TRUE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "x",
            "type": "",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "int",
            "desc": "矩形范围高度"
          },
          {
            "name": "str",
            "type": "",
            "desc": "需要找找的字符串"
          },
          {
            "name": "color_format",
            "type": "",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "bfx",
            "type": "",
            "desc": "是否开启反向相似度(开启更精准,但是对于一些小范围的可能会过滤掉,一般开启就行)"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          },
          {
            "name": "spaceH",
            "type": "int",
            "desc": "字体水平间距默认11像素参考"
          },
          {
            "name": "spaceV",
            "type": "int",
            "desc": "字体垂直间距默认11像素参考"
          },
          {
            "name": "groundRate",
            "type": "",
            "desc": "一个字的周围占比默认0.1参考"
          },
          {
            "name": "bOne11",
            "type": "bool",
            "desc": "一个字是否独占11像素默认真/TREU/开启参考"
          }
        ],
        "returnValue": "查看返回值表\nMAKEXYWHTO8(fx1,fy1,w,h);",
        "notes": [
          "字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径",
          "在客户区范围内找字符串(只支持单字符串),同时字库是字符串",
          "json:",
          "{error:0,ret:[{bRet:1,info:识字结果}]}\\\"",
          "info格式->字符串序号,x1,y1,w1,h1,sim|字符串序号,x2,y2,w2,h2,sim",
          "字库格式:（兼容大漠插件字库文件）",
          "3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库",
          "009813FE7FC008$1$0.0.23$9----》单字符字库"
        ],
        "codeExamples": [
          {
            "title": "HCFS_FindStrMutilsExx - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCFS_FindStrMutilsExx - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCFS_FindStrMutilsExx - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_23",
        "name": "HD识字.Ocr",
        "type": "函数",
        "description": "在客户区范围内识别字\n字库是字符串或单字\n拼接+字符串都支持",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFS_Ocr(__int32 窗口序号,longfindX,longfindY,longfindW,longfindH,LPCSTRdeltaColor,doublesim,longbfx,__int32 dirType=0,int spaceH=11,int spaceV=11,doublegroundRate=0.1,BOOL bOne11=TRUE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "x",
            "type": "",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "int",
            "desc": "矩形范围高度"
          },
          {
            "name": "deltaColor",
            "type": "",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "bfx",
            "type": "",
            "desc": "是否开启反向相似度(开启更精准,但是对于一些小范围的可能会过滤掉,一般开启就行)"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          },
          {
            "name": "spaceH",
            "type": "int",
            "desc": "字体水平间距默认11像素参考"
          },
          {
            "name": "spaceV",
            "type": "int",
            "desc": "字体垂直间距默认11像素参考"
          },
          {
            "name": "groundRate",
            "type": "",
            "desc": "一个字的周围占比默认0.1参考"
          },
          {
            "name": "bOne11",
            "type": "bool",
            "desc": "一个字是否独占11像素默认真/TREU/开启参考"
          }
        ],
        "returnValue": "查看返回值表\n字符串用HCEnv_GetRetJson获取",
        "notes": [
          "字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径",
          "设置后会自动解析文件字库数据",
          "设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突",
          "json:",
          "{\\\"error\\\":0,\\\"ret\\\":AAA,\\\"info\\\":BBB}",
          "AAA:0未找到1找到",
          "BBB:json数组如:[{\\\"x\\\":0,\\\"y\\\":0,\\\"text\\\":“NULL”}]表示未找到类似这样[{\\\"x\\\":123,\\\"y\\\":456,\\\"text\\\":\\\"洛阳\\\"},{\\\"x\\\":654,\\\"y\\\":987,\\\"text\\\":\\\"洱海\\\"}]表示找到了",
          "格式化字符串:",
          "未找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":[{\\\\\"x\\\\\":0,\\\\\"y\\\\\":0,\\\\\"text\\\\\":\\\\\"NULL\\\\\"}]}\\\"",
          "找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":%s}\\\"",
          "字库格式:（兼容大漠插件字库文件）",
          "3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库",
          "009813FE7FC008$1$0.0.23$9----》单字符字库"
        ],
        "codeExamples": [
          {
            "title": "HD识字.Ocr - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.Ocr - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.Ocr - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFS_Ocr"
      },
      {
        "id": "function_24",
        "name": "HD识字.Ocr从文件",
        "type": "函数",
        "description": "在客户区范围内识别字\n字库是字符串或单字\n拼接+字符串都支持",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFS_OcrByFile(__int32 窗口序号,longfindX,longfindY,longfindW,longfindH,LPCSTRcolor_format,doublesim,LPCSTRiamgeName,__int32 bfx,__int32 dirType=0,int spaceH=11,int spaceV=11,doublegroundRate=0.1,BOOL bOne11=TRUE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "int",
            "desc": "矩形范围高度"
          },
          {
            "name": "deltaColor",
            "type": "",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "iamgeName",
            "type": "",
            "desc": "指定一张识字的图片文件(.bmp),支持加路径,不加路径则在全局路径找,图片后缀不要省略(支持绝对路径和相对路径)"
          },
          {
            "name": "bfx",
            "type": "__int32",
            "desc": "是否开启反向相似度(开启更精准,但是对于一些小范围的可能会过滤掉,一般开启就行)"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          },
          {
            "name": "spaceH",
            "type": "int",
            "desc": "字体水平间距默认11像素参考"
          },
          {
            "name": "spaceV",
            "type": "int",
            "desc": "字体垂直间距默认11像素参考"
          },
          {
            "name": "groundRate",
            "type": "",
            "desc": "一个字的周围占比默认0.1参考"
          },
          {
            "name": "bOne11",
            "type": "bool",
            "desc": "一个字是否独占11像素默认真/TREU/开启参考"
          }
        ],
        "returnValue": "查看返回值表\n字符串用HCEnv_GetRetJson获取",
        "notes": [
          "字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径",
          "设置后会自动解析文件字库数据",
          "设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突",
          "json:",
          "{\\\"error\\\":0,\\\"ret\\\":AAA,\\\"info\\\":BBB}",
          "AAA:0未找到1找到",
          "BBB:json数组如:[{\\\"x\\\":0,\\\"y\\\":0,\\\"text\\\":“NULL”}]表示未找到类似这样[{\\\"x\\\":123,\\\"y\\\":456,\\\"text\\\":\\\"洛阳\\\"},{\\\"x\\\":654,\\\"y\\\":987,\\\"text\\\":\\\"洱海\\\"}]表示找到了",
          "格式化字符串:",
          "未找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":[{\\\\\"x\\\\\":0,\\\\\"y\\\\\":0,\\\\\"text\\\\\":\\\\\"NULL\\\\\"}]}\\\"",
          "找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":%s}\\\"",
          "字库格式:（兼容大漠插件字库文件）",
          "3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库",
          "009813FE7FC008$1$0.0.23$9----》单字符字库"
        ],
        "codeExamples": [
          {
            "title": "HD识字.Ocr从文件 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.Ocr从文件 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.Ocr从文件 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFS_OcrByFile"
      },
      {
        "id": "function_25",
        "name": "HD识字.Ocr从内存",
        "type": "函数",
        "description": "在客户区范围内识别字\n字库是字符串或单字\n拼接+字符串都支持",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFS_OcrByMem(__int32 窗口序号,longfindX,longfindY,longfindW,longfindH,LPCSTRcolor_format,doublesim,BYTE* data,__int32 dataSize,__int32 bfx,__int32 dirType=0,int spaceH=11,int spaceV=11,doublegroundRate=0.1,BOOL bOne11=TRUE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)0表示全局全屏识别"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "矩形范围左上角x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "矩形范围左上角y"
          },
          {
            "name": "w",
            "type": "",
            "desc": "矩形范围宽度"
          },
          {
            "name": "h",
            "type": "int",
            "desc": "矩形范围高度"
          },
          {
            "name": "deltaColor",
            "type": "",
            "desc": "偏色(如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "整个像素矩阵的相似度"
          },
          {
            "name": "data",
            "type": "byte*",
            "desc": "bmp图片格式的二进制内存数据首地址"
          },
          {
            "name": "dataSize",
            "type": "__int32",
            "desc": "图片数据大小"
          },
          {
            "name": "bfx",
            "type": "__int32",
            "desc": "是否开启反向相似度(开启更精准,但是对于一些小范围的可能会过滤掉,一般开启就行)"
          },
          {
            "name": "dirType",
            "type": "__int32",
            "desc": "排序类型/方向类型排序/方向类型"
          },
          {
            "name": "spaceH",
            "type": "int",
            "desc": "字体水平间距默认11像素参考"
          },
          {
            "name": "spaceV",
            "type": "int",
            "desc": "字体垂直间距默认11像素参考"
          },
          {
            "name": "groundRate",
            "type": "",
            "desc": "一个字的周围占比默认0.1参考"
          },
          {
            "name": "bOne11",
            "type": "bool",
            "desc": "一个字是否独占11像素默认真/TREU/开启参考"
          }
        ],
        "returnValue": "查看返回值表\n字符串用HCEnv_GetRetJson获取",
        "notes": [
          "字库文件会在资源路径下寻找，还需要调用HCRES_SetResPath设置路径",
          "设置后会自动解析文件字库数据",
          "设置字库文件初始化要全部设置好运行起来了就不能设置否则冲突",
          "json:",
          "{\\\"error\\\":0,\\\"ret\\\":AAA,\\\"info\\\":BBB}",
          "AAA:0未找到1找到",
          "BBB:json数组如:[{\\\"x\\\":0,\\\"y\\\":0,\\\"text\\\":“NULL”}]表示未找到类似这样[{\\\"x\\\":123,\\\"y\\\":456,\\\"text\\\":\\\"洛阳\\\"},{\\\"x\\\":654,\\\"y\\\":987,\\\"text\\\":\\\"洱海\\\"}]表示找到了",
          "格式化字符串:",
          "未找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":[{\\\\\"x\\\\\":0,\\\\\"y\\\\\":0,\\\\\"text\\\\\":\\\\\"NULL\\\\\"}]}\\\"",
          "找到:\\\"{\\\\\"error\\\\\":0,\\\\\"ret\\\\\":%lld,\\\\\"info\\\\\":%s}\\\"",
          "字库格式:（兼容大漠插件字库文件）",
          "3FE7FCD9FFFFFE7FCFFBFFFFF98FFFB1E0001C0FFFFFE707E1EC398FFFFFCCC198130$邮件$0.0.196$13----》字符串字库",
          "009813FE7FC008$1$0.0.23$9----》单字符字库"
        ],
        "codeExamples": [
          {
            "title": "HD识字.Ocr从内存 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.Ocr从内存 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.Ocr从内存 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFS_OcrByMem"
      },
      {
        "id": "function_26",
        "name": "HD识字.设置水平垂直间距",
        "type": "函数",
        "description": "设置间距(在识别拼接字和OCR中尤其重要)-丢弃改为每个接口单独设置",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFS_SetCharSpaceHV(int lenH=11,int lenV=11);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "lenH",
            "type": "int",
            "desc": "水平方向的间距默认11像素"
          },
          {
            "name": "lenV",
            "type": "int",
            "desc": "垂直方向的间距默认11像素"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "1.当相邻的字/数字/字母/符号,在间距范围内,才被认为是一个整体(字符串)",
          "2.不明白什么是水平垂直间距请前往查看水平垂直间距解析和案例分析",
          "3.这种对于数字和符号,尤其重要"
        ],
        "codeExamples": [
          {
            "title": "HD识字.设置水平垂直间距 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.设置水平垂直间距 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.设置水平垂直间距 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFS_SetCharSpaceHV"
      },
      {
        "id": "function_27",
        "name": "HD识字.设置11",
        "type": "函数",
        "description": "设置11行中(同宽)矩形内,是否只有一个字-丢弃改为每个接口单独设置",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFS_IsOne11(BOOL b=TRUE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "b",
            "type": "bool",
            "desc": "是否打开默认打开"
          }
        ],
        "returnValue": "查看返回值表\n返回当前开关状态0/1",
        "notes": [
          "1.如果打开识别速度快,关闭速度慢一点(不影响多少)",
          "2.如果这个i这个字,由2个字符组成'.'和'|'",
          "3.如果打开表示i是一个整体识别,不能拆开识别",
          "4.如果关闭表示i可以拆分成2个字符分别识别"
        ],
        "codeExamples": [
          {
            "title": "HD识字.设置11 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.设置11 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.设置11 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFS_IsOne11"
      },
      {
        "id": "function_28",
        "name": "HD识字.设置周围占比",
        "type": "函数",
        "description": "设置字周围一个像素上下左右的像素占比-丢弃改为每个接口单独设置",
        "prototypes": [
          {
            "prototype": "double__stdcall HCFS_GroundRate(doublerate=0.1);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "rate",
            "type": "",
            "desc": "占比分别是4个方向的上下左右"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "1.对于那种连体字的情况下占比越高,可能识别的不准确2.这个相当于一个容错率占比3.返回当前设置后的占比4.默认0.1",
          "5.这种对于数字和符号,尤其重要,可以准确的提高识别率,越小的字效果越好"
        ],
        "codeExamples": [
          {
            "title": "HD识字.设置周围占比 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.设置周围占比 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD识字.设置周围占比 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFS_GroundRate"
      }
    ]
  },
  {
    "id": "category_28",
    "name": "智能识图模块(FI)",
    "functions": [
      {
        "id": "function_1",
        "name": "HCFI_FindImage",
        "type": "函数",
        "description": "识图(返回的是圆型的圆点)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFI_FindImageA(__int32 窗口序号,char* 图片名字集合,doublesim=0.8,BOOL 是否灰度图=FALSE,BOOL 是否打开查看器=FALSE);__int64 __stdcall HCFI_FindImageW(__int32 窗口序号,wchar_t* 图片名字集合,doublesim=0.8,BOOL 是否灰度图=FALSE,BOOL 是否打开查看器=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "图片名字集合",
            "type": "char*",
            "desc": "如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "相似度0-1"
          },
          {
            "name": "是否灰度图",
            "type": "bool",
            "desc": "是否灰度图一般开启就行"
          },
          {
            "name": "是否打开查看器",
            "type": "bool",
            "desc": "是否打开"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "图片越多耗时多长",
          "json:",
          "{\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x\\\":XX,\\\"y\\\":YY},{\\\"x\\\":XX,\\\"y\\\":YY},{\\\"x\\\":XX,\\\"y\\\":YY}],\\\"time\\\":ZZZ}",
          "每张图会有1个坐标点(圆点)",
          "AAA:表示找到几个XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置"
        ],
        "codeExamples": [
          {
            "title": "HCFI_FindImage - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCFI_FindImage - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCFI_FindImage - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_2",
        "name": "HCFI_FindImageEx",
        "type": "函数",
        "description": "识图(返回的是矩形左上角和右下角)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFI_FindImageExA(__int32 窗口序号,char* 图片名字集合,doublesim=0.8,BOOL 是否灰度图=FALSE,BOOL 是否打开查看器=FALSE);__int64 __stdcall HCFI_FindImageExW(__int32 窗口序号,wchar_t* 图片名字集合,doublesim=0.8,BOOL 是否灰度图=FALSE,BOOL 是否打开查看器=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "图片名字集合",
            "type": "char*",
            "desc": "如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "相似度0-1"
          },
          {
            "name": "是否灰度图",
            "type": "bool",
            "desc": "是否灰度图一般开启就行"
          },
          {
            "name": "是否打开查看器",
            "type": "bool",
            "desc": "是否打开"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "图片越多耗时多长",
          "json:",
          "{\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY},{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY}],\\\"time\\\":ZZZ}",
          "每张图会有2个坐标点(左上角+右下角)",
          "AAA:表示找到几个XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置"
        ],
        "codeExamples": [
          {
            "title": "HCFI_FindImageEx - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCFI_FindImageEx - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCFI_FindImageEx - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_3",
        "name": "HCFI_FindRangeImage",
        "type": "函数",
        "description": "范围内识图",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFI_FindRangeImageA(__int32 窗口序号,__int32 x,__int32 y,__int32 w,__int32 h,char* 图片名字集合,__int32 type=0,doublesim=0.8,BOOL 是否灰度图=FALSE,BOOL 是否打开查看器=FALSE);__int64 __stdcall HCFI_FindRangeImageW(__int32 窗口序号,__int32 x,__int32 y,__int32 w,__int32 h,wchar_t* 图片名字集合,__int32 type=0,doublesim=0.8,BOOL 是否灰度图=FALSE,BOOL 是否打开查看器=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "x,y,w,h",
            "type": "__int32",
            "desc": "左上角+高度+宽度"
          },
          {
            "name": "图片名字集合",
            "type": "char*",
            "desc": "如"
          },
          {
            "name": "type",
            "type": "__int32",
            "desc": "0表示返回圆点1表示返回矩形左上角和右下角"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "相似度0-1"
          },
          {
            "name": "是否灰度图",
            "type": "bool",
            "desc": "是否灰度图一般开启就行"
          },
          {
            "name": "是否打开查看器",
            "type": "bool",
            "desc": "是否打开"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "图片越多耗时多长",
          "json:",
          "{\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x\\\":XX,\\\"y\\\":YY},{\\\"x\\\":XX,\\\"y\\\":YY},{\\\"x\\\":XX,\\\"y\\\":YY}]}type==0</STRONG>",
          "每张图会有1个坐标点(圆点)",
          "{\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY},{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY}]}type==1</STRONG>",
          "每张图会有2个坐标点(左上角+右下角)",
          "AAA:表示找到几个XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置"
        ],
        "codeExamples": [
          {
            "title": "HCFI_FindRangeImage - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCFI_FindRangeImage - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCFI_FindRangeImage - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_4",
        "name": "HD智能识图.Tem找图从文件",
        "type": "函数",
        "description": "从文件中加载截图数据并识图(返回的是矩形左上角和右下角)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFI_FindImageByFile(__int32 窗口序号,char* 原图名字,char* 子图片名字集合,doublesim=0.9,BOOL 是否灰度图=FALSE,BOOL 是否打开查看器=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "原图名字",
            "type": "char*",
            "desc": "指定一张原图文件名(支持绝对路径和相对路径)"
          },
          {
            "name": "图片名字集合",
            "type": "char*",
            "desc": "如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "相似度0-1"
          },
          {
            "name": "是否灰度图",
            "type": "bool",
            "desc": "是否灰度图一般开启就行"
          },
          {
            "name": "是否打开查看器",
            "type": "bool",
            "desc": "是否打开"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "图片越多耗时多长",
          "json:",
          "{\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY},{\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY}],\\\"time\\\":ZZZ}",
          "每张图会有2个坐标点(左上角+右下角)",
          "AAA:表示找到几个XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0max:置信度time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置"
        ],
        "codeExamples": [
          {
            "title": "HD智能识图.Tem找图从文件 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD智能识图.Tem找图从文件 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD智能识图.Tem找图从文件 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFI_FindImageByFile"
      },
      {
        "id": "function_5",
        "name": "HD智能识图.Tem找图从内存",
        "type": "函数",
        "description": "从内存中加载截图数据并识图(返回的是矩形左上角和右下角)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCFI_FindImageByMem(__int32 窗口序号,BYTE* data,__int32 dataSize,char* 子图片名字集合,doublesim=0.8,BOOL 是否灰度图=FALSE,BOOL 是否打开查看器=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "data",
            "type": "byte*",
            "desc": "Bmp图片字节数据缓冲区地址"
          },
          {
            "name": "dataSize",
            "type": "__int32",
            "desc": "Bmp图片字节大小"
          },
          {
            "name": "图片名字集合",
            "type": "char*",
            "desc": "如"
          },
          {
            "name": "sim",
            "type": "",
            "desc": "相似度0-1"
          },
          {
            "name": "是否灰度图",
            "type": "bool",
            "desc": "是否灰度图一般开启就行"
          },
          {
            "name": "是否打开查看器",
            "type": "bool",
            "desc": "是否打开"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "图片越多耗时多长",
          "json:",
          "{\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"i\\\":index,\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY\\\"max\\\":0.0f},{\\\"i\\\":index,\\\"x1\\\":XX,\\\"y1\\\":YY,\\\"x2\\\":XX,\\\"y2\\\":YY\\\"max\\\":0.0f}]}每张图对应会有图片索引+2个坐标点(左上角+右下角)+置信度(max)index:图片集合指定的索引(0开始)如:\\\"洛阳.bmp|洱海.bmp|\\\"(洛阳.bmp)索引就是0AAA:表示找到几个(真正的找到数量)XX:X坐标YY:Y坐标XX或YY:-1图片打不开-2未找到匹配点-3匹配点小于0max:置信度time:毫秒耗时data:是一个json数组,每一个元素是一个XY坐标分别对应图片路径参数的位置"
        ],
        "codeExamples": [
          {
            "title": "HD智能识图.Tem找图从内存 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD智能识图.Tem找图从内存 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD智能识图.Tem找图从内存 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCFI_FindImageByMem"
      }
    ]
  },
  {
    "id": "category_29",
    "name": "智能识字模块(RC)",
    "functions": [
      {
        "id": "function_1",
        "name": "HCRC_InitRCServer",
        "type": "函数",
        "description": "初始化识别服务器",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCRC_InitRCServer(__int32 窗口序号,char* 语言库名字);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "语言库名字",
            "type": "char*",
            "desc": "在全局语言路径中找指定的语言库名字"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HCRC_InitRCServer - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCRC_InitRCServer - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCRC_InitRCServer - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_2",
        "name": "HCRC_OpenRCServer",
        "type": "函数",
        "description": "打开识别服务器",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCRC_OpenRCServer(__int32 窗口序号);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HCRC_OpenRCServer - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCRC_OpenRCServer - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCRC_OpenRCServer - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_3",
        "name": "HCRC_StopRCServer",
        "type": "函数",
        "description": "停止识别服务器",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCRC_StopRCServer(__int32 窗口序号);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HCRC_StopRCServer - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCRC_StopRCServer - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCRC_StopRCServer - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_4",
        "name": "HCRC_SwitchRCServer",
        "type": "函数",
        "description": "切换识字服务:主要针对语言字体文件的切换",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCRC_SwitchRCServer(__int32 窗口序号,char* 语言库名字);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "语言库名字",
            "type": "char*",
            "desc": "在全局语言路径中找指定的语言库名字"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "内部实现原理:先停止之前的服务(HCRC_StopRCServer)重新初始化(HCRC_InitRCServer)然后重新开启(HCRC_OpenRCServer)"
        ],
        "codeExamples": [
          {
            "title": "HCRC_SwitchRCServer - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCRC_SwitchRCServer - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCRC_SwitchRCServer - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_5",
        "name": "HCRC_RecognitionChar",
        "type": "函数",
        "description": "智能识字",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCRC_RecognitionCharA(__int32 窗口序号,char* 图片名字,int 二值化阈值=127,int 置信度=80,BOOL 开启灰度图=TRUE,BOOL 是否打开查看器=FALSE);__int64 __stdcall HCRC_RecognitionCharW(__int32 窗口序号,wchar_t* 图片名字,int 二值化阈值=127,int 置信度=80,BOOL 开启灰度图=TRUE,BOOL 是否打开查看器=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "图片名字",
            "type": "char*",
            "desc": "图片名字(支持绝对路径和相对路径)"
          },
          {
            "name": "二值化阈值",
            "type": "int",
            "desc": "0-255范围内指定,一般中间就合适,默认127,工具的裁剪功能上可以实时编辑查看,确定阈值后填写"
          },
          {
            "name": "置信度",
            "type": "int",
            "desc": "0-100值越高越精准"
          },
          {
            "name": "开启灰度图",
            "type": "bool",
            "desc": "再原有二值化上先灰度图再二值化,如果为假表示不灰度图直接再原图的基础上二值化"
          },
          {
            "name": "是否打开查看器",
            "type": "bool",
            "desc": "是否打开查看器"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "json:",
          "{\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"image\\\":XXX},{\\\"image\\\":YYY}],\\\"time\\\":ZZZ}XXX->图片识别后的结果(字符串)每一个{\\\"image\\\":XXX}是一个识别的字符串,对应<参数:图片名字集合>索引",
          "XXX:格式",
          "\\\"%s,%0.2f,%d,%d,%d,%d|\\\"",
          "字符串1,置信度1,x1,y1,x2,y2|字符串2,置信度2,x1,y1,x2,y2|...|"
        ],
        "codeExamples": [
          {
            "title": "HCRC_RecognitionChar - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCRC_RecognitionChar - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCRC_RecognitionChar - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_6",
        "name": "HCRC_RecognitionCharEx",
        "type": "函数",
        "description": "指定范围内智能识字",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCRC_RecognitionCharExA(__int32 窗口序号,char* 图片名字,__int32 x1=-1,__int32 y1=-1,__int32 x2=-1,__int32 y2=-1,int 二值化阈值=127,int 置信度=80,BOOL 开启灰度图=TRUE,BOOL 是否打开查看器=FALSE);__int64 __stdcall HCRC_RecognitionCharExW(__int32 窗口序号,wchar_t* 图片名字,__int32 x1=-1,__int32 y1=-1,__int32 x2=-1,__int32 y2=-1,int 二值化阈值=127,int 置信度=80,BOOL 开启灰度图=TRUE,BOOL 是否打开查看器=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "图片名字",
            "type": "char*",
            "desc": "图片名字(支持绝对路径和相对路径)"
          },
          {
            "name": "x1,y1,x2,y2",
            "type": "__int32",
            "desc": "左上角-右下角组成一个矩形范围"
          },
          {
            "name": "二值化阈值",
            "type": "int",
            "desc": "0-255范围内指定,一般中间就合适,默认127,工具的裁剪功能上可以实时编辑查看,确定阈值后填写"
          },
          {
            "name": "置信度",
            "type": "int",
            "desc": "0-100值越高越精准"
          },
          {
            "name": "开启灰度图",
            "type": "bool",
            "desc": "再原有二值化上先灰度图再二值化,如果为假表示不灰度图直接再原图的基础上二值化"
          },
          {
            "name": "是否打开查看器",
            "type": "bool",
            "desc": "是否打开查看器"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "json:",
          "{\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"image\\\":XXX},{\\\"image\\\":YYY}],\\\"time\\\":ZZZ}XXX->图片识别后的结果(字符串)每一个{\\\"image\\\":XXX}是一个识别的字符串,对应<参数:图片名字集合>索引",
          "XXX:格式",
          "\\\"%s,%0.2f,%d,%d,%d,%d|\\\"",
          "字符串1,置信度1,x1,y1,x2,y2|字符串2,置信度2,x1,y1,x2,y2|...|"
        ],
        "codeExamples": [
          {
            "title": "HCRC_RecognitionCharEx - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCRC_RecognitionCharEx - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCRC_RecognitionCharEx - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_7",
        "name": "HCRC_RecognitionCharByMemory",
        "type": "函数",
        "description": "从内存图片数据中范围内智能识字",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCRC_RecognitionCharByMemoryA(__int32 窗口序号,__int64 pData,__int32 宽度,__int32 高度,__int32 x1=-1,__int32 y1=-1,__int32 x2=-1,__int32 y2=-1,int 二值化阈值=127,int 置信度=80,BOOL 开启灰度图=TRUE,BOOL 是否打开查看器=FALSE);__int64 __stdcall HCRC_RecognitionCharByMemoryW(__int32 窗口序号,__int64 pData,__int32 宽度,__int32 高度,__int32 x1=-1,__int32 y1=-1,__int32 x2=-1,__int32 y2=-1,int 二值化阈值=127,int 置信度=80,BOOL 开启灰度图=TRUE,BOOL 是否打开查看器=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "pData",
            "type": "__int64",
            "desc": "图片内存数据(格式"
          },
          {
            "name": "宽度",
            "type": "__int32",
            "desc": "图片内存数据宽度"
          },
          {
            "name": "高度",
            "type": "__int32",
            "desc": "图片内存数据高度"
          },
          {
            "name": "x1,y1,x2,y2",
            "type": "__int32",
            "desc": "左上角-右下角组成一个矩形范围默认-1表示全部"
          },
          {
            "name": "二值化阈值",
            "type": "int",
            "desc": "0-255范围内指定,一般中间就合适,默认127,工具的裁剪功能上可以实时编辑查看,确定阈值后填写"
          },
          {
            "name": "置信度",
            "type": "int",
            "desc": "0-100值越高越精准"
          },
          {
            "name": "开启灰度图",
            "type": "bool",
            "desc": "再原有二值化上先灰度图再二值化,如果为假表示不灰度图直接再原图的基础上二值化"
          },
          {
            "name": "是否打开查看器",
            "type": "bool",
            "desc": "是否打开查看器"
          },
          {
            "name": "格式",
            "type": "",
            "desc": ""
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "json:",
          "{\\\"error\\\":0,\\\"ret\\\":AAA,\\\"data\\\":[{\\\"image\\\":XXX},{\\\"image\\\":YYY}],\\\"time\\\":ZZZ}XXX->图片识别后的结果(字符串)每一个{\\\"image\\\":XXX}是一个识别的字符串,对应<参数:图片名字集合>索引.",
          "XXX:格式",
          "\\\"%s,%0.2f,%d,%d,%d,%d|\\\"",
          "字符串1,置信度1,x1,y1,x2,y2|字符串2,置信度2,x1,y1,x2,y2|...|"
        ],
        "codeExamples": [
          {
            "title": "HCRC_RecognitionCharByMemory - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCRC_RecognitionCharByMemory - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCRC_RecognitionCharByMemory - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      }
    ]
  },
  {
    "id": "category_30",
    "name": "后台键鼠(MKB)",
    "functions": [
      {
        "id": "function_1",
        "name": "HD键鼠.绑定",
        "type": "函数",
        "description": "绑定窗口",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMKB_Bind(__int32 窗口序号,__int64 hwnd,char* 绑定属性=NULL);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号"
          },
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "窗口句柄"
          },
          {
            "name": "绑定属性",
            "type": "char*",
            "desc": "0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|\\\"20个值1是选中0未选中为NULL表示全部选中"
          },
          {
            "name": "例如",
            "type": "",
            "desc": ""
          },
          {
            "name": "如下",
            "type": "",
            "desc": "属性表"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明",
          "如果之前后台了,当切换到窗口前台会自动解绑后台",
          "绑定属性表:注意顺序！！",
          "属性值索引",
          "\\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20",
          "解析说明:绑定模式窗口序号拦截概率是否调用绑定接口",
          "1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要",
          "1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标",
          "2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要",
          "2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标",
          "3.全局前台模式如:无窗口序号为-1极低不需要",
          "3.1会影响鼠标位置坐标是屏幕坐标"
        ],
        "codeExamples": [
          {
            "title": "HD键鼠.绑定 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.绑定 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.绑定 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMKB_Bind"
      },
      {
        "id": "function_2",
        "name": "HD键鼠.绑定Ex",
        "type": "函数",
        "description": "绑定窗口",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMKB_BindEx(__int32 窗口序号,__int64 hwnd,char* 绑定属性=NULL,__int32 bRetMove=1);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号"
          },
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "窗口句柄"
          },
          {
            "name": "绑定属性",
            "type": "char*",
            "desc": "0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|\\\"20个值1是选中0未选中为NULL表示全部选中"
          },
          {
            "name": "例如",
            "type": "",
            "desc": "\\\"1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|0|1|\\\""
          },
          {
            "name": "bRetMove",
            "type": "__int32",
            "desc": "是否刷新窗口有些窗口需要刷新后台键鼠才正常"
          },
          {
            "name": "如下",
            "type": "",
            "desc": "属性表"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明",
          "如果之前后台了,当切换到窗口前台会自动解绑后台",
          "绑定属性表:注意顺序！！",
          "属性值索引",
          "\\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20",
          "解析说明:绑定模式窗口序号拦截概率是否调用绑定接口",
          "1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要",
          "1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标",
          "2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要",
          "2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标",
          "3.全局前台模式如:无窗口序号为-1极低不需要",
          "3.1会影响鼠标位置坐标是屏幕坐标"
        ],
        "codeExamples": [
          {
            "title": "HD键鼠.绑定Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.绑定Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.绑定Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMKB_BindEx"
      },
      {
        "id": "function_3",
        "name": "HD键鼠.模式绑定Ex",
        "type": "函数",
        "description": "绑定窗口(扩展接口)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMKB_BindModeEx(__int32 窗口序号,__int64 hwnd,char* 绑定属性=NULL,__int32 mode=0,__int32 bRetMove=1);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号"
          },
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "窗口句柄"
          },
          {
            "name": "绑定属性",
            "type": "char*",
            "desc": "0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|\\\"20个值1是选中0未选中为NULL表示全部选中"
          },
          {
            "name": "例如",
            "type": "",
            "desc": "\\\"1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|0|1|\\\""
          },
          {
            "name": "mode",
            "type": "__int32",
            "desc": "0通用模式效果最好1(0模式不行可以试一试这个1)23后续会进一步测试更多的模式"
          },
          {
            "name": "bRetMove",
            "type": "__int32",
            "desc": "是否刷新窗口有些窗口需要刷新后台键鼠才正常"
          },
          {
            "name": "解决方案",
            "type": "",
            "desc": ""
          },
          {
            "name": "1.遇到键鼠有时候挂着挂着就失效请换成-------------------------绑定属性",
            "type": "char*",
            "desc": "\\\"1|0|0|1|1|1|1|0|0|0|1|1|1|0|0|0|0|0|0|0|\\\"+mode"
          },
          {
            "name": "如下",
            "type": "",
            "desc": "属性表"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明",
          "如果之前后台了,当切换到窗口前台会自动解绑后台",
          "绑定属性表:注意顺序！！",
          "属性值索引",
          "\\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20",
          "解析说明:绑定模式窗口序号拦截概率是否调用绑定接口",
          "1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要",
          "1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标",
          "2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要",
          "2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标",
          "3.全局前台模式如:无窗口序号为-1极低不需要",
          "3.1会影响鼠标位置坐标是屏幕坐标"
        ],
        "codeExamples": [
          {
            "title": "HD键鼠.模式绑定Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.模式绑定Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.模式绑定Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMKB_BindModeEx"
      },
      {
        "id": "function_4",
        "name": "HD键鼠.切换绑定",
        "type": "函数",
        "description": "切换绑定到所属子窗口的句柄上",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMKB_SwitchBind(__int32 窗口序号,__int64 hwnd,char* 绑定属性=NULL);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号"
          },
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "窗口句柄"
          },
          {
            "name": "绑定属性",
            "type": "char*",
            "desc": "0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|\\\"20个值1是选中0未选中为NULL表示全部选中"
          },
          {
            "name": "例如",
            "type": "",
            "desc": "\\\"1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|0|1|\\\""
          },
          {
            "name": "如下",
            "type": "",
            "desc": "属性表"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明",
          "如果之前后台了,当切换到窗口前台会自动解绑后台",
          "绑定属性表:注意顺序！！",
          "属性值索引",
          "\\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20",
          "解析说明:绑定模式窗口序号拦截概率是否调用绑定接口",
          "1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要",
          "1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标",
          "2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要",
          "2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标",
          "3.全局前台模式如:无窗口序号为-1极低不需要",
          "3.1会影响鼠标位置坐标是屏幕坐标"
        ],
        "codeExamples": [
          {
            "title": "HD键鼠.切换绑定 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.切换绑定 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.切换绑定 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMKB_SwitchBind"
      },
      {
        "id": "function_5",
        "name": "HD键鼠.切换绑定Ex",
        "type": "函数",
        "description": "切换绑定到所属子窗口的句柄上",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMKB_SwitchBindEx(__int32 窗口序号,__int64 hwnd,char* 绑定属性=NULL,__int32 bRetMove=1);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号"
          },
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "窗口句柄"
          },
          {
            "name": "绑定属性",
            "type": "char*",
            "desc": "0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|\\\"20个值1是选中0未选中为NULL表示全部选中"
          },
          {
            "name": "例如",
            "type": "",
            "desc": "\\\"1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|0|1|\\\""
          },
          {
            "name": "bRetMove",
            "type": "__int32",
            "desc": "是否刷新窗口有些窗口需要刷新后台键鼠才正常"
          },
          {
            "name": "如下",
            "type": "",
            "desc": "属性表"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明",
          "如果之前后台了,当切换到窗口前台会自动解绑后台",
          "绑定属性表:注意顺序！！",
          "属性值索引",
          "\\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20",
          "解析说明:绑定模式窗口序号拦截概率是否调用绑定接口",
          "1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要",
          "1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标",
          "2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要",
          "2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标",
          "3.全局前台模式如:无窗口序号为-1极低不需要",
          "3.1会影响鼠标位置坐标是屏幕坐标"
        ],
        "codeExamples": [
          {
            "title": "HD键鼠.切换绑定Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.切换绑定Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.切换绑定Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMKB_SwitchBindEx"
      },
      {
        "id": "function_6",
        "name": "HD键鼠.切换模式绑定Ex",
        "type": "函数",
        "description": "切换绑定窗口(扩展接口)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMKB_SwitchBindModeEx(__int32 窗口序号,__int64 hwnd,char* 绑定属性=NULL,__int32 mode=0,__int32 bRetMove=1);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号"
          },
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "窗口句柄"
          },
          {
            "name": "绑定属性",
            "type": "char*",
            "desc": "0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|\\\"20个值1是选中0未选中为NULL表示全部选中"
          },
          {
            "name": "例如",
            "type": "",
            "desc": "\\\"1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|0|1|\\\""
          },
          {
            "name": "mode",
            "type": "__int32",
            "desc": "0通用模式效果最好1(0模式不行可以试一试这个1)23后续会进一步测试更多的模式"
          },
          {
            "name": "bRetMove",
            "type": "__int32",
            "desc": "是否刷新窗口有些窗口需要刷新后台键鼠才正常"
          },
          {
            "name": "解决方案",
            "type": "",
            "desc": ""
          },
          {
            "name": "1.遇到键鼠有时候挂着挂着就失效请换成\\n绑定属性",
            "type": "char*",
            "desc": "\\\"1|0|0|1|1|1|1|0|0|0|1|1|1|0|0|0|0|0|0|0|\\\"+mode"
          },
          {
            "name": "如下",
            "type": "",
            "desc": "属性表"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "如果绑定属性\\\"normal\\\"或者\\\"Normal\\\"表示窗口前台模式！！！！直接用的是sendmessage发消息对于一些普通窗口有效大概率会被拦截这个时候请直接使用全局前台模式,具体看下面解析说明",
          "如果之前后台了,当切换到窗口前台会自动解绑后台",
          "绑定属性表:注意顺序！！",
          "属性值索引",
          "\\ndx.mouse.position.lock.api|dx.mouse.position.lock.message1\\ndx.mouse.focus.input.api|dx.mouse.focus.input.message2\\ndx.mouse.clip.lock.api3\\ndx.mouse.input.lock.api4\\ndx.mouse.state.api5\\ndx.mouse.api6\\ndx.mouse.cursor7\\ndx.mouse.raw.input8\\ndx.mouse.input.lock.api29\\ndx.mouse.input.lock.api310\\ndx.keypad.input.lock.api11\\ndx.keypad.state.api12\\ndx.keypad.api13\\ndx.keypad.raw.input14\\ndx.public.active.api15\\ndx.public.active.api216\\ndx.public.input.ime17\\ndx.public.disable.window.show18\\ndx.public.down.cpu19\\ndx.public.focus.api20",
          "解析说明:绑定模式窗口序号拦截概率是否调用绑定接口",
          "1.窗口后台模式如:\\\"1|1|1|1|1|1|1|0|1|1|1|1|1|0|1|0|0|0|0|0|\\\"窗口序号1-61极低需要",
          "1.1.模拟后台键鼠和输入(高级模拟)坐标是窗口客户区坐标",
          "2.窗口前台模式如:\\\"normal\\\"或者\\\"Normal\\\"窗口序号1-61对于一些保护窗口很大概率需要",
          "2.1.通过发window消息模拟(普通模拟)坐标是窗口客户区坐标",
          "3.全局前台模式如:无窗口序号为-1极低不需要",
          "3.1会影响鼠标位置坐标是屏幕坐标"
        ],
        "codeExamples": [
          {
            "title": "HD键鼠.切换模式绑定Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.切换模式绑定Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.切换模式绑定Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMKB_SwitchBindModeEx"
      },
      {
        "id": "function_7",
        "name": "HD键鼠.暂停绑定",
        "type": "函数",
        "description": "暂停/恢复后台绑定",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMKB_PauseBind(__int32 窗口序号,__int32 bPause=TRUE,__int32 bRetMove=1);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号"
          },
          {
            "name": "bPasue",
            "type": "",
            "desc": "是否暂停"
          },
          {
            "name": "bRetMove",
            "type": "__int32",
            "desc": "是否刷新窗口有些窗口需要刷新后台键鼠才正常"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD键鼠.暂停绑定 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.暂停绑定 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.暂停绑定 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMKB_PauseBind"
      },
      {
        "id": "function_8",
        "name": "HD键鼠.解绑",
        "type": "函数",
        "description": "解绑窗口",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMKB_UnBind(__int32 窗口序号);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD键鼠.解绑 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.解绑 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.解绑 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMKB_UnBind"
      },
      {
        "id": "function_9",
        "name": "HD键鼠.右键双击",
        "type": "函数",
        "description": "鼠标右键双击",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMKB_RightDoubleClick(__int32 窗口序号,__int32 延时毫秒=50,__int32 窗口状态=-1);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号特别说明"
          },
          {
            "name": "延时毫秒",
            "type": "__int32",
            "desc": "延时毫秒（默认50毫秒）"
          },
          {
            "name": "窗口状态",
            "type": "__int32",
            "desc": "-1/0不设置其他值为操作前窗口设置(值)参考"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD键鼠.右键双击 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.右键双击 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.右键双击 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMKB_RightDoubleClick"
      },
      {
        "id": "function_10",
        "name": "HCMKB_KeyPress(A/W)",
        "type": "函数",
        "description": "连续按键输入字符串(连续单个按键)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMKB_KeyPressA(__int32 窗口序号,char* 文本,__int32 延时毫秒=20,__int32 窗口状态=-1);__int64 __stdcall HCMKB_KeyPressW(__int32 窗口序号,wchar_t* 文本,__int32 延时毫秒=20,__int32 窗口状态=-1);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号"
          },
          {
            "name": "文本",
            "type": "char*",
            "desc": "文本(Ascii/Unicode)"
          },
          {
            "name": "延时毫秒",
            "type": "__int32",
            "desc": "延时毫秒"
          },
          {
            "name": "窗口状态",
            "type": "__int32",
            "desc": "-1/0不设置其他值为操作前窗口设置(值)参考"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HCMKB_KeyPress(A/W) - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCMKB_KeyPress(A/W) - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCMKB_KeyPress(A/W) - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_11",
        "name": "HCMKB_SendString(2)",
        "type": "函数",
        "description": "发送Ascii字符串",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMKB_SendString(__int32 窗口序号,char* 文本A,__int32 延时毫秒=20,__int32 窗口状态=-1);__int64 __stdcall HCMKB_SendString2(__int32 窗口序号,char* 文本A,__int32 延时毫秒=20,__int32 窗口状态=-1);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号"
          },
          {
            "name": "文本A",
            "type": "char*",
            "desc": "文本(Ascii)"
          },
          {
            "name": "延时毫秒",
            "type": "__int32",
            "desc": "延时毫秒"
          },
          {
            "name": "窗口状态",
            "type": "__int32",
            "desc": "-1/0不设置其他值为操作前窗口设置(值)参考"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HCMKB_SendString(2) - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCMKB_SendString(2) - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCMKB_SendString(2) - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_12",
        "name": "HD键鼠.剪切板发送随机文本",
        "type": "函数",
        "description": "发送剪切板字符串内容到窗口",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMKB_SendPasteEx(__int32 窗口序号,void* 发送字节缓冲区,__int32 发送字节大小,__int32 文本类型,__int32 bSend=0,__int32 mis=20,__int32 窗口状态=-1);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号"
          },
          {
            "name": "发送字节缓冲区",
            "type": "void",
            "desc": "发送字节缓冲区(字节数据/字符串数据)"
          },
          {
            "name": "发送字节大小",
            "type": "__int32",
            "desc": "发送字节缓冲区的字节大小"
          },
          {
            "name": "文本类型",
            "type": "__int32",
            "desc": "Ascii(1)Unicode(2)"
          },
          {
            "name": "bSend",
            "type": "__int32",
            "desc": "是否消息发送的方式传递文本,如果为假表示粘贴到文本框"
          },
          {
            "name": "mis",
            "type": "__int32",
            "desc": "延时毫秒"
          },
          {
            "name": "窗口状态",
            "type": "__int32",
            "desc": "-1/0不设置其他值为操作前窗口设置(值)参考"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD键鼠.剪切板发送随机文本 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.剪切板发送随机文本 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.剪切板发送随机文本 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMKB_SendPasteEx"
      },
      {
        "id": "function_13",
        "name": "HD键鼠.设置剪切板文本",
        "type": "函数",
        "description": "发送随机名字,从2个文本(hf.txt和he.txt)中各获取一个字",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMKB_SendRoundNamePaste(__int32 窗口序号,__int32 bSend=0,__int32 mis=20,__int32 窗口状态=-1);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号"
          },
          {
            "name": "bSend",
            "type": "__int32",
            "desc": "是否消息发送的方式传递文本,如果为假表示粘贴到文本框"
          },
          {
            "name": "mis",
            "type": "__int32",
            "desc": "延时毫秒"
          },
          {
            "name": "窗口状态",
            "type": "__int32",
            "desc": "-1/0不设置其他值为操作前窗口设置(值)参考"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "hf.txt和he.txt放在程序(.exe)同目录下,文件编码为utf-8随机获取一个姓和一个名组成一个词"
        ],
        "codeExamples": [
          {
            "title": "HD键鼠.设置剪切板文本 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.设置剪切板文本 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.设置剪切板文本 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMKB_SendRoundNamePaste"
      },
      {
        "id": "function_14",
        "name": "HD键鼠.获取剪切板字符串",
        "type": "函数",
        "description": "设置剪切板字符串",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMKB_SetClipboard(void* 发送字节缓冲区,__int32 发送字节大小,__int32 文本类型);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "发送字节缓冲区",
            "type": "void",
            "desc": "发送字节缓冲区(字节数据/字符串数据)"
          },
          {
            "name": "发送字节大小",
            "type": "__int32",
            "desc": "发送字节缓冲区的字节大小"
          },
          {
            "name": "文本类型",
            "type": "__int32",
            "desc": "Ascii(1)Unicode(2)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "该接口无序窗口序号"
        ],
        "codeExamples": [
          {
            "title": "HD键鼠.获取剪切板字符串 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.获取剪切板字符串 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.获取剪切板字符串 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMKB_SetClipboard"
      },
      {
        "id": "function_15",
        "name": "HD键鼠.句柄发送文本",
        "type": "函数",
        "description": "获取剪切板字符串",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMKB_GetClipboard(__int32 文本类型);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "文本类型",
            "type": "__int32",
            "desc": "Ascii(1)Unicode(2)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD键鼠.句柄发送文本 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.句柄发送文本 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.句柄发送文本 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMKB_GetClipboard"
      },
      {
        "id": "function_16",
        "name": "HD键鼠.句柄发送按键按下",
        "type": "函数",
        "description": "发送Ascii字符串,部分游戏需要激活窗口！（可以不用通讯调用）",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMKB_SendStringF(__int64 hwnd,char* 文本A,__int32 延时毫秒=20,__int32 窗口状态=-1);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "hwnd窗口句柄"
          },
          {
            "name": "文本A",
            "type": "char*",
            "desc": "文本(Ascii)"
          },
          {
            "name": "延时毫秒",
            "type": "__int32",
            "desc": "延时毫秒"
          },
          {
            "name": "窗口状态",
            "type": "__int32",
            "desc": "-1/0不设置其他值为操作前窗口设置(值)参考"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！"
        ],
        "codeExamples": [
          {
            "title": "HD键鼠.句柄发送按键按下 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.句柄发送按键按下 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.句柄发送按键按下 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMKB_SendStringF"
      },
      {
        "id": "function_17",
        "name": "HD键鼠.句柄发送按键弹起",
        "type": "函数",
        "description": "按下发送键码到指定窗口（可以不用通讯调用）",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMKB_SendKeyDownF(__int32 窗口序号,__int64 hwnd,__int32 虚拟键码,__int32 窗口状态=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(不需要通讯也可以调用,指定一个大于0的序号就行或者任意一个)"
          },
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "hwnd窗口句柄(指定子窗口的窗口句柄,可以指定非绑定窗口的子窗口)"
          },
          {
            "name": "虚拟键码",
            "type": "__int32",
            "desc": "虚拟键码"
          },
          {
            "name": "窗口状态",
            "type": "__int32",
            "desc": "-1/0不设置其他值为操作前窗口设置(值)参考"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！"
        ],
        "codeExamples": [
          {
            "title": "HD键鼠.句柄发送按键弹起 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.句柄发送按键弹起 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.句柄发送按键弹起 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMKB_SendKeyDownF"
      },
      {
        "id": "function_18",
        "name": "HD键鼠.句柄发送按键",
        "type": "函数",
        "description": "弹起发送键码到指定窗口（可以不用通讯调用）",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMKB_SendKeyUpF(__int32 窗口序号,__int64 hwnd,__int32 虚拟键码,__int32 窗口状态=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(不需要通讯也可以调用,指定一个大于0的序号就行或者任意一个)"
          },
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "hwnd窗口句柄(指定子窗口的窗口句柄,可以指定非绑定窗口的子窗口)"
          },
          {
            "name": "虚拟键码",
            "type": "__int32",
            "desc": "虚拟键码"
          },
          {
            "name": "窗口状态",
            "type": "__int32",
            "desc": "-1/0不设置其他值为操作前窗口设置(值)参考"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！"
        ],
        "codeExamples": [
          {
            "title": "HD键鼠.句柄发送按键 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.句柄发送按键 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.句柄发送按键 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMKB_SendKeyUpF"
      },
      {
        "id": "function_19",
        "name": "HD键鼠.句柄发送清空文本",
        "type": "函数",
        "description": "按下并弹起发送键码到指定窗口（可以不用通讯调用）",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMKB_SendKeyPressF(__int32 窗口序号,__int64 hwnd,__int32 虚拟键码,__int32 延时毫秒=20,__int32 窗口状态=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(不需要通讯也可以调用,指定一个大于0的序号就行或者任意一个)"
          },
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "hwnd窗口句柄(指定子窗口的窗口句柄,可以指定非绑定窗口的子窗口)"
          },
          {
            "name": "虚拟键码",
            "type": "__int32",
            "desc": "虚拟键码"
          },
          {
            "name": "延时毫秒",
            "type": "__int32",
            "desc": "按下和弹起之间的间隔时间"
          },
          {
            "name": "窗口状态",
            "type": "__int32",
            "desc": "-1/0不设置其他值为操作前窗口设置(值)参考"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！"
        ],
        "codeExamples": [
          {
            "title": "HD键鼠.句柄发送清空文本 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.句柄发送清空文本 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.句柄发送清空文本 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMKB_SendKeyPressF"
      },
      {
        "id": "function_20",
        "name": "HD键鼠.设置鼠标轨迹参数",
        "type": "函数",
        "description": "可以清空子窗口的内容（可以不用通讯调用）",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMKB_SendDeleteTextF(__int32 窗口序号__int64 hwnd,__int32 窗口状态=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(不需要通讯也可以调用,指定一个大于0的序号就行或者任意一个)"
          },
          {
            "name": "hwnd",
            "type": "__int32",
            "desc": "hwnd窗口句柄(指定子窗口的窗口句柄,可以指定非绑定窗口的子窗口)比如"
          },
          {
            "name": "窗口状态",
            "type": "__int32",
            "desc": "-1/0不设置其他值为操作前窗口设置(值)参考"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "注意这个属于类似前台但不是存前台,有些游戏需要激活游戏才能输入成功！！！！"
        ],
        "codeExamples": [
          {
            "title": "HD键鼠.设置鼠标轨迹参数 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.设置鼠标轨迹参数 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.设置鼠标轨迹参数 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMKB_SendDeleteTextF"
      },
      {
        "id": "function_21",
        "name": "HD键鼠.获取鼠标位置",
        "type": "函数",
        "description": "设置鼠标轨迹参数(当移动鼠标开启轨迹生效)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMKB_SetRealMouse(__int32 步长=30,__int32 步数=100,__int32 每步延迟=20,BOOL 开启调试=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "步长",
            "type": "__int32",
            "desc": "针对直线轨迹/直线波动轨迹有效"
          },
          {
            "name": "步数",
            "type": "__int32",
            "desc": "针对曲线随机轨迹有效"
          },
          {
            "name": "每步延迟",
            "type": "__int32",
            "desc": "中间点每个点发送的频率(毫秒)"
          },
          {
            "name": "开启调试",
            "type": "bool",
            "desc": "真为开启,只有在调试版本才会触发,会弹窗实时显示轨迹坐标点"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD键鼠.获取鼠标位置 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.获取鼠标位置 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD键鼠.获取鼠标位置 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCMKB_SetRealMouse"
      },
      {
        "id": "function_22",
        "name": "HCMKB_GetMousePos",
        "type": "函数",
        "description": "获取后台/前台鼠标位置",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCMKB_GetMousePos(__int32 窗口序号);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号特别说明"
          }
        ],
        "returnValue": "查看返回值表\n返回值大于等于0:表示XY组成的8字节低4字节为X高4字节为Y",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HCMKB_GetMousePos - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCMKB_GetMousePos - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCMKB_GetMousePos - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      }
    ]
  },
  {
    "id": "category_31",
    "name": "后台截图模块(CS)",
    "functions": [
      {
        "id": "function_1",
        "name": "HD截图.设置识别模式",
        "type": "函数",
        "description": "打开截图",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCCS_SetType(__int32 type);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "type",
            "type": "__int32",
            "desc": "0或者-1:普通识别模式(默认)  1:高频后台截图识别模式(并非高频识别就一定要开启,可以先尝试普通识别模式正常的话就无需开启高频) "
          }
        ],
        "returnValue": "查看返回值表\n返回当前是否开启了高频识别模式",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD截图.设置识别模式 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD截图.设置识别模式 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD截图.设置识别模式 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCCS_SetType"
      },
      {
        "id": "function_2",
        "name": "HD截图.打开",
        "type": "函数",
        "description": "打开截图",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCCS_OpenCS(__int32 窗口序号);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD截图.打开 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD截图.打开 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD截图.打开 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCCS_OpenCS"
      },
      {
        "id": "function_3",
        "name": "HD截图.打开Ex",
        "type": "函数",
        "description": "打开截图(和HCCS_CloseCSEx是一组接口)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCCS_OpenCSEx(__int32 窗口序号,BOOL bNormal,__int32 capType=0,__int64 hwnd=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)窗口序号为0表示全屏前台截图(此时后面3个参数无效)后续识别相关接口如果要用到全屏截图数据需要指定窗口序号0前台键鼠窗口序号使用-1就行"
          },
          {
            "name": "bNormal",
            "type": "bool",
            "desc": "是否是通常模式一般为真(TRUE)就行"
          },
          {
            "name": "capType",
            "type": "__int32",
            "desc": "截图模式"
          },
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "窗口句柄"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "1.前台和后台模式,可以随意切换不用调用关闭HCCS_CloseCSEx再开启！！！！！内置处理了",
          "截图模式:",
          "typedefenumCAPTURETYPE{\\n无CAPTURETYPE_NONE=0,\\n这个不操作\\nGDICAPTURETYPE_GDI=1,\\n这个直接客户端操作对于浏览器(谷歌等)记得把图像加速关掉\\n32CAPTURETYPE_D3D9_1_x86=2,\\nUECAPTURETYPE_D3D9_2_x86=3,\\nU3DCAPTURETYPE_D3D9_3_x86=4,\\nRGBX\\nD3D11CAPTURETYPE_D3D11_1_x86=5,\\nUECAPTURETYPE_D3D11_2_x86=6,\\nU3DCAPTURETYPE_D3D11_3_x86=7,\\nRGBXD3D11游戏通用\\nD3D12CAPTURETYPE_D3D12_1_x86=70,\\nUECAPTURETYPE_D3D12_2_x86=71,\\nU3DCAPTURETYPE_D3D12_3_x86=72,\\nRGBXD3D12游戏通用\\n64\\nD3D9CAPTURETYPE_D3D9_1_x64=8,\\nUECAPTURETYPE_D3D9_2_x64=9,\\nU3DCAPTURETYPE_D3D9_3_x64=10,\\nRGBXD3D9游戏通用\\nD3D11CAPTURETYPE_D3D11_1_x64=11,\\nUECAPTURETYPE_D3D11_2_x64=12,\\nU3DCAPTURETYPE_D3D11_3_x64=13,\\nRGBXD3D11游戏通用\\nD3D12CAPTURETYPE_D3D12_1_x64=14,\\nUED3D12CAPTURETYPE_D3D12_2_x64=15,\\nU3DD3D12CAPTURETYPE_D3D12_3_x64=16,\\nRGBXD3D12D3D12游戏通用\\n32CAPTURETYPE_OPENGL_1_x86=20,\\n占位CAPTURETYPE_OPENGL_2_x86=21,\\nGL_BGRA模拟器CAPTURETYPE_OPENGL_3_x86=22,\\nGL_BGRA模拟器\\n64CAPTURETYPE_OPENGL_1_x64=30,\\n占位CAPTURETYPE_OPENGL_2_x64=31,\\nGL_BGRA模拟器CAPTURETYPE_OPENGL_3_x64=32,\\nGL_BGRA模拟器\\n定制CAPTURETYPE_D3D9_Steam_x86=40,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用CAPTURETYPE_D3D11_Steam_x86=41,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用CAPTURETYPE_D3D9_Steam_x64=42,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用CAPTURETYPE_D3D11_Steam_x64=43,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用\\nNC模式CAPTURETYPE_D3D9_NC_x86=44,\\nNC游戏CAPTURETYPE_D3D11_NC_x86=45,\\nNC游戏CAPTURETYPE_D3D9_NC_x64=46,\\nNC游戏CAPTURETYPE_D3D11_NC_x64=47,\\nNC游戏\\nCAPTURETYPE_NORMAL=50,\\n这个前台模式\\nCAPTURETYPE_D3D12_Steam_x86=60,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用CAPTURETYPE_D3D12_Steam_x64=61,\\nsteam游戏专用steam游戏专用后台截图x64模式D3D9也可以是其他游戏不一定只有steam才能用\\nCAPTURETYPE_D3D12_NC_x86=62,\\nNC游戏D3D12CAPTURETYPE_D3D12_NC_x64=63,\\nNC游戏D3D12",
          "}CAPTURETYPE;额外说明:"
        ],
        "codeExamples": [
          {
            "title": "HD截图.打开Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD截图.打开Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD截图.打开Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCCS_OpenCSEx"
      },
      {
        "id": "function_4",
        "name": "HD截图.关闭",
        "type": "函数",
        "description": "关闭截图",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCCS_CloseCS(__int32 窗口序号);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD截图.关闭 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD截图.关闭 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD截图.关闭 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCCS_CloseCS"
      },
      {
        "id": "function_5",
        "name": "HD截图.获取截图数据",
        "type": "函数",
        "description": "关闭截图(和HCCS_OpenCSEx是一组接口)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCCS_CloseCSEx(__int32 窗口序号);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)窗口序号为0表示全屏截图后续识别相关接口如果要用到全屏截图数据需要指定窗口序号0"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD截图.获取截图数据 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD截图.获取截图数据 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD截图.获取截图数据 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCCS_CloseCSEx"
      },
      {
        "id": "function_6",
        "name": "HD截图.打开查看器",
        "type": "函数",
        "description": "获取截图数据",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCCS_GetCSData(__int32 窗口序号);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "像素格式",
            "type": "",
            "desc": ""
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "json:{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":AAA,\\\"addr\\\":XXX,\\\"eleSize\\\":YYY,\\\"len\\\":ZZZ,\\\"w\\\":1222,\\\"h\\\":699}]}AAA:调用接口返回值",
          "XXX:图片二进制数据首地址(不是bmp数据是MYA8R8G8B8结构体缓冲区首地址)可以拿到这个缓冲区自行转换各种图片格式数据",
          "YYY:MYA8R8G8B8结构体数量",
          "ZZZ:字节大小(图片数据=MYA8R8G8B8* YYY)",
          "w:宽度",
          "h:高度注意:拿到图片地址数据XXX使用后记得释放(HCCS_FreeArray)",
          "图片数据地址不使用了记得释放掉HCCS_FreeMemPool调用此接口"
        ],
        "codeExamples": [
          {
            "title": "HD截图.打开查看器 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD截图.打开查看器 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD截图.打开查看器 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCCS_GetCSData"
      },
      {
        "id": "function_7",
        "name": "HD截图.关闭查看器",
        "type": "函数",
        "description": "打开查看器",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCCS_OpenCSFinder(__int32 窗口序号,__int32 X,__int32 Y,__int32 宽度,__int32 高度);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "x,y,宽度,高度",
            "type": "__int32",
            "desc": "内部使用命令行参数打开查看器C"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD截图.关闭查看器 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD截图.关闭查看器 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD截图.关闭查看器 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCCS_OpenCSFinder"
      },
      {
        "id": "function_8",
        "name": "HD截图.截图",
        "type": "函数",
        "description": "关闭查看器",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCCS_CloseCSFinder(__int32 窗口序号,__int32 pid);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "pid",
            "type": "__int32",
            "desc": "查看器的进程PID"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD截图.截图 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD截图.截图 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD截图.截图 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCCS_CloseCSFinder"
      },
      {
        "id": "function_9",
        "name": "HD截图.获取BMP截图数据",
        "type": "函数",
        "description": "截图数据并保存为BMP图片文件",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCCS_CaptureBmp(__int32 窗口序号,char* BMP文件路径,BOOL 是否打开=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "BMP文件路径",
            "type": "char*",
            "desc": "BMP文件路径+文件名"
          },
          {
            "name": "是否打开",
            "type": "bool",
            "desc": "是否打开查看图片"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "json:",
          "{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":AAA,\\\"w\\\":1222,\\\"h\\\":699}]}"
        ],
        "codeExamples": [
          {
            "title": "HD截图.获取BMP截图数据 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD截图.获取BMP截图数据 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD截图.获取BMP截图数据 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCCS_CaptureBmp"
      },
      {
        "id": "function_10",
        "name": "HD截图.释放数据",
        "type": "函数",
        "description": "获取当前截图后的BMP数据",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCCS_GetCaptureBmpData(__int32 窗口序号);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          }
        ],
        "returnValue": "查看返回值表\n像素格式:\n\\n1字节对齐\\n单个数据#pragmapack(1)typedefstructMYA8R8G8B8{BYTEm_a;\\n透明值BYTEm_r;\\n红色BYTEm_g;\\n绿色BYTEm_b;\\n蓝色MYA8R8G8B8(){m_a=0;m_r=0;m_g=0;m_b=0;}}MYA8R8G8B8;#pragmapack()",
        "notes": [
          "json:",
          "{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"addr\\\":XXX,\\\"eleSize\\\":YYY,\\\"allLen\\\":ZZZ,\\\"w\\\":1222,\\\"h\\\":699}]}",
          "XXX是BMP图片二进制数据首地址",
          "YYY是MYA8R8G8B8结构体数量",
          "ZZZ:BMP图片数据大小(真实的BMP图片数据:54+像素数据)",
          "图片数据地址不使用了记得释放掉HCCS_FreeMemPool调用此接口"
        ],
        "codeExamples": [
          {
            "title": "HD截图.释放数据 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD截图.释放数据 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD截图.释放数据 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCCS_GetCaptureBmpData"
      },
      {
        "id": "function_11",
        "name": "HCCS_GetCaptureBmpRangeData",
        "type": "函数",
        "description": "获取当前截图后的BMP数据(指定范围)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCCS_GetCaptureBmpRangeData(__int32 窗口序号,__int32 X,__int32 Y,__int32 宽度,__int32 高度);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "Y",
            "type": "__int32",
            "desc": "矩形范围左上角y-1表示0坐标"
          },
          {
            "name": "宽度",
            "type": "__int32",
            "desc": "矩形范围宽度-1表示最大宽度"
          },
          {
            "name": "高度",
            "type": "__int32",
            "desc": "矩形范围高度-1表示最大高度"
          }
        ],
        "returnValue": "查看返回值表\n像素格式:\n\\n1字节对齐\\n单个数据#pragmapack(1)typedefstructMYA8R8G8B8{BYTEm_a;\\n透明值BYTEm_r;\\n红色BYTEm_g;\\n绿色BYTEm_b;\\n蓝色MYA8R8G8B8(){m_a=0;m_r=0;m_g=0;m_b=0;}}MYA8R8G8B8;#pragmapack()",
        "notes": [
          "如果想获取全图数据:xywh可以分别为-1也可以直接调用HCCS_GetCaptureBmpData",
          "json:",
          "{\\\"error\\\":0,\\\"ret\\\":[{\\\"bRet\\\":1,\\\"addr\\\":XXX,\\\"eleSize\\\":YYY,\\\"allLen\\\":ZZZ,\\\"w\\\":1222,\\\"h\\\":699}]}",
          "XXX是BMP图片二进制数据首地址",
          "YYY是MYA8R8G8B8结构体数量",
          "ZZZ:BMP图片数据大小(真实的BMP图片数据:54+像素数据)",
          "图片数据地址不使用了记得释放掉HCCS_FreeMemPool调用此接口"
        ],
        "codeExamples": [
          {
            "title": "HCCS_GetCaptureBmpRangeData - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCCS_GetCaptureBmpRangeData - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCCS_GetCaptureBmpRangeData - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_12",
        "name": "HD截图.释放内存池数据",
        "type": "函数",
        "description": "释放内存",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCCS_FreeArray(void* addr);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "addr",
            "type": "void",
            "desc": "需要释放的地址"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "释放内存该内存是使用new[]申请的内存"
        ],
        "codeExamples": [
          {
            "title": "HD截图.释放内存池数据 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD截图.释放内存池数据 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD截图.释放内存池数据 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCCS_FreeArray"
      },
      {
        "id": "function_13",
        "name": "HD截图.是否后台缓存失败",
        "type": "函数",
        "description": "释放内存,内存池操作释放内存",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCCS_FreeMemPool(__int32 窗口序号,void* addr);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "index"
          },
          {
            "name": "addr",
            "type": "void",
            "desc": "需要释放的地址"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "我们获取了截图数据不需要了都需要调用这个接口来释放掉,防止内存泄露",
          "注意:该接口是释放【使用内存池申请的内存地址】的地址,与HCCS_FreeArray不一样",
          "那个窗口序号返回申请的地址就用那个窗口序号释放"
        ],
        "codeExamples": [
          {
            "title": "HD截图.是否后台缓存失败 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD截图.是否后台缓存失败 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD截图.是否后台缓存失败 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCCS_FreeMemPool"
      },
      {
        "id": "function_14",
        "name": "HCCS_IsCaptureValid",
        "type": "函数",
        "description": "后台截图缓存获取失败判断接口",
        "prototypes": [
          {
            "prototype": "__int64  __stdcall  HCCS_IsCaptureValid(__int64 ret);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "ret",
            "type": "__int64",
            "desc": "传递的返回值 必须是识别截图相关的接口返回的"
          }
        ],
        "returnValue": "查看返回值表\n返回1表示:后台截图数据获取失败,进一步表示不是识别找不到,需要开发者再次调用相关识别接口\n返回0表示:识别没有找到",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HCCS_IsCaptureValid - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCCS_IsCaptureValid - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCCS_IsCaptureValid - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      }
    ]
  },
  {
    "id": "category_32",
    "name": "黑屏优化模块",
    "functions": [
      {
        "id": "function_1",
        "name": "HD黑屏.打开",
        "type": "函数",
        "description": "打开黑屏",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HC_OpenBS(__int32 窗口序号,__int32 minIndex=0,__int32 maxIndex=0,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "minIndex",
            "type": "__int32",
            "desc": "最小模型序号"
          },
          {
            "name": "maxIndex",
            "type": "__int32",
            "desc": "最大模型序号"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否需要主线程来调用这个CALL"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD黑屏.打开 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD黑屏.打开 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD黑屏.打开 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HC_OpenBS"
      },
      {
        "id": "function_2",
        "name": "HD黑屏.设置模型范围",
        "type": "函数",
        "description": "设置模型序号的过滤范围",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HC_SetBs(__int32 窗口序号,__int32 minIndex=0,__int32 maxIndex=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "minIndex",
            "type": "__int32",
            "desc": "最小模型序号"
          },
          {
            "name": "maxIndex",
            "type": "__int32",
            "desc": "最大模型序号"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "可以适当调整最小或者最大的序号来过滤模型,来实现黑屏,同时还支持图色识别"
        ],
        "codeExamples": [
          {
            "title": "HD黑屏.设置模型范围 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD黑屏.设置模型范围 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD黑屏.设置模型范围 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HC_SetBs"
      },
      {
        "id": "function_3",
        "name": "HD黑屏.关闭",
        "type": "函数",
        "description": "关闭黑屏",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HC_CloseBS(__int32 窗口序号,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否需要主线程来调用这个CALL"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD黑屏.关闭 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD黑屏.关闭 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD黑屏.关闭 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HC_CloseBS"
      }
    ]
  },
  {
    "id": "category_33",
    "name": "CPU优化模块()",
    "functions": [
      {
        "id": "function_1",
        "name": "HD优化.开启CPU",
        "type": "函数",
        "description": "打开CPU优化",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HC_OpenCPU(__int32 窗口序号,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否需要主线程来调用这个CALL"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD优化.开启CPU - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD优化.开启CPU - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD优化.开启CPU - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HC_OpenCPU"
      },
      {
        "id": "function_2",
        "name": "HD优化.设置FPS",
        "type": "函数",
        "description": "设置帧数(绑定dx.public.down.cpu后台属性有效)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HC_SetFPS(__int32 窗口序号,__int32 iFPS=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "iFPS",
            "type": "__int32",
            "desc": "帧数(大于120表示关闭优化,可以用来在绑定后台的情况下关闭优化)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "并非实际的帧数,这里只是一个参考值,内置默认为30",
          "动态优化调试帧数的(自动计算帧率)"
        ],
        "codeExamples": [
          {
            "title": "HD优化.设置FPS - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD优化.设置FPS - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD优化.设置FPS - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HC_SetFPS"
      },
      {
        "id": "function_3",
        "name": "HD优化.设置延迟",
        "type": "函数",
        "description": "设置帧数(绑定dx.public.down.cpu后台属性有效)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HC_SetCpuDwonMs(__int32 窗口序号, __int32 downMs = 0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "downMs",
            "type": "__int32",
            "desc": "延迟毫秒数(自行根据实际情况而定一般在1ms到50ms之间)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "如果调用了HC_HookMainThread挂接主线程,同时又调用了本接口,那么会动态(根据实际动态计算正数来)修改主线程调用CALL的检查频率"
        ],
        "codeExamples": [
          {
            "title": "HD优化.设置延迟 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD优化.设置延迟 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD优化.设置延迟 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HC_SetCpuDwonMs"
      },
      {
        "id": "function_4",
        "name": "HD优化.关闭CPU",
        "type": "函数",
        "description": "关闭CPU优化",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HC_CloseCPU(__int32 窗口序号,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否需要主线程来调用这个CALL"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD优化.关闭CPU - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD优化.关闭CPU - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD优化.关闭CPU - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HC_CloseCPU"
      }
    ]
  },
  {
    "id": "category_34",
    "name": "系统模块(SYS)",
    "functions": [
      {
        "id": "function_1",
        "name": "HD系统.是否开启字体平滑",
        "type": "函数",
        "description": "检查字体是否开启字体平滑",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_CheckFontSmooth();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD系统.是否开启字体平滑 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.是否开启字体平滑 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.是否开启字体平滑 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_CheckFontSmooth"
      },
      {
        "id": "function_2",
        "name": "HD系统.关闭字体平滑",
        "type": "函数",
        "description": "关闭字体平滑",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_CloseFontSmooth();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD系统.关闭字体平滑 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.关闭字体平滑 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.关闭字体平滑 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_CloseFontSmooth"
      },
      {
        "id": "function_3",
        "name": "HD系统.打开字体平滑",
        "type": "函数",
        "description": "打开字体平滑",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_OpenFontSmooth();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD系统.打开字体平滑 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.打开字体平滑 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.打开字体平滑 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_OpenFontSmooth"
      },
      {
        "id": "function_4",
        "name": "HD系统.是否开启UAC",
        "type": "函数",
        "description": "检查当前系统是否开启了UAC(用户控制)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_CheckUAC();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD系统.是否开启UAC - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.是否开启UAC - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.是否开启UAC - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_CheckUAC"
      },
      {
        "id": "function_5",
        "name": "HD系统.设置UAC",
        "type": "函数",
        "description": "设置当前系统的UAC(用户控制)开关",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_SetUAC(__int32 bEnable);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "bEnable",
            "type": "__int32",
            "desc": "开启1或者关闭0"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD系统.设置UAC - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.设置UAC - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.设置UAC - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_SetUAC"
      },
      {
        "id": "function_6",
        "name": "HD系统.延迟",
        "type": "函数",
        "description": "延迟",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_Delay(__int32 毫秒);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "毫秒",
            "type": "__int32",
            "desc": "毫秒"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "不会堵塞主线程"
        ],
        "codeExamples": [
          {
            "title": "HD系统.延迟 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.延迟 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.延迟 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_Delay"
      },
      {
        "id": "function_7",
        "name": "HD系统.随机延迟",
        "type": "函数",
        "description": "在随机范围内延迟",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_DelayEx(__int32 最小毫秒,__int32 最大毫秒);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "最小毫秒",
            "type": "__int32",
            "desc": "毫秒"
          },
          {
            "name": "最大毫秒",
            "type": "__int32",
            "desc": "毫秒"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "不会堵塞主线程"
        ],
        "codeExamples": [
          {
            "title": "HD系统.随机延迟 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.随机延迟 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.随机延迟 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_DelayEx"
      },
      {
        "id": "function_8",
        "name": "HD系统.关闭系统",
        "type": "函数",
        "description": "关闭系统",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_ExitSys(__int32 type);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "type",
            "type": "__int32",
            "desc": "注销(0)关机(1)重启(2)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD系统.关闭系统 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.关闭系统 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.关闭系统 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_ExitSys"
      },
      {
        "id": "function_9",
        "name": "HD系统.关闭屏保",
        "type": "函数",
        "description": "关闭屏保",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_CloseScreenProtect();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD系统.关闭屏保 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.关闭屏保 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.关闭屏保 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_CloseScreenProtect"
      },
      {
        "id": "function_10",
        "name": "HD系统.关闭电源管理",
        "type": "函数",
        "description": "关闭电源管理,不进入睡眠",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_ClosePowerManager();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD系统.关闭电源管理 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.关闭电源管理 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.关闭电源管理 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_ClosePowerManager"
      },
      {
        "id": "function_11",
        "name": "HD系统.恢复最近系统修改",
        "type": "函数",
        "description": "恢复系统上次的修改",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_ResumeSystemModify();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "如果中控软件运行的时候修改了系统设置",
          "那么这个最好在中控程序退出的时候调用"
        ],
        "codeExamples": [
          {
            "title": "HD系统.恢复最近系统修改 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.恢复最近系统修改 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.恢复最近系统修改 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_ResumeSystemModify"
      },
      {
        "id": "function_12",
        "name": "HD系统.禁止休眠",
        "type": "函数",
        "description": "设置当前的电源设置(禁止关闭显示器,禁止关闭硬盘,禁止睡眠和待机)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_DisableCloseDisplayAndSleep();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD系统.禁止休眠 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.禁止休眠 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.禁止休眠 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_DisableCloseDisplayAndSleep"
      },
      {
        "id": "function_13",
        "name": "HD系统.获取路径",
        "type": "函数",
        "description": "获取路径",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_GetDir(__int32 type);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "type",
            "type": "__int32",
            "desc": "当前路径(0)system32路径(1)windows所在路径(2)临时目录路径(3)当前进程(exe)所在的路径(4)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD系统.获取路径 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取路径 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取路径 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_GetDir"
      },
      {
        "id": "function_14",
        "name": "HD系统.获取CPU类型",
        "type": "函数",
        "description": "获取CPU类型",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_GetCpuType();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表\n1:int er\n2:Amd",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD系统.获取CPU类型 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取CPU类型 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取CPU类型 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_GetCpuType"
      },
      {
        "id": "function_15",
        "name": "HD系统.获取当前CPU使用率",
        "type": "函数",
        "description": "获取CPU使用率",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_GetCpuUsage();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表\n大于0表示:使用率百分比",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD系统.获取当前CPU使用率 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取当前CPU使用率 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取当前CPU使用率 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_GetCpuUsage"
      },
      {
        "id": "function_16",
        "name": "HD系统.获取CPU使用率",
        "type": "函数",
        "description": "获取指定进程的CPU使用率",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_GetCpuUsageByPid(__int32 pid);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "__int32",
            "desc": "进程PID"
          }
        ],
        "returnValue": "查看返回值表\n大于0表示:使用率百分比",
        "notes": [
          "返回值是整数百分比",
          "返回字符串字符串是(含小数百分比)"
        ],
        "codeExamples": [
          {
            "title": "HD系统.获取CPU使用率 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取CPU使用率 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取CPU使用率 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_GetCpuUsageByPid"
      },
      {
        "id": "function_17",
        "name": "HD系统.获取内存使用率",
        "type": "函数",
        "description": "获取指定进程的内存使用率",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_GetMemoryUsageByPid(__int32 pid);",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表\n大于0表示:使用率百分比",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD系统.获取内存使用率 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取内存使用率 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取内存使用率 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_GetMemoryUsageByPid"
      },
      {
        "id": "function_18",
        "name": "HD系统.获取磁盘序列号",
        "type": "函数",
        "description": "获取磁盘序列号",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_GetDiskSerial(__int32 index);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "index",
            "type": "__int32",
            "desc": "磁盘序号"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "进程要有管理员权限才能获取成功"
        ],
        "codeExamples": [
          {
            "title": "HD系统.获取磁盘序列号 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取磁盘序列号 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取磁盘序列号 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_GetDiskSerial"
      },
      {
        "id": "function_19",
        "name": "HD系统.获取显卡信息",
        "type": "函数",
        "description": "获取显卡信息",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_GetDisplayInfo();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD系统.获取显卡信息 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取显卡信息 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取显卡信息 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_GetDisplayInfo"
      },
      {
        "id": "function_20",
        "name": "HD系统.获取DPI",
        "type": "函数",
        "description": "获取DPI",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_GetDPI();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表\n大于0表示具体的DPI",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD系统.获取DPI - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取DPI - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取DPI - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_GetDPI"
      },
      {
        "id": "function_21",
        "name": "HD系统.启动EXE",
        "type": "函数",
        "description": "运行指定路径下的exe",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_RunApp(char* path,longtype);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "path",
            "type": "char*",
            "desc": "exe路径"
          },
          {
            "name": "type",
            "type": "",
            "desc": "返回值类型进程ID(0)线程ID(1)进程句柄(2)线程句柄(3)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "这个不支持启动参数"
        ],
        "codeExamples": [
          {
            "title": "HD系统.启动EXE - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.启动EXE - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.启动EXE - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_RunApp"
      },
      {
        "id": "function_22",
        "name": "HD系统.执行DOS指令取返回",
        "type": "函数",
        "description": "获取CMD命令形式的打开进程并获取返回输出",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_RunAppGetRet(char* cmdApp,BOOL bShowCrol,BOOL bWait);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "cmdApp",
            "type": "char*",
            "desc": "带exe+启动参数如"
          },
          {
            "name": "bShowCrol",
            "type": "bool",
            "desc": "是否显示进程窗口"
          },
          {
            "name": "Bwait",
            "type": "bool",
            "desc": "是否等待进程结束返回1.真会堵塞直到进程关闭(为了获取输出字符串)2.假不会堵塞同时获取不到输出字符串"
          }
        ],
        "returnValue": "成功返回:PID和返回json\n失败返回:查看返回值表",
        "notes": [],
        "codeExamples": [
          {
            "title": "HD系统.执行DOS指令取返回 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.执行DOS指令取返回 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.执行DOS指令取返回 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_RunAppGetRet"
      },
      {
        "id": "function_23",
        "name": "HD系统.管理员打开进程",
        "type": "函数",
        "description": "获取CMD命令形式的打开进程(支持管理员打开)(扩展版本)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_RunAppGetRetEx(char* cmdApp,char* lparam,BOOL bAs=TRUE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "cmdApp",
            "type": "char*",
            "desc": "APP路径+APP如"
          },
          {
            "name": "lparam",
            "type": "char*",
            "desc": "启动参数如"
          },
          {
            "name": "bAs",
            "type": "bool",
            "desc": "是否管理员"
          }
        ],
        "returnValue": "成功返回:PID和返回json\n失败返回:查看返回值表",
        "notes": [
          "内部是调用ShellExecuteExA"
        ],
        "codeExamples": [
          {
            "title": "HD系统.管理员打开进程 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.管理员打开进程 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.管理员打开进程 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_RunAppGetRetEx"
      },
      {
        "id": "function_24",
        "name": "HD系统.启动EXE带参数",
        "type": "函数",
        "description": "运行指定路径下的exe这个支持启动参数",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_RunAppEx(char* path,char* appName,char* lparam,__int32 flag,longtype);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "path",
            "type": "char*",
            "desc": "exe路径"
          },
          {
            "name": "appName",
            "type": "char*",
            "desc": "exe名字"
          },
          {
            "name": "lparam",
            "type": "char*",
            "desc": "启动参数"
          },
          {
            "name": "flag",
            "type": "__int32",
            "desc": "挂起状态打开(4),直接打开运行(0)"
          },
          {
            "name": "type",
            "type": "",
            "desc": "返回值类型进程ID(0)线程ID(1)进程句柄(2)线程句柄(3)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "这个支持启动参数"
        ],
        "codeExamples": [
          {
            "title": "HD系统.启动EXE带参数 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.启动EXE带参数 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.启动EXE带参数 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_RunAppEx"
      },
      {
        "id": "function_25",
        "name": "HD系统.启动EXE带参数Ex",
        "type": "函数",
        "description": "运行指定路径下的exe(HCSYS_RunAppEx的扩展版本)这个支持启动参数同时指定了当前进程的路径",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_RunAppExxxx(char* path,char* appName,char* lparam,__int32 flag,longtype);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "path",
            "type": "char*",
            "desc": "exe路径"
          },
          {
            "name": "appName",
            "type": "char*",
            "desc": "exe名字"
          },
          {
            "name": "lparam",
            "type": "char*",
            "desc": "启动参数"
          },
          {
            "name": "flag",
            "type": "__int32",
            "desc": "挂起状态打开(4),直接打开运行(0)"
          },
          {
            "name": "type",
            "type": "",
            "desc": "返回值类型进程ID(0)线程ID(1)进程句柄(2)线程句柄(3)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "这个支持启动参数"
        ],
        "codeExamples": [
          {
            "title": "HD系统.启动EXE带参数Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.启动EXE带参数Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.启动EXE带参数Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_RunAppExxxx"
      },
      {
        "id": "function_26",
        "name": "HD系统.获取磁盘特征码",
        "type": "函数",
        "description": "获取磁盘特征码",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_GetHDiskCode();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD系统.获取磁盘特征码 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取磁盘特征码 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取磁盘特征码 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_GetHDiskCode"
      },
      {
        "id": "function_27",
        "name": "HD系统.获取CPU特征码",
        "type": "函数",
        "description": "获取CPU特征码",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_GetCpuCode();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD系统.获取CPU特征码 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取CPU特征码 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取CPU特征码 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_GetCpuCode"
      },
      {
        "id": "function_28",
        "name": "HD系统.获取BOIS制造日期",
        "type": "函数",
        "description": "获取BOIS制造日期",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_GetBIOSInfo();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD系统.获取BOIS制造日期 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取BOIS制造日期 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取BOIS制造日期 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_GetBIOSInfo"
      },
      {
        "id": "function_29",
        "name": "HD系统.获取机器码",
        "type": "函数",
        "description": "获取机器码(包含网卡)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_GetMachineCode();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表\n返回成功信息存json中",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD系统.获取机器码 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取机器码 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取机器码 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_GetMachineCode"
      },
      {
        "id": "function_30",
        "name": "HD系统.获取机器码无网卡",
        "type": "函数",
        "description": "获取机器码(不包含网卡)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_GetMachineCodeNoMac();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD系统.获取机器码无网卡 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取机器码无网卡 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取机器码无网卡 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_GetMachineCodeNoMac"
      },
      {
        "id": "function_31",
        "name": "HD系统.获取网络时间",
        "type": "函数",
        "description": "获取网络时间",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_GetNetTime();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "北京时间",
          "固定内置服务器IP"
        ],
        "codeExamples": [
          {
            "title": "HD系统.获取网络时间 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取网络时间 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取网络时间 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_GetNetTime"
      },
      {
        "id": "function_32",
        "name": "HD系统.获取网络时间Ex",
        "type": "函数",
        "description": "获取网络时间(指定服务器IP获取)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_GetNetTimeByIp(char* ip);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "ip",
            "type": "char*",
            "desc": "ip字符串(如"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "北京时间"
        ],
        "codeExamples": [
          {
            "title": "HD系统.获取网络时间Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取网络时间Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取网络时间Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_GetNetTimeByIp"
      },
      {
        "id": "function_33",
        "name": "HD系统.获取系统版本",
        "type": "函数",
        "description": "获取系统版本",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_GetSystemBuildNumber();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表\n大于0表示具体版本号",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD系统.获取系统版本 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取系统版本 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取系统版本 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_GetSystemBuildNumber"
      },
      {
        "id": "function_34",
        "name": "HD系统.获取系统类型",
        "type": "函数",
        "description": "获取系统类型",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_GetSystemType();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表\n大于0表示具体版本:\nwin95/98/me/nt4.0(1)\nxp/2000(2)\n2003/2003R2/xp-64(3)\nwin7/2008R2(4)\nvista/2008(5)\nwin8/2012(6)\nwin8.1/2012R2(7)\nwin10/2016TP/win11(8)\nwin11(9)",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD系统.获取系统类型 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取系统类型 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取系统类型 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_GetSystemType"
      },
      {
        "id": "function_35",
        "name": "HD系统.开机经过时间",
        "type": "函数",
        "description": "获取开机到现在过经过的时间(毫秒)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_GetTime();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD系统.开机经过时间 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.开机经过时间 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.开机经过时间 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_GetTime"
      },
      {
        "id": "function_36",
        "name": "HD系统.当前进程是否X64",
        "type": "函数",
        "description": "当前进程是否是64位",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_Is64Bit();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD系统.当前进程是否X64 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.当前进程是否X64 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.当前进程是否X64 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_Is64Bit"
      },
      {
        "id": "function_37",
        "name": "HD系统.是否支持vt",
        "type": "函数",
        "description": "是否支持vt",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_IsSurrpotVt();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "可以在Bios中开启vt,如果不支持就没办法了"
        ],
        "codeExamples": [
          {
            "title": "HD系统.是否支持vt - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.是否支持vt - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.是否支持vt - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_IsSurrpotVt"
      },
      {
        "id": "function_38",
        "name": "HD系统.获取屏幕的色深",
        "type": "函数",
        "description": "获取屏幕的色深(24/32之类的)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_GetScreenPixelDepth();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD系统.获取屏幕的色深 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取屏幕的色深 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取屏幕的色深 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_GetScreenPixelDepth"
      },
      {
        "id": "function_39",
        "name": "HD系统.设置屏幕的色深",
        "type": "函数",
        "description": "设置屏幕的色深",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_SetScreenPixelDepth(__int32 dmBitsPerPel);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "dmBitsPerPel",
            "type": "__int32",
            "desc": "像素深度值(24/32之类的)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD系统.设置屏幕的色深 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.设置屏幕的色深 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.设置屏幕的色深 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_SetScreenPixelDepth"
      },
      {
        "id": "function_40",
        "name": "HD系统.获取屏幕高度",
        "type": "函数",
        "description": "获取屏幕高度",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_GetScreenHeight();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD系统.获取屏幕高度 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取屏幕高度 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取屏幕高度 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_GetScreenHeight"
      },
      {
        "id": "function_41",
        "name": "HD系统.获取屏幕宽度",
        "type": "函数",
        "description": "获取屏幕宽度",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_GetScreenWidth();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD系统.获取屏幕宽度 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取屏幕宽度 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取屏幕宽度 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_GetScreenWidth"
      },
      {
        "id": "function_42",
        "name": "HD系统.设置屏幕分辨率",
        "type": "函数",
        "description": "设置屏幕分辨率",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_SetScreen(__int32 width,__int32 height);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "width",
            "type": "__int32",
            "desc": "宽度"
          },
          {
            "name": "heght",
            "type": "",
            "desc": "高度"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD系统.设置屏幕分辨率 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.设置屏幕分辨率 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.设置屏幕分辨率 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_SetScreen"
      },
      {
        "id": "function_43",
        "name": "HD系统.获取CMD命令返回值",
        "type": "函数",
        "description": "获取CMD命令返回值(字符串)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSYS_GetCmdRet(char* cmd);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "cmd",
            "type": "char*",
            "desc": "cmd命令字符串"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD系统.获取CMD命令返回值 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取CMD命令返回值 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD系统.获取CMD命令返回值 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSYS_GetCmdRet"
      }
    ]
  },
  {
    "id": "category_35",
    "name": "自定义插件模块(Com)",
    "functions": [
      {
        "id": "function_1",
        "name": "HD插件.加载插件",
        "type": "函数",
        "description": "添加自定义组件",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCModule_AddComponent(__int32 窗口序号,char* 账号,char* 密码,char* 组件绝对路径,__int64 rcx,__int64 rdx,__int64 r8,__int64 r9,__int64 l5,__int64 l6,__int64 addType=-1,BOOL 是否自动初始化=TRUE,BOOL 是否主线程调用=FALSE);",
            "description": ""
          },
          {
            "prototype": "__int64 __stdcall HCModule_AddComponent(__int32 窗口序号,char* 账号,char* 密码,char* 组件绝对路径,__int64 l1,__int64 l2,__int64 l3,__int64 l4,__int64 l5,__int64 l6,__int64 addType=-1,BOOL 是否自动初始化=TRUE,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号"
          },
          {
            "name": "账号",
            "type": "char*",
            "desc": "开发者自己的自定义模块设置的账号"
          },
          {
            "name": "密码",
            "type": "char*",
            "desc": "开发者自己的自定义模块设置的密码"
          },
          {
            "name": "组件绝对路径",
            "type": "char*",
            "desc": "组件绝对路径注意不要用中文路径！！"
          },
          {
            "name": "rcx-l1",
            "type": "__int64",
            "desc": "CALL参数第一个参数"
          },
          {
            "name": "rdx-l2",
            "type": "__int64",
            "desc": "CALL参数第二个参数"
          },
          {
            "name": "r8-l3",
            "type": "__int64",
            "desc": "CALL参数第三个参数"
          },
          {
            "name": "r9-l4",
            "type": "__int64",
            "desc": "CALL参数第四个参数"
          },
          {
            "name": "l5",
            "type": "__int64",
            "desc": "CALL参数第五个参数"
          },
          {
            "name": "l6",
            "type": "__int64",
            "desc": "CALL参数第六个参数"
          },
          {
            "name": "addType",
            "type": "__int64",
            "desc": "添加方式-1默认或者1无痕(不可卸载)2普通加载(可卸载)"
          },
          {
            "name": "是否自动初始化",
            "type": "bool",
            "desc": "是否自动调用初始化接口(HDDataInit)并传递rcx-l6等6个参数"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否主线程调用这个CALL,需要挂接主线程HC_HookMaint hread"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "自定义模块需要导入包并来实现接口绑定"
        ],
        "codeExamples": [
          {
            "title": "HD插件.加载插件 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD插件.加载插件 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD插件.加载插件 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCModule_AddComponent"
      },
      {
        "id": "function_2",
        "name": "HD插件.卸载插件",
        "type": "函数",
        "description": "卸载指定插件",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCModule_DeleteComponent(__int32 窗口序号,char* 组件名,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号"
          },
          {
            "name": "组件名",
            "type": "char*",
            "desc": "dll的文件名(不包含后缀.dll)"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否主线程调用这个CALL,需要挂接主线程"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "自定义模块需要导入包并来实现接口绑定"
        ],
        "codeExamples": [
          {
            "title": "HD插件.卸载插件 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD插件.卸载插件 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD插件.卸载插件 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCModule_DeleteComponent"
      },
      {
        "id": "function_3",
        "name": "HD插件.CALL",
        "type": "函数",
        "description": "调用自定义组件中的接口",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCModule_CALL(__int32 窗口序号,char* 组件名,char* 函数名字,__int64 rcx,__int64 rdx,__int64 r8,__int64 r9,__int64 l5,__int64 l6,BOOL 是否主线程调用=FALSE);",
            "description": ""
          },
          {
            "prototype": "__int64 __stdcall HCModule_CALL(__int32 窗口序号,char* 组件名,char* 函数名字,__int64 l1,__int64 l2,__int64 l3,__int64 l4,__int64 l5,__int64 l6,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号"
          },
          {
            "name": "组件名",
            "type": "char*",
            "desc": "组件名(就是组件文件的名字)"
          },
          {
            "name": "函数名字",
            "type": "char*",
            "desc": "函数名字"
          },
          {
            "name": "组件绝对路径",
            "type": "",
            "desc": "组件绝对路径"
          },
          {
            "name": "rcx-l1",
            "type": "__int64",
            "desc": "CALL参数第一个参数"
          },
          {
            "name": "rdx-l2",
            "type": "__int64",
            "desc": "CALL参数第二个参数"
          },
          {
            "name": "r8-l3",
            "type": "__int64",
            "desc": "CALL参数第三个参数"
          },
          {
            "name": "r9-l4",
            "type": "__int64",
            "desc": "CALL参数第四个参数"
          },
          {
            "name": "l5",
            "type": "__int64",
            "desc": "CALL参数第五个参数"
          },
          {
            "name": "l6",
            "type": "__int64",
            "desc": "CALL参数第六个参数"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否主线程调用这个CALL,需要挂接主线程"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "自定义模块需要导入包并来实现接口绑定",
          "参考:X86X64自定义插件接口说明"
        ],
        "codeExamples": [
          {
            "title": "HD插件.CALL - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD插件.CALL - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD插件.CALL - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCModule_CALL"
      },
      {
        "id": "function_4",
        "name": "HD插件.CALLEx",
        "type": "函数",
        "description": "调用自定义组件中的接口(可传递任意参数类型)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCModule_CALLEx(__int32 窗口序号,char* 组件名,char* 函数名字,__int64 rcx,__int64 rdx,__int64 r8,__int64 r9,__int64 l5,__int64 l6,char* buffer,int bufferSize,BOOL 是否主线程调用=FALSE);",
            "description": ""
          },
          {
            "prototype": "__int64 __stdcall HCModule_CALLEx(__int32 窗口序号,char* 组件名,char* 函数名字,__int64 l1,__int64 l2,__int64 l3,__int64 l4,__int64 l5,__int64 l6,char* buffer,int bufferSize,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号"
          },
          {
            "name": "组件名",
            "type": "char*",
            "desc": "组件名(就是组件文件的名字)"
          },
          {
            "name": "函数名字",
            "type": "char*",
            "desc": "函数名字"
          },
          {
            "name": "rcx-l1",
            "type": "__int64",
            "desc": "CALL参数第一个参数"
          },
          {
            "name": "rdx-l2",
            "type": "__int64",
            "desc": "CALL参数第二个参数"
          },
          {
            "name": "r8-l3",
            "type": "__int64",
            "desc": "CALL参数第三个参数"
          },
          {
            "name": "r9-l4",
            "type": "__int64",
            "desc": "CALL参数第四个参数"
          },
          {
            "name": "l5",
            "type": "__int64",
            "desc": "CALL参数第五个参数"
          },
          {
            "name": "l6",
            "type": "__int64",
            "desc": "CALL参数第六个参数"
          },
          {
            "name": "buffer",
            "type": "char*",
            "desc": "缓冲区地址"
          },
          {
            "name": "bufferSize",
            "type": "int",
            "desc": "指定的缓冲区中有效字节大小(最大不可超过1024* 100),如果是字符串不能超过(1024* 100-1),统一规定不能超过(1024* 100-1)"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否主线程调用这个CALL,需要挂接主线程"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "自定义模块需要导入包并来实现接口绑定",
          "注意:传递的buffer字符串在自定义插件接口",
          "typedefHDComRet(__stdcall* HDComFunType)(__int64 retStrAddr,__int64 rcx,__int64 rdx,__int64 r8,__int64 r9,__int64 l5,__int64 l6);",
          "第一个参数retStrAddr作为字符串首地址(char* )能拿到",
          "如:",
          "C++代码演示:",
          "char* info=(char* )retStrAddr;",
          "参考:X86X64自定义插件接口说明"
        ],
        "codeExamples": [
          {
            "title": "HD插件.CALLEx - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD插件.CALLEx - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD插件.CALLEx - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCModule_CALLEx"
      }
    ]
  },
  {
    "id": "category_36",
    "name": "插件包装器",
    "functions": [
      {
        "id": "function_1",
        "name": "HCCOM_Load",
        "type": "函数",
        "description": "加载组件",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCCOM_Load(char* 组件名,__int32 组件索引,__int32 timeOutMs=300000);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "组件名",
            "type": "char*",
            "desc": "组件名(这里的组件名就是HCModule_CALL的参数)不包含后缀"
          },
          {
            "name": "组件索引",
            "type": "__int32",
            "desc": "1开始最多添加2个组件"
          },
          {
            "name": "timeOutMs",
            "type": "__int32",
            "desc": "当通知接口为堵塞模式下有效默认5分钟超时"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "组件名为当前组件文件的名字(不包含后缀!,如果组件文件无后缀可忽视)",
          "如:hdmad.dll所对应的组件名必须是hdmad",
          "头文件:",
          "HDLoader.h",
          "静态库:",
          "HDPacker.librelease版本",
          "HDPackerd.libdebug版本"
        ],
        "codeExamples": [
          {
            "title": "HCCOM_Load - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCCOM_Load - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCCOM_Load - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_2",
        "name": "HCCOM_Register",
        "type": "函数",
        "description": "注册自定义组件中的接口",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCCOM_Register(char* 函数名,__int64 函数地址);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "函数名",
            "type": "char*",
            "desc": "函数名"
          },
          {
            "name": "函数地址",
            "type": "__int64",
            "desc": "函数地址"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "内置数据初始化函数接口名字:HDDataInit(接口类型是HDComFunType)HDDataInit初始化函数会在加载组件的时候首次调用以便于完成对相关组件数据的初始化(比如:基地址相关表达式的获取)如果需要初始化就自己写一个名字叫做HDDataInit的函数,类型为HDComFunType,并调用HCCOM_Register",
          "头文件:",
          "HDLoader.h",
          "静态库:",
          "HDPacker.librelease版本",
          "HDPackerd.libdebug版本",
          "参考:X86X64自定义插件接口说明"
        ],
        "codeExamples": [
          {
            "title": "HCCOM_Register - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCCOM_Register - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCCOM_Register - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_3",
        "name": "HCCOM_NotifyToTarget",
        "type": "函数",
        "description": "自定义模块通知目标进程接口",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCCOM_NotifyToTarget(__int32 插件序号,__int32 callType,BOOL 堵塞=FALSE,__int32 超时毫秒=10000,char* 字符串信息1=NULL,char* 字符串信息2=NULL,__int64 CALL地址=0,__int64 rcx=0,__int64 rdx=0,__int64 r8=0,__int64 r9=0,__int64 lparam5=0,__int64 lparam6=0,__int64 lparam7=0,__int64 lparam8=0,BOOL 是否主线程调用=FALSE);",
            "description": ""
          },
          {
            "prototype": "__int64 __stdcall HCCOM_NotifyToTarget(__int32 插件序号,__int32 callType,BOOL 堵塞=FALSE,__int32 超时毫秒=10000,char* 字符串信息1=NULL,char* 字符串信息2=NULL,__int32 CALL地址=0,__int32 lparam1=0,__int32 lparam2=0,__int32 lparam3=0,__int32 lparam4=0,__int32 lparam5=0,__int32 lparam6=0,__int32 lparam7=0,__int32 lparam8=0,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "插件序号",
            "type": "__int32",
            "desc": "自定义插件支持2个这里分别是1或者2"
          },
          {
            "name": "callType",
            "type": "__int32",
            "desc": "接口编号(内置了找管理员索要)"
          },
          {
            "name": "堵塞",
            "type": "bool",
            "desc": "调用接口是否堵塞,等待返回注意"
          },
          {
            "name": "超时毫秒",
            "type": "__int32",
            "desc": "如果堵塞参数为假这个参数有效"
          },
          {
            "name": "字符串信息1-字符串信息2-CALL地址-rcx-rdx-r8-r9-lparam5-lparam6-lparam7-lparam8",
            "type": "char*",
            "desc": "用户自定义传递参数注意参数类型"
          },
          {
            "name": "字符串信息1-字符串信息2-CALL地址-lparam1-lparam2-lparam3-lparam4-lparam5-lparam6-lparam7-lparam8",
            "type": "char*",
            "desc": "用户自定义传递参数注意参数类型"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "真为主线程调用,前期在绑定了主程序,请先使用HC_HookMaint hread"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "内置数据初始化函数接口名字:HDDataInit(接口类型是HDComFunType)HDDataInit初始化函数会在加载组件的时候首次调用以便于完成对相关组件数据的初始化(比如:基地址相关表达式的获取)如果需要初始化就自己写一个名字叫做HDDataInit的函数,类型为HDComFunType,并调用HCCOM_Register",
          "头文件:",
          "HDLoader.h",
          "静态库:",
          "HDPacker.librelease版本",
          "HDPackerd.libdebug版本"
        ],
        "codeExamples": [
          {
            "title": "HCCOM_NotifyToTarget - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCCOM_NotifyToTarget - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCCOM_NotifyToTarget - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_4",
        "name": "HCCOM_NotifyToController",
        "type": "函数",
        "description": "自定义模块通知中控进程接口",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCCOM_NotifyToController(__int32 插件序号,__int32 callType,BOOL 堵塞=FALSE,__int32 超时毫秒=10000,char* 字符串信息1=NULL,char* 字符串信息2=NULL,__int64 CALL地址=0,__int64 rcx=0,__int64 rdx=0,__int64 r8=0,__int64 r9=0,__int64 lparam5=0,__int64 lparam6=0,__int64 lparam7=0,__int64 lparam8=0,BOOL 是否主线程调用=FALSE);",
            "description": ""
          },
          {
            "prototype": "__int64 __stdcall HCCOM_NotifyToController(__int32 插件序号,__int32 callType,BOOL 堵塞=FALSE,__int32 超时毫秒=10000,char* 字符串信息1=NULL,char* 字符串信息2=NULL,__int32 CALL地址=0,__int32 lparam1=0,__int32 lparam2=0,__int32 lparam3=0,__int32 lparam4=0,__int32 lparam5=0,__int32 lparam6=0,__int32 lparam7=0,__int32 lparam8=0,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "插件序号",
            "type": "__int32",
            "desc": "自定义插件支持2个这里分别是1或者2"
          },
          {
            "name": "callType",
            "type": "__int32",
            "desc": "接口编号(自定义)中控自己再处理事件回调函数中可以判断调用HCEnv_SetHandleEventCallBack接口设置【注意！自定义编号值在0到1000之间不包含1000！！！！！】"
          },
          {
            "name": "堵塞",
            "type": "bool",
            "desc": "调用接口是否堵塞,等待返回注意"
          },
          {
            "name": "超时毫秒",
            "type": "__int32",
            "desc": "如果堵塞参数为假这个参数有效"
          },
          {
            "name": "字符串信息1-字符串信息2-CALL地址-rcx-rdx-r8-r9-lparam5-lparam6-lparam7-lparam8",
            "type": "char*",
            "desc": "用户自定义传递参数注意参数类型"
          },
          {
            "name": "字符串信息1-字符串信息2-CALL地址-lparam1-lparam2-lparam3-lparam4-lparam5-lparam6-lparam7-lparam8",
            "type": "char*",
            "desc": "用户自定义传递参数注意参数类型"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "真为主线程调用,前期在绑定了主程序,请先使用HC_HookMaint hread"
          }
        ],
        "returnValue": "查看返回值表\n中控事件处理回调函数接口类型:\ntypedef__int32 (__stdcall* HandleEventFunType)(__int32 窗口序号,__int32 插件序号,HDHandleEventInfoInfo);\nHDHandleEventInfo结构体:\ntypedefstructHDHandleEventInfo\\n处理事件{__int32 m_callType;\\n自定义HDValuem_call;HDValuem_rcx;HDValuem_rdx;HDValuem_r8;HDValuem_r9;HDValuem_lparam5;HDValuem_lparam6;HDValuem_lparam7;HDValuem_lparam8;HDValuem_value;HDValuem_size;charm_buffer[MAX_PATH];charm_buffer2[MAX_PATH];HDValue* m_pRetValue;\\n值单独char* m_pRetJson;\\n字符串返回}HDHandleEventInfo;",
        "notes": [
          "内置数据初始化函数接口名字:HDDataInit(接口类型是HDComFunType)HDDataInit初始化函数会在加载组件的时候首次调用以便于完成对相关组件数据的初始化(比如:基地址相关表达式的获取)如果需要初始化就自己写一个名字叫做HDDataInit的函数,类型为HDComFunType,并调用HCCOM_Register",
          "头文件:",
          "HDLoader.h",
          "静态库:",
          "HDPacker.librelease版本",
          "HDPackerd.libdebug版本"
        ],
        "codeExamples": [
          {
            "title": "HCCOM_NotifyToController - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCCOM_NotifyToController - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCCOM_NotifyToController - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_5",
        "name": "HCCOM_GetRetJson",
        "type": "函数",
        "description": "获取自定义模块通知中控进程返回的字符串结果",
        "prototypes": [
          {
            "prototype": "char* __stdcall HCCOM_GetRetJson(__int32 插件序号);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "插件序号",
            "type": "__int32",
            "desc": "自定义插件支持2个这里分别是1或者2"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "返回的字符串是自定义的",
          "在中控中自己设置的事件处理回调函数中设置返回",
          "头文件:",
          "HDLoader.h",
          "静态库:",
          "HDPacker.librelease版本",
          "HDPackerd.libdebug版本"
        ],
        "codeExamples": [
          {
            "title": "HCCOM_GetRetJson - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCCOM_GetRetJson - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCCOM_GetRetJson - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_6",
        "name": "HCCOM_FindCode",
        "type": "函数",
        "description": "特征码查找",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCCOM_FindCode(char* 特征码字符串地址,__int32 偏移,__int32 次数,__int32 type=1,char* 模块名字=NULL);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "特征码字符串地址",
            "type": "char*",
            "desc": "特征码字符串地址(支持??)"
          },
          {
            "name": "偏移",
            "type": "__int32",
            "desc": "正负偏移"
          },
          {
            "name": "次数",
            "type": "__int32",
            "desc": "找到的第几次从1开始"
          },
          {
            "name": "type",
            "type": "__int32",
            "desc": "获取的是(基地址/CALL地址/直接地址/地址中的值)1为地址2为基地址3为CALL4为地址中的值"
          },
          {
            "name": "模块名字",
            "type": "char*",
            "desc": "在指定的模块中搜索,默认为主模块NULL为默认"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HCCOM_FindCode - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCCOM_FindCode - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCCOM_FindCode - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_7",
        "name": "HCCOM_PrintLog",
        "type": "函数",
        "description": "是否打开debugview调试日志信息",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCCOM_PrintLog(BOOL bOpen);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "bOpen",
            "type": "BOOL",
            "desc": "是否打开"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "返回当前是否开启"
        ],
        "codeExamples": [
          {
            "title": "HCCOM_PrintLog - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCCOM_PrintLog - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCCOM_PrintLog - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_8",
        "name": "HCCOM_GetVersion",
        "type": "函数",
        "description": "获取自定义内存插件版本号",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCCOM_GetVersion();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "返回当前是否开启"
        ],
        "codeExamples": [
          {
            "title": "HCCOM_GetVersion - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCCOM_GetVersion - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCCOM_GetVersion - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      }
    ]
  },
  {
    "id": "category_37",
    "name": "状态机模块",
    "functions": [
      {
        "id": "function_1",
        "name": "HCHD_GetHDStatusControler",
        "type": "函数",
        "description": "获取控制器有且只有一个",
        "prototypes": [
          {
            "prototype": "HDStatusControler* _stdcallHCHD_GetHDStatusControler();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "返回控制器单例对象地址",
        "notes": [
          "拿到控制器对象可以获取或者操作其他组件对象"
        ],
        "codeExamples": [
          {
            "title": "HCHD_GetHDStatusControler - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCHD_GetHDStatusControler - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCHD_GetHDStatusControler - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      }
    ]
  },
  {
    "id": "category_38",
    "name": "控制器模块",
    "functions": [
      {
        "id": "function_1",
        "name": "HCHD_GetHDController",
        "type": "函数",
        "description": "获取控制器有且只有一个",
        "prototypes": [
          {
            "prototype": "HDController* _stdcallHCHD_GetHDController();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "返回控制器单例对象地址",
        "notes": [
          "拿到控制器对象可以获取或者操作其他组件对象"
        ],
        "codeExamples": [
          {
            "title": "HCHD_GetHDController - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCHD_GetHDController - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCHD_GetHDController - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      }
    ]
  },
  {
    "id": "category_39",
    "name": "主板机模块[SC]",
    "functions": [
      {
        "id": "function_1",
        "name": "HD主板机.设置路径",
        "type": "函数",
        "description": "设置HDScrcpy投屏软件根目录,并重启adb相当于重置一下adb环境",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSC_SetPath(char* rootPath);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "rootPath",
            "type": "char*",
            "desc": "根目录(hdscrcpy.exeadb.exe所在目录)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "设置HDScrcpy投屏软件根目录如:J:\\\\hdscrcpy2.7\\\\默认C:\\\\hdscrcpy2.7\\\\",
          "软件在群文件或者找管理索取"
        ],
        "codeExamples": [
          {
            "title": "HD主板机.设置路径 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD主板机.设置路径 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD主板机.设置路径 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSC_SetPath"
      },
      {
        "id": "function_2",
        "name": "HD主板机.重置ADB服务",
        "type": "函数",
        "description": "重置adb服务",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSC_ResetAdb(char* ipInfo);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "ipInfo",
            "type": "char*",
            "desc": "IP端口信息多个IP信息用\\\"|\\\"隔开IP和端口用\\\""
          }
        ],
        "returnValue": "查看返回值表\n1.当传递NULL空表示重启ABD此时接口返回的是是否重启成功具体看json返回2.当传递有效IP字符串信息表示重启ADB的同时会连接对应的IP端口此时接口返回的是成功连接数量如果是0表示连接数为0或者重启失败具体看json返回",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD主板机.重置ADB服务 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD主板机.重置ADB服务 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD主板机.重置ADB服务 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSC_ResetAdb"
      },
      {
        "id": "function_3",
        "name": "HD主板机.查询设备",
        "type": "函数",
        "description": "查询当前所有可用的设备",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSC_QueryDevices();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表\n成功json字符串信息:设备1名字|设备2名字|设备3名字|以\\\"|\\\"分割\n如:01aa8320032fe731|127.0.0.1:16384|emulator-5556|emulator-5558|\n失败json字符串信息:连接失败信息",
        "notes": [
          "无",
          "设备号类型:1.emulator-5554/127.0.0.1:5009模拟器Device(-s)",
          "2.01aa8320032fe731手机Device(-d)",
          "3.127.0.0.1:5009tcpipDevice(-e)"
        ],
        "codeExamples": [
          {
            "title": "HD主板机.查询设备 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD主板机.查询设备 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD主板机.查询设备 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSC_QueryDevices"
      },
      {
        "id": "function_4",
        "name": "HD主板机.连接设备",
        "type": "函数",
        "description": "连接设备并通讯窗口序号（需要先初始化中控和登录！！HCHD_LoginHCEnv_Init/HCEnv_InitEx）",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSC_ConnectDevices(__int32 winIndex,char* devicesName,char* cmdLparam,__int32 type,__int32 w,__int32 h,__int32 timeOut);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "winIndex",
            "type": "__int32",
            "desc": "窗口序号devicesName"
          }
        ],
        "returnValue": "成功返回打开的窗口PID\n失败返回:查看返回值表",
        "notes": [
          "1.该接口会自动连接指定的设备号",
          "2.同时会进行通讯和重连判断(需要加载HD驱动)",
          "3.无需再通讯",
          "设备号类型:1.emulator-5554/127.0.0.1:5009模拟器Device(-s)",
          "2.01aa8320032fe731手机Device(-d)",
          "3.127.0.0.1:5009tcpipDevice(-e)"
        ],
        "codeExamples": [
          {
            "title": "HD主板机.连接设备 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD主板机.连接设备 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD主板机.连接设备 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSC_ConnectDevices"
      }
    ]
  },
  {
    "id": "category_40",
    "name": "虚拟机[VM]",
    "functions": [
      {
        "id": "function_1",
        "name": "HCVM_Run",
        "type": "函数",
        "description": "运行虚拟机(管理员运行)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVM_Run(__int32 windowsIndex,char* vmPath,char* vmxSysPath,BOOL bGui=FALSE,char* lparam=NULL,longvmType=0,longtype=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "windowsIndex",
            "type": "__int32",
            "desc": "窗口序号表示只是打开虚拟机注意"
          },
          {
            "name": "vmPath",
            "type": "char*",
            "desc": "VM安装路径如"
          },
          {
            "name": "vmxSysPath",
            "type": "char*",
            "desc": "虚拟机vmx路径如"
          },
          {
            "name": "bGui",
            "type": "bool",
            "desc": "是否界面GUI显示启动虚拟机"
          },
          {
            "name": "lparam",
            "type": "char*",
            "desc": "额外命令参数"
          },
          {
            "name": "vmType",
            "type": "",
            "desc": "0VMwareWorkstation-Tws默认为01VMwarePlayer-Tplayer"
          },
          {
            "name": "type",
            "type": "",
            "desc": "默认0就行保留"
          }
        ],
        "returnValue": "查看返回值表\n返回值:01",
        "notes": [
          "指令:",
          "D:\\vmwin10>D:\\vm16\\vmrun-Twsstart\\\"D:/vmwin10/Windows10x64.vmx\\\"guilparam",
          "D:\\vmwin10>D:\\vm16\\vmrun-Twsstart\\\"D:/vmwin10/Windows10x64.vmx\\\"noguilparam",
          "C++案例:",
          "autoret=HCVM_Run(0,\\\"D:\\\\vm16\\\\\\\",\\\"D:\\\\vmwin10\\\\Windows10x64.vmx\\\",TRUE,0,0,0);"
        ],
        "codeExamples": [
          {
            "title": "HCVM_Run - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCVM_Run - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCVM_Run - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_2",
        "name": "HCVM_Rerun",
        "type": "函数",
        "description": "重启运行虚拟机(管理员运行)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVM_Rerun(__int32 windowsIndex,char* vmPath,char* vmxSysPath,BOOL bForceRoot=TRUE,BOOL bGui=FALSE,char* lparam=NULL,longvmType=0,longtype=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "windowsIndex",
            "type": "__int32",
            "desc": "窗口序号表示只是打开虚拟机注意"
          },
          {
            "name": "vmPath",
            "type": "char*",
            "desc": "VM安装路径如"
          },
          {
            "name": "vmxSysPath",
            "type": "char*",
            "desc": "虚拟机vmx路径如"
          },
          {
            "name": "bForceRoot",
            "type": "bool",
            "desc": "是否强制重启（类似断电）反之表示正常重启（需VMwareTools支持）"
          },
          {
            "name": "bGui",
            "type": "bool",
            "desc": "是否界面GUI显示启动虚拟机"
          },
          {
            "name": "lparam",
            "type": "char*",
            "desc": "额外命令参数"
          },
          {
            "name": "vmType",
            "type": "",
            "desc": "0VMwareWorkstation-Tws默认为01VMwarePlayer-Tplayer"
          },
          {
            "name": "type",
            "type": "",
            "desc": "默认0就行保留"
          }
        ],
        "returnValue": "查看返回值表\n返回值:01",
        "notes": [
          "指令:",
          "D:\\vmwin10>D:\\vm16\\vmrun-Twsrestart\\\"D:/vmwin10/Windows10x64.vmx\\\"guilparam",
          "D:\\vmwin10>D:\\vm16\\vmrun-Twsrestart\\\"D:/vmwin10/Windows10x64.vmx\\\"noguilparam",
          "C++案例:",
          "autoret=HCVM_Rerun(0,\\\"D:\\\\vm16\\\\\\\",\\\"D:\\\\vmwin10\\\\Windows10x64.vmx\\\",m_强制关闭CheckBox.GetCheck(),TRUE,0,0,0);</FONT>"
        ],
        "codeExamples": [
          {
            "title": "HCVM_Rerun - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCVM_Rerun - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCVM_Rerun - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_3",
        "name": "HCVM_Close",
        "type": "函数",
        "description": "关闭运行虚拟机(管理员运行)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVM_Close(__int32 windowsIndex,char* vmPath,char* vmxSysPath,BOOL bForceRoot=TRUE,longvmType=0,longtype=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "windowsIndex",
            "type": "__int32",
            "desc": "窗口序号表示只是打开虚拟机注意"
          },
          {
            "name": "vmPath",
            "type": "char*",
            "desc": "VM安装路径如"
          },
          {
            "name": "vmxSysPath",
            "type": "char*",
            "desc": "虚拟机vmx路径如"
          },
          {
            "name": "bForceRoot",
            "type": "bool",
            "desc": "是否强制重启（类似断电）反之表示正常重启（需VMwareTools支持）"
          },
          {
            "name": "vmType",
            "type": "",
            "desc": "0VMwareWorkstation-Tws默认为01VMwarePlayer-Tplayer"
          },
          {
            "name": "type",
            "type": "",
            "desc": "默认0就行保留"
          }
        ],
        "returnValue": "查看返回值表\n返回值:01",
        "notes": [
          "指令:",
          "D:\\vmwin10>D:\\vm16\\vmrun-Twsstop\\\"D:/vmwin10/Windows10x64.vmx\\\"",
          "D:\\vmwin10>D:\\vm16\\vmrun-Twsstop\\\"D:/vmwin10/Windows10x64.vmx\\\"",
          "C++案例:",
          "autoret=HCVM_Close(0,\\\"D:\\\\vm16\\\\\\\",\\\"D:\\\\vmwin10\\\\Windows10x64.vmx\\\",m_强制关闭CheckBox.GetCheck(),0,0);"
        ],
        "codeExamples": [
          {
            "title": "HCVM_Close - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCVM_Close - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCVM_Close - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_4",
        "name": "HCVM_List",
        "type": "函数",
        "description": "获取当前正在运行的虚拟机路径和总数(管理员运行)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVM_List(char* vmPath);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "vmPath",
            "type": "char*",
            "desc": "VM安装路径如"
          }
        ],
        "returnValue": "查看返回值表\n返回值:数量\n返回的json:\\\"|\\\"隔开如:\\\"D:/vmwin10/Windows10x64_1.vmx|D:/vmwin10/Windows10x64_2.vmx|D:/vmwin10/Windows10x64_3.vmx\\\"",
        "notes": [
          "无",
          "C++案例:",
          "autoret=HCVM_List(\\\"D:\\\\vm16\\\\\\\");"
        ],
        "codeExamples": [
          {
            "title": "HCVM_List - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCVM_List - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCVM_List - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_5",
        "name": "HCVM_IsStart",
        "type": "函数",
        "description": "指定虚拟机是否已经开启(管理员运行)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVM_IsStart(char* vmPath,char* vmxSysPath);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "vmPath",
            "type": "char*",
            "desc": "VM安装路径如"
          },
          {
            "name": "vmxSysPath",
            "type": "char*",
            "desc": "虚拟机vmx路径如"
          }
        ],
        "returnValue": "查看返回值表\n返回值:01",
        "notes": [
          "无",
          "C++案例:",
          "autoret=HCVM_List(\\\"D:\\\\vm16\\\\\\\",\\\"D:/vmwin10/Windows10x64_1.vmx\\\");"
        ],
        "codeExamples": [
          {
            "title": "HCVM_IsStart - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCVM_IsStart - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCVM_IsStart - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      }
    ]
  },
  {
    "id": "category_41",
    "name": "虚拟机DMA模块[VMDMA]",
    "functions": [
      {
        "id": "function_1",
        "name": "HDDMA.获取版本号",
        "type": "函数",
        "description": "获取DMA服务器版本号",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVMDMA_GetVersion(__int32 windowsIndex);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "windowsIndex",
            "type": "__int32",
            "desc": "窗口序号"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "返回长整数:如:240401格式:24年-04版本号-01小版本号"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.获取版本号 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.获取版本号 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.获取版本号 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_GetVersion"
      },
      {
        "id": "function_2",
        "name": "HDDMA.版本是否一致",
        "type": "函数",
        "description": "判断HD插件的DMA接口和DMA服务器接口版本是否一致",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVMDMA_IsVersion(__int32 windowsIndex);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "windowsIndex",
            "type": "__int32",
            "desc": "窗口序号"
          }
        ],
        "returnValue": "查看返回值表\n真假版本是否一致",
        "notes": [],
        "codeExamples": [
          {
            "title": "HDDMA.版本是否一致 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.版本是否一致 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.版本是否一致 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_IsVersion"
      },
      {
        "id": "function_3",
        "name": "HDDMA.开启服务器",
        "type": "函数",
        "description": "开启DMA服务器",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVMDMA_StartServer(char* ip=\\\"0.0.0.0\\\",int port=6532,char* serverRootPath=\\\"\\\");",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "ip",
            "type": "char*",
            "desc": "IP默认"
          },
          {
            "name": "port",
            "type": "int",
            "desc": "端口默认"
          },
          {
            "name": "serverRootPath",
            "type": "char*",
            "desc": "服务器exe根目录默认"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "服务器在群下载或者官网下载",
          "兼容指定自定义进程名(全路径\\\\XXXX.exe)XXXX.exe为自定义进程名不指定进程名表示使用内置进程名(全路径\\\\HDVMDma.exe)不指定路径(当前中控exe根目录\\\\HDVMDma.exe)"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.开启服务器 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.开启服务器 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.开启服务器 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_StartServer"
      },
      {
        "id": "function_4",
        "name": "HDDMA.关闭服务器",
        "type": "函数",
        "description": "关闭服务器,同时结束进程",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVMDMA_CloseServer();",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.关闭服务器 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.关闭服务器 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.关闭服务器 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_CloseServer"
      },
      {
        "id": "function_5",
        "name": "HDDMA.服务器是否开启",
        "type": "函数",
        "description": "服务器是否已经开启",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVMDMA_ServerIsStart(char* ip=\\\"127.0.0.1\\\",int port=6532);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "ip",
            "type": "char*",
            "desc": "指定服务器IP,指定后可以用来判断服务器是否开启"
          },
          {
            "name": "port",
            "type": "int",
            "desc": "指定服务器端口,指定后可以用来判断服务器是否开启"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "循环检查直到服务器开启成功",
          "如果使用HCVMDMA_StartServer开启服务器,不指定IP和端口,则使用的是HCVMDMA_ServerIsStart指定的IP和端口"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.服务器是否开启 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.服务器是否开启 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.服务器是否开启 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_ServerIsStart"
      },
      {
        "id": "function_6",
        "name": "HDDMA.关联虚拟机",
        "type": "函数",
        "description": "初始化并关联虚拟机",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCVMDMA_Init(__int32 windowsIndex,__int32 vmPid,__int32 timeOut=10000);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "windowsIndex",
            "type": "__int32",
            "desc": "窗口序号"
          },
          {
            "name": "vmPid",
            "type": "__int32",
            "desc": "虚拟机PID进程名是"
          },
          {
            "name": "timeOut",
            "type": "__int32",
            "desc": "超时等待时间"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先开启服务器HCVMDMA_StartServer",
          "内部会自动调用HCEnv_Load接口,使窗口序号和虚拟机进程关联绑定然后初始化虚拟机相关资源",
          "后续就可以使用该窗口虚拟机去操作对应的虚拟机中的进程"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.关联虚拟机 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.关联虚拟机 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.关联虚拟机 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_Init"
      },
      {
        "id": "function_7",
        "name": "HDDMA.获取PID",
        "type": "函数",
        "description": "通过进程名获取PID",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.获取PID - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.获取PID - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.获取PID - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_GetPid"
      },
      {
        "id": "function_8",
        "name": "HDDMA.读地址",
        "type": "函数",
        "description": "读地址,仅支持1248地址大小",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.读地址 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.读地址 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.读地址 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_Read"
      },
      {
        "id": "function_9",
        "name": "HDDMA.读单浮点",
        "type": "函数",
        "description": "读单浮点数",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表\n成功返回:浮点数从json返回获取",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.读单浮点 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.读单浮点 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.读单浮点 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_ReadFloat"
      },
      {
        "id": "function_10",
        "name": "HDDMA.读双浮点",
        "type": "函数",
        "description": "读双浮点数",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表\n成功返回:浮点数从json返回获取",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.读双浮点 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.读双浮点 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.读双浮点 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_ReadDouble"
      },
      {
        "id": "function_11",
        "name": "HDDMA.读字节集",
        "type": "函数",
        "description": "读字节集",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.读字节集 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.读字节集 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.读字节集 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_ReadBytes"
      },
      {
        "id": "function_12",
        "name": "HDDMA.写地址",
        "type": "函数",
        "description": "写地址,仅支持1248地址大小",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.写地址 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.写地址 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.写地址 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_Write"
      },
      {
        "id": "function_13",
        "name": "HDDMA.写单浮点",
        "type": "函数",
        "description": "写单浮点数",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.写单浮点 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.写单浮点 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.写单浮点 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_WriteFloat"
      },
      {
        "id": "function_14",
        "name": "HDDMA.写双浮点",
        "type": "函数",
        "description": "写双浮点数",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.写双浮点 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.写双浮点 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.写双浮点 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_WriteDouble"
      },
      {
        "id": "function_15",
        "name": "HDDMA.写字节集",
        "type": "函数",
        "description": "写字节集",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.写字节集 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.写字节集 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.写字节集 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_WriteBytes"
      },
      {
        "id": "function_16",
        "name": "HDDMA.获取函数",
        "type": "函数",
        "description": "获取函数地址",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.获取函数 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.获取函数 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.获取函数 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_GetProcAddr"
      },
      {
        "id": "function_17",
        "name": "HDDMA.获取主模块",
        "type": "函数",
        "description": "获取主模块地址",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.获取主模块 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.获取主模块 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.获取主模块 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_GetBaseModule"
      },
      {
        "id": "function_18",
        "name": "HDDMA.获取模块",
        "type": "函数",
        "description": "获取模块地址",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.获取模块 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.获取模块 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.获取模块 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_GetModule"
      },
      {
        "id": "function_19",
        "name": "HDDMA.获取执行环境X64",
        "type": "函数",
        "description": "初始化获取一个某个进程(x64)的执行环境句柄",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表\n成功返回:执行环境句柄,是一个8字节",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init",
          "支持内置保存执行环境最多可以保存20个进程执行环境,保存策略为->同线程-同虚拟机-指定虚拟机中的进程PID-执行环境-绑定",
          "执行环境句柄解析:",
          "1.可以理解成一个空间可以与物理机进行交互,实现参数传递和调用CALL",
          "2.每次调用都会获取一个全新的执行环境句柄(实现物理机中控多线程调用)",
          "3.物理机中控在一个执行环境句柄只能同时一个线程执行,如果要多线程执行请获取多个执行环境句柄",
          "4.此接口不适合多线程获取,请在初始化最开始把所需要的执行环境句柄的数量初始化好,方便物理机中控多线程中单独分别使用"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.获取执行环境X64 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.获取执行环境X64 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.获取执行环境X64 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_ShellCodeInitX64"
      },
      {
        "id": "function_20",
        "name": "HDDMA.CALLX64",
        "type": "函数",
        "description": "通过指定一个初进程(x64)的执行环境句柄来执行CALL",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init",
          "执行环境句柄解析:",
          "1.可以理解成一个空间可以与物理机进行交互,实现参数传递和调用CALL",
          "2.如果需要参数传递,请自行往excuteEnvAddr+0x8写参数(参数最大缓冲区为0x200字节),同时自己的汇编机器码要引入自己参数的地址"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.CALLX64 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.CALLX64 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.CALLX64 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_RunShellCodeX64"
      },
      {
        "id": "function_21",
        "name": "HCVMDMA_ShellCodeInitX86",
        "type": "函数",
        "description": "初始化获取一个某个进程(x86)的执行环境句柄",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表\n成功返回:执行环境句柄,是一个8字节",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init",
          "支持内置保存执行环境最多可以保存20个进程执行环境,保存策略为->同线程-同虚拟机-指定虚拟机中的进程PID-执行环境-绑定",
          "执行环境句柄解析:",
          "1.可以理解成一个空间可以与物理机进行交互,实现参数传递和调用CALL",
          "2.每次调用都会获取一个全新的执行环境句柄(实现物理机中控多线程调用)",
          "3.物理机中控在一个执行环境句柄只能同时一个线程执行,如果要多线程执行请获取多个执行环境句柄",
          "4.此接口不适合多线程获取,请在初始化最开始把所需要的执行环境句柄的数量初始化好,方便物理机中控多线程中单独分别使用"
        ],
        "codeExamples": [
          {
            "title": "HCVMDMA_ShellCodeInitX86 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCVMDMA_ShellCodeInitX86 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCVMDMA_ShellCodeInitX86 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_22",
        "name": "HCVMDMA_RunShellCodeX86",
        "type": "函数",
        "description": "通过指定一个初进程(x86)的执行环境句柄来执行CALL",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init",
          "执行环境句柄解析:",
          "1.可以理解成一个空间可以与物理机进行交互,实现参数传递和调用CALL",
          "2.如果需要参数传递,请自行往excuteEnvAddr+0x8写参数(参数最大缓冲区为0x200字节),同时自己的汇编机器码要引入自己参数的地址"
        ],
        "codeExamples": [
          {
            "title": "HCVMDMA_RunShellCodeX86 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCVMDMA_RunShellCodeX86 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCVMDMA_RunShellCodeX86 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_23",
        "name": "HDDMA.搜索特征码x86",
        "type": "函数",
        "description": "特征码搜索(X86)(指定模块名)",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.搜索特征码x86 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.搜索特征码x86 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.搜索特征码x86 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_FindCodeX86"
      },
      {
        "id": "function_24",
        "name": "HDDMA.搜索特征码x86Ex",
        "type": "函数",
        "description": "特征码搜索(X86)(指定开始地址和搜索大小)",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.搜索特征码x86Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.搜索特征码x86Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.搜索特征码x86Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_FindCodeX86Ex"
      },
      {
        "id": "function_25",
        "name": "HDDMA.搜索特征码x64",
        "type": "函数",
        "description": "特征码搜索(X64)(指定模块名)",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.搜索特征码x64 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.搜索特征码x64 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.搜索特征码x64 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_FindCodeX64"
      },
      {
        "id": "function_26",
        "name": "HDDMA.搜索特征码x64Ex",
        "type": "函数",
        "description": "特征码搜索(X64)(指定开始地址和搜索大小)",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.搜索特征码x64Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.搜索特征码x64Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.搜索特征码x64Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_FindCodeX64Ex"
      },
      {
        "id": "function_27",
        "name": "HDDMA.断开虚拟机",
        "type": "函数",
        "description": "卸载并关闭连接虚拟机",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "与HCVMDMA_Init是一对接口",
          "内部会自动调用HCEnv_UnLoadEx接口,使窗口序号和虚拟机进程断开绑定然后释放虚拟机相关资源",
          "一旦调用,则虚拟机需要被关闭后开启而不是重启PID不能一样"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.断开虚拟机 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.断开虚拟机 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.断开虚拟机 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_Close"
      },
      {
        "id": "function_28",
        "name": "HDDMA.获取截图环境",
        "type": "函数",
        "description": "初始化截图环境",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表\n成功:截图句柄,一个虚拟机只能一个,不要多获取,自行保存维护,方便后续调用其他接口传参",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init",
          "小技巧:",
          "1.初始化接口有根据不同虚拟机,失败概率不同,为了提高初始化成功率,可以尝试自启动任务管理器,让系统激活起来,初始化完成就可以把任务管理器关掉了",
          "2.步骤:打开虚拟机-关联虚拟机-检查是否有管理器PID-开始初始化键鼠/截图环境-如果失败3次直接重启虚拟机",
          "3.如图操作自启任务管理器就行",
          "4.支持内置保存截图环境一个虚拟机固定一个,自动判断是否之前初始化过",
          "如果有的虚拟机初始化句柄超时建议:"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.获取截图环境 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.获取截图环境 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.获取截图环境 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_InitCapture"
      },
      {
        "id": "function_29",
        "name": "HDDMA.截图一次",
        "type": "函数",
        "description": "截图一次(获取一次虚拟机全屏数据到物理机)",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.截图一次 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.截图一次 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.截图一次 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_Capture"
      },
      {
        "id": "function_30",
        "name": "HDDMA.开启截图",
        "type": "函数",
        "description": "开启截图(内部会开启一条线程循环调用HCVMDMA_Capture)",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.开启截图 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.开启截图 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.开启截图 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_OpenCapture"
      },
      {
        "id": "function_31",
        "name": "HDDMA.关闭截图",
        "type": "函数",
        "description": "关闭截图(内部会关闭之前开启的线程)和HCVMDMA_OpenCapture是一对接口",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.关闭截图 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.关闭截图 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.关闭截图 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_CloseCapture"
      },
      {
        "id": "function_32",
        "name": "HDDMA.获取键鼠环境",
        "type": "函数",
        "description": "初始化键鼠环境",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表\n成功:返回键鼠句柄一个虚拟机只能一个,不要多获取,自行保存维护,方便后续调用其他接口传参",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init",
          "小技巧:",
          "1.初始化接口有根据不同虚拟机,失败概率不同,为了提高初始化成功率,可以尝试自启动任务管理器,让系统激活起来,初始化完成就可以把任务管理器关掉了",
          "2.步骤:打开虚拟机-关联虚拟机-检查是否有管理器PID-开始初始化键鼠/截图环境-如果失败3次直接重启虚拟机",
          "3.如图操作自启任务管理器就行",
          "4.支持内置保存键鼠环境一个虚拟机固定一个,自动判断是否之前初始化过",
          "如果有的虚拟机初始化句柄超时建议:"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.获取键鼠环境 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.获取键鼠环境 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.获取键鼠环境 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_InitMouseKey"
      },
      {
        "id": "function_33",
        "name": "HDDMA.鼠标移动",
        "type": "函数",
        "description": "鼠标移动(不包含轨迹)",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.鼠标移动 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.鼠标移动 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.鼠标移动 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_MoveTo"
      },
      {
        "id": "function_34",
        "name": "HDDMA.左键按下",
        "type": "函数",
        "description": "鼠标左键按下",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.左键按下 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.左键按下 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.左键按下 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_LeftDown"
      },
      {
        "id": "function_35",
        "name": "HDDMA.左键弹起",
        "type": "函数",
        "description": "鼠标左键弹起",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.左键弹起 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.左键弹起 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.左键弹起 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_LeftUp"
      },
      {
        "id": "function_36",
        "name": "HDDMA.左键点击",
        "type": "函数",
        "description": "鼠标左键点击",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.左键点击 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.左键点击 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.左键点击 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_LeftClick"
      },
      {
        "id": "function_37",
        "name": "HDDMA.左键双击",
        "type": "函数",
        "description": "鼠标左键双击",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.左键双击 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.左键双击 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.左键双击 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_LeftDoubleClick"
      },
      {
        "id": "function_38",
        "name": "HDDMA.中键按下",
        "type": "函数",
        "description": "鼠标中键按下",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.中键按下 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.中键按下 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.中键按下 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_MiddleDown"
      },
      {
        "id": "function_39",
        "name": "HDDMA.中键弹起",
        "type": "函数",
        "description": "鼠标中键弹起",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.中键弹起 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.中键弹起 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.中键弹起 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_MiddleUp"
      },
      {
        "id": "function_40",
        "name": "HDDMA.中键点击",
        "type": "函数",
        "description": "鼠标中键点击",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.中键点击 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.中键点击 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.中键点击 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_MiddleClick"
      },
      {
        "id": "function_41",
        "name": "HDDMA.中键双击",
        "type": "函数",
        "description": "鼠标中键双击",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.中键双击 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.中键双击 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.中键双击 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_MiddleDoubleClick"
      },
      {
        "id": "function_42",
        "name": "HDDMA.右键按下",
        "type": "函数",
        "description": "鼠标右键按下",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.右键按下 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.右键按下 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.右键按下 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_RightDown"
      },
      {
        "id": "function_43",
        "name": "HDDMA.右键弹起",
        "type": "函数",
        "description": "鼠标右键弹起",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.右键弹起 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.右键弹起 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.右键弹起 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_RightUp"
      },
      {
        "id": "function_44",
        "name": "HDDMA.右键点击",
        "type": "函数",
        "description": "鼠标右键点击",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.右键点击 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.右键点击 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.右键点击 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_RightClick"
      },
      {
        "id": "function_45",
        "name": "HDDMA.右键双击",
        "type": "函数",
        "description": "鼠标右键双击",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.右键双击 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.右键双击 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.右键双击 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_RightDoubleClick"
      },
      {
        "id": "function_46",
        "name": "HDDMA.滚轮滚上",
        "type": "函数",
        "description": "鼠标滚轮滚上",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.滚轮滚上 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.滚轮滚上 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.滚轮滚上 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_WheelUp"
      },
      {
        "id": "function_47",
        "name": "HDDMA.滚轮滚下",
        "type": "函数",
        "description": "鼠标滚轮滚下",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.滚轮滚下 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.滚轮滚下 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.滚轮滚下 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_WheelDown"
      },
      {
        "id": "function_48",
        "name": "HDDMA.键盘按下",
        "type": "函数",
        "description": "键盘按下",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.键盘按下 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.键盘按下 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.键盘按下 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_KeyDown"
      },
      {
        "id": "function_49",
        "name": "HDDMA.键盘按上",
        "type": "函数",
        "description": "键盘弹起",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.键盘按上 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.键盘按上 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.键盘按上 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_KeyUp"
      },
      {
        "id": "function_50",
        "name": "HDDMA.键盘敲击",
        "type": "函数",
        "description": "键盘敲击",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.键盘敲击 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.键盘敲击 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.键盘敲击 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_KeyClick"
      },
      {
        "id": "function_51",
        "name": "HDDMA.发送文本Unicode",
        "type": "函数",
        "description": "发送unicode字符串",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.发送文本Unicode - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.发送文本Unicode - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.发送文本Unicode - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_SendUnicode"
      },
      {
        "id": "function_52",
        "name": "HDDMA.发送文本Ascii",
        "type": "函数",
        "description": "发送ascii字符串",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HDDMA.发送文本Ascii - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.发送文本Ascii - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HDDMA.发送文本Ascii - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCVMDMA_SendAscii"
      },
      {
        "id": "function_53",
        "name": "HCVMDMA_GetPidList",
        "type": "函数",
        "description": "获取PID列表",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表\n返回值:PID数量小于等于0为错误大于0为数量返回JSON:具体进程PID从最近json获取字符串pid1,name1|pid2,name2|pid3,name3|\\\"|\\\"分隔符每个进程信息",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init",
          "C++解析获取案例:",
          "\\n最大51个数量存储量autojsonStr=HCEnv_GetRetJson(windowsIndex);if(jsonStr==NULL)returnERROR_获取数据失败;\\npid1,name1|pid2,name2|pid3,name3|vector<string>pidNameArray;Tool::HSplitStringA(jsonStr,pidNameArray,\\\"|\\\");if(pidNameArray.size()<=0)returnRET_失败;for(int index=0;index<pidSize;index++){\\npid1,name1，vector<string>proArray;Tool::HSplitStringA(pidNameArray[index]+\\\",\\\",proArray,\\\",\\\");if(proArray.size()<2)continue;if(atoi(proArray[0].c_str())==pid)returnRET_成功;\\n元素1就是PID元素2是进程名}returnRET_失败;\\n没找到"
        ],
        "codeExamples": [
          {
            "title": "HCVMDMA_GetPidList - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCVMDMA_GetPidList - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCVMDMA_GetPidList - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_54",
        "name": "HCVMDMA_IsExistPid",
        "type": "函数",
        "description": "对应虚拟机中的进程PID是否存在",
        "prototypes": [
          {
            "prototype": "",
            "description": ""
          }
        ],
        "params": [],
        "returnValue": "查看返回值表\n返回值:01",
        "notes": [
          "需要先初始化关联虚拟机HCVMDMA_Init"
        ],
        "codeExamples": [
          {
            "title": "HCVMDMA_IsExistPid - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCVMDMA_IsExistPid - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCVMDMA_IsExistPid - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      }
    ]
  },
  {
    "id": "category_42",
    "name": "(B2)剑灵2台服",
    "functions": [
      {
        "id": "function_1",
        "name": "HB2_GetPlayerInfo",
        "type": "函数",
        "description": "调用获取人物信息CALL",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HB2_GetPlayerInfo(__int32 窗口序号,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否需要主线程来调用这个CALL"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "json:",
          "{\\\"error\\\":0,\\\"ret\\\":[{\\\"name\\\":\\\"Jack\\\",\\\"level\\\":26,\\\"curHp\\\":588,\\\"maxHp\\\":999,\\\"curMp\\\":255,\\\"maxMp\\\":666,\\\"gold\\\":99999,\\\"diamond\\\":999999}]}"
        ],
        "codeExamples": [
          {
            "title": "HB2_GetPlayerInfo - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HB2_GetPlayerInfo - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HB2_GetPlayerInfo - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_2",
        "name": "HB2_GetBagInfo",
        "type": "函数",
        "description": "调用获取背包信息CALL",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HB2_GetBagInfo(__int32 窗口序号,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否需要主线程来调用这个CALL"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "json:",
          "{\\\"error\\\":0,\\\"flag\\\":99,\\\"ret\\\":[{\\\"id\\\":1111,\\\"tId\\\":22222,\\\"dId\\\":33333,\\\"num\\\":588},{\\\"id\\\":1111,\\\"tId\\\":22222,\\\"dId\\\":33333,\\\"num\\\":588},{\\\"id\\\":1111,\\\"tId\\\":22222,\\\"dId\\\":33333,\\\"num\\\":588}]}"
        ],
        "codeExamples": [
          {
            "title": "HB2_GetBagInfo - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HB2_GetBagInfo - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HB2_GetBagInfo - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_3",
        "name": "HB2_GetShortCutInfo1",
        "type": "函数",
        "description": "调用获取快捷栏遍历信息CALL（前10个）",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HB2_GetShortCutInfo1(__int32 窗口序号,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否需要主线程来调用这个CALL"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "json:",
          "{\\\"error\\\":0,\\\"ret\\\":[{\\\"index\\\":0,\\\"id\\\":1111,\\\"bAct\\\":0},{\\\"index\\\":1,\\\"id\\\":2222,\\\"bAct\\\":1}]}"
        ],
        "codeExamples": [
          {
            "title": "HB2_GetShortCutInfo1 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HB2_GetShortCutInfo1 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HB2_GetShortCutInfo1 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_4",
        "name": "HB2_GetShortCutInfo2",
        "type": "函数",
        "description": "调用获取快捷栏遍历信息CALL（后10个）",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HB2_GetShortCutInfo2(__int32 窗口序号,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否需要主线程来调用这个CALL"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "json:",
          "{\\\"error\\\":0,\\\"ret\\\":[{\\\"index\\\":0,\\\"id\\\":1111,\\\"bAct\\\":0},{\\\"index\\\":1,\\\"id\\\":2222,\\\"bAct\\\":1}]}"
        ],
        "codeExamples": [
          {
            "title": "HB2_GetShortCutInfo2 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HB2_GetShortCutInfo2 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HB2_GetShortCutInfo2 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_5",
        "name": "HB2_GetPlayerXYZ",
        "type": "函数",
        "description": "调用获取人物坐标CALL",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HB2_GetPlayerXYZ(__int32 窗口序号,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否需要主线程来调用这个CALL"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "json:",
          "{\\\"error\\\":0,\\\"ret\\\":[{\\\"x\\\":125,\\\"y\\\":125,\\\"z\\\":125}]}"
        ],
        "codeExamples": [
          {
            "title": "HB2_GetPlayerXYZ - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HB2_GetPlayerXYZ - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HB2_GetPlayerXYZ - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_6",
        "name": "HB2_GetPlayerCurMapId",
        "type": "函数",
        "description": "调用获取人物当前地图IDCALL",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HB2_GetPlayerCurMapId(__int32 窗口序号,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否需要主线程来调用这个CALL"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "json:",
          "{\\\"error\\\":0,\\\"ret\\\":[{\\\"mapId\\\":1993}]}"
        ],
        "codeExamples": [
          {
            "title": "HB2_GetPlayerCurMapId - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HB2_GetPlayerCurMapId - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HB2_GetPlayerCurMapId - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_7",
        "name": "HB2_GetCurChapterTaskId",
        "type": "函数",
        "description": "调用遍历已结任务章节ID信息(主线+支线)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HB2_GetCurChapterTaskId(__int32 窗口序号,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否需要主线程来调用这个CALL"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "json:",
          "{\\\"error\\\":0,\\\"ret\\\":[{\\\"CTaskId\\\":1993,\\\"index\\\":1}]}"
        ],
        "codeExamples": [
          {
            "title": "HB2_GetCurChapterTaskId - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HB2_GetCurChapterTaskId - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HB2_GetCurChapterTaskId - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_8",
        "name": "HB2_GetAChapterTask",
        "type": "函数",
        "description": "调用遍历已结任务章节ID信息(主线+支线)",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HB2_GetAChapterTask(__int32 窗口序号,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否需要主线程来调用这个CALL"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "json:",
          "{\\\"error\\\":0,\\\"ret\\\":[{\\\"CTaskId\\\":1993,\\\"index\\\":1,\\\"curNum\\\":2},{\\\"CTaskId\\\":1998,\\\"index\\\":2,\\\"curNum\\\":2}]}"
        ],
        "codeExamples": [
          {
            "title": "HB2_GetAChapterTask - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HB2_GetAChapterTask - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HB2_GetAChapterTask - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_9",
        "name": "HB2_PlayerIsMove",
        "type": "函数",
        "description": "调用人物是否移动CALL",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HB2_PlayerIsMove(__int32 窗口序号,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否需要主线程来调用这个CALL"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HB2_PlayerIsMove - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HB2_PlayerIsMove - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HB2_PlayerIsMove - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_10",
        "name": "HB2_IsAutoUseMed",
        "type": "函数",
        "description": "调用人物是否自动使用药品状态",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HB2_IsAutoUseMed(__int32 窗口序号,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否需要主线程来调用这个CALL"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HB2_IsAutoUseMed - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HB2_IsAutoUseMed - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HB2_IsAutoUseMed - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_11",
        "name": "HB2_Move",
        "type": "函数",
        "description": "调用移动CALL",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HB2_Move(__int32 窗口序号,__int32 地图ID,__int32 x,__int32 y,__int32 z,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "地图ID",
            "type": "__int32",
            "desc": "地图ID"
          },
          {
            "name": "x",
            "type": "__int32",
            "desc": "x"
          },
          {
            "name": "y",
            "type": "__int32",
            "desc": "y"
          },
          {
            "name": "z",
            "type": "__int32",
            "desc": "z"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否需要主线程来调用这个CALL"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HB2_Move - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HB2_Move - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HB2_Move - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_12",
        "name": "HB2_GetHuaShen",
        "type": "函数",
        "description": "调用化身遍历CALL",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HB2_GetHuaShen(__int32 窗口序号,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否需要主线程来调用这个CALL"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "json:",
          "{\\\"error\\\":0,\\\"ret\\\":[{\\\"id\\\":0,\\\"xLevel\\\":1111,\\\"type\\\":0},{\\\"id\\\":0,\\\"xLevel\\\":1111,\\\"type\\\":0}]}",
          "id:化身IDxLevel:化身星级type:化身品质0123依次递增+1白绿蓝..."
        ],
        "codeExamples": [
          {
            "title": "HB2_GetHuaShen - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HB2_GetHuaShen - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HB2_GetHuaShen - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_13",
        "name": "HB2_GetChongWu",
        "type": "函数",
        "description": "调用宠物遍历CALL",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HB2_GetChongWu(__int32 窗口序号,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否需要主线程来调用这个CALL"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "json:",
          "{\\\"error\\\":0,\\\"ret\\\":[{\\\"id\\\":0,\\\"xLevel\\\":1111,\\\"type\\\":0},{\\\"id\\\":0,\\\"xLevel\\\":1111,\\\"type\\\":0}]}",
          "id:宠物IDxLevel:宠物星级type:宠物品质0123依次递增+1白绿蓝..."
        ],
        "codeExamples": [
          {
            "title": "HB2_GetChongWu - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HB2_GetChongWu - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HB2_GetChongWu - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_14",
        "name": "HB2_UseGoods",
        "type": "函数",
        "description": "调用使用物品CALL",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HB2_UseGoods(__int32 窗口序号,__int64 物品ID,__int64 物品数量,__int64 物品临时ID,__int64 物品描述ID,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "物品ID",
            "type": "__int64",
            "desc": "物品ID"
          },
          {
            "name": "物品数量",
            "type": "__int64",
            "desc": "物品数量"
          },
          {
            "name": "物品临时ID",
            "type": "__int64",
            "desc": "物品临时ID"
          },
          {
            "name": "物品描述ID",
            "type": "__int64",
            "desc": "物品描述ID"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "是否需要主线程来调用这个CALL"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HB2_UseGoods - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HB2_UseGoods - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HB2_UseGoods - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      }
    ]
  },
  {
    "id": "category_43",
    "name": "谷歌内置浏览器模块[GB]",
    "functions": [
      {
        "id": "function_1",
        "name": "HD内置浏览器.附加谷歌1",
        "type": "函数",
        "description": "附加内置浏览器，附加监听模式1",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCGB_Attach1(__int32 窗口序号);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "必须游戏进程自带内置谷歌浏览器,才会附加模块成功",
          "由于每个游戏不同,需要定制浏览器接口",
          "当前默认的内置谷歌浏览器接口仅适合夜鸦"
        ],
        "codeExamples": [
          {
            "title": "HD内置浏览器.附加谷歌1 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD内置浏览器.附加谷歌1 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD内置浏览器.附加谷歌1 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCGB_Attach1"
      },
      {
        "id": "function_2",
        "name": "HD内置浏览器.附加谷歌2",
        "type": "函数",
        "description": "附加内置浏览器，附加监听模式2",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCGB_Attach2(__int32 窗口序号);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "必须游戏进程自带内置谷歌浏览器,才会附加模块成功",
          "由于每个游戏不同,需要定制浏览器接口",
          "当前默认的内置谷歌浏览器接口仅适合夜鸦"
        ],
        "codeExamples": [
          {
            "title": "HD内置浏览器.附加谷歌2 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD内置浏览器.附加谷歌2 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD内置浏览器.附加谷歌2 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCGB_Attach2"
      },
      {
        "id": "function_3",
        "name": "HD内置浏览器.脱离谷歌",
        "type": "函数",
        "description": "脱离之前的内置浏览器",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCGB_Detach(__int32 窗口序号);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "必须游戏进程自带内置谷歌浏览器,才会附加模块成功"
        ],
        "codeExamples": [
          {
            "title": "HD内置浏览器.脱离谷歌 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD内置浏览器.脱离谷歌 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD内置浏览器.脱离谷歌 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCGB_Detach"
      },
      {
        "id": "function_4",
        "name": "HD内置浏览器.注入谷歌JS代码",
        "type": "函数",
        "description": "给内置浏览器注入JS代码",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCGB_InjectJSCode(__int32 窗口序号,char* codeBuffer,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "codeBuffer",
            "type": "char*",
            "desc": "JS代码缓冲区ASCII编码"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "一般默认就行FALSE(0)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "必须游戏进程自带内置谷歌浏览器,才会附加模块成功"
        ],
        "codeExamples": [
          {
            "title": "HD内置浏览器.注入谷歌JS代码 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD内置浏览器.注入谷歌JS代码 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD内置浏览器.注入谷歌JS代码 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCGB_InjectJSCode"
      },
      {
        "id": "function_5",
        "name": "HD内置浏览器.注入谷歌JS文件",
        "type": "函数",
        "description": "给内置浏览器注入指定文件中的JS代码",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCGB_ExcuteJSFile(__int32 窗口序号,char* fileName,BOOL 是否主线程调用=FALSE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "窗口序号",
            "type": "__int32",
            "desc": "窗口序号(从1开始)"
          },
          {
            "name": "fileName",
            "type": "char*",
            "desc": "JS文件代码ASCII编码文件"
          },
          {
            "name": "是否主线程调用",
            "type": "bool",
            "desc": "一般默认就行FALSE(0)"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "必须游戏进程自带内置谷歌浏览器,才会附加模块成功"
        ],
        "codeExamples": [
          {
            "title": "HD内置浏览器.注入谷歌JS文件 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD内置浏览器.注入谷歌JS文件 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD内置浏览器.注入谷歌JS文件 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCGB_ExcuteJSFile"
      }
    ]
  },
  {
    "id": "category_44",
    "name": "调试绘制模块(DS)",
    "functions": [
      {
        "id": "function_1",
        "name": "HD调试.设置颜色",
        "type": "函数",
        "description": "(用于调试)设置全局可视化标注颜色值",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSD_SetColor(__int32 lineColor=0x0000FF00,int textColor=0x00FFFF00,int backColor=0x00000000);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "lineColor",
            "type": "__int32",
            "desc": "线色"
          },
          {
            "name": "textColor",
            "type": "int",
            "desc": "文本色"
          },
          {
            "name": "backColor",
            "type": "int",
            "desc": "背景色"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "颜色值是4字节分别对应XRGB如:0x00FF0000红色如:0x0000FF00绿色如:0x000000FF蓝色"
        ],
        "codeExamples": [
          {
            "title": "HD调试.设置颜色 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD调试.设置颜色 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD调试.设置颜色 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSD_SetColor"
      },
      {
        "id": "function_2",
        "name": "HD调试.设置调试窗口跟随",
        "type": "函数",
        "description": "(用于调试)设置当前调试窗口跟随的进程信息",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSD_SetFollowClassTitleName(int pid,__int64 hwnd=NULL,char* className=NULL,char* titleName=NULL);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "pid",
            "type": "int",
            "desc": "指定pid内部会配合className或titleName找绑定的窗口句柄"
          },
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "指定了窗口句柄,其他3个参数无效"
          },
          {
            "name": "className",
            "type": "char*",
            "desc": "类名可以为NULL"
          },
          {
            "name": "titleName",
            "type": "char*",
            "desc": "标题名可以为NULL"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [],
        "codeExamples": [
          {
            "title": "HD调试.设置调试窗口跟随 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD调试.设置调试窗口跟随 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD调试.设置调试窗口跟随 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSD_SetFollowClassTitleName"
      },
      {
        "id": "function_3",
        "name": "HD调试.标记窗口",
        "type": "函数",
        "description": "给指定窗口画边框或者填充矩形",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSD_DrawWinodws(__int64 hwnd,__int32 LineRgbColor,__int32 lineSize,__int32 type=0,__int32 fillRgbColor=0);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "hwnd",
            "type": "__int64",
            "desc": "句柄LineRgbColor"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD调试.标记窗口 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD调试.标记窗口 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD调试.标记窗口 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSD_DrawWinodws"
      },
      {
        "id": "function_4",
        "name": "HD调试.捕捉异常调用堆栈",
        "type": "函数",
        "description": "开启/关闭捕捉异常",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCHD_CatchException(BOOL bOpen=TRUE);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "bOpen",
            "type": "bool",
            "desc": "是否打开"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "无"
        ],
        "codeExamples": [
          {
            "title": "HD调试.捕捉异常调用堆栈 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD调试.捕捉异常调用堆栈 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD调试.捕捉异常调用堆栈 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCHD_CatchException"
      },
      {
        "id": "function_5",
        "name": "HD调试.附加控制台",
        "type": "函数",
        "description": "附加控制台",
        "prototypes": [
          {
            "prototype": "__int64 __stdcall HCSD_SetAttachConsole(BOOL bOpen);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "bOpen",
            "type": "bool",
            "desc": "是否打开"
          }
        ],
        "returnValue": "查看返回值表\n返回当前控制台是否已经打开",
        "notes": [
          "print fcout输入输出到控制台上显示注意:自行定时清空屏幕防止满屏卡主进程运行"
        ],
        "codeExamples": [
          {
            "title": "HD调试.附加控制台 - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD调试.附加控制台 - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD调试.附加控制台 - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCSD_SetAttachConsole"
      }
    ]
  },
  {
    "id": "category_45",
    "name": "全局资源设置模块(RES)",
    "functions": [
      {
        "id": "function_1",
        "name": "HCRES_SetResPath",
        "type": "函数",
        "description": "设置资源路径",
        "prototypes": [
          {
            "prototype": "void__stdcall HCRES_SetResPathA(char* path); void__stdcall HCRES_SetResPathW(wchar_t* path);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "path",
            "type": "char*",
            "desc": "路径"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "图片字库文件都在这个里面找"
        ],
        "codeExamples": [
          {
            "title": "HCRES_SetResPath - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCRES_SetResPath - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCRES_SetResPath - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      },
      {
        "id": "function_2",
        "name": "HD资源.设置路径Ex",
        "type": "函数",
        "description": "设置资源路径",
        "prototypes": [
          {
            "prototype": "void __stdcall  HCRES_SetResPathEx(char *path, __int32 windIndex = -1); ",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "windIndex",
            "type": "__int32",
            "desc": "窗口序号 -1表示全局资源(同 HCRES_SetResPathA/W 一个效果) 大于等于0表示设置的是窗口全局资源路径"
          },
          {
            "name": "path",
            "type": "char*",
            "desc": "路径"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "图片字库文件都在这个里面找"
        ],
        "codeExamples": [
          {
            "title": "HD资源.设置路径Ex - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD资源.设置路径Ex - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HD资源.设置路径Ex - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ],
        "cppOriginalName": "HCRES_SetResPathEx"
      },
      {
        "id": "function_3",
        "name": "HCRES_SetLanguageResPath",
        "type": "函数",
        "description": "设置语言或者字体文件资源路径",
        "prototypes": [
          {
            "prototype": "void__stdcall HCRES_SetLanguageResPathA(char* path);void__stdcall HCRES_SetLanguageResPathW(wchar_t* path);",
            "description": ""
          }
        ],
        "params": [
          {
            "name": "path",
            "type": "char*",
            "desc": "路径"
          }
        ],
        "returnValue": "查看返回值表",
        "notes": [
          "语言文件都在这个里面找"
        ],
        "codeExamples": [
          {
            "title": "HCRES_SetLanguageResPath - 基础示例",
            "code": "// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCRES_SetLanguageResPath - 进阶用法",
            "code": "// huoshanpc 示例2\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          },
          {
            "title": "HCRES_SetLanguageResPath - 高级应用",
            "code": "// huoshanpc 示例3 高级用法\n// 火山PC示例代码\n// 这里可以放置与说明内容相关的代码示例\n代码内容;"
          }
        ]
      }
    ]
  }
]